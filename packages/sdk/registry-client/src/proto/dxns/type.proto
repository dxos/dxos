//
// Copyright 2021 DXOS.org
//

syntax = "proto3";

package dxos.type;

import "registry.proto";

//
// Records
//

// Registered as `type.app`.
message App {
  // IPFS CID of the app bundle.
  bytes hash = 2;
  string repository = 3;
  string repository_version = 4;
  string license = 5;
  repeated string keywords = 6;
  string display_name = 7; 

  // For frames, types of items the frame supports.
  // Content-Type is represented as ECHO item type DXN.
  repeated string content_type = 8;

  Record.Extension extension = 100;
}

// Registered as `type.bot`.
message Bot {
  // IPFS CID of the bot bundle.
  bytes hash = 2;
  string repository = 3;
  string repository_version = 4;
  string license = 5;
  repeated string keywords = 6;

  Record.Extension extension = 100;
}

// Registered as `type.file`.
message File {
  // MIME type of the file content: https://developer.mozilla.org/en-US/docs/Glossary/MIME_type.
  string content_type = 1;
  string file_name = 2;

  // IPFS CID of the file.
  bytes hash = 3;

  Record.Extension extension = 100;
}

// Registered as `type.kube`.
message KUBE {
  string url = 1;

  Record.Extension extension = 100;
}

// Registered as `type.service`.
message Service {
  // TODO(dmaretskyi): How are service type's defined.
  string type = 1;

  // KUBE record's CID that hosts this service.
  bytes kube = 2; 

  // Extension field's payload depends on service type and has extra data specific to that service.
  // Within this schema extension might be `type.service.ipfs` or `type.service.bot-factory`.
  Record.Extension extension = 100;
}

// Registered as `type.service.ipfs`.
message IPFS {
  string protocol = 1;
  repeated string addresses = 2;

  Record.Extension extension = 100;
}

// Registered as `type.service.bot-factory`.
message BotFactory {
  string topic = 1;

  Record.Extension extension = 100;
}

// Registered as `type.service.signal`.
message Signal {
  string bootstrap = 1;
  string url = 2;

  Record.Extension extension = 100;
}

// Registered as `type.service.app-server`.
message AppServer {
  string url = 1;

  Record.Extension extension = 100;
}
