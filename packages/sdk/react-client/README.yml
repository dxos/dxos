usage: |
  The snippet below illustrates a self-contained DXOS application that uses providers to create the client and instantiate a user profile.

  ```javascript

  import { useClient, ClientProvider, ProfileInitializer } from '@dxos/react-client';
  import React from 'react';
  import { createRoot } from 'react-dom/client';

  const App = () => {
    const client = useClient();

    return (
      <pre>{JSON.stringify(client.info())}</pre>
    );
  };

  const Root = () => (
    <ClientProvider>
      <ProfileInitializer>
        <App />
      </ProfileInitializer>
    </ClientProvider>
  );

  createRoot(document.getElementById('root')!)
    .render(<Root/>);
  
  ```
storybooks:
  - "The [HALO Invitation Story](./stories/halo-invitations.stories.tsx) demonstrates multiple clients (devices) joining the same HALO. [Demo video](https://user-images.githubusercontent.com/3523355/137532718-a21f1f27-9854-4c0b-831a-e9ff92feac49.mov)."
  - "The [Space Invitation Story](./stories/space-invitations.stories.tsx) demonstrates multiple clients creating and sharing spaces. [Demo video](https://user-images.githubusercontent.com/3523355/137532717-e77395dc-96f9-4e4b-8f67-e6bd026a3abe.mov)."