// Code generated by protoc-gen-go-dxrpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-dxrpc v0.0.1
// - protoc              v3.20.3
// source: dxos/service/agentmanager.proto

package agentmanager

import (
	context "context"
	errors "errors"
	dxrpc "github.com/dxos/dxos/dxrpc"
	proto "google.golang.org/protobuf/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the dxrpc package it is being compiled against.
const _ = dxrpc.SupportPackageIsVersion1

// AgentManagerClient is the client API for AgentManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentManagerClient interface {
	// Initialize the authentication sequence. Send an optional authentication token to permit the server to authorize the request.
	// Receive a nonce (challenge) necessary to call Authenticate to prevent replay attacks.
	InitAuthSequence(ctx context.Context, in *InitAuthSequenceRequest, opts ...dxrpc.CallOption) (*InitAuthSequenceResponse, error)
	Authenticate(ctx context.Context, in *Authentication, opts ...dxrpc.CallOption) (*AuthenticateResponse, error)
}

type agentManagerClient struct {
	cc dxrpc.ClientConnInterface
}

func NewAgentManagerClient(cc dxrpc.ClientConnInterface) AgentManagerClient {
	return &agentManagerClient{cc}
}

func (c *agentManagerClient) InitAuthSequence(ctx context.Context, in *InitAuthSequenceRequest, opts ...dxrpc.CallOption) (*InitAuthSequenceResponse, error) {
	out := new(InitAuthSequenceResponse)
	err := c.cc.Invoke(ctx, "dxos.service.agentmanager.AgentManager.InitAuthSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagerClient) Authenticate(ctx context.Context, in *Authentication, opts ...dxrpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, "dxos.service.agentmanager.AgentManager.Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentManagerServer is the server API for AgentManager service.
// All implementations must embed UnimplementedAgentManagerServer
// for forward compatibility
type AgentManagerServer interface {
	// Initialize the authentication sequence. Send an optional authentication token to permit the server to authorize the request.
	// Receive a nonce (challenge) necessary to call Authenticate to prevent replay attacks.
	InitAuthSequence(context.Context, *InitAuthSequenceRequest) (*InitAuthSequenceResponse, error)
	Authenticate(context.Context, *Authentication) (*AuthenticateResponse, error)
	mustEmbedUnimplementedAgentManagerServer()
}

// UnimplementedAgentManagerServer must be embedded to have forward compatible implementations.
type UnimplementedAgentManagerServer struct {
}

func (UnimplementedAgentManagerServer) InitAuthSequence(context.Context, *InitAuthSequenceRequest) (*InitAuthSequenceResponse, error) {
	return nil, errors.New("method InitAuthSequence not implemented")
}
func (UnimplementedAgentManagerServer) Authenticate(context.Context, *Authentication) (*AuthenticateResponse, error) {
	return nil, errors.New("method Authenticate not implemented")
}
func (UnimplementedAgentManagerServer) mustEmbedUnimplementedAgentManagerServer() {}

// UnsafeAgentManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentManagerServer will
// result in compilation errors.
type UnsafeAgentManagerServer interface {
	mustEmbedUnimplementedAgentManagerServer()
}

func RegisterAgentManagerServer(s dxrpc.ServiceRegistrar, srv AgentManagerServer) {
	s.RegisterService(&AgentManager_ServiceDesc, srv)
}

func _AgentManager_InitAuthSequence_Handler(srv interface{}, ctx context.Context, dec func(proto.Message) error) (proto.Message, error) {
	in := new(InitAuthSequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(AgentManagerServer).InitAuthSequence(ctx, in)
}

func _AgentManager_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(proto.Message) error) (proto.Message, error) {
	in := new(Authentication)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(AgentManagerServer).Authenticate(ctx, in)
}

// AgentManager_ServiceDesc is the dxrpc.ServiceDesc for AgentManager service.
// It's only intended for direct use with dxrpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentManager_ServiceDesc = dxrpc.ServiceDesc{
	ServiceName: "dxos.service.agentmanager.AgentManager",
	HandlerType: (*AgentManagerServer)(nil),
	Methods: []dxrpc.MethodDesc{
		{
			MethodName: "InitAuthSequence",
			Handler:    _AgentManager_InitAuthSequence_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _AgentManager_Authenticate_Handler,
		},
	},
	Streams:  []dxrpc.StreamDesc{},
	Metadata: "dxos/service/agentmanager.proto",
}
