// Code generated by protoc-gen-go-dxrpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-dxrpc v0.0.1
// - protoc              v3.20.3
// source: dxos/service/tunnel.proto

package tunnel

import (
	context "context"
	errors "errors"
	dxrpc "github.com/dxos/dxos/dxrpc"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the dxrpc package it is being compiled against.
const _ = dxrpc.SupportPackageIsVersion1

// TunnelClient is the client API for Tunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelClient interface {
	Tunnel(ctx context.Context, in *TunnelRequest, opts ...dxrpc.CallOption) (*TunnelResponse, error)
	ListTunnels(ctx context.Context, in *emptypb.Empty, opts ...dxrpc.CallOption) (*ListTunnelsResponse, error)
}

type tunnelClient struct {
	cc dxrpc.ClientConnInterface
}

func NewTunnelClient(cc dxrpc.ClientConnInterface) TunnelClient {
	return &tunnelClient{cc}
}

func (c *tunnelClient) Tunnel(ctx context.Context, in *TunnelRequest, opts ...dxrpc.CallOption) (*TunnelResponse, error) {
	out := new(TunnelResponse)
	err := c.cc.Invoke(ctx, "dxos.service.tunnel.Tunnel.Tunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) ListTunnels(ctx context.Context, in *emptypb.Empty, opts ...dxrpc.CallOption) (*ListTunnelsResponse, error) {
	out := new(ListTunnelsResponse)
	err := c.cc.Invoke(ctx, "dxos.service.tunnel.Tunnel.ListTunnels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunnelServer is the server API for Tunnel service.
// All implementations must embed UnimplementedTunnelServer
// for forward compatibility
type TunnelServer interface {
	Tunnel(context.Context, *TunnelRequest) (*TunnelResponse, error)
	ListTunnels(context.Context, *emptypb.Empty) (*ListTunnelsResponse, error)
	mustEmbedUnimplementedTunnelServer()
}

// UnimplementedTunnelServer must be embedded to have forward compatible implementations.
type UnimplementedTunnelServer struct {
}

func (UnimplementedTunnelServer) Tunnel(context.Context, *TunnelRequest) (*TunnelResponse, error) {
	return nil, errors.New("method Tunnel not implemented")
}
func (UnimplementedTunnelServer) ListTunnels(context.Context, *emptypb.Empty) (*ListTunnelsResponse, error) {
	return nil, errors.New("method ListTunnels not implemented")
}
func (UnimplementedTunnelServer) mustEmbedUnimplementedTunnelServer() {}

// UnsafeTunnelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelServer will
// result in compilation errors.
type UnsafeTunnelServer interface {
	mustEmbedUnimplementedTunnelServer()
}

func RegisterTunnelServer(s dxrpc.ServiceRegistrar, srv TunnelServer) {
	s.RegisterService(&Tunnel_ServiceDesc, srv)
}

func _Tunnel_Tunnel_Handler(srv interface{}, ctx context.Context, dec func(proto.Message) error) (proto.Message, error) {
	in := new(TunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(TunnelServer).Tunnel(ctx, in)
}

func _Tunnel_ListTunnels_Handler(srv interface{}, ctx context.Context, dec func(proto.Message) error) (proto.Message, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(TunnelServer).ListTunnels(ctx, in)
}

// Tunnel_ServiceDesc is the dxrpc.ServiceDesc for Tunnel service.
// It's only intended for direct use with dxrpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tunnel_ServiceDesc = dxrpc.ServiceDesc{
	ServiceName: "dxos.service.tunnel.Tunnel",
	HandlerType: (*TunnelServer)(nil),
	Methods: []dxrpc.MethodDesc{
		{
			MethodName: "Tunnel",
			Handler:    _Tunnel_Tunnel_Handler,
		},
		{
			MethodName: "ListTunnels",
			Handler:    _Tunnel_ListTunnels_Handler,
		},
	},
	Streams:  []dxrpc.StreamDesc{},
	Metadata: "dxos/service/tunnel.proto",
}
