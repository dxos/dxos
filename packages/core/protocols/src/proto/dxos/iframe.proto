//
// Copyright 2020 DXOS.org
//

syntax = "proto3";

import "google/protobuf/empty.proto";

import "dxos/keys.proto";

// TODO(burdon): Rename dxos.xxx.iframe?
package dxos.iframe;

message StartRequest {
  string origin = 1;
  /// Key for the iframe resource lock used to determine when the service is closing.
  optional string lock_key = 2;
  // TODO(nf): extract or remove?
  optional string observabilityGroup = 3;
  optional bool signalTelemetryEnabled = 4;
}

/// Iframe-to-worker RPCs.
service WorkerService {
  rpc Start(StartRequest) returns (google.protobuf.Empty);
  rpc Stop(google.protobuf.Empty) returns (google.protobuf.Empty);
}

enum ShellDisplay {
  NONE = 0;
  FULLSCREEN = 1;
}

message AppContextRequest {
  /// The display mode that shell should use.
  optional ShellDisplay display = 1;

  // TODO(wittjosiah): Remove.
  /// The key of the joined space.
  optional dxos.keys.PublicKey space_key = 2;

  /// The id of the joined space.
  optional string space_id = 5;
  
  /// Target to redirect to after a successful invitation.
  optional string target = 3;

  /// Reload the app.
  /// Shell cannot reload the app from within an iframe.
  /// Used after sign out/identity reset.
  optional bool reload = 4;
}

/// App RPCs for the shell.
service AppService {
  rpc SetContext(AppContextRequest) returns (google.protobuf.Empty);
}

enum ShellLayout {
  DEFAULT = 0;
  INITIALIZE_IDENTITY = 1;
  INITIALIZE_IDENTITY_FROM_INVITATION = 2;
  IDENTITY = 3;
  SHARE_IDENTITY = 4;
  EDIT_PROFILE = 5;
  SPACE = 6;
  JOIN_SPACE = 7;
  STATUS = 8;
}

message LayoutRequest {
  /// Determins which panel of the shell is opened.
  ShellLayout layout = 1;

  /// Invitation code to join a space.
  optional string invitation_code = 2;

  // TODO(wittjosiah): Remove.
  /// Key of the space to share.
  optional dxos.keys.PublicKey space_key = 3;

  /// Id of the space to share.
  optional string space_id = 5;

  /// Target to include in an invitation for redirecting after a successful invitation.
  optional string target = 4;
}

message InvitationUrlRequest {
  /// Base URL for invitations.
  string invitation_url = 1;

  /// Query parameter for device invitations.
  string device_invitation_param = 2;

  /// Query parameter for space invitations.
  string space_invitation_param = 3;
}

/// Shell UI RPCs.
service ShellService {
  rpc SetLayout(LayoutRequest) returns (google.protobuf.Empty);
  rpc SetInvitationUrl(InvitationUrlRequest) returns (google.protobuf.Empty);
}
