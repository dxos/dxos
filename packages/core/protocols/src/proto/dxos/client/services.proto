//
// Copyright 2021 DXOS.org
//

syntax = "proto3";

import "google/protobuf/empty.proto";

import "dxos/config.proto";
import "dxos/halo/credentials.proto";
import "dxos/halo/invitations.proto";
import "dxos/keys.proto";

// TODO(burdon): Restructure all services.
// TODO(burdon): Reorganize packages (e.g., client.services, echo.database).

package dxos.client.services;

//
// Design notes:
// - Basic CRUD methods for records (streaming queries).
// - Custom Request/Response objects for complex operations; otherwise generic structs for simplicity.
// - Normalize records for performance (e.g., Space members separate from Space metadata).
//

enum Status {
  ACTIVE = 0;
  INACTIVE = 1;
}

message UpdateStatusRequest {
  Status status = 1;
}

message StatusResponse {
  Status status = 1;
}

//
// System
//

service SystemService {
  /// Get the static config of the client.
  rpc GetConfig(google.protobuf.Empty) returns (dxos.config.Config);

  /// Update the status of the client. Used to re-activate an inactive client.
  rpc UpdateStatus(UpdateStatusRequest) returns (google.protobuf.Empty);

  /// Stream the status of the client.
  rpc QueryStatus(google.protobuf.Empty) returns (stream StatusResponse);

  /// Reset the client.
  rpc Reset(google.protobuf.Empty) returns (google.protobuf.Empty);
}

//
// Signing
// TODO(burdon): Rename Crypto/KeystoreService?
//

// TODO(burdon): Metadata (e.g., added, expired).
message KeyRecord {
  dxos.keys.PublicKey public_key = 1;
}

message SignRequest {
  dxos.keys.PublicKey public_key = 1;
  bytes payload = 2;
}

message SignResponse {
  bytes signed = 2;
}

service SigningService {
  rpc UpdateKeyRecord(KeyRecord) returns (KeyRecord);
  rpc Sign(SignRequest) returns (SignResponse);
}

//
// Halo
//

message Identity {
  dxos.keys.PublicKey identity_key = 1;
  halo.credentials.ProfileDocument profile = 2;
}

message RecoverProfileRequest {
  bytes recovery_key = 1;
}

service HaloService {
  // TODO(wittjosiah): Profile -> Identity?
  rpc RecoverProfile(RecoverProfileRequest) returns (Identity);
  rpc UpdateProfile(Identity) returns (google.protobuf.Empty);
  rpc QueryProfile(google.protobuf.Empty) returns (stream Identity);
}

//
// Devices
//

// TODO(burdon): Preferences (in database).
message Device {
  dxos.keys.PublicKey device_key = 1;
}

message QueryDevicesResponse {
  repeated Device devices = 1;
}

service DevicesService {
  rpc UpdateDevice(google.protobuf.Empty) returns (Device);
  rpc QueryDevices(google.protobuf.Empty) returns (stream QueryDevicesResponse);
}

//
// Contacts
//

message Contact {
  halo.credentials.ProfileDocument profile = 1;
}

service ContactsService {
  rpc UpdateContact(google.protobuf.Empty) returns (Contact);
  rpc QueryContacts(google.protobuf.Empty) returns (stream Contact);
}

//
// Data Spaces
// TODO(burdon): Move to dxos.echo? Or rename dxos.echo => dxos.database?
//

message Space {
  dxos.keys.PublicKey space_key = 1;
}

message QueryMembersRequest {}
message QueryMembersResponse {
  dxos.halo.credentials.IdentityProfile members = 1;
}

message WriteCredentialsRequest {
  dxos.keys.PublicKey space_key = 1;
  repeated dxos.halo.credentials.Credential credentials = 2;
}

message QueryCredentialsRequest {
  dxos.keys.PublicKey space_key = 1;
}

service SpacesService {
  rpc CreateSpace(google.protobuf.Empty) returns (Space);
  rpc QuerySpaces(google.protobuf.Empty) returns (stream Space);

  // TODO(dmaretskyi): I dont think we need a separate method here. We can include members in the Space object.
  rpc QueryMembers(QueryMembersRequest) returns (stream QueryMembersResponse);
  
  rpc WriteCredentials(WriteCredentialsRequest) returns (google.protobuf.Empty);
  rpc QueryCredentials(QueryCredentialsRequest) returns (stream dxos.halo.credentials.Credential);
}

//
// Invitations (Halo and Data Spaces).
//

/**
 * Represents the invitation state passed between client and service.
 */
message Invitation {
  enum Type {
    /// Requires both to be online with OTP to complete key exchange.
    INTERACTIVE = 0;
    /// Interactive without OTP.
    /// @deprecated Use authMethod.
    INTERACTIVE_TESTING = 1;
    /// Guest's identity key is known; invitation can be accepted by any valid peer.
    OFFLINE = 2;
    /// Multiple-use invitation with OTP.
    MULTIUSE_TESTING = 3;
  }

  enum State {
    INIT = 0;
    CONNECTING = 1;
    CONNECTED = 2;
    AUTHENTICATING = 3;
    SUCCESS = 4;
    CANCELLED = 5;
    TIMEOUT = 6;
    ERROR = 7;
  }

  enum Error {
    OK = 0;
    TIMEOUT = 1;
    INVALID_OTP = 2;
    INVALID_OPT_ATTEMPTS = 3;
    INVALID_CREDENTIALS = 4;
  }

  /// Local identifier.
  optional string invitation_id = 1;

  /// Determined when created.
  optional Type type = 2;

  optional dxos.halo.invitations.AuthMethod auth_method = 10; // TODO: Fix numbering.

  /// Local state.
  optional State state = 3;

  /// Error.
  optional Error error = 4;

  /// Swarm rendezvous (random).
  optional dxos.keys.PublicKey swarm_key = 5;

  /// Guest's identity (only present if OFFLINE).
  optional dxos.keys.PublicKey identity_key = 6;

  /// Space to join.
  optional dxos.keys.PublicKey space_key = 7;

  /// Authentication code created by host.
  optional string authentication_code = 8;

  /// Timeout (ms).
  optional int32 timeout = 9;
}

message AuthenticationRequest {
  string invitation_id = 1;
  string authentication_code = 2;
}

message CancelInvitationRequest {
  string invitation_id = 1;
}

// Common TS interface.
// TODO(burdon): Reconcile with halo/invitations.proto (e.g., common defs like error vs superset of services?)

service HaloInvitationsService {
  rpc CreateInvitation(Invitation) returns (stream Invitation);
  rpc Authenticate(AuthenticationRequest) returns (google.protobuf.Empty);
  rpc AcceptInvitation(Invitation) returns (stream Invitation);
  rpc CancelInvitation(CancelInvitationRequest) returns (google.protobuf.Empty);
}

service SpaceInvitationsService {
  rpc CreateInvitation(Invitation) returns (stream Invitation);
  rpc Authenticate(AuthenticationRequest) returns (google.protobuf.Empty);
  rpc AcceptInvitation(Invitation) returns (stream Invitation);
  rpc CancelInvitation(CancelInvitationRequest) returns (google.protobuf.Empty);
}

//
// MESH
//

enum ConnectionState {
  OFFLINE = 0;
  ONLINE = 1;
}

// TODO(mykola): Broden API.
message NetworkStatus {
  ConnectionState state = 1;
}

message SetNetworkOptionsRequest {
  ConnectionState state = 1;
}

// TODO(burdon): Widen API (too heavy for single feature: e.g., status).
service NetworkService {
  rpc SubscribeToNetworkStatus(google.protobuf.Empty) returns (stream NetworkStatus);
  rpc SetNetworkOptions(SetNetworkOptionsRequest) returns (google.protobuf.Empty);
}
