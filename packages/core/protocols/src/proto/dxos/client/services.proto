//
// Copyright 2021 DXOS.org
//

syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

import "dxos/config.proto";
import "dxos/echo/metadata.proto";
import "dxos/echo/timeframe.proto";
import "dxos/error.proto";
import "dxos/halo/credentials.proto";
import "dxos/keys.proto";
import "dxos/mesh/signal.proto";
import "dxos/mesh/teleport/gossip.proto";
import "dxos/mesh/presence.proto";
import "dxos/value.proto";
import "dxos/devtools/swarm.proto";

// TODO(burdon): Reorganize packages (e.g., client.services, echo.database).

package dxos.client.services;

//
// Design notes:
// - Basic CRUD methods for records (streaming queries).
// - Custom Request/Response objects for complex operations; otherwise generic structs for simplicity.
// - Normalize records for performance (e.g., Space members separate from Space metadata).
//

enum SystemStatus {
  ACTIVE = 0;
  INACTIVE = 1;
}

message UpdateStatusRequest {
  SystemStatus status = 1;
}

message QueryStatusRequest {
  optional int32 interval = 1;
}

message QueryStatusResponse {
  SystemStatus status = 1;
}

message GetDiagnosticsRequest {
  enum KEY_OPTION {
    NONE = 0;
    TRUNCATE = 1;
    HUMANIZE = 2;
  }

  optional KEY_OPTION keys = 1;
}

message GetDiagnosticsResponse {
  google.protobuf.Timestamp timestamp = 1;
  google.protobuf.Struct diagnostics = 2;
}

message Platform {
  enum PLATFORM_TYPE {
    BROWSER = 0;
    SHARED_WORKER = 1;
    NODE = 2;
  }

  PLATFORM_TYPE type = 1;
  /// The User-Agent string from a browser
  optional string user_agent = 2;
  /// e.g process.platform from node, e.g. 'darwin', 'linux', 'win32'
  optional string platform = 3;
  /// the Node.JS arch string, e.g. 'arm64', 'x64'
  optional string arch = 4;
  /// the node.js version string
  optional string runtime = 5;
  // TODO(nf): uint64? :)
  /// the number of seconds the client has been up
  optional uint32 uptime = 6;
  /// e.g. NodeJS.MemoryUsage, subject to change
  optional google.protobuf.Struct memory = 7;
}
//
// System
//

service SystemService {
  /// Get the static config of the client.
  rpc GetConfig(google.protobuf.Empty) returns (dxos.config.Config);

  /// Get the diagnostics snapshot.
  rpc GetDiagnostics(GetDiagnosticsRequest) returns (GetDiagnosticsResponse);

  /// Update the status of the client. Used to re-activate an inactive client.
  rpc UpdateStatus(UpdateStatusRequest) returns (google.protobuf.Empty);

  /// Stream the status of the client.
  rpc QueryStatus(QueryStatusRequest) returns (stream QueryStatusResponse);

  /// Reset the client.
  rpc Reset(google.protobuf.Empty) returns (google.protobuf.Empty);

  /// Get platform Information
  rpc GetPlatform(google.protobuf.Empty) returns (Platform);
}

//
// Halo
//

message Identity {
  dxos.keys.PublicKey identity_key = 1;
  optional dxos.keys.PublicKey space_key = 2;
  optional halo.credentials.ProfileDocument profile = 3;
}

message RecoverIdentityRequest {
  bytes recovery_key = 1;
}

message QueryIdentityResponse {
  optional Identity identity = 1;
}

message SignPresentationRequest {
  dxos.halo.credentials.Presentation presentation = 1;
  optional bytes nonce = 2;
}

message CreateIdentityRequest {
  optional halo.credentials.ProfileDocument profile = 1;

  reserved 2; // Removed use_automerge flag.
  optional halo.credentials.DeviceProfileDocument device_profile = 3;
}

// TODO(wittjosiah): Align pluralization with other services.
service IdentityService {
  rpc CreateIdentity(CreateIdentityRequest) returns (Identity);
  rpc RecoverIdentity(RecoverIdentityRequest) returns (Identity);
  rpc QueryIdentity(google.protobuf.Empty) returns (stream QueryIdentityResponse);
  rpc UpdateProfile(halo.credentials.ProfileDocument) returns (Identity);
  rpc SignPresentation(SignPresentationRequest) returns (dxos.halo.credentials.Presentation);
}

//
// Devices
//

enum DeviceKind {
  CURRENT = 0;
  TRUSTED = 1;
}

// TODO(burdon): Preferences (in database).
message Device {
  // TODO(nf): dedupe?
  enum PresenceState {
    OFFLINE = 0;
    ONLINE = 1;
    REMOVED = 2;
  }
  dxos.keys.PublicKey device_key = 1;
  DeviceKind kind = 2;
  optional halo.credentials.DeviceProfileDocument profile = 3;
  PresenceState presence = 4;
}

message QueryDevicesResponse {
  repeated Device devices = 1;
}

service DevicesService {
  rpc UpdateDevice(halo.credentials.DeviceProfileDocument) returns (Device);
  rpc QueryDevices(google.protobuf.Empty) returns (stream QueryDevicesResponse);
}

//
// Contacts
//

message Contact {
  halo.credentials.ProfileDocument profile = 1;
}

service ContactsService {
  rpc UpdateContact(google.protobuf.Empty) returns (Contact);
  rpc QueryContacts(google.protobuf.Empty) returns (stream Contact);
}

//
// Data Spaces
// TODO(burdon): Move to dxos.echo? Or rename dxos.echo => dxos.database?
//

message SpaceMember {
  enum PresenceState {
    OFFLINE = 0;
    ONLINE = 1;
  }

  Identity identity = 1;
  PresenceState presence = 2;
  repeated dxos.mesh.presence.PeerState peerStates = 3;
  dxos.halo.credentials.SpaceMember.Role role = 4;
}

/// Runtime state of the space object.
enum SpaceState {
  ///
  /// Persistent states.
  ///

  /// Space is inactive. No swarming or replication will be done.
  INACTIVE = 2;

  /// Space is active. Swarming and replication will be done.
  ACTIVE = 6;

  ///
  /// Runtime states:
  ///

  /// Space is closed.
  CLOSED = 1;

  /// Data pipeline is inactive.
  CONTROL_ONLY = 7;

  /// Data pipeline is initializing.
  INITIALIZING = 4;

  /// Data pipeline is ready.
  READY = 3;

  /// Space errored.
  ERROR = 5;

  /// Data migration is required.
  REQUIRES_MIGRATION = 8;
}

// TODO(burdon): Rename SpaceInfo?
message Space {
  message Metrics {
    optional google.protobuf.Timestamp open = 1;
    optional google.protobuf.Timestamp pipeline_init_begin = 2;
    optional google.protobuf.Timestamp control_pipeline_ready = 3;
    optional google.protobuf.Timestamp data_pipeline_open = 4;
    optional google.protobuf.Timestamp data_pipeline_ready = 5;
    optional google.protobuf.Timestamp ready = 6;
  }

  // TODO(dmaretskyi): Consider merging with space metadata records.
  // TODO(dmaretskyi): ...or split into two separate pipeline messages.
  message PipelineState {
    optional dxos.keys.PublicKey control_feed_key = 1;
    optional dxos.keys.PublicKey data_feed_key = 2;

    /// Remote feeds.
    /// TODO(burdon): Normalize _key suffix.
    repeated dxos.keys.PublicKey control_feeds = 18;
    repeated dxos.keys.PublicKey data_feeds = 19;

    /// Last processed epoch. Might now have been applied yet.
    optional dxos.halo.credentials.Credential current_epoch = 20;

    /// Epoch that is currently applied.
    optional dxos.halo.credentials.Credential applied_epoch = 21;

    /// Mutations already processed.
    optional dxos.echo.timeframe.TimeframeVector current_control_timeframe = 10;

    /// Minimum timeframe to consider the state to be up-to-date.
    optional dxos.echo.timeframe.TimeframeVector target_control_timeframe = 11;

    /// All mutations stored in feeds.
    optional dxos.echo.timeframe.TimeframeVector total_control_timeframe = 14;

    /// All mutations known to exist on the network.
    optional dxos.echo.timeframe.TimeframeVector known_control_timeframe = 15;

    /// Start timeframe of the pipeline.
    optional dxos.echo.timeframe.TimeframeVector start_data_timeframe = 100;

    /// Mutations already processed.
    optional dxos.echo.timeframe.TimeframeVector current_data_timeframe = 12;

    /// Minimum timeframe to consider the state to be up-to-date.
    optional dxos.echo.timeframe.TimeframeVector target_data_timeframe = 13;

    /// All mutations stored in feeds.
    optional dxos.echo.timeframe.TimeframeVector total_data_timeframe = 16;

    /// All mutations known to exist on the network.
    optional dxos.echo.timeframe.TimeframeVector known_data_timeframe = 17;
  }

  string id = 5;
  dxos.keys.PublicKey space_key = 1;
  SpaceState state = 2;
  optional PipelineState pipeline = 3;
  optional dxos.error.Error error = 4;

  repeated SpaceMember members = 10;
  optional dxos.keys.PublicKey creator = 11;

  optional dxos.echo.metadata.SpaceCache cache = 20;
  Metrics metrics = 21;
}

// TODO(burdon): Create type for epoch?

message UpdateSpaceRequest {
  dxos.keys.PublicKey space_key = 1;

  /// Allowed values: ACTIVE, INACTIVE.
  optional SpaceState state = 2;
}

message QuerySpacesResponse {
  repeated Space spaces = 1;
}

message PostMessageRequest {
  dxos.keys.PublicKey space_key = 1;
  string channel = 2;
  google.protobuf.Any message = 3;
}

message SubscribeMessagesRequest {
  dxos.keys.PublicKey space_key = 1;
  string channel = 2;
}

message WriteCredentialsRequest {
  dxos.keys.PublicKey space_key = 1;
  repeated dxos.halo.credentials.Credential credentials = 2;
}

message QueryCredentialsRequest {
  dxos.keys.PublicKey space_key = 1;
  optional bool no_tail = 2;
}

message CreateEpochRequest {
  enum Migration {
    NONE = 0;

    /// Init empty automerge document as the space root. Disables legacy ECHO snapshot creation.
    INIT_AUTOMERGE = 1;

    /// Init new automerge root by clonning the current space root. History is pruned.
    PRUNE_AUTOMERGE_ROOT_HISTORY = 2;

    /// Create a new space root and move objects from the current space root to separate automerge documents and.
    FRAGMENT_AUTOMERGE_ROOT = 3;

    /// Replace the current automerge root with a new one specified by the user.
    REPLACE_AUTOMERGE_ROOT = 4;

    /// Upgrade references data strucutre 
    MIGRATE_REFERENCES_TO_DXN = 5;
  }

  dxos.keys.PublicKey space_key = 1;

  optional Migration migration = 2;

  /// For REPLACE_AUTOMERGE_ROOT migration.
  optional string automerge_root_url = 3;
}

message CreateEpochResponse {
  /// Credential of the new epoch.
  optional dxos.halo.credentials.Credential epoch_credential = 1;
}

message UpdateMemberRoleRequest {
  dxos.keys.PublicKey space_key = 1;
  dxos.keys.PublicKey member_key = 2;
  dxos.halo.credentials.SpaceMember.Role new_role = 3;
}

service SpacesService {
  rpc CreateSpace(google.protobuf.Empty) returns (Space);
  rpc UpdateSpace(UpdateSpaceRequest) returns (google.protobuf.Empty);
  rpc QuerySpaces(google.protobuf.Empty) returns (stream QuerySpacesResponse);

  rpc UpdateMemberRole(UpdateMemberRoleRequest) returns (google.protobuf.Empty);

  /// Broadcast an ephemeral message to the space swarm.
  rpc PostMessage(PostMessageRequest) returns (google.protobuf.Empty);
  /// Subscribe to messages from the space swarm.
  rpc SubscribeMessages(SubscribeMessagesRequest) returns (stream dxos.mesh.teleport.gossip.GossipMessage);

  /// Write credentials to the space control feed.
  rpc WriteCredentials(WriteCredentialsRequest) returns (google.protobuf.Empty);
  /// Query credentials from the space control feed.
  rpc QueryCredentials(QueryCredentialsRequest) returns (stream dxos.halo.credentials.Credential);

  rpc CreateEpoch(CreateEpochRequest) returns (CreateEpochResponse);
}

//
// Invitations (Halo and Data Spaces).
//

/**
 * Represents the invitation state passed between client and service.
 */
message Invitation {
  enum Type {
    /// Requires both to be online to complete key exchange.
    INTERACTIVE = 0;
    /// Invitation can be accepted by any valid peer.
    DELEGATED = 1;
    /**
     * Multi-use interactive invitations.
     * @deprecated use multiUse flag with type=interactive instead.
     */
    MULTIUSE = 2;
  }

  enum Kind {
    DEVICE = 0;
    SPACE = 1;
  }

  enum AuthMethod {
    /// No authentication is required. Guest should not call `Authenticate`.
    NONE = 0;

    /// Guest should call `Authenticate` with the shared secret.
    SHARED_SECRET = 1;

    /// Guest should prove they possess a private key corresponding to the known public key recorded in an invitation.
    KNOWN_PUBLIC_KEY = 2;
  }

  enum State {
    INIT = 0;
    CONNECTING = 1;
    CONNECTED = 2;
    READY_FOR_AUTHENTICATION = 3;
    AUTHENTICATING = 4;
    SUCCESS = 5;
    CANCELLED = 6;
    TIMEOUT = 7;
    ERROR = 8;
    EXPIRED = 9;
  }

  /// Local identifier (random).
  string invitation_id = 1;

  /// Determines the behavior of the invitation.
  Type type = 2;

  /// Kind of access the invitation will grant.
  Kind kind = 3;

  /// How the invitation is authenticated.
  AuthMethod auth_method = 4;

  /// Swarm rendezvous (random).
  dxos.keys.PublicKey swarm_key = 5;

  /// Local state.
  State state = 6;

  /// Timeout for guest to complete invitation once connected (ms).
  optional int32 timeout = 7;

  /// Guest's identity.
  optional dxos.keys.PublicKey identity_key = 8;

  /// Space to join (only present if kind is SPACE).
  optional dxos.keys.PublicKey space_key = 9;

  /// Authentication code created by host (only present if auth_method is SHARED_SECRET).
  optional string auth_code = 10;

  /// Path or identifier to navigate to after successful authentication.
  optional string target = 11;

  // TODO(nf): should these exist elsewhere since they only have meaning to the host?
  /// Host should resume invitation on startup until timeout.
  optional bool persistent = 12;

  optional google.protobuf.Timestamp created = 13;

  /// Number of seconds the host will honor the invitation. 0 means the invitation persists forever.
  // TODO(nf): some feedback mechanism or GC for immortal invitations?
  // TODO(nf): should the creator have a way to make an invitation last as long as the client? this was the previous behavior.
  optional int32 lifetime = 14;

  /// Whether an invitation can be used multiple times.
  optional bool multi_use = 15;

  /// Guest's keypair required for AuthMethod.KNOWN_PUBLIC_KEY.
  optional AdmissionKeypair guest_keypair = 16;

  /// Present on Type.DELEGATED invitations.
  optional dxos.keys.PublicKey delegation_credential_id = 17;

  /// Role of the admitted member, defaults to ADMIN.
  optional dxos.halo.credentials.SpaceMember.Role role = 18;
}

message AdmissionKeypair {
  dxos.keys.PublicKey public_key = 1;
  optional dxos.keys.PrivateKey private_key = 2;
}

message AcceptInvitationRequest {
  Invitation invitation = 1;
  optional dxos.halo.credentials.DeviceProfileDocument device_profile = 2;
}

message AuthenticationRequest {
  string invitation_id = 1;
  string auth_code = 2;
}

message CancelInvitationRequest {
  string invitation_id = 1;
}

message InvitationMethod {
  oneof kind {
    Invitation created = 1;
    Invitation accepted = 2;
  }
}

message QueryInvitationsResponse {
  enum Action {
    ADDED = 0;
    REMOVED = 1;
    SAVED = 2;
    LOAD_COMPLETE = 3;
  }

  enum Type {
    CREATED = 0;
    ACCEPTED = 1;
  }

  Action action = 1;
  Type type = 2;
  repeated Invitation invitations = 3;
  // indicate to caller that invitations of this action/type were existing at time of initial response.
  optional bool existing = 4;
}

// Informational, consumers must share invitations to receive CancellableInvitation
message LoadPersistentInvitationsResponse {
  repeated Invitation invitations = 1;
}

service InvitationsService {
  rpc CreateInvitation(Invitation) returns (stream Invitation);
  rpc AcceptInvitation(AcceptInvitationRequest) returns (stream Invitation);
  rpc Authenticate(AuthenticationRequest) returns (google.protobuf.Empty);
  rpc CancelInvitation(CancelInvitationRequest) returns (google.protobuf.Empty);
  rpc QueryInvitations(google.protobuf.Empty) returns (stream QueryInvitationsResponse);
}

//
// MESH
//

// TODO(wittjosiah): Rename to SwarnState?
enum ConnectionState {
  OFFLINE = 0;
  ONLINE = 1;
}

message NetworkStatus {
  message Signal {
    string server = 1;
    // TODO(burdon): Where is this defined?
    dxos.mesh.signal.SignalState state = 2;
  }

  ConnectionState swarm = 1;
  repeated Signal signaling = 2;
  repeated dxos.devtools.swarm.SwarmInfo connection_info = 3;
}

message UpdateConfigRequest {
  ConnectionState swarm = 1;
}

// TODO(burdon): Widen API (too heavy for single feature: e.g., status).
service NetworkService {
  rpc UpdateConfig(UpdateConfigRequest) returns (google.protobuf.Empty);
  rpc QueryStatus(google.protobuf.Empty) returns (stream NetworkStatus);
}
