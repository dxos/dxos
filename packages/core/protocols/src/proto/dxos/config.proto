//
// Copyright 2023 DXOS.org
//

syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/descriptor.proto";

package dxos.config;

option go_package = "github.com/dxos/kube/proto/def/dxos/config";

extend google.protobuf.FieldOptions {
    optional string env_var = 1000;
}

message Config {
  optional int32 version = 1;

  //
  // Package definition.
  //

  optional Package package = 2;

  //
  // Runtime configuration.
  //

  optional Runtime runtime = 3;
}

message Package {
  optional string license = 1;
  repeated Repo repos = 2;
  repeated Module modules = 3;
}

message Repo {
  optional string name = 1;
  optional string url = 2;
  optional string version = 3;
}

message Module {
  message Build {
    optional string command = 1;
    optional string outdir = 2;
    optional string version = 3;
    optional string tag = 4;

    optional google.protobuf.Struct env = 10;
  }

  optional string name = 1;   // TODO(burdon): Replace with id (or key?)
  optional string id = 8;     // TODO(burdon): Ensured FQ (e.g., 'dxos.app.xxx')
  optional string type = 2;   // TODO(burdon): Define namespace (e.g., 'dxos:type/frame' vs. 'dxos.type.frame')

  optional string display_name = 3;
  optional string description = 4;
  repeated string tags = 5;
  optional bytes bundle = 6;
  optional bool tunnel = 7;

  optional Build build = 100;
  repeated Repo repos = 101;

  /// Data which will be included as apart of DXNS record.
  /// The data will be validated based on the type when being published.
  optional google.protobuf.Any record = 200;
}

message Runtime {
  message Client {
    message Storage {
      enum StorageDriver {
        RAM = 0;
        IDB = 1;
        CHROME = 2;
        FIREFOX = 3;
        NODE = 4;
        WEBFS = 5;

        // Key storage only
        LEVELJS = 11;
        JSONDOWN = 12;
      }

      optional bool persistent = 1;               // TODO(burdon): Replace with type.
      optional StorageDriver key_storage = 3;     // TODO(burdon): Rename key_store.
      optional StorageDriver storage_type = 2;    // TODO(burdon): Rename data_store.
      optional string path = 4;                   // TODO(burdon): Rename data_path.
    }

    message Log {
      optional string filter = 1 [(env_var) = "LOG_FILTER"];
      optional string prefix = 2 [(env_var) = "LOG_PREFIX"];
    }

    optional Log log = 1;
    optional Storage storage = 2;

    // TODO(burdon): Structure snapshot/epoch related props.
    optional bool enable_snapshots = 3;

    /// Milliseconds
    optional int32 snapshot_interval = 4;

    /// Milliseconds
    optional int32 invitation_expiration = 5;

    /// Location of the remote client host.
    optional string remote_source = 6;
  }

  message App {
    message BuildInfo {
      /// RFC-3339 datetime string.
      optional string timestamp = 1;
      optional string commit_hash = 2;
      /// Version from package.json.
      optional string version = 3;
    }

    optional string org = 1;
    optional string theme = 2;
    optional string website = 3;
    optional string public_url = 4 [(env_var) = "PUBLIC_URL"];

    optional BuildInfo build = 100;
    optional google.protobuf.Struct env = 101;
  }

  message Props {
    optional string title = 1;
  }

  message System {
    optional string debug = 1;
  }

  //
  // KUBE
  //
  message Kube {
    // TODO: "bin" / "kernel" / "core" / "runtime" / "system"?
    message System {
      message Autoupdate {
        bool enabled = 1;
        /// Seconds
        int32 interval = 2;
      }
  
      message Monitoring {
        bool enabled = 1;
        string endpoint = 2;
        /// Seconds
        int32 interval = 3;
      }
  
      message Trace {
        bool disabled = 1;
      }
  
      message Telemetry {
        bool disabled = 1;
      }
  
      message Gravity {
        bool disabled = 1;
        string name = 2;
        optional string log_dir = 3;
      }

      Autoupdate autoupdate = 1;
      Monitoring monitoring = 2;
      Trace trace = 3;
      Telemetry telemetry = 4;
      Gravity gravity = 5;

      /// Environment variables.
      repeated string env = 100;
    }

    message Server {
      message Https {
        bool enabled = 1;
        int32 port = 2;
        string email = 3;
        string cert_file = 4;
        string key_file = 5;
        string dns_provider = 6;
      }

      string host = 1;
      int32 port = 2;

      /// Hostname to use in KUBE configuration response.
      string host_in_config = 3;

      /// Alises for the hostname (e.g. dev.dxos.org vs dev.kube.dxos.org)
      repeated string host_alias = 4;

      Https https = 5;
    }

    message Services {
      message Signal {
        string private_key = 1;
        int32 port = 2;
        repeated string bootstrap_node = 3;
      }

      message Tunneler {
        bool enabled = 1;
        string command_template = 2;
        string output_re = 3;
        int32 port = 4;
      }

      message Container {
        bool enabled = 1;
        /// Refresh interval - Seconds
        int32 interval = 2;
      }
    }

    System system = 1;
    Server server = 2;
    Services services = 3;
  }

  //
  // DXOS Services.
  //
  message Services {
    message AppServer {
      optional string prefix = 1;
      optional string server = 2;
    }

    message Authentication {
      optional string server = 1;
    }

    message Ipfs {
      optional string server = 1;
      optional string gateway = 2;
    }

    message Signal {
      optional string server = 1;
      optional string api = 2;
      optional string status = 3;
    }

    message Ice {
      optional string urls = 1;
      optional string username = 2;
      optional string credential = 3;
    }

    message Container { // TODO(burdon): Add Service suffix to all?
      optional string proxy = 1;
    }

    // TODO: Rename to "Publishing" everywhere (in the KUBE source as well)?
    message Publisher { // TODO(burdon): Publishing.
      optional string server = 1;
    }

    // TODO(egorgripasov): Do we have a better name for this?
    message Supervisor { // TODO(burdon): Is this a service?
      optional string server = 1;
    }

    optional Supervisor supervisor = 1;
    optional AppServer app = 10;
    optional Authentication auth = 11;
    optional Ipfs ipfs = 12;
    optional Signal signal = 13;
    repeated Ice ice = 14;
    optional Container container = 15;
    optional Publisher publisher = 16;
  }

  message Keys {
    optional string name = 1;
    optional string value = 2;
  }

  optional Client client = 1;
  optional App app = 2;
  optional Props props = 3;
  optional Services services = 4;
  optional System system = 5;
  optional Kube kube = 6;
  repeated Keys keys = 7;
}
