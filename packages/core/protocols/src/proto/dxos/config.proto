//
// Copyright 2021 DXOS.org
//

syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/descriptor.proto";

package dxos.config;

option go_package = "github.com/dxos/kube/proto/def/dxos/config";

extend google.protobuf.FieldOptions {
    optional string env_var = 1000;
}

message Config {
  optional int32 version = 1;

  //
  // Package definition.
  //

  optional Package package = 2;

  //
  // Runtime configuration.
  //

  optional Runtime runtime = 3;
}

message Package {
  optional string license = 1;
  repeated Repo repos = 2;
  repeated Module modules = 3;
}

// TODO(wittjosiah): Shared with registry types. Factor out?
message Repo {
  optional string name = 1;
  optional string url = 2;
  optional string version = 3;
}

message Module {
  message Build {
    optional string command = 1;
    optional string outdir = 2;
    optional string version = 3;
    optional string tag = 4;

    optional google.protobuf.Struct env = 10;
  }

  optional string name = 1;   // TODO(burdon): Replace with id (or key?)
  optional string id = 8;     // TODO(burdon): Ensured FQ (e.g., 'dxos.app.xxx')
  optional string type = 2;   // TODO(burdon): Define namespace (e.g., 'dxos:type/frame' vs. 'dxos.type.frame')

  optional string display_name = 3;
  optional string description = 4;
  repeated string tags = 5;
  optional bytes bundle = 6;
  optional bool tunnel = 7;

  optional Build build = 100;
  repeated Repo repos = 101;

  /// Data which will be included as apart of DXNS record.
  /// The data will be validated based on the type when being published.
  optional google.protobuf.Any record = 200;
}

message Runtime {
  message Client {
    message Storage {
      enum StorageDriver {
        RAM = 0;
        IDB = 1;
        CHROME = 2;
        FIREFOX = 3;
        NODE = 4;

        // Key storage only
        LEVELJS = 11;
        JSONDOWN = 12;
      }

      optional bool persistent = 1;               // TODO(burdon): Replace with type.
      optional StorageDriver key_storage = 3;     // TODO(burdon): Rename key_store.
      optional StorageDriver storage_type = 2;    // TODO(burdon): Rename data_store.
      optional string path = 4;                   // TODO(burdon): Rename data_path.
    }

    message Log {
      optional string filter = 1 [(env_var) = "LOG_FILTER"];
      optional string prefix = 2 [(env_var) = "LOG_PREFIX"];
    }

    optional Log log = 1;
    optional Storage storage = 2;

    // TODO(burdon): Structure snapshot/epoch related props.
    optional bool enable_snapshots = 3;

    /// Milliseconds
    optional int32 snapshot_interval = 4;

    /// Milliseconds
    optional int32 invitation_expiration = 5;

    /// Location of the remote client host.
    optional string remote_source = 6;
  }

  message App {
    message BuildInfo {
      /// RFC-3339 datetime string.
      optional string timestamp = 1;
      optional string commit_hash = 2;
      /// Version from package.json.
      optional string version = 3;
    }

    optional string org = 1;
    optional string theme = 2;
    optional string website = 3;
    optional string public_url = 4 [(env_var) = "PUBLIC_URL"];

    optional BuildInfo build = 100;
    optional google.protobuf.Struct env = 101;
  }

  // CLI configuration
  message CLI {
    message AppServe {
      message Serve {
        optional string config = 1;
        optional string login_app = 2;
        optional string key_phrase = 3;
      }

      optional Serve serve = 1;
    }

    message Package {
      optional string package = 1;
      optional string channel = 2;
      optional string bin = 3;
      optional string config = 4;
    }

    optional string node_path = 1;
    optional AppServe app = 2;
    optional Package console = 3;
    optional Package mdns = 4;
    optional Package signal = 5;
    optional string npm_client = 6;
    optional string channel = 7;
  }

  message Props {
    optional string title = 1;
  }

  message System {
    optional string debug = 1;
  }

  //
  // KUBE
  //
  message Kube {
    message Autoupdate {
      bool enabled = 1;
      /// Seconds
      int32 interval = 2;
    }

    message Https {
      bool enabled = 1;
      string port = 2;
      string email = 3;
      string certfile = 4;
      string keyfile = 5;
      string dnsprovider = 6; // TODO(burdon): dns_provider.
    }

    message P2P {
      // TODO(egorgripasov): private_key
      string privatekey = 1;
      string port = 2;
      repeated string bootstrap = 3;
    }

    message Monitoring {
      bool enabled = 1;
      string endpoint = 2;
      /// Seconds
      int32 interval = 3;
    }

    message Trace {
      bool disabled = 1;
    }

    message Telemetry {
      bool disabled = 1;
    }

    message Gravity {
      bool disabled = 1;
      string name = 2;
      optional string log_dir = 3;
    }

    message AppTunneling {
      bool enabled = 1;
      string command_template = 2;
      string output_re = 3;
      string port = 4;
    }

    message Bots {
      bool enabled = 1;
      /// Refresh interval - Seconds
      int32 interval = 2;
    }

    // TODO(burdon): Needs documentation/
    string host = 1;
    string port = 2;
    Autoupdate autoupdate = 3;
    Https https = 4;
    P2P p2p = 5;
    string confhost = 6; // TODO(burdon): ?
    repeated string env = 7;
    repeated string alias = 8;
    Monitoring monitoring = 9;
    Trace trace = 10;
    Telemetry telemetry = 11;
    Gravity gravity = 12;
    AppTunneling app_tunneling = 13;
    Bots bots = 14;
  }

  //
  // DXOS Services.
  //
  message Services {
    message Kube {
      message Endpoints {
        optional string logs = 1;
        optional string services = 2;
        optional string cert = 3;
      }

      optional Endpoints endpoints = 1;
      optional string public_url = 2;
    }

    message AppServer {
      optional string prefix = 1;
      optional string server = 2;
    }

    // TODO(burdon): Delete/Rename DMG.
    message Dxns {
      /// DXNS endpoint.
      optional string server = 1;

      /**
       * Substrate account URI. This is a secret.
       * KUBEs do not serve this with the config but we store it in profile.yml.
       *
       * TODO(dmaretskyi): Deprecate this and move it to keyring.
       */
      optional string account_uri = 2;

      /**
       * Public Polkadot Address.
       */
      optional string address = 3;

      /**
       * Public address of a DXNS Account.
       */
      optional string account = 4;

      optional string faucet = 5;
    }

    message Ipfs {
      optional string server = 1;
      optional string gateway = 2;
    }

    message Signal {
      optional string server = 1;
      optional string api = 2;
      optional string status = 3;
    }

    message Ice {
      optional string urls = 1;
      optional string username = 2;
      optional string credential = 3;
    }

    message Machine {
      optional string do_access_token = 1;
      optional string github_access_token = 2;
      optional string github_username = 3;
      optional string dns_domain = 4;
      optional string npm_access_token = 5;
    }

    message BotHost { // TODO(burdon): Add Service suffix to all?
      optional string proxy = 1;
    }

    message Publisher { // TODO(burdon): Publishing.
      optional string server = 1;
    }

    message Supervisor { // TODO(burdon): Is this a service?
      optional string server = 1;
    }

    optional Kube kube = 1;
    optional AppServer app = 2;
    optional Dxns dxns = 3;
    optional Ipfs ipfs = 4;
    optional Signal signal = 5;
    repeated Ice ice = 6;
    optional Machine machine = 7;
    optional BotHost bot = 8;
    optional Publisher publisher = 9;
    optional Supervisor supervisor = 10; // TODO(burdon): Promote to 1; start others at 10.
  }

  message Keys {
    optional string name = 1;
    optional string value = 2;
  }

  optional Client client = 1;
  optional App app = 2;
  optional CLI cli = 3;
  optional Props props = 4;
  optional Services services = 5;
  optional System system = 6;
  optional Kube kube = 7;
  repeated Keys keys = 8;
}
