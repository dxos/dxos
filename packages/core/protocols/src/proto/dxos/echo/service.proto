//
// Copyright 2021 DXOS.org
//

syntax = "proto3";

import "dxos/keys.proto";
import "google/protobuf/empty.proto";

package dxos.echo.service;

message SubscribeRequest {
  string subscriptionId = 1;
}

message BatchedDocumentUpdates {
  repeated DocumentUpdate updates = 1;
}

message WriteRequest {
  repeated DocumentUpdate updates = 1;
}

message UpdateSubscriptionRequest {
  /**
   * Id of the subscription to update.
   * Subscription id is returned by `Subscribe` rpc.
   */
  string subscriptionId = 1;

  /**
   * Automerge document ids to subscribe to.
   */
  repeated string addIds = 2;

  /**
   * Automerge document ids to unsubscribe from.
   */
  repeated string removeIds = 3;
}

message FlushRequest {
  message DocState {
    string document_id = 1;
    repeated string heads = 2;
  }

  optional dxos.keys.PublicKey space_key = 1;
  /**
   * Automerge specific document ids to wait to flush.
   */
  repeated DocState states = 2;
}

message DocumentUpdate {
  /**
   * Automerge document id.
   */
  string documentId = 1;

  /**
   * Automerge document incremental update.
   * Value returned by `Automerge.saveSince()`.
   */
  bytes mutation = 2;
}


service DataService {
  /**
   * Subscribe to incremental updates of multiple automerge socuments. 
   * Which documents are subscribed to is defined in the `UpdateSubscription`.
   * Used to propagate changes from services to client.
   */
  rpc Subscribe(SubscribeRequest) returns (stream BatchedDocumentUpdates);

  /**
   * Change which documents are subscribed to for specific subscription.
   */
  rpc UpdateSubscription(UpdateSubscriptionRequest) returns (google.protobuf.Empty);

  /**
   * Write incremental updates to multiple automerge documents.
   * Used to propagate changes from client to services.
   */
  rpc Write(WriteRequest) returns (google.protobuf.Empty);
  rpc Flush(FlushRequest) returns (google.protobuf.Empty);
}
