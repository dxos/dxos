//
// Copyright 2021 DXOS.org
//

syntax = "proto3";

import "dxos/keys.proto";
import "google/protobuf/empty.proto";

package dxos.echo.service;

message SubscribeRequest {
  string subscription_id = 1;
}

message BatchedDocumentUpdates {
  repeated DocumentUpdate updates = 1;
}

message WriteRequest {
  string subscription_id = 1;
  repeated DocumentUpdate updates = 2;
}

message UpdateSubscriptionRequest {
  /**
   * Id of the subscription to update.
   * Subscription id is returned by `Subscribe` rpc.
   */
  string subscription_id = 1;

  /**
   * Automerge document ids to subscribe for updates.
   * Used for already existing documents.
   * To add new document use `write` rpc.
   */
  repeated string add_ids = 3;

  /**
   * Automerge document ids to unsubscribe from.
   */
  repeated string remove_ids = 4;
}

message FlushRequest {
  message DocState {
    string document_id = 1;
    repeated string heads = 2;
  }

  // TODO(dmaretskyi): Does not appear to be used.
  optional dxos.keys.PublicKey space_key = 1;
  /**
   * Automerge specific document ids to wait to flush.
   */
  repeated DocState states = 2;
}

message DocumentUpdate {
  /**
   * Automerge document id.
   */
  string document_id = 1;

  /**
   * Automerge document incremental update.
   * Value returned by `Automerge.saveSince()`.
   */
  bytes mutation = 2;

  /**
   * Set to true for init mutation of document.
   * default: undefined.
   */
   optional bool is_new = 3;
}

// Automerge specific.
message HostInfo {
  string peer_id = 1;
}

message SyncRepoRequest {
  string id = 1;

  optional bytes sync_message = 2;
}

message SyncRepoResponse {
  optional bytes sync_message = 1;
}

message DocHeadsList {
  message Entry {
    string document_id = 1;
    repeated string heads = 2;
  }

  repeated Entry entries = 1;
}

message GetDocumentHeadsRequest {
  repeated string document_ids = 1;
}

message GetDocumentHeadsResponse {
  DocHeadsList heads = 1;
}

message WaitUntilHeadsReplicatedRequest {
  DocHeadsList heads = 1;
}

message ReIndexHeadsRequest {
  repeated string document_ids = 1;
}

service DataService {
  /**
   * Subscribe to incremental updates of multiple automerge socuments. 
   * Which documents are subscribed to is defined in the `UpdateSubscription`.
   * Used to propagate changes from services to client.
   */
  rpc Subscribe(SubscribeRequest) returns (stream BatchedDocumentUpdates);

  /**
   * Change which documents are subscribed to for specific subscription.
   */
  rpc UpdateSubscription(UpdateSubscriptionRequest) returns (google.protobuf.Empty);

  /**
   * Write incremental updates to multiple automerge documents.
   * Used to propagate changes from client to services.
   */
  rpc Write(WriteRequest) returns (google.protobuf.Empty);
  rpc Flush(FlushRequest) returns (google.protobuf.Empty);

  // Automerge specific.

  rpc GetHostInfo(google.protobuf.Empty) returns (HostInfo);
  rpc SyncRepo(SyncRepoRequest) returns (stream SyncRepoResponse);
  rpc SendSyncMessage(SyncRepoRequest) returns (google.protobuf.Empty); // TODO(dmaretskyi): Bidirectional streams.
  rpc GetDocumentHeads(GetDocumentHeadsRequest) returns (GetDocumentHeadsResponse);

  /// Wait until the we have the specified changes on the worker locally. Does not take into account the index or client.
  rpc WaitUntilHeadsReplicated(WaitUntilHeadsReplicatedRequest) returns (google.protobuf.Empty);

  /// Update heads index for selected docuemnts.
  rpc ReIndexHeads(ReIndexHeadsRequest) returns (google.protobuf.Empty);

  /// Wait for any pending index updates.
  rpc UpdateIndexes(google.protobuf.Empty) returns (google.protobuf.Empty);
}
