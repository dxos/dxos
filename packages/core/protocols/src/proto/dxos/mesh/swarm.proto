//
// Copyright 2022 DXOS.org
//

syntax = "proto3";

import "google/protobuf/struct.proto";
import "dxos/keys.proto";

package dxos.mesh.swarm;

/**
 * Use for:
 * - Initial peer discovery (initiate session id between two peers).
 * - RTC negotiation (SDP offer/answer and ICE).
 */
message SwarmMessage {
  /// Swarm identifier.
  dxos.keys.PublicKey topic = 3;
  /// Unique connection identifier.
  dxos.keys.PublicKey session_id = 4;
  /// Message payload.
  MessageData data = 5;
  /// Unique message identifier. Used for ACK and matching Answers to Offers.
  dxos.keys.PublicKey message_id = 6;
}

message MessageData {
  oneof payload {
    Offer offer = 1;
    Answer answer = 2;

    /**
     * @deprecated Use SignalBatch instead.
     */
    Signal signal = 3;
    SignalBatch signal_batch = 4;
  }
}

message Offer {
}

message Answer {
  bool accept = 1;
  /// MessageId of the Offer being answered.
  optional dxos.keys.PublicKey offer_message_id = 2;
}

//
// RTC messages.
//

message Signal {
  google.protobuf.Struct payload = 1;
}

message SignalBatch {
  repeated Signal signals = 1;
}
