//
// Copyright 2022 DXOS.org
//

syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";

package dxos.mesh.teleport.blobsync;

message WantList {
  message Entry {
    bytes id = 1;
  
    /**
     * Size of chunk in bytes. Must be a power of 2. Default is 4096.
     * If chunk_size is missing, host will provide it.
     **/
    optional int32 chunk_size = 2;
  
    /**
     * Bitfield of requested chunks.
     * Every bit represents a chunk.
     * Chunks are indexed from MSB to LSB.
     *
     * If bitfield is missing, all chunks are requested.
     **/
    optional bytes bitfield = 3;
  }

  /// Requested blobs. If bitfield is empty, all chunks are requested.
  repeated Entry blobs = 1;
}

message BlobChunk {
  bytes id = 1;

  /// In bytes
  optional int32 chunk_size = 2;

  /// Offset from the start of blob in bytes.
  optional int32 chunk_offset = 3;

  /// Total length of blob.
  optional int32 total_length = 4;

  bytes payload = 100;
}

/**
 * Allows synchronization of opaque data objects between two peers.
 * Loosely based on Bittorrent protocol.
 */
service BlobSyncService {
  /// Notify the peer that we want to receive specified objects.
  rpc Want(WantList) returns (google.protobuf.Empty);

  /// Send an object to the peer.
  rpc Push(BlobChunk) returns (google.protobuf.Empty);
}
