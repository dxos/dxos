//
// Copyright 2020 DXOS.org
//

syntax = "proto3";

package dxos.mesh.muxer;

/// Root type for messages sent over the stream.
message Command {
  oneof payload {
    OpenChannel open_channel = 1;
    Data data = 2;
    Destroy destroy = 3;
  }
}

/**
 * Notify the remote peer that we are opening a channel.
 * 
 * Means that we are ready to receive data on the channel.
 * The remote peer could now send data messages with this channel id that will be atributed to this channel.
 *
 * The local peer must buffer any data messages until the remote peer replies with OpenChannel for this tag. 
 */
message OpenChannel {
  /// Session-specific ID for the channel.
  int32 id = 1;

  /// Stable identifier for the channel that is agreed upon by both peers.
  string tag = 2;
   
  /// Optional Mime-type or URL describing the protocol that is hosted ober this stream. Used for introspection.
  optional string content_type = 3;
}

message Data {
  /**
   * Identifier for the channel as assigned by the remote peer.
   * NOTE: An OpenChannel message must received before any data is sent on a channel.
   * Any data messages sent before that, should be ignored.
   */ 
  int32 channel_id = 1;
  bytes data = 2;
}

/// Terminate the connection. The other peer can expect the connection to be closed.
message Destroy {
  /// Error that caused the termination.
  optional string error = 1;
}