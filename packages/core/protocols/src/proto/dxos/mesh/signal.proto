//
// Copyright 2022 DXOS.org
//

syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package dxos.mesh.signal;

option go_package = "github.com/dxos/kube/go/signal/pb";

message JoinRequest {
  bytes swarm = 1;
  bytes peer = 2;
}

message Message {
  // TODO(egor): Rename to `sender`.
  bytes author = 1;
  bytes recipient = 2;
  google.protobuf.Any payload = 3;
}

message ReceptionRequest {
  bytes peer = 1;
}

/// Goes on Pub/Sub swarm topic and as a Join stream in RPC.
message SwarmEvent {
  // Announce peer available on swarm.
  message PeerAvailable {
    bytes peer = 1;

    google.protobuf.Timestamp since = 2;

    // When, if at all (handle the default value as not), this availability would expires were it not re-announced, like
    // periodically in Pub/Sub with some margin such that Pub/Sub network partitions lead to offline statuses.
    optional google.protobuf.Timestamp until = 3;

    /// Only relevant in Pub/Sub. Optional, the host topic to eagerly send PeerAvailable messages back to.
    optional bytes announceBackToHost = 4;
  }

  message PeerLeft {
    bytes peer = 1;
  }

  oneof event {
    /// The peer was announced as available on the swarm.
    PeerAvailable peerAvailable = 1;
    /// The peer left, or their announcement timed out.
    PeerLeft peerLeft = 2;
  }
}

/// Goes on a Pub/Sub host topic.
message HostEvent {
  oneof event {
    SwarmEvent.PeerAvailable peerAvailable = 1;
  }
}

/// Goes on Pub/Sub peer topic.
message PeerEvent {
  oneof event {
    Message message = 1;
  }
}

// TOOD(burdon): Rename.
// TODO(burdon): Reconcile with `@dxos/kube`.
service Signal {
  rpc Join(JoinRequest) returns (stream SwarmEvent);
  rpc ReceiveMessages(ReceptionRequest) returns (stream Message);
  rpc SendMessage(Message) returns (google.protobuf.Empty);
}
