//
// Copyright 2021 DXOS.org
//

syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "dxos/client/services.proto";
import "dxos/echo/timeframe.proto";
import "dxos/halo/credentials.proto";
import "dxos/keys.proto";

package dxos.halo.invitations;

message Options {
  enum Role {
    GUEST = 0;
    HOST = 1;
  }

  /// Role of the peer.
  Role role = 1;
}

message IntroductionRequest {
  /// Guest's profile.
  optional halo.credentials.ProfileDocument profile = 1;

  optional string invitation_id = 2;
}

message IntroductionResponse {
  dxos.client.services.Invitation.AuthMethod auth_method = 1;

  /// Present when auth_method is KNOWN_PUBLIC_KEY.
  optional bytes challenge = 2;

  /// Only present for testing invitation types.
  optional dxos.keys.PublicKey space_key = 100;
}

message AuthenticationRequest {
  /// Present when auth_method is SHARED_SECRET.
  optional string auth_code = 1;

  /// Present when auth_method is KNOWN_PUBLIC_KEY.
  optional bytes signed_challenge = 2;
}

message AuthenticationResponse {
  enum Status {
    OK = 0;
    INVALID_OTP = 1;
    INVALID_OPT_ATTEMPTS = 2;
    INTERNAL_ERROR = 3;
    INVALID_SIGNATURE = 4;
  }

  optional Status status = 1;
}

message DeviceAdmissionRequest {
  dxos.keys.PublicKey device_key = 1;
  dxos.keys.PublicKey control_feed_key = 2;
  dxos.keys.PublicKey data_feed_key = 3;
  optional dxos.halo.credentials.DeviceProfileDocument profile = 4;
}

message SpaceAdmissionRequest {
  dxos.keys.PublicKey identity_key = 1;
  dxos.keys.PublicKey device_key = 2;
  dxos.keys.PublicKey control_feed_key = 3;
  dxos.keys.PublicKey data_feed_key = 4;
}

message DelegateSpaceInvitation {
  string invitation_id = 1;
  dxos.client.services.Invitation.AuthMethod auth_method = 2;
  dxos.keys.PublicKey swarm_key = 3;
  dxos.halo.credentials.SpaceMember.Role role = 4;
  /// Present for AuthMethod.KNOWN_PUBLIC_KEY, where guess needs to prove possession of a corresponding private key
  optional dxos.keys.PublicKey guest_key = 5;
  optional google.protobuf.Timestamp expires_on = 6;
  bool multi_use = 7;
}

message CancelDelegatedInvitation {
  dxos.keys.PublicKey credential_id = 1;
}

message AdmissionRequest {
  oneof kind {
    DeviceAdmissionRequest device = 1;
    SpaceAdmissionRequest space = 2;
  }
}

message DeviceAdmissionCredentials {
  dxos.keys.PublicKey identity_key = 1;
  dxos.keys.PublicKey halo_space_key = 2;
  dxos.keys.PublicKey genesis_feed_key = 3;
  optional dxos.echo.timeframe.TimeframeVector control_timeframe = 4;
}

message SpaceAdmissionCredentials {
  /// Credential of type `SpaceMember` that grants Guest's identity access to the space.
  dxos.halo.credentials.Credential credential = 1;

  /// Hint to the guest about the current control timeframe.
  optional dxos.echo.timeframe.TimeframeVector control_timeframe = 2;

  /// Hint to the guest about the current data timeframe.
  optional dxos.echo.timeframe.TimeframeVector data_timeframe = 3;
}

message AdmissionResponse {
  oneof kind {
    DeviceAdmissionCredentials device = 1;
    SpaceAdmissionCredentials space = 2;
  }
}

/// Host service for two peers exchanging an invitation.
// TODO(wittjosiah): Handle invitations where guest is the initiatating peer.
// TODO(dmaretskyi): Rename to InvitationExtensionService.
service InvitationHostService {
  /// Both peers must call this method before any other.
  rpc Options(Options) returns (google.protobuf.Empty);

  /// Introduce guest to the host. Only on the host.
  rpc Introduce(IntroductionRequest) returns (IntroductionResponse);

  /// Authenticate request. Only on the host.
  rpc Authenticate(AuthenticationRequest) returns (AuthenticationResponse);

  /// Process admission credentials. Only on the host.
  rpc Admit(AdmissionRequest) returns (AdmissionResponse);
}
