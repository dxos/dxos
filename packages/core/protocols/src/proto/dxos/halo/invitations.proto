//
// Copyright 2021 DXOS.org
//

syntax = "proto3";

import "google/protobuf/empty.proto";

import "dxos/halo/credentials.proto";
import "dxos/keys.proto";
import "dxos/echo/timeframe.proto";

package dxos.halo.invitations;

// TODO(burdon): Reconcile with client.services.Invitation. Merge files.

message AuthenticationRequest {
  string authentication_code = 1;
}

message AuthenticationResponse {
  enum Status {
    OK = 0;
    INVALID_OTP = 1;
    INVALID_OPT_ATTEMPTS = 2;
    INTERNAL_ERROR = 3;
  }

  optional Status status = 1;
}

enum AuthMethod {
  /// No authnetication is required. Guest should not call `Authenticate`.
  NONE = 0;

  /// Guest should call `Authenticate` with the shared secret.
  SHARED_SECRET = 1;
}

//
// HALO device invitations.
//

message DeviceAdmissionOffer {
  dxos.keys.PublicKey identity_key = 1;
  dxos.keys.PublicKey halo_space_key = 2;
  dxos.keys.PublicKey genesis_feed_key = 3;
  optional dxos.echo.timeframe.TimeframeVector control_timeframe = 4;
}

message DeviceAdmissionCredentials {
  dxos.keys.PublicKey device_key = 1;
  dxos.keys.PublicKey control_feed_key = 2;
  dxos.keys.PublicKey data_feed_key = 3;
}

service DeviceHostService {
  /// Process admission offer from host.
  rpc RequestAdmission(google.protobuf.Empty) returns (DeviceAdmissionOffer);

  /// Authenticate request.
  rpc Authenticate(AuthenticationRequest) returns (AuthenticationResponse);

  /// Process admission request from guest.
  rpc PresentAdmissionCredentials(DeviceAdmissionCredentials) returns (google.protobuf.Empty);
}

//
// Space agent invitations.
//

message Introduction {
  /// Guest's profile.
  optional halo.credentials.ProfileDocument profile = 1;
}

message IntroductionResponse {
  /// Only present for testing invitation types.
  optional dxos.keys.PublicKey space_key = 1;

  AuthMethod auth_method = 2;
}

message SpaceAdmissionRequest {
  dxos.keys.PublicKey identity_key = 1;
  dxos.keys.PublicKey device_key = 2;
  dxos.keys.PublicKey control_feed_key = 3;
  dxos.keys.PublicKey data_feed_key = 4;
}

message SpaceAdmissionCredentials {
  /// Credential of type `SpaceMember` that grants Guest's identity access to the space.
  dxos.halo.credentials.Credential credential = 1;

  /// Hint to the guest about the current control timeframe.
  optional dxos.echo.timeframe.TimeframeVector control_timeframe = 2;

  /// Hint to the guest about the current data timeframe.
  optional dxos.echo.timeframe.TimeframeVector data_timeframe = 3;
}

service SpaceHostService {
  /// Introduce Guest to the host.
  rpc Introduce(Introduction) returns (IntroductionResponse);

  /// Authenticate request.
  rpc Authenticate(AuthenticationRequest) returns (AuthenticationResponse);

  /// Process admission credentials.
  rpc RequestAdmission(SpaceAdmissionRequest) returns (SpaceAdmissionCredentials);
}
