//
// Copyright 2021 DXOS.org
//

syntax = "proto3";

import "dxos/echo/invitation.proto";
import "dxos/echo/snapshot.proto";
import "dxos/echo/timeframe.proto";
import "google/protobuf/empty.proto";

import "dxos/config.proto";
import "dxos/halo/keys.proto";
import "dxos/keys.proto";

package dxos.client;

//
// SYSTEM
//

service SystemService {
  rpc GetConfig(google.protobuf.Empty) returns (dxos.config.Config);
  rpc Reset (google.protobuf.Empty) returns (google.protobuf.Empty);
}

//
// Invitations shared across HALO and ECHO
//

enum InvitationState {
  WAITING_FOR_CONNECTION = 0;
  CONNECTED = 1;
  SUCCESS = 2;
  ERROR = 3;
}

/// Invitation process created by sender.
message InvitationRequest {
  optional dxos.echo.invitation.InvitationDescriptor descriptor = 1;

  InvitationState state = 2;

  /// Only if state == ERROR.
  optional string error = 3;
}

/// Invitation that is being redeemed.
message RedeemedInvitation {
  string id = 1;

  InvitationState state = 2;

  /// Only if state == ERROR.
  optional string error = 3;

  /// Only on party invitations that are finished.
  optional dxos.keys.PublicKey party_key = 4;
}

message AuthenticateInvitationRequest {
  /// Id from corresponding RedeemedInvitation.
  string process_id = 1;
  bytes secret = 2;
}

//
// HALO
//

message Profile {
  dxos.keys.PublicKey public_key = 1;
  optional string username = 2;
}

message SubscribeProfileResponse {
  optional Profile profile = 1;
}

message CreateProfileRequest {
  optional string username = 1;
  optional bytes public_key = 2;
  optional bytes secret_key = 3;
}

message RecoverProfileRequest {
  string seed_phrase = 1;
}
message Contact {
  dxos.keys.PublicKey public_key = 1;
  optional string display_name = 2;
}

message Contacts {
  repeated Contact contacts = 1;
}

service ProfileService {
  rpc SubscribeProfile (google.protobuf.Empty) returns (stream SubscribeProfileResponse);
  rpc CreateProfile(CreateProfileRequest) returns (Profile);
  rpc RecoverProfile(RecoverProfileRequest) returns (Profile);

  rpc CreateInvitation(google.protobuf.Empty) returns (stream InvitationRequest);
  rpc AcceptInvitation(echo.invitation.InvitationDescriptor) returns (stream RedeemedInvitation);
  rpc AuthenticateInvitation(AuthenticateInvitationRequest) returns (google.protobuf.Empty);
}

message AddKeyRecordRequest {
  dxos.halo.keys.KeyRecord key_record = 1;
}

message SignRequest {
  /**
   * - The public key of the key that is supposed to be used for signing.
   */
  dxos.keys.PublicKey public_key = 1;

  bytes payload = 2;
}

message SignResponse {
  bytes signed = 2;
}

message SetPreferenceRequest {
  string key = 1;
  string value = 2;
}

message GetPreferenceRequest {
  string key = 1;
}

message GetPreferenceResponse {
  string value = 1;
}

service HaloService {
  // TODO(burdon): Comments.
  rpc Sign(SignRequest) returns (SignResponse);
  rpc AddKeyRecord(AddKeyRecordRequest) returns (google.protobuf.Empty);

  rpc SubscribeContacts(google.protobuf.Empty) returns (stream Contacts);

  rpc SetGlobalPreference(SetPreferenceRequest) returns (google.protobuf.Empty);
  rpc GetGlobalPreference(GetPreferenceRequest) returns (GetPreferenceResponse);

  rpc SetDevicePreference(SetPreferenceRequest) returns (google.protobuf.Empty);
  rpc GetDevicePreference(GetPreferenceRequest) returns (GetPreferenceResponse);
}

//
// ECHO
//

message Party {
  message Member {
    dxos.keys.PublicKey public_key = 1;
    optional string display_name = 2;
  }

  dxos.keys.PublicKey public_key = 1;
  bool is_open = 2;
  bool is_active = 3;

  repeated Member members = 4;
}

message SubscribePartyRequest {
  dxos.keys.PublicKey party_key = 1;
}

message GetPartyDetailsRequest {
  dxos.keys.PublicKey party_key = 1;
}

message PartyDetails {
  /// The timeframe of mutations processed by the client.
  dxos.echo.timeframe.TimeframeVector processed_timeframe = 1;
}

message SubscribePartyResponse {
  optional Party party = 1;
}

message SubscribePartiesResponse {
  repeated Party parties = 1;
}

message CreateInvitationRequest {
  dxos.keys.PublicKey party_key = 1;

  /// When specified the invitation will be of OFFLINE type, not requiring secret exchange.
  optional dxos.keys.PublicKey invitee_key = 2;
}

message PartyActivationOptions {
  bool global = 1;
  bool device = 2;
}

message SetPartyStateRequest {
  dxos.keys.PublicKey party_key = 1;

  optional bool open = 2;
  optional bool active_global = 3;
  optional bool active_device = 4;
}

message SubscribeMembersRequest {
  dxos.keys.PublicKey party_key = 1;
}

message SubscribeMembersResponse {
  message PartyMember {
    dxos.keys.PublicKey public_key = 1; // TODO(burdon): Rename key (replace all "public_key").
    optional string display_name = 2;
  }

  repeated PartyMember members = 1;
}

message CreateSnaspotRequest {
  dxos.keys.PublicKey party_key = 1;
}


service PartyService {
  // TODO(rzadp): Combine the two into one?
  rpc SubscribeToParty (SubscribePartyRequest) returns (stream SubscribePartyResponse);
  rpc SubscribeParties (google.protobuf.Empty) returns (stream SubscribePartiesResponse);

  rpc GetPartyDetails(GetPartyDetailsRequest) returns (PartyDetails);

  rpc CreateParty(google.protobuf.Empty) returns (Party);
  rpc CloneParty(echo.snapshot.PartySnapshot) returns (Party);

  /// Open and close or activate and deactivate a party.
  rpc SetPartyState(SetPartyStateRequest) returns (Party);

  rpc CreateInvitation(CreateInvitationRequest) returns (stream InvitationRequest);
  rpc AcceptInvitation(echo.invitation.InvitationDescriptor) returns (stream RedeemedInvitation);
  rpc AuthenticateInvitation(AuthenticateInvitationRequest) returns (google.protobuf.Empty);

  // TODO(rzadp): Remove and join with Subscribing to Party.
  rpc SubscribeMembers (SubscribeMembersRequest) returns (stream SubscribeMembersResponse);

  rpc CreateSnapshot(CreateSnaspotRequest) returns (echo.snapshot.PartySnapshot);
}
