//
// Copyright 2021 DXOS.org
//

syntax = "proto3";

import "google/protobuf/empty.proto";

import "dxos/client/services.proto";
import "dxos/config.proto";
import "dxos/echo/snapshot.proto";
import "dxos/echo/timeframe.proto";
import "dxos/halo/keys.proto";
import "dxos/halo/credentials.proto";
import "dxos/keys.proto";

package dxos.client;

//
// Invitations shared across HALO and ECHO.
//

enum InvitationState {
  WAITING_FOR_CONNECTION = 0;
  CONNECTED = 1;
  SUCCESS = 2;
  ERROR = 3;
}

/// Invitation process created by sender.
message InvitationRequest {
  optional dxos.client.services.Invitation descriptor = 1;

  InvitationState state = 2;

  /// Only if state == ERROR.
  optional string error = 3;
}

/// Invitation that is being redeemed.
message RedeemedInvitation {
  string id = 1;

  InvitationState state = 2;

  /// Only if state == ERROR.
  optional string error = 3;

  /// Only on space invitations that are finished.
  optional dxos.keys.PublicKey space_key = 4;
}

message AuthenticateInvitationRequest {
  /// Id from corresponding RedeemedInvitation.
  string process_id = 1;
  bytes secret = 2;
}

//
// HALO
//

message Identity {
  // TODO(burdon): Remove identity from Identity (space of identity).
  dxos.keys.PublicKey identity_key = 1;
  optional string displayName = 2;
  // TODO(mykola): Factor out. It was added to make deviceKey available in the HaloProxy.
  optional dxos.keys.PublicKey device_key = 3;

  optional dxos.keys.PublicKey halo_space = 4;
}

message SubscribeIdentityResponse {
  optional Identity identity = 1;
}

message CreateIdentityRequest {
  optional bytes public_key = 1;
  optional bytes secret_key = 2;
  // TODO(burdon): Identity.
  optional string displayName = 3;
}

message RecoverIdentityRequest {
  string seed_phrase = 1;
}

message Contact {
  dxos.keys.PublicKey public_key = 1;
  optional string display_name = 2;
}

message Contacts {
  repeated Contact contacts = 1;
}

message SignPresentationRequest {
  dxos.halo.credentials.Presentation presentation = 1;
  optional bytes nonce = 2;
}

service IdentityService {
  rpc CreateIdentity(CreateIdentityRequest) returns (Identity);
  rpc RecoverIdentity(RecoverIdentityRequest) returns (Identity);
  rpc SubscribeIdentity(google.protobuf.Empty) returns (stream SubscribeIdentityResponse);

  rpc SignPresentation(SignPresentationRequest) returns (dxos.halo.credentials.Presentation);
}

message AddKeyRecordRequest {
  dxos.halo.keys.KeyRecord key_record = 1;
}

message SignRequest {
  /// The public key of the key that is supposed to be used for signing.
  dxos.keys.PublicKey public_key = 1;

  bytes payload = 2;
}

message SignResponse {
  bytes signed = 2;
}

message SetPreferenceRequest {
  string key = 1;
  string value = 2;
}

message GetPreferenceRequest {
  string key = 1;
}

message GetPreferenceResponse {
  string value = 1;
}

service HaloService {
  rpc Sign(SignRequest) returns (SignResponse);
  rpc AddKeyRecord(AddKeyRecordRequest) returns (google.protobuf.Empty);

  rpc SubscribeContacts(google.protobuf.Empty) returns (stream Contacts);

  rpc SetGlobalPreference(SetPreferenceRequest) returns (google.protobuf.Empty);
  rpc GetGlobalPreference(GetPreferenceRequest) returns (GetPreferenceResponse);

  rpc SetDevicePreference(SetPreferenceRequest) returns (google.protobuf.Empty);
  rpc GetDevicePreference(GetPreferenceRequest) returns (GetPreferenceResponse);
}
