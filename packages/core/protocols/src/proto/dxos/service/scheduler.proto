syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "dxos/config.proto";

package dxos.service.scheduler;

option go_package = "github.com/dxos/kube/scheduler/pb";

enum State {
  INVALID = 0;
  STOPPED = 1;
  STARTING = 2;
  RUNNING = 3;
  FAILING = 4;
}

message Bot {
  message Spec {
    message Echo {
      bytes space_key = 1;

      google.protobuf.Any invitation = 2;
    }

    /// URL to the bot executable. KUBEs support file:// and ipfs:// urls.
    string executable = 1;

    Echo echo = 2;
  }

  message Stats {
    message NetworkUsage {
    }

    message CPUUsage {
      double cores = 1;
    }

    message MemoryUsage {
      int64 bytes = 1;
    }

    message DiskUsage {
      int64 bytes = 1;
    }

    /// Echo stats.
    message Echo {

    }

    optional int64 pid = 1;

    optional google.protobuf.Timestamp executable_downloaded = 10;
    optional google.protobuf.Timestamp created = 11;
    optional google.protobuf.Timestamp started = 12;
    optional google.protobuf.Timestamp stopped = 13;
    optional google.protobuf.Timestamp last_ping_time = 14;

    optional int32 exit_code = 30;
    optional string error_message = 31;

    CPUUsage cpu_usage = 40;
    MemoryUsage memory_usage = 41;
    DiskUsage disk_usage = 42;
    NetworkUsage network_usage = 43;
    Echo echo = 44;
  }

  /// Scheduler
  bytes id = 1;

  /// Current state.
  State state = 2;

  /// Desired state.
  State desired_state = 3;

  /// Omitted when returned from the Query RPC.
  optional Spec spec = 4;

  /// Omitted when returned from the Query RPC.
  optional Stats stats = 5;

  /// Identity key of the bot profile.
  optional bytes identity_key = 6;
}

message QueryResponse {
  repeated Bot services = 1;
}

message ServiceRequest {
  bytes service_id = 1;
}

message Request {
  bytes service_id = 1;
  google.protobuf.Any payload = 2;
}

message Reply {
  google.protobuf.Any payload = 1;
}

message CreateRequest {
  Bot.Spec spec = 1;
  optional State desired_state = 2;
}

message Progress {
  Bot state = 1;
}

/// Exposed by bot controller to clients. Allows creation and management of bots.
service BotController {
  /// Enumerate all services.
  rpc Query(google.protobuf.Empty) returns (QueryResponse);

  /// Query information about a specific service
  rpc Describe(ServiceRequest) returns (Bot);

  /// Create a new service.
  rpc Create(CreateRequest) returns (stream Progress);

  /// Remove a service with its identity and persistent storage.
  rpc Remove(ServiceRequest) returns (google.protobuf.Empty);

  /// Start the bot.
  rpc Start(ServiceRequest) returns (stream Progress);

  /// Start the bot.
  rpc Stop(ServiceRequest) returns (stream Progress);

  /// Start the bot.
  rpc Restart(ServiceRequest) returns (stream Progress);

  // TODO: Upgrade to streaming request to support bi-directional streams.
  /// Issue an RPC request to the bot instance.
  rpc Call(Request) returns (stream Reply);
}

message BotConfig {
  Bot.Spec.Echo spec = 1;

  dxos.config.Config client_config = 2;
}

/// Internal service exposed by bot to the bot controller.
service BotService {
  /// Issue an RPC request to the bot instance.
  rpc Call(Request) returns (stream Reply);

  /// Called by the bot controller to verify that the bot is functional.
  rpc Healthcheck(google.protobuf.Empty) returns (google.protobuf.Empty);
}

message Report {
  /// Identity key of the bot profile.
  optional bytes identity_key = 1;
}

/// Internal service exposed by bot controller to the bot.
service BotHost {
  rpc GetConfig(google.protobuf.Empty) returns (BotConfig);

  rpc SendReport(Report) returns (google.protobuf.Empty);
}
