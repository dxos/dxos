//
// Copyright 2022 DXOS.org
//

syntax = "proto3";

import "google/protobuf/empty.proto";
import "dxos/config.proto";
import "dxos/halo/credentials.proto";
import "dxos/keys.proto";

package dxos.service.supervisor;

option go_package = "github.com/dxos/kube/supervisor/core";

//
// Basic methods to operate with KUBE core, inc. authentication & configuration.
//

message Service {
  enum Status {
    UNKNOWN = 0;
    STARTED = 1;
    STOPPED = 2;
    FAILED  = 3;
  }

  enum Type {
    NONE = 0;
    PROCESS = 1;
    SERVICE = 2;
  }

  string name = 1;
  Status status = 2;
  repeated string addresses = 4;
  Type type = 5;
}

// Public .well-known endpoint.
message Services {
  repeated Service services = 1;
}

message ConfigPair {
  string key = 1;
  string value = 2;
}

message GetConfigResponse {
  dxos.config.Config config = 1;
}

message SetConfigRequest {
  ConfigPair config = 1;
}

message SetConfigResponse {
  ConfigPair config = 1;
}

message InitAuthSequenceResponse {
  bytes nonce = 1;
  dxos.keys.PublicKey kube_key = 2;
}

message Authentication {
  dxos.halo.credentials.Presentation presentation = 1;
}

message AuthenticateResponse {
  optional string token = 1;
  // TODO(egorgripasov): Remove. KubeAccess credential for POC.
  optional dxos.halo.credentials.Credential credential = 2;
}

service Supervisor {
  // Authenticate with KUBE.
  rpc Authenticate(Authentication) returns (AuthenticateResponse);

  // Init authentication sequence. Used to obtain nonce & KUBE identity (public key).
  rpc InitAuthSequence(google.protobuf.Empty) returns (InitAuthSequenceResponse);

  // Read KUBE config.
  rpc GetConfig(google.protobuf.Empty) returns (GetConfigResponse);

  // Set KUBE config.
  rpc SetConfig(SetConfigRequest) returns (SetConfigResponse);

  // Obtain KUBE status & list running services.
  rpc Status(google.protobuf.Empty) returns (Services);
}
