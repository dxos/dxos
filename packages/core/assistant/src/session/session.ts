//
// Copyright 2025 DXOS.org
//

import { type AiError, AiLanguageModel, type AiResponse, type AiTool, AiToolkit } from '@effect/ai';
import { Chunk, type Context, Effect, Option, Queue, type Schema, Stream } from 'effect';

import { type ToolId } from '@dxos/ai';
import {
  type AiInputPreprocessingError,
  AiParser,
  AiPreprocessor,
  type AiToolNotFoundError,
  ToolExecutionService,
  ToolResolverService,
  callTool,
  getToolCalls,
} from '@dxos/ai';
import { type Blueprint } from '@dxos/blueprints';
import { todo } from '@dxos/debug';
import { Obj } from '@dxos/echo';
import { TracingService } from '@dxos/functions';
import { log } from '@dxos/log';
import { type ContentBlock, DataType } from '@dxos/schema';
import { isNotFalsy } from '@dxos/util';

import { type AiAssistantError } from '../errors';

import { formatSystemPrompt, formatUserPrompt } from './format';
import { GenerationObserver } from './observer';

export type AiSessionRunError = AiError.AiError | AiInputPreprocessingError | AiToolNotFoundError | AiAssistantError;

export type AiSessionRunRequirements<Tools extends AiTool.Any> =
  | AiTool.ToHandler<Tools>
  | AiLanguageModel.AiLanguageModel
  | ToolResolverService
  | ToolExecutionService
  | TracingService;

export type AiSessionRunEffect<Tools extends AiTool.Any> = Effect.Effect<
  DataType.Message[],
  AiSessionRunError,
  AiSessionRunRequirements<Tools>
>;

export type AiSessionRunParams<Tools extends AiTool.Any> = {
  prompt: string;
  system?: string;
  history?: DataType.Message[];
  objects?: Obj.Any[]; // TODO(burdon): Meta only is required (typename and id -- write to binder).
  blueprints?: Blueprint.Blueprint[];
  toolIds?: ToolId[];
  toolkit?: AiToolkit.AiToolkit<Tools>;
  observer?: GenerationObserver;
};

export type AiSessionOptions = {};

/**
 * Contains message history, tools, current context.
 * Current context means the state of the app, time of day, and other contextual information.
 * It makes requests to the model, its a state machine.
 * It keeps track of the current goal.
 * It manages the context window.
 * Tracks the success criteria of reaching the goal, exposing metrics (stretch).
 * Could be run locally in the app or remotely.
 * Could be personal or shared.
 */
export class AiSession {
  /** Complete messages fired during the session, both from the model and from the user. */
  public readonly messageQueue = Effect.runSync(Queue.unbounded<DataType.Message>());

  // TODO(dmaretskyi): Remove the queues and convert everything to observer.

  /**
   * Blocks streaming from the model during the session.
   * @deprecated Use `observer.onBlock` instead.
   */
  public readonly blockQueue = Effect.runSync(Queue.unbounded<Option.Option<ContentBlock.Any>>());

  /** Unparsed events from the underlying generation stream. */
  public readonly eventQueue = Effect.runSync(Queue.unbounded<AiResponse.Part>());

  /** Prevents concurrent execution of session. */
  private readonly _semaphore = Effect.runSync(Effect.makeSemaphore(1));

  /** Pending messages (incl. the current user request). */
  private _pending: DataType.Message[] = [];

  /** Prior history from queue. */
  private _history: DataType.Message[] = [];

  constructor(private readonly _options: AiSessionOptions = {}) {}

  /**
   * Runs the AI model loop interacting with tools and artifacts.
   * @returns The messages generated by the session, including the user's prompt.
   */
  // TODO(dmaretskyi): Toolkit context doesn't get added to the effect type.
  run = <Tools extends AiTool.Any>(params: AiSessionRunParams<Tools>): AiSessionRunEffect<Tools> =>
    Effect.gen(this, function* () {
      const observer = params.observer ?? GenerationObserver.noop();

      // Create toolkit.
      const toolkit: AiToolkit.ToHandler<Tools> = yield* createToolkit(params);

      // Generate system prompt.
      // TODO(budon): Dynamically resolve template variables here.
      const system = yield* formatSystemPrompt(params);

      // Generate user prompt.
      const promptMessages = yield* formatUserPrompt(params);
      yield* this.messageQueue.offer(promptMessages);
      yield* observer.onMessage(promptMessages);
      yield* TracingService.emitConverationMessage(promptMessages);

      this._history = [...(params.history ?? [])];
      this._pending = [promptMessages];

      // Tool call loop.
      do {
        log.info('request', {
          prompt: promptMessages,
          system: { snippet: [system.slice(0, 32), '...', system.slice(-32)].join(''), length: system.length },
          pending: this._pending.length,
          history: this._history.length,
          objects: params.objects?.length ?? 0,
          blueprints: params.blueprints?.length ?? 0,
          toolkit: Object.values(toolkit.tools).map((tool: AiTool.Any) => tool.name),
        });

        //
        // Generate the prompt and make request.
        //
        const prompt = yield* AiPreprocessor.preprocessAiInput([...this._history, ...this._pending]);
        const blocks = yield* AiLanguageModel.streamText({
          prompt,
          system,
          toolkit,
          // TODO(burdon): Despite this flag, the model still calls tools.
          //  Flag is only used in generateText (not streamText); patch and submit bug.
          //  https://github.com/Effect-TS/effect/blob/main/packages/ai/ai/src/AiLanguageModel.ts#L401
          disableToolCallResolution: true,
        }).pipe(
          AiParser.parseResponse({
            onBlock: (block) =>
              Effect.all([this.blockQueue.offer(Option.some(block)), observer.onBlock(block)], { discard: true }),
            onPart: (part) => Effect.all([this.eventQueue.offer(part), observer.onPart(part)], { discard: true }),
          }),
          Stream.runCollect,
          Effect.map(Chunk.toArray),
        );

        // Signal to stream consumers that message blocks are complete.
        // Allows for coordination between the block and message queues
        //   to prevent the streaming blocks from being rendered twice when the message is produced.
        // TODO(wittjosiah): The block queue should probably be drained at this point in the case that there is no consumer.
        yield* this.blockQueue.offer(Option.none());

        // Create response message.
        const response = Obj.make(DataType.Message, {
          created: new Date().toISOString(),
          sender: { role: 'assistant' },
          blocks,
        });
        this._pending.push(response);
        yield* this.messageQueue.offer(response);
        yield* observer.onMessage(response);
        yield* TracingService.emitConverationMessage(response);

        // Parse response for tool calls.
        const toolCalls = getToolCalls(response);
        if (toolCalls.length === 0) {
          break;
        }

        // TODO(burdon): Potential retry.
        // TODO(burdon): Report errors to user; with proposed actions.
        const toolResults = yield* Effect.forEach(toolCalls, (toolCall) =>
          callTool(toolkit, toolCall).pipe(
            Effect.provide(
              TracingService.layerSubframe((context) => ({
                ...context,
                parentMessage: response.id,
                toolCallId: toolCall.toolCallId,
              })),
            ),
          ),
        );

        const toolResultsMessage = Obj.make(DataType.Message, {
          created: new Date().toISOString(),
          sender: { role: 'user' },
          blocks: toolResults,
        });

        this._pending.push(toolResultsMessage);
        yield* this.messageQueue.offer(toolResultsMessage);
        yield* observer.onMessage(toolResultsMessage);
        yield* TracingService.emitConverationMessage(toolResultsMessage);
      } while (true);

      // Signals to stream consumers that the session has completed and no more messages are coming.
      yield* Queue.shutdown(this.messageQueue);
      yield* Queue.shutdown(this.blockQueue);
      yield* Queue.shutdown(this.eventQueue);

      log('done', { pending: this._pending.length });
      return this._pending;
    }).pipe(this._semaphore.withPermits(1), Effect.withSpan('AiSession.run'));

  // TODO(burdon): Implement.
  async runStructured<S extends Schema.Schema.AnyNoContext>(
    _schema: S,
    _options: AiSessionRunParams<AiTool.Any>,
  ): Promise<Schema.Schema.Type<S>> {
    return todo();
    // const parser = structuredOutputParser(schema);
    // const result = await this.run({
    //   ...options,
    //   executableTools: [...(options.executableTools ?? []), parser.tool],
    // });
    // return parser.getResult(result);
  }
}

/**
 * Build a combined toolkit from the blueprint tools and the provided toolkit.
 */
const createToolkit = <Tools extends AiTool.Any>({
  toolkit,
  blueprints = [],
  toolIds = [],
}: Pick<AiSessionRunParams<Tools>, 'toolkit' | 'blueprints' | 'toolIds'>) =>
  Effect.gen(function* () {
    const blueprintToolkit = yield* ToolResolverService.resolveToolkit([
      ...blueprints.flatMap(({ tools }) => tools),
      ...toolIds,
    ]);
    const blueprintToolkitHandler: Context.Context<AiTool.ToHandler<AiTool.Any>> = yield* blueprintToolkit.toContext(
      ToolExecutionService.handlersFor(blueprintToolkit),
    );

    return yield* AiToolkit.merge(...[toolkit, blueprintToolkit].filter(isNotFalsy)).pipe(
      Effect.provide(blueprintToolkitHandler),
    ) as Effect.Effect<AiToolkit.ToHandler<any>, never, AiTool.ToHandler<Tools>>;
  });
