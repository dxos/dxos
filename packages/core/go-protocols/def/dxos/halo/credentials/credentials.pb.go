//
// Copyright 2022 DXOS.org
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.20.3
// source: dxos/halo/credentials.proto

package credentials

import (
	timeframe "github.com/dxos/dxos/proto/def/dxos/echo/timeframe"
	keys "github.com/dxos/dxos/proto/def/dxos/keys"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceType int32

const (
	DeviceType_UNKNOWN       DeviceType = 0
	DeviceType_BROWSER       DeviceType = 1
	DeviceType_NATIVE        DeviceType = 2
	DeviceType_AGENT         DeviceType = 3
	DeviceType_AGENT_MANAGED DeviceType = 4
	DeviceType_MOBILE        DeviceType = 5
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "UNKNOWN",
		1: "BROWSER",
		2: "NATIVE",
		3: "AGENT",
		4: "AGENT_MANAGED",
		5: "MOBILE",
	}
	DeviceType_value = map[string]int32{
		"UNKNOWN":       0,
		"BROWSER":       1,
		"NATIVE":        2,
		"AGENT":         3,
		"AGENT_MANAGED": 4,
		"MOBILE":        5,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_dxos_halo_credentials_proto_enumTypes[0].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_dxos_halo_credentials_proto_enumTypes[0]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{0}
}

// TODO(burdon): Consider union of capabilities; e.g., APPEND_ONLY, READ_ONLY, EPOCH_GENERATOR?
type SpaceMember_Role int32

const (
	SpaceMember_INVALID SpaceMember_Role = 0
	// / Manage members.
	SpaceMember_ADMIN SpaceMember_Role = 1
	// / Read and write.
	SpaceMember_EDITOR SpaceMember_Role = 2
	// / Read-only.
	SpaceMember_READER SpaceMember_Role = 3
	// / Admin that can't be removed.
	SpaceMember_OWNER SpaceMember_Role = 4
	// / Revoked membership.
	SpaceMember_REMOVED SpaceMember_Role = 5
)

// Enum value maps for SpaceMember_Role.
var (
	SpaceMember_Role_name = map[int32]string{
		0: "INVALID",
		1: "ADMIN",
		2: "EDITOR",
		3: "READER",
		4: "OWNER",
		5: "REMOVED",
	}
	SpaceMember_Role_value = map[string]int32{
		"INVALID": 0,
		"ADMIN":   1,
		"EDITOR":  2,
		"READER":  3,
		"OWNER":   4,
		"REMOVED": 5,
	}
)

func (x SpaceMember_Role) Enum() *SpaceMember_Role {
	p := new(SpaceMember_Role)
	*p = x
	return p
}

func (x SpaceMember_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpaceMember_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_dxos_halo_credentials_proto_enumTypes[1].Descriptor()
}

func (SpaceMember_Role) Type() protoreflect.EnumType {
	return &file_dxos_halo_credentials_proto_enumTypes[1]
}

func (x SpaceMember_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpaceMember_Role.Descriptor instead.
func (SpaceMember_Role) EnumDescriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{1, 0}
}

type AdmittedFeed_Designation int32

const (
	// / Classic general purpose feeds for both HALO and ECHO messages together. To be deprecated.
	AdmittedFeed_GENERAL AdmittedFeed_Designation = 0
	// / Contain system-level messages messages, such as credentials and epochs.
	AdmittedFeed_CONTROL AdmittedFeed_Designation = 1
	// / Database mutations.
	AdmittedFeed_DATA AdmittedFeed_Designation = 2
)

// Enum value maps for AdmittedFeed_Designation.
var (
	AdmittedFeed_Designation_name = map[int32]string{
		0: "GENERAL",
		1: "CONTROL",
		2: "DATA",
	}
	AdmittedFeed_Designation_value = map[string]int32{
		"GENERAL": 0,
		"CONTROL": 1,
		"DATA":    2,
	}
)

func (x AdmittedFeed_Designation) Enum() *AdmittedFeed_Designation {
	p := new(AdmittedFeed_Designation)
	*p = x
	return p
}

func (x AdmittedFeed_Designation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdmittedFeed_Designation) Descriptor() protoreflect.EnumDescriptor {
	return file_dxos_halo_credentials_proto_enumTypes[2].Descriptor()
}

func (AdmittedFeed_Designation) Type() protoreflect.EnumType {
	return &file_dxos_halo_credentials_proto_enumTypes[2]
}

func (x AdmittedFeed_Designation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdmittedFeed_Designation.Descriptor instead.
func (AdmittedFeed_Designation) EnumDescriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{4, 0}
}

// [ASSERTION]
type SpaceGenesis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceKey *keys.PublicKey `protobuf:"bytes,1,opt,name=space_key,json=spaceKey,proto3" json:"space_key,omitempty"` // Feeds belong to Spaces.
}

func (x *SpaceGenesis) Reset() {
	*x = SpaceGenesis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceGenesis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceGenesis) ProtoMessage() {}

func (x *SpaceGenesis) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceGenesis.ProtoReflect.Descriptor instead.
func (*SpaceGenesis) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{0}
}

func (x *SpaceGenesis) GetSpaceKey() *keys.PublicKey {
	if x != nil {
		return x.SpaceKey
	}
	return nil
}

// TODO(burdon): Reconcile with dxos.client.SpaceMember.
// [ASSERTION]: Agent is authorized to access Space.
type SpaceMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceKey *keys.PublicKey  `protobuf:"bytes,1,opt,name=space_key,json=spaceKey,proto3" json:"space_key,omitempty"`
	Role     SpaceMember_Role `protobuf:"varint,2,opt,name=role,proto3,enum=dxos.halo.credentials.SpaceMember_Role" json:"role,omitempty"`
	// TODO(burdon): Identity key?
	Profile *ProfileDocument `protobuf:"bytes,3,opt,name=profile,proto3,oneof" json:"profile,omitempty"`
	// / Genesis feed of the space.
	// / Needed so that the admitted member can start replicating the space based on this credential alone.
	GenesisFeedKey *keys.PublicKey `protobuf:"bytes,4,opt,name=genesis_feed_key,json=genesisFeedKey,proto3" json:"genesis_feed_key,omitempty"`
	// / Present to associate SpaceMember admissions with delegated invitations.
	InvitationCredentialId *keys.PublicKey `protobuf:"bytes,5,opt,name=invitation_credential_id,json=invitationCredentialId,proto3,oneof" json:"invitation_credential_id,omitempty"`
}

func (x *SpaceMember) Reset() {
	*x = SpaceMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpaceMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceMember) ProtoMessage() {}

func (x *SpaceMember) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceMember.ProtoReflect.Descriptor instead.
func (*SpaceMember) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{1}
}

func (x *SpaceMember) GetSpaceKey() *keys.PublicKey {
	if x != nil {
		return x.SpaceKey
	}
	return nil
}

func (x *SpaceMember) GetRole() SpaceMember_Role {
	if x != nil {
		return x.Role
	}
	return SpaceMember_INVALID
}

func (x *SpaceMember) GetProfile() *ProfileDocument {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *SpaceMember) GetGenesisFeedKey() *keys.PublicKey {
	if x != nil {
		return x.GenesisFeedKey
	}
	return nil
}

func (x *SpaceMember) GetInvitationCredentialId() *keys.PublicKey {
	if x != nil {
		return x.InvitationCredentialId
	}
	return nil
}

type MemberProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *ProfileDocument `protobuf:"bytes,3,opt,name=profile,proto3,oneof" json:"profile,omitempty"`
}

func (x *MemberProfile) Reset() {
	*x = MemberProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberProfile) ProtoMessage() {}

func (x *MemberProfile) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberProfile.ProtoReflect.Descriptor instead.
func (*MemberProfile) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{2}
}

func (x *MemberProfile) GetProfile() *ProfileDocument {
	if x != nil {
		return x.Profile
	}
	return nil
}

// [ASSERTION]: Device is authorized to sign messages for a given Agent (Identity).
// NOTE: Devices are Admitted to Identities.
type AuthorizedDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityKey *keys.PublicKey `protobuf:"bytes,1,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	DeviceKey   *keys.PublicKey `protobuf:"bytes,2,opt,name=device_key,json=deviceKey,proto3" json:"device_key,omitempty"` // Existing authorized device.
}

func (x *AuthorizedDevice) Reset() {
	*x = AuthorizedDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizedDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizedDevice) ProtoMessage() {}

func (x *AuthorizedDevice) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizedDevice.ProtoReflect.Descriptor instead.
func (*AuthorizedDevice) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{3}
}

func (x *AuthorizedDevice) GetIdentityKey() *keys.PublicKey {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

func (x *AuthorizedDevice) GetDeviceKey() *keys.PublicKey {
	if x != nil {
		return x.DeviceKey
	}
	return nil
}

// [ASSERTION]: Feed is admitted to the Space for replication.
// NOTE: Feeds are Admitted to Spaces.
type AdmittedFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceKey *keys.PublicKey `protobuf:"bytes,1,opt,name=space_key,json=spaceKey,proto3" json:"space_key,omitempty"`
	// / Owning identity.
	IdentityKey *keys.PublicKey `protobuf:"bytes,2,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"` // Could be derived.
	// / Owning device.
	DeviceKey *keys.PublicKey `protobuf:"bytes,3,opt,name=device_key,json=deviceKey,proto3" json:"device_key,omitempty"`
	// / Controls sets the feed designation.
	// / Feeds with different designations are consumed by separate pipelines.
	Designation AdmittedFeed_Designation `protobuf:"varint,4,opt,name=designation,proto3,enum=dxos.halo.credentials.AdmittedFeed_Designation" json:"designation,omitempty"`
}

func (x *AdmittedFeed) Reset() {
	*x = AdmittedFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdmittedFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdmittedFeed) ProtoMessage() {}

func (x *AdmittedFeed) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdmittedFeed.ProtoReflect.Descriptor instead.
func (*AdmittedFeed) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{4}
}

func (x *AdmittedFeed) GetSpaceKey() *keys.PublicKey {
	if x != nil {
		return x.SpaceKey
	}
	return nil
}

func (x *AdmittedFeed) GetIdentityKey() *keys.PublicKey {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

func (x *AdmittedFeed) GetDeviceKey() *keys.PublicKey {
	if x != nil {
		return x.DeviceKey
	}
	return nil
}

func (x *AdmittedFeed) GetDesignation() AdmittedFeed_Designation {
	if x != nil {
		return x.Designation
	}
	return AdmittedFeed_GENERAL
}

// [ASSERTION]: New epoch is started in the space.
// Subject is the space.
type Epoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Epoch number.
	Number uint32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// / Id of the previous epoch. Identified by the credential id.
	PreviousId *keys.PublicKey `protobuf:"bytes,2,opt,name=previous_id,json=previousId,proto3,oneof" json:"previous_id,omitempty"`
	// TODO(dmaretskyi): Deprecate.
	// / Epoch start timeframe. Indexes correspond to last mutations included into the snapshot.
	Timeframe *timeframe.TimeframeVector `protobuf:"bytes,10,opt,name=timeframe,proto3" json:"timeframe,omitempty"`
	// / Epoch start snapshot.
	SnapshotCid *string `protobuf:"bytes,11,opt,name=snapshot_cid,json=snapshotCid,proto3,oneof" json:"snapshot_cid,omitempty"`
	// / URL of the automerge document representing the space root.
	AutomergeRoot *string `protobuf:"bytes,12,opt,name=automerge_root,json=automergeRoot,proto3,oneof" json:"automerge_root,omitempty"`
}

func (x *Epoch) Reset() {
	*x = Epoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Epoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Epoch) ProtoMessage() {}

func (x *Epoch) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Epoch.ProtoReflect.Descriptor instead.
func (*Epoch) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{5}
}

func (x *Epoch) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Epoch) GetPreviousId() *keys.PublicKey {
	if x != nil {
		return x.PreviousId
	}
	return nil
}

func (x *Epoch) GetTimeframe() *timeframe.TimeframeVector {
	if x != nil {
		return x.Timeframe
	}
	return nil
}

func (x *Epoch) GetSnapshotCid() string {
	if x != nil && x.SnapshotCid != nil {
		return *x.SnapshotCid
	}
	return ""
}

func (x *Epoch) GetAutomergeRoot() string {
	if x != nil && x.AutomergeRoot != nil {
		return *x.AutomergeRoot
	}
	return ""
}

// / [ASSERTION]: Associates a space that will implement Agent's HALO with an Identity.
type HaloSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityKey *keys.PublicKey `protobuf:"bytes,1,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	// / Space key.
	HaloKey *keys.PublicKey `protobuf:"bytes,2,opt,name=halo_key,json=haloKey,proto3" json:"halo_key,omitempty"`
}

func (x *HaloSpace) Reset() {
	*x = HaloSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HaloSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HaloSpace) ProtoMessage() {}

func (x *HaloSpace) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HaloSpace.ProtoReflect.Descriptor instead.
func (*HaloSpace) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{6}
}

func (x *HaloSpace) GetIdentityKey() *keys.PublicKey {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

func (x *HaloSpace) GetHaloKey() *keys.PublicKey {
	if x != nil {
		return x.HaloKey
	}
	return nil
}

// / [ASSERTION]: Grants recovery permissions to a recovery key.
type IdentityRecovery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityKey *keys.PublicKey `protobuf:"bytes,1,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	// / Public key derived from the recovery seedphrase.
	RecoveryKey *keys.PublicKey `protobuf:"bytes,2,opt,name=recovery_key,json=recoveryKey,proto3" json:"recovery_key,omitempty"`
}

func (x *IdentityRecovery) Reset() {
	*x = IdentityRecovery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityRecovery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityRecovery) ProtoMessage() {}

func (x *IdentityRecovery) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityRecovery.ProtoReflect.Descriptor instead.
func (*IdentityRecovery) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{7}
}

func (x *IdentityRecovery) GetIdentityKey() *keys.PublicKey {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

func (x *IdentityRecovery) GetRecoveryKey() *keys.PublicKey {
	if x != nil {
		return x.RecoveryKey
	}
	return nil
}

type ProfileDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName *string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
	AvatarCid   *string `protobuf:"bytes,2,opt,name=avatar_cid,json=avatarCid,proto3,oneof" json:"avatar_cid,omitempty"`
	// / Custom user data.
	Data *structpb.Struct `protobuf:"bytes,10,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *ProfileDocument) Reset() {
	*x = ProfileDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileDocument) ProtoMessage() {}

func (x *ProfileDocument) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileDocument.ProtoReflect.Descriptor instead.
func (*ProfileDocument) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{8}
}

func (x *ProfileDocument) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *ProfileDocument) GetAvatarCid() string {
	if x != nil && x.AvatarCid != nil {
		return *x.AvatarCid
	}
	return ""
}

func (x *ProfileDocument) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

// / [ASSERTION]: Sets profile information.
type IdentityProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(dmaretskyi): This could also be a DXNS link or stored in user's public HALO (we could also index the public HALO in the DMG).
	Profile *ProfileDocument `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *IdentityProfile) Reset() {
	*x = IdentityProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityProfile) ProtoMessage() {}

func (x *IdentityProfile) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityProfile.ProtoReflect.Descriptor instead.
func (*IdentityProfile) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{9}
}

func (x *IdentityProfile) GetProfile() *ProfileDocument {
	if x != nil {
		return x.Profile
	}
	return nil
}

type DeviceProfileDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(mykola): Use for user defined label.
	Label           *string     `protobuf:"bytes,1,opt,name=label,proto3,oneof" json:"label,omitempty"`
	Platform        *string     `protobuf:"bytes,2,opt,name=platform,proto3,oneof" json:"platform,omitempty"`
	PlatformVersion *string     `protobuf:"bytes,3,opt,name=platform_version,json=platformVersion,proto3,oneof" json:"platform_version,omitempty"`
	Architecture    *string     `protobuf:"bytes,4,opt,name=architecture,proto3,oneof" json:"architecture,omitempty"`
	Os              *string     `protobuf:"bytes,5,opt,name=os,proto3,oneof" json:"os,omitempty"`
	OsVersion       *string     `protobuf:"bytes,6,opt,name=os_version,json=osVersion,proto3,oneof" json:"os_version,omitempty"`
	Type            *DeviceType `protobuf:"varint,7,opt,name=type,proto3,enum=dxos.halo.credentials.DeviceType,oneof" json:"type,omitempty"`
}

func (x *DeviceProfileDocument) Reset() {
	*x = DeviceProfileDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceProfileDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceProfileDocument) ProtoMessage() {}

func (x *DeviceProfileDocument) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceProfileDocument.ProtoReflect.Descriptor instead.
func (*DeviceProfileDocument) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{10}
}

func (x *DeviceProfileDocument) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *DeviceProfileDocument) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *DeviceProfileDocument) GetPlatformVersion() string {
	if x != nil && x.PlatformVersion != nil {
		return *x.PlatformVersion
	}
	return ""
}

func (x *DeviceProfileDocument) GetArchitecture() string {
	if x != nil && x.Architecture != nil {
		return *x.Architecture
	}
	return ""
}

func (x *DeviceProfileDocument) GetOs() string {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return ""
}

func (x *DeviceProfileDocument) GetOsVersion() string {
	if x != nil && x.OsVersion != nil {
		return *x.OsVersion
	}
	return ""
}

func (x *DeviceProfileDocument) GetType() DeviceType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DeviceType_UNKNOWN
}

// / [ASSERTION]: Sets device profile information.
type DeviceProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *DeviceProfileDocument `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *DeviceProfile) Reset() {
	*x = DeviceProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceProfile) ProtoMessage() {}

func (x *DeviceProfile) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceProfile.ProtoReflect.Descriptor instead.
func (*DeviceProfile) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{11}
}

func (x *DeviceProfile) GetProfile() *DeviceProfileDocument {
	if x != nil {
		return x.Profile
	}
	return nil
}

// / [ASSERTION]: Sets default space for identity.
type DefaultSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId string `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
}

func (x *DefaultSpace) Reset() {
	*x = DefaultSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultSpace) ProtoMessage() {}

func (x *DefaultSpace) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultSpace.ProtoReflect.Descriptor instead.
func (*DefaultSpace) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{12}
}

func (x *DefaultSpace) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

// [ASSERTION]: Identity is authorized to access a KUBE.
type KubeAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KubeKey      *keys.PublicKey `protobuf:"bytes,1,opt,name=kube_key,json=kubeKey,proto3" json:"kube_key,omitempty"`
	IdentityKey  *keys.PublicKey `protobuf:"bytes,2,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	Capabilities []string        `protobuf:"bytes,3,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *KubeAccess) Reset() {
	*x = KubeAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubeAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubeAccess) ProtoMessage() {}

func (x *KubeAccess) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubeAccess.ProtoReflect.Descriptor instead.
func (*KubeAccess) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{13}
}

func (x *KubeAccess) GetKubeKey() *keys.PublicKey {
	if x != nil {
		return x.KubeKey
	}
	return nil
}

func (x *KubeAccess) GetIdentityKey() *keys.PublicKey {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

func (x *KubeAccess) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

// [ASSERTION]: Identity is authorized to access an external server.
type ServiceAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerName     string           `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	ServerMetadata *structpb.Struct `protobuf:"bytes,2,opt,name=server_metadata,json=serverMetadata,proto3,oneof" json:"server_metadata,omitempty"`
	ServerKey      *keys.PublicKey  `protobuf:"bytes,3,opt,name=server_key,json=serverKey,proto3" json:"server_key,omitempty"`
	IdentityKey    *keys.PublicKey  `protobuf:"bytes,4,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	Capabilities   []string         `protobuf:"bytes,5,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *ServiceAccess) Reset() {
	*x = ServiceAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAccess) ProtoMessage() {}

func (x *ServiceAccess) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAccess.ProtoReflect.Descriptor instead.
func (*ServiceAccess) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{14}
}

func (x *ServiceAccess) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *ServiceAccess) GetServerMetadata() *structpb.Struct {
	if x != nil {
		return x.ServerMetadata
	}
	return nil
}

func (x *ServiceAccess) GetServerKey() *keys.PublicKey {
	if x != nil {
		return x.ServerKey
	}
	return nil
}

func (x *ServiceAccess) GetIdentityKey() *keys.PublicKey {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

func (x *ServiceAccess) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

// / Metadata associated with a key.
// / Subject must be a key being referenced.
type KeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
}

func (x *KeyInfo) Reset() {
	*x = KeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyInfo) ProtoMessage() {}

func (x *KeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyInfo.ProtoReflect.Descriptor instead.
func (*KeyInfo) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{15}
}

func (x *KeyInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// / Assertion for agents authenticating in the space swarm.
type Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Auth) Reset() {
	*x = Auth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auth) ProtoMessage() {}

func (x *Auth) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auth.ProtoReflect.Descriptor instead.
func (*Auth) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{16}
}

type Claim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *keys.PublicKey `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Subject of claim (e.g., Agent, Device, Feed).
	Assertion *anypb.Any      `protobuf:"bytes,2,opt,name=assertion,proto3" json:"assertion,omitempty"`
}

func (x *Claim) Reset() {
	*x = Claim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim) ProtoMessage() {}

func (x *Claim) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim.ProtoReflect.Descriptor instead.
func (*Claim) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{17}
}

func (x *Claim) GetId() *keys.PublicKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Claim) GetAssertion() *anypb.Any {
	if x != nil {
		return x.Assertion
	}
	return nil
}

type Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // Type of proof (e.g., "Ed25519Signature2020").
	CreationDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	Signer       *keys.PublicKey        `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`     // Entity that created the proof (e.g., Agent, Device, Space).
	Nonce        []byte                 `protobuf:"bytes,4,opt,name=nonce,proto3,oneof" json:"nonce,omitempty"` // Used in Presentations to protect against replay attacks.
	// / Signature (excluded from signed data).
	Value []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	// *
	// Must be present if signer is not credential issuer.
	// Establishes the authority of the signer. Proves that the signer can issue such credentials.
	// Excluded from signed data.
	Chain *Chain `protobuf:"bytes,6,opt,name=chain,proto3,oneof" json:"chain,omitempty"`
}

func (x *Proof) Reset() {
	*x = Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{18}
}

func (x *Proof) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Proof) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *Proof) GetSigner() *keys.PublicKey {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *Proof) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Proof) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Proof) GetChain() *Chain {
	if x != nil {
		return x.Chain
	}
	return nil
}

// *
// A chain of credentials that establishes the delegated authority to issue new credentials.
// Each key in the chain has an assotiated credential that establishes the authrity of that specific key.
//
// Example:
//
//	Alice/Device-2 => Alice/Device-1 => Alice
//
// This chain would include 2 credentials:
//  1. Giving Alice/Device-2 the authority to issue credentials on behalf of Alice, signed by Alice/Device-1.
//  2. Giving Alice/Device-1 the authority to issue credentials on behalf of Alice, signed by Alice.
type Chain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Credential that authorizes the subject to issue new credentials (can be recursive).
	Credential *Credential `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *Chain) Reset() {
	*x = Chain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chain) ProtoMessage() {}

func (x *Chain) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chain.ProtoReflect.Descriptor instead.
func (*Chain) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{19}
}

func (x *Chain) GetCredential() *Credential {
	if x != nil {
		return x.Credential
	}
	return nil
}

type Credential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  *keys.PublicKey        `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`   // Credential identifier (e.g., for storage indexing).
	Issuer              *keys.PublicKey        `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"` // key = { Space (genesis) | Identity (genesis) | (authorized) Device }
	IssuanceDate        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=issuance_date,json=issuanceDate,proto3" json:"issuance_date,omitempty"`
	ExpirationDate      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expiration_date,json=expirationDate,proto3,oneof" json:"expiration_date,omitempty"`
	ExpirationRef       []byte                 `protobuf:"bytes,5,opt,name=expiration_ref,json=expirationRef,proto3,oneof" json:"expiration_ref,omitempty"` // Could reference blockchain or epoch number.
	Subject             *Claim                 `protobuf:"bytes,10,opt,name=subject,proto3" json:"subject,omitempty"`
	Proof               *Proof                 `protobuf:"bytes,11,opt,name=proof,proto3,oneof" json:"proof,omitempty"`
	ParentCredentialIds []*keys.PublicKey      `protobuf:"bytes,12,rep,name=parent_credential_ids,json=parentCredentialIds,proto3" json:"parent_credential_ids,omitempty"` // Can be used for resolution of concurrent mutually exclusive actions
}

func (x *Credential) Reset() {
	*x = Credential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{20}
}

func (x *Credential) GetId() *keys.PublicKey {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Credential) GetIssuer() *keys.PublicKey {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *Credential) GetIssuanceDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuanceDate
	}
	return nil
}

func (x *Credential) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Credential) GetExpirationRef() []byte {
	if x != nil {
		return x.ExpirationRef
	}
	return nil
}

func (x *Credential) GetSubject() *Claim {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Credential) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *Credential) GetParentCredentialIds() []*keys.PublicKey {
	if x != nil {
		return x.ParentCredentialIds
	}
	return nil
}

type Presentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credentials []*Credential `protobuf:"bytes,1,rep,name=credentials,proto3" json:"credentials,omitempty"`
	Proofs      []*Proof      `protobuf:"bytes,2,rep,name=proofs,proto3" json:"proofs,omitempty"`
}

func (x *Presentation) Reset() {
	*x = Presentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dxos_halo_credentials_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presentation) ProtoMessage() {}

func (x *Presentation) ProtoReflect() protoreflect.Message {
	mi := &file_dxos_halo_credentials_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presentation.ProtoReflect.Descriptor instead.
func (*Presentation) Descriptor() ([]byte, []int) {
	return file_dxos_halo_credentials_proto_rawDescGZIP(), []int{21}
}

func (x *Presentation) GetCredentials() []*Credential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *Presentation) GetProofs() []*Proof {
	if x != nil {
		return x.Proofs
	}
	return nil
}

var File_dxos_halo_credentials_proto protoreflect.FileDescriptor

var file_dxos_halo_credentials_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x64, 0x78, 0x6f, 0x73, 0x2f, 0x68, 0x61, 0x6c, 0x6f, 0x2f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x64,
	0x78, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x6c, 0x6f, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x64, 0x78, 0x6f, 0x73, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x64, 0x78, 0x6f, 0x73, 0x2f,
	0x6b, 0x65, 0x79, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x0c, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x64, 0x78, 0x6f, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x52, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x22, 0xd2, 0x03,
	0x0a, 0x0b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a,
	0x09, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x3b, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x6c, 0x6f, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x45, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x6c, 0x6f, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f,
	0x66, 0x65, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x46, 0x65, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x12, 0x53, 0x0a, 0x18, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x01, 0x52, 0x16,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x22, 0x4e, 0x0a, 0x04, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x49,
	0x54, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x05, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x22, 0x62, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x6c, 0x6f,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x22, 0xb5, 0x02, 0x0a, 0x0c, 0x41, 0x64,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x46, 0x65, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x64, 0x78, 0x6f, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x52, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a,
	0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x78, 0x6f,
	0x73, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x6c, 0x6f, 0x2e, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x46, 0x65, 0x65, 0x64, 0x2e, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a,
	0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x02, 0x22, 0xa7, 0x02, 0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x00,
	0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x42, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x74,
	0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x63, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x63, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0x75, 0x0a, 0x09, 0x48,
	0x61, 0x6c, 0x6f, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65,
	0x79, 0x12, 0x2f, 0x0a, 0x08, 0x68, 0x61, 0x6c, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x68, 0x61, 0x6c, 0x6f, 0x4b,
	0x65, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x64, 0x78, 0x6f, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x22, 0xb8, 0x01, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x43, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x48, 0x02, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x63, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e,
	0x68, 0x61, 0x6c, 0x6f, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xfd, 0x02, 0x0a, 0x15, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x02, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x6c, 0x6f, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x06, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6f,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x0d, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x78,
	0x6f, 0x73, 0x2e, 0x68, 0x61, 0x6c, 0x6f, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x22, 0x29, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x9a, 0x01,
	0x0a, 0x0a, 0x4b, 0x75, 0x62, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x08,
	0x6b, 0x75, 0x62, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x6b, 0x75, 0x62, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a,
	0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x0d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x0c, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x07, 0x4b, 0x65,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x06, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x22,
	0x61, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32,
	0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x88, 0x02, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x37, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x6c, 0x6f, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x01, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x4a, 0x0a,
	0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x78, 0x6f,
	0x73, 0x2e, 0x68, 0x61, 0x6c, 0x6f, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x8f, 0x04, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x73,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x78, 0x6f, 0x73,
	0x2e, 0x68, 0x61, 0x6c, 0x6f, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x37, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x6c, 0x6f, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x03, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x15, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e,
	0x6b, 0x65, 0x79, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x13,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x49, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x66, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x89, 0x01, 0x0a, 0x0c,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x6c, 0x6f, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x78, 0x6f, 0x73, 0x2e, 0x68, 0x61, 0x6c, 0x6f, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52,
	0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x2a, 0x5c, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x47, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x42,
	0x49, 0x4c, 0x45, 0x10, 0x05, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x78, 0x6f, 0x73, 0x2f, 0x64, 0x78, 0x6f, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x66, 0x2f, 0x64, 0x78, 0x6f, 0x73, 0x2f, 0x68, 0x61, 0x6c,
	0x6f, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dxos_halo_credentials_proto_rawDescOnce sync.Once
	file_dxos_halo_credentials_proto_rawDescData = file_dxos_halo_credentials_proto_rawDesc
)

func file_dxos_halo_credentials_proto_rawDescGZIP() []byte {
	file_dxos_halo_credentials_proto_rawDescOnce.Do(func() {
		file_dxos_halo_credentials_proto_rawDescData = protoimpl.X.CompressGZIP(file_dxos_halo_credentials_proto_rawDescData)
	})
	return file_dxos_halo_credentials_proto_rawDescData
}

var file_dxos_halo_credentials_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_dxos_halo_credentials_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_dxos_halo_credentials_proto_goTypes = []interface{}{
	(DeviceType)(0),                   // 0: dxos.halo.credentials.DeviceType
	(SpaceMember_Role)(0),             // 1: dxos.halo.credentials.SpaceMember.Role
	(AdmittedFeed_Designation)(0),     // 2: dxos.halo.credentials.AdmittedFeed.Designation
	(*SpaceGenesis)(nil),              // 3: dxos.halo.credentials.SpaceGenesis
	(*SpaceMember)(nil),               // 4: dxos.halo.credentials.SpaceMember
	(*MemberProfile)(nil),             // 5: dxos.halo.credentials.MemberProfile
	(*AuthorizedDevice)(nil),          // 6: dxos.halo.credentials.AuthorizedDevice
	(*AdmittedFeed)(nil),              // 7: dxos.halo.credentials.AdmittedFeed
	(*Epoch)(nil),                     // 8: dxos.halo.credentials.Epoch
	(*HaloSpace)(nil),                 // 9: dxos.halo.credentials.HaloSpace
	(*IdentityRecovery)(nil),          // 10: dxos.halo.credentials.IdentityRecovery
	(*ProfileDocument)(nil),           // 11: dxos.halo.credentials.ProfileDocument
	(*IdentityProfile)(nil),           // 12: dxos.halo.credentials.IdentityProfile
	(*DeviceProfileDocument)(nil),     // 13: dxos.halo.credentials.DeviceProfileDocument
	(*DeviceProfile)(nil),             // 14: dxos.halo.credentials.DeviceProfile
	(*DefaultSpace)(nil),              // 15: dxos.halo.credentials.DefaultSpace
	(*KubeAccess)(nil),                // 16: dxos.halo.credentials.KubeAccess
	(*ServiceAccess)(nil),             // 17: dxos.halo.credentials.ServiceAccess
	(*KeyInfo)(nil),                   // 18: dxos.halo.credentials.KeyInfo
	(*Auth)(nil),                      // 19: dxos.halo.credentials.Auth
	(*Claim)(nil),                     // 20: dxos.halo.credentials.Claim
	(*Proof)(nil),                     // 21: dxos.halo.credentials.Proof
	(*Chain)(nil),                     // 22: dxos.halo.credentials.Chain
	(*Credential)(nil),                // 23: dxos.halo.credentials.Credential
	(*Presentation)(nil),              // 24: dxos.halo.credentials.Presentation
	(*keys.PublicKey)(nil),            // 25: dxos.keys.PublicKey
	(*timeframe.TimeframeVector)(nil), // 26: dxos.echo.timeframe.TimeframeVector
	(*structpb.Struct)(nil),           // 27: google.protobuf.Struct
	(*anypb.Any)(nil),                 // 28: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),     // 29: google.protobuf.Timestamp
}
var file_dxos_halo_credentials_proto_depIdxs = []int32{
	25, // 0: dxos.halo.credentials.SpaceGenesis.space_key:type_name -> dxos.keys.PublicKey
	25, // 1: dxos.halo.credentials.SpaceMember.space_key:type_name -> dxos.keys.PublicKey
	1,  // 2: dxos.halo.credentials.SpaceMember.role:type_name -> dxos.halo.credentials.SpaceMember.Role
	11, // 3: dxos.halo.credentials.SpaceMember.profile:type_name -> dxos.halo.credentials.ProfileDocument
	25, // 4: dxos.halo.credentials.SpaceMember.genesis_feed_key:type_name -> dxos.keys.PublicKey
	25, // 5: dxos.halo.credentials.SpaceMember.invitation_credential_id:type_name -> dxos.keys.PublicKey
	11, // 6: dxos.halo.credentials.MemberProfile.profile:type_name -> dxos.halo.credentials.ProfileDocument
	25, // 7: dxos.halo.credentials.AuthorizedDevice.identity_key:type_name -> dxos.keys.PublicKey
	25, // 8: dxos.halo.credentials.AuthorizedDevice.device_key:type_name -> dxos.keys.PublicKey
	25, // 9: dxos.halo.credentials.AdmittedFeed.space_key:type_name -> dxos.keys.PublicKey
	25, // 10: dxos.halo.credentials.AdmittedFeed.identity_key:type_name -> dxos.keys.PublicKey
	25, // 11: dxos.halo.credentials.AdmittedFeed.device_key:type_name -> dxos.keys.PublicKey
	2,  // 12: dxos.halo.credentials.AdmittedFeed.designation:type_name -> dxos.halo.credentials.AdmittedFeed.Designation
	25, // 13: dxos.halo.credentials.Epoch.previous_id:type_name -> dxos.keys.PublicKey
	26, // 14: dxos.halo.credentials.Epoch.timeframe:type_name -> dxos.echo.timeframe.TimeframeVector
	25, // 15: dxos.halo.credentials.HaloSpace.identity_key:type_name -> dxos.keys.PublicKey
	25, // 16: dxos.halo.credentials.HaloSpace.halo_key:type_name -> dxos.keys.PublicKey
	25, // 17: dxos.halo.credentials.IdentityRecovery.identity_key:type_name -> dxos.keys.PublicKey
	25, // 18: dxos.halo.credentials.IdentityRecovery.recovery_key:type_name -> dxos.keys.PublicKey
	27, // 19: dxos.halo.credentials.ProfileDocument.data:type_name -> google.protobuf.Struct
	11, // 20: dxos.halo.credentials.IdentityProfile.profile:type_name -> dxos.halo.credentials.ProfileDocument
	0,  // 21: dxos.halo.credentials.DeviceProfileDocument.type:type_name -> dxos.halo.credentials.DeviceType
	13, // 22: dxos.halo.credentials.DeviceProfile.profile:type_name -> dxos.halo.credentials.DeviceProfileDocument
	25, // 23: dxos.halo.credentials.KubeAccess.kube_key:type_name -> dxos.keys.PublicKey
	25, // 24: dxos.halo.credentials.KubeAccess.identity_key:type_name -> dxos.keys.PublicKey
	27, // 25: dxos.halo.credentials.ServiceAccess.server_metadata:type_name -> google.protobuf.Struct
	25, // 26: dxos.halo.credentials.ServiceAccess.server_key:type_name -> dxos.keys.PublicKey
	25, // 27: dxos.halo.credentials.ServiceAccess.identity_key:type_name -> dxos.keys.PublicKey
	25, // 28: dxos.halo.credentials.Claim.id:type_name -> dxos.keys.PublicKey
	28, // 29: dxos.halo.credentials.Claim.assertion:type_name -> google.protobuf.Any
	29, // 30: dxos.halo.credentials.Proof.creation_date:type_name -> google.protobuf.Timestamp
	25, // 31: dxos.halo.credentials.Proof.signer:type_name -> dxos.keys.PublicKey
	22, // 32: dxos.halo.credentials.Proof.chain:type_name -> dxos.halo.credentials.Chain
	23, // 33: dxos.halo.credentials.Chain.credential:type_name -> dxos.halo.credentials.Credential
	25, // 34: dxos.halo.credentials.Credential.id:type_name -> dxos.keys.PublicKey
	25, // 35: dxos.halo.credentials.Credential.issuer:type_name -> dxos.keys.PublicKey
	29, // 36: dxos.halo.credentials.Credential.issuance_date:type_name -> google.protobuf.Timestamp
	29, // 37: dxos.halo.credentials.Credential.expiration_date:type_name -> google.protobuf.Timestamp
	20, // 38: dxos.halo.credentials.Credential.subject:type_name -> dxos.halo.credentials.Claim
	21, // 39: dxos.halo.credentials.Credential.proof:type_name -> dxos.halo.credentials.Proof
	25, // 40: dxos.halo.credentials.Credential.parent_credential_ids:type_name -> dxos.keys.PublicKey
	23, // 41: dxos.halo.credentials.Presentation.credentials:type_name -> dxos.halo.credentials.Credential
	21, // 42: dxos.halo.credentials.Presentation.proofs:type_name -> dxos.halo.credentials.Proof
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_dxos_halo_credentials_proto_init() }
func file_dxos_halo_credentials_proto_init() {
	if File_dxos_halo_credentials_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dxos_halo_credentials_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceGenesis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpaceMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizedDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdmittedFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Epoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HaloSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityRecovery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceProfileDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubeAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Auth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dxos_halo_credentials_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dxos_halo_credentials_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_dxos_halo_credentials_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_dxos_halo_credentials_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_dxos_halo_credentials_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_dxos_halo_credentials_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_dxos_halo_credentials_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_dxos_halo_credentials_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_dxos_halo_credentials_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_dxos_halo_credentials_proto_msgTypes[20].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dxos_halo_credentials_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dxos_halo_credentials_proto_goTypes,
		DependencyIndexes: file_dxos_halo_credentials_proto_depIdxs,
		EnumInfos:         file_dxos_halo_credentials_proto_enumTypes,
		MessageInfos:      file_dxos_halo_credentials_proto_msgTypes,
	}.Build()
	File_dxos_halo_credentials_proto = out.File
	file_dxos_halo_credentials_proto_rawDesc = nil
	file_dxos_halo_credentials_proto_goTypes = nil
	file_dxos_halo_credentials_proto_depIdxs = nil
}
