// Code generated by protoc-gen-go-dxrpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-dxrpc v0.0.1
// - protoc              v3.20.3
// source: dxos/service/publisher.proto

package publisher

import (
	context "context"
	errors "errors"
	dxrpc "github.com/dxos/dxos/dxrpc"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the dxrpc package it is being compiled against.
const _ = dxrpc.SupportPackageIsVersion1

// PublisherClient is the client API for Publisher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublisherClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...dxrpc.CallOption) (*PublishResponse, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...dxrpc.CallOption) (*ListResponse, error)
	Reset(ctx context.Context, in *emptypb.Empty, opts ...dxrpc.CallOption) (*ResetResponse, error)
}

type publisherClient struct {
	cc dxrpc.ClientConnInterface
}

func NewPublisherClient(cc dxrpc.ClientConnInterface) PublisherClient {
	return &publisherClient{cc}
}

func (c *publisherClient) Publish(ctx context.Context, in *PublishRequest, opts ...dxrpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "dxos.service.publisher.Publisher.Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherClient) List(ctx context.Context, in *emptypb.Empty, opts ...dxrpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "dxos.service.publisher.Publisher.List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherClient) Reset(ctx context.Context, in *emptypb.Empty, opts ...dxrpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, "dxos.service.publisher.Publisher.Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublisherServer is the server API for Publisher service.
// All implementations must embed UnimplementedPublisherServer
// for forward compatibility
type PublisherServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	List(context.Context, *emptypb.Empty) (*ListResponse, error)
	Reset(context.Context, *emptypb.Empty) (*ResetResponse, error)
	mustEmbedUnimplementedPublisherServer()
}

// UnimplementedPublisherServer must be embedded to have forward compatible implementations.
type UnimplementedPublisherServer struct {
}

func (UnimplementedPublisherServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, errors.New("method Publish not implemented")
}
func (UnimplementedPublisherServer) List(context.Context, *emptypb.Empty) (*ListResponse, error) {
	return nil, errors.New("method List not implemented")
}
func (UnimplementedPublisherServer) Reset(context.Context, *emptypb.Empty) (*ResetResponse, error) {
	return nil, errors.New("method Reset not implemented")
}
func (UnimplementedPublisherServer) mustEmbedUnimplementedPublisherServer() {}

// UnsafePublisherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublisherServer will
// result in compilation errors.
type UnsafePublisherServer interface {
	mustEmbedUnimplementedPublisherServer()
}

func RegisterPublisherServer(s dxrpc.ServiceRegistrar, srv PublisherServer) {
	s.RegisterService(&Publisher_ServiceDesc, srv)
}

func _Publisher_Publish_Handler(srv interface{}, ctx context.Context, dec func(proto.Message) error) (proto.Message, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(PublisherServer).Publish(ctx, in)
}

func _Publisher_List_Handler(srv interface{}, ctx context.Context, dec func(proto.Message) error) (proto.Message, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(PublisherServer).List(ctx, in)
}

func _Publisher_Reset_Handler(srv interface{}, ctx context.Context, dec func(proto.Message) error) (proto.Message, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	return srv.(PublisherServer).Reset(ctx, in)
}

// Publisher_ServiceDesc is the dxrpc.ServiceDesc for Publisher service.
// It's only intended for direct use with dxrpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Publisher_ServiceDesc = dxrpc.ServiceDesc{
	ServiceName: "dxos.service.publisher.Publisher",
	HandlerType: (*PublisherServer)(nil),
	Methods: []dxrpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Publisher_Publish_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Publisher_List_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _Publisher_Reset_Handler,
		},
	},
	Streams:  []dxrpc.StreamDesc{},
	Metadata: "dxos/service/publisher.proto",
}
