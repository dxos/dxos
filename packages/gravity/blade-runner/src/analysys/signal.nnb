{
    "cells": [
        {
            "language": "shellscript",
            "source": [
                "## Uncomment this to install missing dependencies\n# npm install danfojs-node"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const dfd = require('danfojs-node') as typeof import('danfojs-node');\nconst df = await dfd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv\")\n\nconst layout = {\n    title: 'A financial charts',\n    xaxis: {\n        title: 'Date',\n    },\n    yaxis: {\n        title: 'Count',\n    }\n}\n\nconst new_df = df.set_index({ key: \"Date\" })\nnew_df.plot(\"plot_div\").line({ columns: [\"AAPL.Open\", \"AAPL.High\"], layout: layout })"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.error",
                            "value": {
                                "name": "Error",
                                "message": "Cannot find module 'danfojs-node'\nRequire stack:\n- <repl>",
                                "stack": "    at Function.Module._resolveFilename (node:internal/modules/cjs/loader:995:15)\n    at Function.Module._resolveFilename.sharedData.moduleResolveFilenameHook.installedValue [as _resolveFilename] (/Users/dmaretskyi/.vscode/extensions/donjayamanne.typescript-notebook-2.0.6/resources/scripts/node_modules/@cspotcode/source-map-support/source-map-support.js:679:30)\n    at Function.Module._load (node:internal/modules/cjs/loader:841:27)\n    at Function._._load (/Users/dmaretskyi/.vscode/extensions/donjayamanne.typescript-notebook-2.0.6/out/extension/server/index.js:2:115372)\n    at Module.require (node:internal/modules/cjs/loader:1061:19)\n    at require (node:internal/modules/cjs/helpers:103:18)\n    at <Cell 2> [1, 0]\n    at <Cell 2> [16, 46]\n    at Script.runInContext (node:vm:141:12)\n    at Script.runInNewContext (node:vm:146:17)"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "process.chdir('/Users/dmaretskyi/Projects/protocols')"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "process.cwd()"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m'/Users/dmaretskyi/Projects/protocols/packages/gravity/kube-testing/src/analysys'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "import { LogReader } from '/Users/dmaretskyi/Projects/protocols/packages/gravity/blade-runner/dist/lib/node/index.cjs' "
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { readFileSync } from 'fs';\nimport { LogReader } from '/Users/dmaretskyi/Projects/protocols/packages/gravity/blade-runner/dist/lib/node/index.cjs' \nconst dfd = require('danfojs-node');\nconst reader = new LogReader();\nconst { results } = JSON.parse(readFileSync('/Users/dmaretskyi/Projects/protocols/packages/gravity/blade-runner/out/results/2023-05-09T10:41:20-0a6f/test.json', 'utf-8'))\nfor(const { logFile } of Object.values(results.agents)) {\n  // console.log('add', { logFile })\n  reader.addFile(logFile)\n}\n\nconst messages = new Map<string, { sent: number, received: number }>();\n\nfor await(const entry of reader) {\n  if(entry.message !== 'dxos.test.signal') {\n    continue;\n  }\n  const data: TraceEvent = entry.context;\n\n  switch(data.type) {\n    case 'SENT_MESSAGE':\n      if(!messages.has(data.message)) {\n        messages.set(data.message, { sent: 0, received: 0})\n      }\n      messages.get(data.message)!.sent = entry.timestamp;\n      break;\n    case 'RECEIVE_MESSAGE':\n      if(!messages.has(data.message)) {\n        messages.set(data.message, { sent: 0, received: 0})\n      }\n      messages.get(data.message)!.received = entry.timestamp;\n      break;\n  }\n}\n\nconst lagTimes = new dfd.Series(Array.from(messages.values()).map(x => x.received - x.sent).filter(x => x > 0 && x < 100))\nlagTimes.plot(\"plot_div\").hist()\n// lagTimes"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style>",
                                "    <script src=\"https://cdn.plot.ly/plotly-2.3.0.min.js\"></script>",
                                "    <div id=\"987b33d88ad1459db82c022f5f4d168e\"></div>",
                                "    <script type=\"text/javascript\">",
                                "        function plotIt987b33d88ad1459db82c022f5f4d168e(){",
                                "            if (!window.Plotly){",
                                "                plotIt987b33d88ad1459db82c022f5f4d168e._tryCount += 1;",
                                "                if (plotIt987b33d88ad1459db82c022f5f4d168e._tryCount === 120){",
                                "                    return console.error('Failed to load plotly in 120s');",
                                "                }",
                                "                console.info('Plotly not yet ready, retrying');",
                                "                return setTimeout(plotIt987b33d88ad1459db82c022f5f4d168e, 500);",
                                "            }",
                                "            const ele = document.getElementById(\"plot_div\") || document.getElementById(\"987b33d88ad1459db82c022f5f4d168e\");",
                                "            console.info('Plotly is ready, plotting');",
                                "            window.Plotly.newPlot(",
                                "                ele,",
                                "                [{\"x\":[45,11,3,8,3,2,3,3,3,4,31,3,4,4,3,3,3,3,4,3,3,10,61,4,12,4,3,2,2,3,3,6,2,3,2,3,1,75,11,3,2,3,2,5,4,8,3,4,2,7,30,4,26,3,4,6,8,3,5,4,7,3,3,2,16,11,3,16,3,2,3,3,3,3,2,2,15,3,2,3,2,52,11,13,3,14,12,2,6,2,3,3,2,2,3,3,2,3,2,3,3,3,72,18,22,6,2,8,1,2,3,2,3,3,4,38,30,3,3,5,5,3,2,3,3,2,4,3,2,4,4,34,11,3,9,10,7,4,3,2,2,3,5,14,3,4,88,2,24,3,3,3,2,3,6,3,3,3,6,3,3,19,5,3,6,2,2,4,2,2,4,2,6,3,3,53,16,10,3,9,3,6,5,3,2,4,4,2,2,11,14,10,2,2,5,2,3,6,3,4,2,2,37,19,11,2,14,30,21,5,2,2,14,5,3,2,6,26,6,3,6,9,2,2,6,2,3,2,2,67,8,5,10,4,2,2,3,5,3,3,3,3,93,3,9,25,3,11,3,3,3,2,3,2,3,2,3,3,9,3,3,20,12,2,2,3,3,3,3,2,2,87,4,5,3,23,2,4,1,5,2,3,2,4,2,33,3,3,8,14,5,11,3,2,3,3,3,3,3,37,2,41,6,4,4,2,4,3,3,3,3,4,57,42,4,7,68,14,4,4,3,4,2,5,7,2,3,3,3,3,11,6,2,2,5,10,3,3,4,2,6,4,2,3,39,3,9,4,4,4,2,5,4,3,2,3,3,3,3,2,8,3,4,3,2,4,5,3,4,11,3,2,6,3,4,2,3,4,2,3,3,3,32,26,3,5,4,2,3,4,3,2,4,2,3,36,11,5,10,7,2,16,6,2,3,8,35,21,26,5,2,1,2,3,4,2,4,5,3,5,35,44,3,12,2,5,2,2,4,3,3,72,7,6,10,3,5,4,5,4,7,3,9,5,2,4,17,3,3,3,16,2,4,2,4,2,2,71,5,5,2,3,3,3,2,3,2,3,2,2,4,3,6,7,4,21,8,3,2,4,3,3,2,6,7,6,6,6,90,50,3,3,11,24,3,2,4,4,5,3,5,3,13,22,5,12,6,3,9,5,7,10,2,14,5,8,3,3,3,77,27,7,2,4,3,12,4,2,2,3,22,5,3,3,5,3,3,3,4,3,4,3,2,3,3,3,4,6,68,4,7,8,4,2,3,3,3,3,51,38,7,7,13,5,2,3,3,4,4,2,4,3,4,3,4,68,3,3,28,5,2,3,7,7,2,2,2,51,35,4,3,3,3,3,4,3,3,3,89,56,46,2,2,4,4,2,4,8,2,4,2,3,6,9,2,21,7,4,3,4,5,3,5,3,3,45,25,13,5,4,9,5,3,5,2,57,20,3,46,3,12,3,2,2,2,3,2,3,2,4,5,7,4,3,4,2,3,2,3,2,4,2,54,3,13,6,13,2,4,4,7,7,17,4,2,3,5,3,6,5,2,2,3,2,2,3,2,3,3,2,4,19,24,3,10,7,3,3,3,2,97,48,9,60,37,3,4,5,3,5,3,3,3,15,3,5,3,9,2,3,2,3,2,3,3,40,20,9,4,10,3,3,6,2,93,4,2,11,3,3,2,4,3,3,2,34,75,4,2,3,5,2,2,4,3,3,3,58,48,4,5,5,4,2,3,7,5,2,4,8,2,3,3,3,3,2,2,2,2,39,28,3,2,2,3,2,3,2,2,3,3,3,26,8,4,3,3,2,12,5,14,2,2,3,2,2,2,1,6,2,2,3,3,3,2,2,3,2,11,6,5,10,2,2,3,4,2,3,17,4,7,2,3,3,1,2,3,46,3,3,4,5,5,6,3,5,5,2,2,2,16,4,5,63,3,2,3,3,4,2,45,20,5,4,8,4,2,3,2,3,2,2,2,4,81,81,3,7,3,4,3,2,2,2,3,14,3,2,2,3,2,3,2,3,3,2,3,2,13,3,3,4,4,3,5,3,8,7,5,85,16,6,3,2,2,3,4,2,5,40,3,3,4,3,2,10,3,3,3,2,3,4,3,5,2,3,4,3,3,3,71,45,5,3,14,4,3,3,2,2,3,9,8,3,3,3,3,2,12,3,3,2,2,8,3,3,3,2,2,52,2,14,11,3,2,2,3,3,3,3,2,5,64,18,24,25,14,5,2,3,3,2,3,3,3,2,2,2,7,3,5,6,2,2,5,4,2,5,5,3,46,5,5,3,3,4,3,4,2,2,4,2,28,4,3,2,3,2,2,2,2,3,3,2,17,8,5,3,14,2,2,3,5,4,3,2,1,10,15,6,3,77,11,3,3,3,5,3,1,2,2,48,12,3,2,3,2,16,13,12,10,3,5,4,1,3,2,2,36,2,6,6,4,3,4,3,3,62,8,3,3,3,2,3,4,2,19,4,2,3,2,1,5,3,5,2,3,3,2,3,5,4,7,4,2,3,3,3,2,4,2,4,2,2,2,3,3,2,13,2,3,2,7,2,3,9,2,3,2,9,4,3,2,53,16,3,2,4,4,5,3,2,3,3,64,5,5,5,3,3,4,4,3,29,4,4,2,3,3,2,2,23,7,2,5,2,5,3,3,2,3,2,2,9,3,4,2,3,6,2,2,69,11,3,3,4,2,2,3,7,4,3,2,3,2,3,3,1,3,3,6,3,3,3,3,2,10,11,5,3,2,6,4,2,37,7,2,3,3,3,3,3,15,3,10,2,3,2,1,2,14,10,2,5,4,3,3,1,4,3,5,3,2,4,12,2,21,59,2,2,3,1,3,2,2,4,9,13,3,2,4,30,4,3,3,4,3,1,1,5,3,16,3,3,4,2,2,4,15,8,11,2,3,2,2,3,14,4,7,6,13,5,7,2,9,10,7,2,3,7,2,3,2,4,4,3,4,3,2,2,14,11,3,3,7,25,4,2,4,11,4,7,2,6,2,2,1,4,4,5,3,4,2,1,1,4,9,3,2,3,5,4,2,2,30,7,2,3,3,2,3,5,3,6,2,2,2,2,2,9,4,4,10,3,3,2,13,5,3,3,3,3,1,1,13,4,3,2,3,17,3,3,2,2,5,47,3,3,3,3,2,13,3,2,2,2,4,6,3,8,2,2,4,2,2,2,4,4,6,2,7,11,3,2,3,2,7,3,17,2,3,2,2,2,19,6,3,21,2,3,1,2,2,1,2,2,3,2,3,1,2,17,12,17,3,3,6,3,2,5,1,2,2,2,2,2,2,37,15,2,2,2,6,2,3,3,2,2,2,16,3,4,2,3,3,2,4,4,2,4,4,3,25,2,1,3,3,2,2,9,9,2,2,2,3,3,26,6,3,4,3,3,3,4,2,4,3,3,3,3,78,3,3,8,2,30,2,2,4,4,3,5,2,2,2,3,4,3,3,4,5,14,2,7,3,3,2,3,4,2,5,5,3,7,16,3,2,4,2,5,2,4,4,3,3,5,2,6,3,3,2,2,2,4,18,8,3,3,2,3,2,4,4,2,2,3,2,38,11,3,3,4,4,4,3,3,3,2,2,3,4,5,3,2,5,2,2,3,2,2,3,2,3,3,3,3,2,6,2,3,3,9,2,3,2,10,2,2,3,3,2,3,3,3,6,2,3,2,8,15,2,2,3,2,3,3,2,2,3,22,12,2,2,2,3,3,3,3,2,4,2,4,2,2,14,5,3,3,3,4,2,3,2,9,2,1,6,2,8,3,3,3,4],\"type\":\"histogram\"}],",
                                "                {},",
                                "                {\"layout\":{}}",
                                "            );",
                                "        }",
                                "        plotIt987b33d88ad1459db82c022f5f4d168e._tryCount = 0;",
                                "        plotIt987b33d88ad1459db82c022f5f4d168e();",
                                "    </script>",
                                "    "
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}