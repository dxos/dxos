//
// Copyright 2020 DXOS.org
//

syntax = "proto3";

package dxos.credentials.greet;

import "./keys.proto";
import "./party.proto";
import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";

//
// Greeting protocol:
//
//  Two nodes: Greeter which acts like a "server" and Invitee which acts like a "client".
//  All interactions are request/response with the request always sent by the Invitee and the response always
//  sent by the Invitee.
//
//  1) An invitation is generated for the Invitee with a unique ID, known to the Greeter.
//  2) The Invitee connects to the Greeter over an *open* Topic, using the invitation ID as their peer ID.
//     This is NOT the Topic of the Party they wish to join, it is one used for Greeting.
//  3) The Invitee sends a Command message of type BEGIN. This signals the arrival of the invitee, and if necessary,
//     triggers creation or retrieval of an auth secret for the rest of the process. This secret is normally
//     communicated out-of-band (eg, voice, IM, etc.). The Greeter responds with a BeginResponse message, acknowledging
//     the request and indicating the Invitee should proceed to the next step:
//  4) The Invitee sends a Command message of type HANDSHAKE which includes their secret (eg, PIN, AuthMessage).
//  5) The Greeter validates the contents (it's genuine, hasn't already been redeemed, the secret matches, etc.)
//  6) The Greeter returns a HandshakeResponse message with the Party public key and challenge nonce.
//  7) The Invitee generates one or more AdmitKey and AdmitFeed messages, including the nonce from step (5) then signs
//     the contents in a SignedMessage.
//  8) The Invitee sends the SignedMessages in a Command message of type NOTARIZE.
//  9) The Greeter checks credentials presented and validates the SignedMessage signatures and nonce values.
//     If all the checks pass then the Admit messages may be published on the Greeter's feed for the target Party,
//     placed in Envelope messages signed by the Greeter.
// 10) After writing the messages, the Greeter marks the invitation as having been redeemed, so that it cannot be
//     used again.
// 11) The Greeter sends copies of the Greeter-signed Envelope messages to the Invitee in a NotarizeResponse message,
//     as well as a list of "hints" regarding keys and feeds which are enrolled in the Party. The Invitee uses thes
//     "hints" to construct its initial view of Party membership, necessary to participate in mutual authentication
//     for Party feed replication.
// 12) The Invitee sends the Greeter a FINISH command to acknowledge receipt.

//
// A Greeter command.
//
message Command {
  enum Type {
    BEGIN = 0;
    HANDSHAKE = 1;
    NOTARIZE = 2;
    FINISH = 3;
    CLAIM = 10;
  }

  Type command = 1;

  // Auth secret (PIN, hash, AuthMessage, etc.).
  bytes secret = 2;

  // TODO(burdon): These seem to be signed messages? In which case we already know the type.
  // TODO(dboreham): static typing of contained messages is not yet supported, change from any when it is.
  // Parameters to the command.
  repeated google.protobuf.Any params = 10;
};

//
// Info is optional, and not needed for very simple schemes like using a PIN, but more complicated scenarios schemes
// might need to communicate additional info in the response (eg, what key is expected for a signed AuthMessage).
//
message BeginResponse {
  map<string, google.protobuf.Any> info = 1;
}

//
// The next command is 'HANDSHAKE', the invitee sends the `secret` for authentication, and if successful, the
// Greeter returns the `partyKey` and a `nonce` which the invitee will need to use for the Party credential messages.
//
message HandshakeResponse {
  // Random bytes which must be included in the signed portion of messages submitted in a 'NOTARIZE' command
  // (proving ownership of the keys in question).
  bytes nonce = 1;

  // The public key of the party.
  PubKey partyKey = 2;
};

//
// The 'NOTARIZE' command takes an array of SignedMessages which the invitee would like added to the Party. The
// standard case would be a message admitting an Identity (or Device) key and a message admitting a feed.
//
message NotarizeResponse {
  // A copy of each of the messages as written to the Party (now in an Envelope signed by the Greeter) and the Feed
  // and key hints necessary to bootstrap the invitee into the Party.
  repeated google.protobuf.Any copies = 1;

  // Feed and key hints necessary to bootstrap the invitee into the Party.
  repeated KeyHint hints = 2;
};

//
// Feed and key hints are required by the invitee, because even though the Party members now trust it, it does not trust
// them. Until it has a chance to replicate, it cannot construct its own understanding of the Party from party.*
// messages, but neither can it replicate unless it trusts its peers. The Hints break this cycle by providing an
// initial set of keys and Feeds to trust.
//
message KeyHint {
  // TODO(telackey): These should be changed to be the full set of signed party messages, so the recipient can build
  // and verify the party structure just as it would if it had obtained them from the feeds.
  PubKey publicKey = 1;
  KeyType type = 2;
}

//
// The 'CLAIM' command is used to trigger the Greeting flow by "claiming" a PartyInvitation which was replicated
// to the Party or presented as a "proof".
//
// The ClaimResponse provides the invitee with information about the interactive invitation triggered by the "claim",
// such as the invitation ID and the swarm key to use to connect to the Greeter.
//
message ClaimResponse {
  bytes id = 1; // The ID of the invitation.
  bytes rendezvousKey = 2; // The swarm key to use to rendezvous with the Greeter.
}
