//
// Copyright 2022 DXOS.org
//

syntax = "proto3";

// TODO(burdon): GraphQL?
// TODO(burdon): Handle multiple schema files.
// TODO(burdon): Move directory to dxos/experimental/kai

import "dxos/schema.proto";

package dxos.experimental.kai;

//
// Types
//

message GeoLocation {
  int32 radius = 1;
  fixed32 lat = 2;
  fixed32 lng = 3;
}

message Address {
  string street = 1;
  string city = 2;
  string state = 3;
  string zip = 4;
  GeoLocation coordinates = 5;
}

//
// Internal
// TODO(dmaretskyi): Move to separate file.
//

// TODO(burdon): First-class typed links?
message Link {
  option (object) = true;

  // TODO(burdon): Keys.
  string source = 1;
  string target = 2;
//  repeated string tags = 3;
  string tag = 3;
}

//
// Views
//

message View {
  option (object) = true;

  string type = 1;
  string title = 2;
}

//
// Objects
//

message Table {
  option (object) = true;

  string type = 1;
}

message Organization {
  option (object) = true;

  string name = 1;
  string description = 2;
  string website = 3;
  repeated Contact people = 4;
  repeated Project projects = 5;
  Address address = 6;
}

message Contact {
  option (object) = true;

  string name = 1;
  string username = 2;
  string email = 3;
  string phone = 4; // TODO(burdon): Repeated with tag.
  Address address = 5;
  Organization employer = 6; // TODO(burdon): Multiple (change "employer").
  string tag = 7;
}

message Task {
  option (object) = true;

  string title = 1;
  bool completed = 2;
  Contact assignee = 3;
  Task previous = 4;
  repeated Task sub_tasks = 5;
}

message TaskList {
  option (object) = true;

  string title = 1;
  repeated Task tasks = 2;
}

message Project {
  option (object) = true;

  string title = 1;
  dxos.schema.Text description = 2;
  string url = 3;
  repeated Contact team = 4;
  repeated Task tasks = 5;
//  repeated string tags = 6;
  string tag = 6;
}

message Kanban {
  option (object) = true;

  message OrderedColumn {
    string column_id = 1;
    repeated string objects = 2;
  }

  string title = 1;
  string column_type = 2;
}

message Document {
  option (object) = true;

  string title = 1;
  // TODO(wittjosiah): Annotate as rich text.
  dxos.schema.Text content = 2;
  // repeated string tags = 2;
  string tag = 3;
}

message DocumentStack {
  option (object) = true;

  message Section {
    option (object) = true; // TODO(burdon): REMOVE (but requires id property).
    Source source = 1; // TODO(burdon): Metadata from resolver.
    dxos.schema.Document object = 2;
  }

  string title = 1;
  repeated Section sections = 2;

  string subject_id = 10; // TODO(burdon): Create external link instead.
}

message Presentation {
  option (object) = true;

  string title = 1;
  DocumentStack stack = 2;
}

// TODO(burdon): Rename.
// TODO(burdon): System type for external GUIDs (identifies resolver).
// TODO(burdon): Timestamp, temporal context, TTL.
// TODO(burdon): Dependency graph (resolvers that preceded this).
message Source {
  string resolver = 1; // TODO(burdon): DXN of resolver.
  string guid = 2; // TODO(burdon): `id` should be allowed on non-objects.
}

message Message {
  option (object) = true;

  message Recipient {
    option (object) = true; // TODO(burdon): REMOVE.
    string email = 1;
    string name = 2;
    Contact contact = 3;
  }

  // TODO(burdon): Type.
  // TODO(burdon): Timestamp (across all objects).
  Source source = 1;
  string date = 2;
  Recipient from = 3;
  repeated Recipient to = 4;
  string subject = 5;
  string body = 6;
}

message Event {
  option (object) = true;

  string title = 1;
  // TODO(burdon): Timestamp system primitive type.
  string start = 2;
  string end = 3;
  Address location = 4;
  repeated Contact members = 5;
}

message Sketch {
  option (object) = true;

  message Point {
    int32 x = 1;
    int32 y = 2;
  }

  message Path {
    int32 timestamp = 1;
    int32 width = 2;
    string color = 3;
    repeated Point points = 4;
  }

  string title = 1;
  repeated Path paths = 2;
}

message File {
  option (object) = true;

  string name = 1;
  string timestamp = 2;
  string cid = 3;
}

message NoteBoard {
  option (object) = true;

  message Location {
    string object_id = 1;
    int32 x = 2;
    int32 y = 3;
  }

  string title = 1;
  repeated Location locations = 2;
}

message Note {
  option (object) = true;

  string title = 1;
  // TODO(wittjosiah): Annotate as rich text.
  dxos.schema.Text content = 2;
  string color = 3;
}

//
// Travel
// TODO(burdon): Different namespace/files.
//

//
// Travel Itinerary
//
message Trip {
  option (object) = true;

  message Destination {
    // TODO(burdon): Standardize with codes.
    message Address {
      string city = 1;
      // https://en.wikipedia.org/wiki/IATA_airport_code
      string city_code = 2;
    }

    string date_start = 1;
    string date_end = 2;
    Address address = 3;
  }

  string updated = 1; // TODO(burdon): System.
  string name = 2;
  string date_start = 3;
  string date_end = 4;

  // TODO(burdon): Rename Leg? (Leg is slightly longer: e.g., Rome to Rio leg of round-the-world)
  repeated Destination destinations = 10;

  // Updated by bot.
  // TODO(burdon): Ephemeral query?
  repeated Booking bookings = 11;

  TravelProfile profile = 20;
}

// TODO(burdon): No unique way to refer back to a Booking/Offer

// TODO(burdon): Use timestamp to diff Ticket.

// TODO(burdon): Plane, Hotel, Car, etc.
// TODO(burdon): Multiple people.
message Booking {
  option (object) = true;

  string updated = 1; // TODO(burdon): System.
  repeated Ticket tickets = 2;
  Transaction transaction = 3;

  string trip_updated = 10;
}

message TravelProfile {
  Contact contact = 1;
  repeated string carriers = 2;
  string cabin = 3;
}

message Ticket {
//  enum Type {
//    NULL = 0;
//    AIRLINE = 1;
//  }

  // Leg of ticket.
  message Itinerary {
    // Individual flight, etc.
    message Segment {
      message Point {
        string iata_code = 1;
        string at = 2;
      }

      Point departure = 2;
      Point arrival = 3;

      string carrier = 10;
      string number = 11;
    }

    repeated Segment segments = 10;
  }

//  Type type = 1;
  Source source = 2;

  repeated Itinerary itineraries = 10;

  // TODO(burdon): Keys vs. references (e.g., if object not created yet).
  Contact passenger = 20;
}

// TODO(burdon): Counter party, etc.
message Transaction {
  // TODO(burdon): Enum.
//    enum Type {
//      PENDING = 0;
//      RESERVED = 1;
//      COMPLETE = 2;
//    }

//    Type type = 1;
  string date = 2;
  string currency = 3;
  string total = 4;
}

//
// Code Notebook
//

message CodeNotebook {
  option (object) = true;

  // TODO(burdon): Output.
  message Result {
    option (object) = true;

    dxos.schema.Document result = 1;
  }

  string title = 1;
  DocumentStack source = 2;
  repeated Result results = 3;
}
