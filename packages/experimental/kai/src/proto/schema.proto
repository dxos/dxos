//
// Copyright 2022 DXOS.org
//

syntax = "proto3";

package dxos.experimental.kai;

//
// Types
//

message LatLng {
  fixed32 lat = 1;
  fixed32 lng = 2;
}

message Address {
  string street = 1;
  string city = 2;
  string state = 3;
  string zip = 4;
  LatLng coordinates = 5;
}

//
// Internal
// TODO(dmaretskyi): Move to separate file.
//

/// Special object type for text object references.
message TextObject {}

// TODO(burdon): First-class typed links?
message Link {
  option (object) = true;

  // TODO(burdon): Keys.
  string source = 1;
  string target = 2;
//  repeated string tags = 3;
  string tag = 3;
}

//
// Objects
//

message Organization {
  option (object) = true; // TODO(burdon): Fix protobuf plugin.

  string name = 1;
  string description = 2;
  string website = 3;
  repeated Contact people = 4;
  repeated Project projects = 5;
  Address address = 6;
}

message Contact {
  option (object) = true;

  string name = 1;
  string username = 2;
  string email = 3;
  Address address = 4;
}

message Task {
  option (object) = true;

  string title = 1;
  bool completed = 2;
  Contact assignee = 3;
  Task previous = 4;
  repeated Task sub_tasks = 5;
}

message Project {
  option (object) = true;

  string title = 1;
  TextObject description = 2; // TODO(burdon): Change to string (see Document).
  string url = 3;
  repeated Contact team = 4;
  repeated Task tasks = 5;
//  repeated string tags = 6; // TODO(burdon): Broken.
  string tag = 6;
}

message Document {
  option (object) = true;

  string title = 1;
  TextObject content = 2;
//  repeated string tags = 2;
  string tag = 3;
}

message Message {
  option (object) = true;

  // TODO(burdon): Timestamp.
  string date = 1;
  string from = 2;
  string to = 3;
  string text = 4;
}

message Event {
  option (object) = true;

  string title = 1;
  // TODO(burdon): Timestamp.
  string start = 2;
  string end = 3;
  Address location = 4;
  repeated Contact members = 5;
}

message Sketch {
  message SketchPoint {
    int32 x = 1;
    int32 y = 2;
  }

  // TODO(burdon): Should be sub-type but is compiled to top level.
  message Path {
    int32 timestamp = 1; // TODO(burdon): Is this required.
    int32 width = 2;
    string color = 3;
    repeated SketchPoint points = 4;
  }

  option (object) = true;

  string title = 1;
  repeated Path paths = 2;
}

message File {
  option (object) = true;

  string name = 1;
  string timestamp = 2;
  string cid = 3;
}

message NoteBoard {
  message Location { // TODO(burdon): Name collision.
    string object_id = 1;
    int32 x = 2;
    int32 y = 3;
  }

  option (object) = true;

  string title = 1;
  repeated Location locations = 2;
}

message Note {
  option (object) = true;

  string title = 1;
  TextObject content = 2;
}

enum Character {
  LIBERAL = 0;
  FASHIST = 1;
  HITLER = 2;
}

enum Party {
  LIBERAL_PARTY = 0;
  FASCIST_PARTY = 1;
}

message Player {
  option (object) = true;

  string member_key = 1;

  string name = 10;
  Character character = 11;
  Party party = 12;

  bool killed = 13;
  bool investigated = 14;
}

enum Policy {
  LIBERAL_POLICY = 0;
  FASCIST_POLICY = 1;
}

message PolicyCard {
  option (object) = true;

  Policy policy = 1;
}

message Game {
  option (object) = true;

  enum State {
    LOBBY = 0;
    GAME = 1;
    FASCISTS_WON = 2;
    LIBERALS_WON = 3;
  }

  string host_member_key = 1;
  State state = 2;
  repeated Player players = 3;
  repeated Round rounds = 10;
  repeated PolicyCard policies = 11;
  repeated PolicyCard deck = 12;
  repeated PolicyCard discard = 13;

  /// Number of failed elections in a row. After 3 failed elections, the top card from the deck is the next policy.
  int32 anarchy_counter = 21;
}

message Election {
  option (object) = true;

  repeated VoteByPlayer votes = 3;
}

enum Vote {
  JA = 0;
  NEIN = 1;
}

message VoteByPlayer {
  option (object) = true;

  Player player = 1;
  Vote vote = 2;
}

enum Veto {
  VETO_NONE = 0;
  VETO_REQUESTED = 1;
  VETO_APPROVED = 2;
  VETO_REJECTED = 3;
}

message Round {
  option (object) = true;

  /// Goes to next player on the left.
  Player president = 1;
  /// President nominates chancellor.
  Player chancellor = 2;

  enum RoundState {
    /// Init state.
    NOMINATE_CHANCELLOR = 0;
    ELECTION = 1;
    POLICY_PEEK = 2;
    /// Available after 5 fascist policies had been passed.
    VETO = 3;
    INVESTIGATE_LOYALTY = 4;
    SPECIAL_ELECTION = 5;
    POLICY_PEAK = 6;
    EXECUTION = 7;
    END_ROUND = 8;
  }

  RoundState state = 3;

  Election election = 10;

  // 3 cards
  repeated PolicyCard policy_candidates = 111;

  PolicyCard president_discard = 12;
  PolicyCard chancellor_discard = 13;
  
  // Chancellor requests veto.
  Veto veto = 14;

  PolicyCard passed_policy = 15;
}