{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/util/minimal.js","transforms":[{"name":"vite:load-fallback","result":"\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","start":1670465470881,"end":1670465470971},{"name":"vite:react-babel","result":"\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","start":1670465470971,"end":1670465470971,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as minimal } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/util/minimal.js?commonjs-exports\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+aspromise@1.1.2/node_modules/@protobufjs/aspromise/index.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+base64@1.1.2/node_modules/@protobufjs/base64/index.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+eventemitter@1.1.0/node_modules/@protobufjs/eventemitter/index.js?commonjs-proxy\";\nimport require$$3 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+float@1.0.2/node_modules/@protobufjs/float/index.js?commonjs-proxy\";\nimport require$$4 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+inquire@1.1.0/node_modules/@protobufjs/inquire/index.js?commonjs-proxy\";\nimport require$$5 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+utf8@1.1.0/node_modules/@protobufjs/utf8/index.js?commonjs-proxy\";\nimport require$$6 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+pool@1.1.0/node_modules/@protobufjs/pool/index.js?commonjs-proxy\";\nimport { __require as require$$7 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/util/longbits.js?commonjs-wrapped\";\n\nvar hasRequiredMinimal;\n\nfunction requireMinimal () {\n\tif (hasRequiredMinimal) return minimal;\n\thasRequiredMinimal = 1;\n\t(function (exports) {\n\t\t\"use strict\";\n\t\tvar util = exports;\n\n\t\t// used to return a Promise where callback is omitted\n\t\tutil.asPromise = require$$0;\n\n\t\t// converts to / from base64 encoded strings\n\t\tutil.base64 = require$$1;\n\n\t\t// base class of rpc.Service\n\t\tutil.EventEmitter = require$$2;\n\n\t\t// float handling accross browsers\n\t\tutil.float = require$$3;\n\n\t\t// requires modules optionally and hides the call from bundlers\n\t\tutil.inquire = require$$4;\n\n\t\t// converts to / from utf8 encoded strings\n\t\tutil.utf8 = require$$5;\n\n\t\t// provides a node-like buffer pool in the browser\n\t\tutil.pool = require$$6;\n\n\t\t// utility to work with the low and high bits of a 64 bit value\n\t\tutil.LongBits = require$$7();\n\n\t\t/**\n\t\t * Whether running within node or not.\n\t\t * @memberof util\n\t\t * @type {boolean}\n\t\t */\n\t\tutil.isNode = Boolean(typeof commonjsHelpers.commonjsGlobal !== \"undefined\"\n\t\t                   && commonjsHelpers.commonjsGlobal\n\t\t                   && commonjsHelpers.commonjsGlobal.process\n\t\t                   && commonjsHelpers.commonjsGlobal.process.versions\n\t\t                   && commonjsHelpers.commonjsGlobal.process.versions.node);\n\n\t\t/**\n\t\t * Global object reference.\n\t\t * @memberof util\n\t\t * @type {Object}\n\t\t */\n\t\tutil.global = util.isNode && commonjsHelpers.commonjsGlobal\n\t\t           || typeof window !== \"undefined\" && window\n\t\t           || typeof self   !== \"undefined\" && self\n\t\t           || commonjsHelpers.commonjsGlobal; // eslint-disable-line no-invalid-this\n\n\t\t/**\n\t\t * An immuable empty array.\n\t\t * @memberof util\n\t\t * @type {Array.<*>}\n\t\t * @const\n\t\t */\n\t\tutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n\t\t/**\n\t\t * An immutable empty object.\n\t\t * @type {Object}\n\t\t * @const\n\t\t */\n\t\tutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n\t\t/**\n\t\t * Tests if the specified value is an integer.\n\t\t * @function\n\t\t * @param {*} value Value to test\n\t\t * @returns {boolean} `true` if the value is an integer\n\t\t */\n\t\tutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n\t\t    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n\t\t};\n\n\t\t/**\n\t\t * Tests if the specified value is a string.\n\t\t * @param {*} value Value to test\n\t\t * @returns {boolean} `true` if the value is a string\n\t\t */\n\t\tutil.isString = function isString(value) {\n\t\t    return typeof value === \"string\" || value instanceof String;\n\t\t};\n\n\t\t/**\n\t\t * Tests if the specified value is a non-null object.\n\t\t * @param {*} value Value to test\n\t\t * @returns {boolean} `true` if the value is a non-null object\n\t\t */\n\t\tutil.isObject = function isObject(value) {\n\t\t    return value && typeof value === \"object\";\n\t\t};\n\n\t\t/**\n\t\t * Checks if a property on a message is considered to be present.\n\t\t * This is an alias of {@link util.isSet}.\n\t\t * @function\n\t\t * @param {Object} obj Plain object or message instance\n\t\t * @param {string} prop Property name\n\t\t * @returns {boolean} `true` if considered to be present, otherwise `false`\n\t\t */\n\t\tutil.isset =\n\n\t\t/**\n\t\t * Checks if a property on a message is considered to be present.\n\t\t * @param {Object} obj Plain object or message instance\n\t\t * @param {string} prop Property name\n\t\t * @returns {boolean} `true` if considered to be present, otherwise `false`\n\t\t */\n\t\tutil.isSet = function isSet(obj, prop) {\n\t\t    var value = obj[prop];\n\t\t    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n\t\t        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n\t\t    return false;\n\t\t};\n\n\t\t/**\n\t\t * Any compatible Buffer instance.\n\t\t * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n\t\t * @interface Buffer\n\t\t * @extends Uint8Array\n\t\t */\n\n\t\t/**\n\t\t * Node's Buffer class if available.\n\t\t * @type {Constructor<Buffer>}\n\t\t */\n\t\tutil.Buffer = (function() {\n\t\t    try {\n\t\t        var Buffer = util.inquire(\"buffer\").Buffer;\n\t\t        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n\t\t        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n\t\t    } catch (e) {\n\t\t        /* istanbul ignore next */\n\t\t        return null;\n\t\t    }\n\t\t})();\n\n\t\t// Internal alias of or polyfull for Buffer.from.\n\t\tutil._Buffer_from = null;\n\n\t\t// Internal alias of or polyfill for Buffer.allocUnsafe.\n\t\tutil._Buffer_allocUnsafe = null;\n\n\t\t/**\n\t\t * Creates a new buffer of whatever type supported by the environment.\n\t\t * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n\t\t * @returns {Uint8Array|Buffer} Buffer\n\t\t */\n\t\tutil.newBuffer = function newBuffer(sizeOrArray) {\n\t\t    /* istanbul ignore next */\n\t\t    return typeof sizeOrArray === \"number\"\n\t\t        ? util.Buffer\n\t\t            ? util._Buffer_allocUnsafe(sizeOrArray)\n\t\t            : new util.Array(sizeOrArray)\n\t\t        : util.Buffer\n\t\t            ? util._Buffer_from(sizeOrArray)\n\t\t            : typeof Uint8Array === \"undefined\"\n\t\t                ? sizeOrArray\n\t\t                : new Uint8Array(sizeOrArray);\n\t\t};\n\n\t\t/**\n\t\t * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n\t\t * @type {Constructor<Uint8Array>}\n\t\t */\n\t\tutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n\t\t/**\n\t\t * Any compatible Long instance.\n\t\t * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n\t\t * @interface Long\n\t\t * @property {number} low Low bits\n\t\t * @property {number} high High bits\n\t\t * @property {boolean} unsigned Whether unsigned or not\n\t\t */\n\n\t\t/**\n\t\t * Long.js's Long class if available.\n\t\t * @type {Constructor<Long>}\n\t\t */\n\t\tutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n\t\t         || /* istanbul ignore next */ util.global.Long\n\t\t         || util.inquire(\"long\");\n\n\t\t/**\n\t\t * Regular expression used to verify 2 bit (`bool`) map keys.\n\t\t * @type {RegExp}\n\t\t * @const\n\t\t */\n\t\tutil.key2Re = /^true|false|0|1$/;\n\n\t\t/**\n\t\t * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n\t\t * @type {RegExp}\n\t\t * @const\n\t\t */\n\t\tutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n\t\t/**\n\t\t * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n\t\t * @type {RegExp}\n\t\t * @const\n\t\t */\n\t\tutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n\t\t/**\n\t\t * Converts a number or long to an 8 characters long hash string.\n\t\t * @param {Long|number} value Value to convert\n\t\t * @returns {string} Hash\n\t\t */\n\t\tutil.longToHash = function longToHash(value) {\n\t\t    return value\n\t\t        ? util.LongBits.from(value).toHash()\n\t\t        : util.LongBits.zeroHash;\n\t\t};\n\n\t\t/**\n\t\t * Converts an 8 characters long hash string to a long or number.\n\t\t * @param {string} hash Hash\n\t\t * @param {boolean} [unsigned=false] Whether unsigned or not\n\t\t * @returns {Long|number} Original value\n\t\t */\n\t\tutil.longFromHash = function longFromHash(hash, unsigned) {\n\t\t    var bits = util.LongBits.fromHash(hash);\n\t\t    if (util.Long)\n\t\t        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n\t\t    return bits.toNumber(Boolean(unsigned));\n\t\t};\n\n\t\t/**\n\t\t * Merges the properties of the source object into the destination object.\n\t\t * @memberof util\n\t\t * @param {Object.<string,*>} dst Destination object\n\t\t * @param {Object.<string,*>} src Source object\n\t\t * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n\t\t * @returns {Object.<string,*>} Destination object\n\t\t */\n\t\tfunction merge(dst, src, ifNotSet) { // used by converters\n\t\t    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n\t\t        if (dst[keys[i]] === undefined || !ifNotSet)\n\t\t            dst[keys[i]] = src[keys[i]];\n\t\t    return dst;\n\t\t}\n\n\t\tutil.merge = merge;\n\n\t\t/**\n\t\t * Converts the first character of a string to lower case.\n\t\t * @param {string} str String to convert\n\t\t * @returns {string} Converted string\n\t\t */\n\t\tutil.lcFirst = function lcFirst(str) {\n\t\t    return str.charAt(0).toLowerCase() + str.substring(1);\n\t\t};\n\n\t\t/**\n\t\t * Creates a custom error constructor.\n\t\t * @memberof util\n\t\t * @param {string} name Error name\n\t\t * @returns {Constructor<Error>} Custom error constructor\n\t\t */\n\t\tfunction newError(name) {\n\n\t\t    function CustomError(message, properties) {\n\n\t\t        if (!(this instanceof CustomError))\n\t\t            return new CustomError(message, properties);\n\n\t\t        // Error.call(this, message);\n\t\t        // ^ just returns a new error instance because the ctor can be called as a function\n\n\t\t        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n\t\t        /* istanbul ignore next */\n\t\t        if (Error.captureStackTrace) // node\n\t\t            Error.captureStackTrace(this, CustomError);\n\t\t        else\n\t\t            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n\t\t        if (properties)\n\t\t            merge(this, properties);\n\t\t    }\n\n\t\t    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n\t\t    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n\t\t    CustomError.prototype.toString = function toString() {\n\t\t        return this.name + \": \" + this.message;\n\t\t    };\n\n\t\t    return CustomError;\n\t\t}\n\n\t\tutil.newError = newError;\n\n\t\t/**\n\t\t * Constructs a new protocol error.\n\t\t * @classdesc Error subclass indicating a protocol specifc error.\n\t\t * @memberof util\n\t\t * @extends Error\n\t\t * @template T extends Message<T>\n\t\t * @constructor\n\t\t * @param {string} message Error message\n\t\t * @param {Object.<string,*>} [properties] Additional properties\n\t\t * @example\n\t\t * try {\n\t\t *     MyMessage.decode(someBuffer); // throws if required fields are missing\n\t\t * } catch (e) {\n\t\t *     if (e instanceof ProtocolError && e.instance)\n\t\t *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n\t\t * }\n\t\t */\n\t\tutil.ProtocolError = newError(\"ProtocolError\");\n\n\t\t/**\n\t\t * So far decoded message instance.\n\t\t * @name util.ProtocolError#instance\n\t\t * @type {Message<T>}\n\t\t */\n\n\t\t/**\n\t\t * A OneOf getter as returned by {@link util.oneOfGetter}.\n\t\t * @typedef OneOfGetter\n\t\t * @type {function}\n\t\t * @returns {string|undefined} Set field name, if any\n\t\t */\n\n\t\t/**\n\t\t * Builds a getter for a oneof's present field name.\n\t\t * @param {string[]} fieldNames Field names\n\t\t * @returns {OneOfGetter} Unbound getter\n\t\t */\n\t\tutil.oneOfGetter = function getOneOf(fieldNames) {\n\t\t    var fieldMap = {};\n\t\t    for (var i = 0; i < fieldNames.length; ++i)\n\t\t        fieldMap[fieldNames[i]] = 1;\n\n\t\t    /**\n\t\t     * @returns {string|undefined} Set field name, if any\n\t\t     * @this Object\n\t\t     * @ignore\n\t\t     */\n\t\t    return function() { // eslint-disable-line consistent-return\n\t\t        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n\t\t            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n\t\t                return keys[i];\n\t\t    };\n\t\t};\n\n\t\t/**\n\t\t * A OneOf setter as returned by {@link util.oneOfSetter}.\n\t\t * @typedef OneOfSetter\n\t\t * @type {function}\n\t\t * @param {string|undefined} value Field name\n\t\t * @returns {undefined}\n\t\t */\n\n\t\t/**\n\t\t * Builds a setter for a oneof's present field name.\n\t\t * @param {string[]} fieldNames Field names\n\t\t * @returns {OneOfSetter} Unbound setter\n\t\t */\n\t\tutil.oneOfSetter = function setOneOf(fieldNames) {\n\n\t\t    /**\n\t\t     * @param {string} name Field name\n\t\t     * @returns {undefined}\n\t\t     * @this Object\n\t\t     * @ignore\n\t\t     */\n\t\t    return function(name) {\n\t\t        for (var i = 0; i < fieldNames.length; ++i)\n\t\t            if (fieldNames[i] !== name)\n\t\t                delete this[fieldNames[i]];\n\t\t    };\n\t\t};\n\n\t\t/**\n\t\t * Default conversion options used for {@link Message#toJSON} implementations.\n\t\t *\n\t\t * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n\t\t *\n\t\t * - Longs become strings\n\t\t * - Enums become string keys\n\t\t * - Bytes become base64 encoded strings\n\t\t * - (Sub-)Messages become plain objects\n\t\t * - Maps become plain objects with all string keys\n\t\t * - Repeated fields become arrays\n\t\t * - NaN and Infinity for float and double fields become strings\n\t\t *\n\t\t * @type {IConversionOptions}\n\t\t * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n\t\t */\n\t\tutil.toJSONOptions = {\n\t\t    longs: String,\n\t\t    enums: String,\n\t\t    bytes: String,\n\t\t    json: true\n\t\t};\n\n\t\t// Sets up buffer utility according to the environment (called in index-minimal)\n\t\tutil._configure = function() {\n\t\t    var Buffer = util.Buffer;\n\t\t    /* istanbul ignore if */\n\t\t    if (!Buffer) {\n\t\t        util._Buffer_from = util._Buffer_allocUnsafe = null;\n\t\t        return;\n\t\t    }\n\t\t    // because node 4.x buffers are incompatible & immutable\n\t\t    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n\t\t    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n\t\t        /* istanbul ignore next */\n\t\t        function Buffer_from(value, encoding) {\n\t\t            return new Buffer(value, encoding);\n\t\t        };\n\t\t    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n\t\t        /* istanbul ignore next */\n\t\t        function Buffer_allocUnsafe(size) {\n\t\t            return new Buffer(size);\n\t\t        };\n\t\t};\n} (minimal));\n\treturn minimal;\n}\n\nexport { requireMinimal as __require };","start":1670465470971,"end":1670465471317,"order":"normal"},{"name":"polyfill-node","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as minimal } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/util/minimal.js?commonjs-exports\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+aspromise@1.1.2/node_modules/@protobufjs/aspromise/index.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+base64@1.1.2/node_modules/@protobufjs/base64/index.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+eventemitter@1.1.0/node_modules/@protobufjs/eventemitter/index.js?commonjs-proxy\";\nimport require$$3 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+float@1.0.2/node_modules/@protobufjs/float/index.js?commonjs-proxy\";\nimport require$$4 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+inquire@1.1.0/node_modules/@protobufjs/inquire/index.js?commonjs-proxy\";\nimport require$$5 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+utf8@1.1.0/node_modules/@protobufjs/utf8/index.js?commonjs-proxy\";\nimport require$$6 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+pool@1.1.0/node_modules/@protobufjs/pool/index.js?commonjs-proxy\";\nimport { __require as require$$7 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/util/longbits.js?commonjs-wrapped\";\n\nvar hasRequiredMinimal;\n\nfunction requireMinimal () {\n\tif (hasRequiredMinimal) return minimal;\n\thasRequiredMinimal = 1;\n\t(function (exports) {\n\t\t\"use strict\";\n\t\tvar util = exports;\n\n\t\t// used to return a Promise where callback is omitted\n\t\tutil.asPromise = require$$0;\n\n\t\t// converts to / from base64 encoded strings\n\t\tutil.base64 = require$$1;\n\n\t\t// base class of rpc.Service\n\t\tutil.EventEmitter = require$$2;\n\n\t\t// float handling accross browsers\n\t\tutil.float = require$$3;\n\n\t\t// requires modules optionally and hides the call from bundlers\n\t\tutil.inquire = require$$4;\n\n\t\t// converts to / from utf8 encoded strings\n\t\tutil.utf8 = require$$5;\n\n\t\t// provides a node-like buffer pool in the browser\n\t\tutil.pool = require$$6;\n\n\t\t// utility to work with the low and high bits of a 64 bit value\n\t\tutil.LongBits = require$$7();\n\n\t\t/**\n\t\t * Whether running within node or not.\n\t\t * @memberof util\n\t\t * @type {boolean}\n\t\t */\n\t\tutil.isNode = Boolean(typeof commonjsHelpers.commonjsGlobal !== \"undefined\"\n\t\t                   && commonjsHelpers.commonjsGlobal\n\t\t                   && commonjsHelpers.commonjsGlobal.process\n\t\t                   && commonjsHelpers.commonjsGlobal.process.versions\n\t\t                   && commonjsHelpers.commonjsGlobal.process.versions.node);\n\n\t\t/**\n\t\t * Global object reference.\n\t\t * @memberof util\n\t\t * @type {Object}\n\t\t */\n\t\tutil.global = util.isNode && commonjsHelpers.commonjsGlobal\n\t\t           || typeof window !== \"undefined\" && window\n\t\t           || typeof self   !== \"undefined\" && self\n\t\t           || commonjsHelpers.commonjsGlobal; // eslint-disable-line no-invalid-this\n\n\t\t/**\n\t\t * An immuable empty array.\n\t\t * @memberof util\n\t\t * @type {Array.<*>}\n\t\t * @const\n\t\t */\n\t\tutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n\t\t/**\n\t\t * An immutable empty object.\n\t\t * @type {Object}\n\t\t * @const\n\t\t */\n\t\tutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n\t\t/**\n\t\t * Tests if the specified value is an integer.\n\t\t * @function\n\t\t * @param {*} value Value to test\n\t\t * @returns {boolean} `true` if the value is an integer\n\t\t */\n\t\tutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n\t\t    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n\t\t};\n\n\t\t/**\n\t\t * Tests if the specified value is a string.\n\t\t * @param {*} value Value to test\n\t\t * @returns {boolean} `true` if the value is a string\n\t\t */\n\t\tutil.isString = function isString(value) {\n\t\t    return typeof value === \"string\" || value instanceof String;\n\t\t};\n\n\t\t/**\n\t\t * Tests if the specified value is a non-null object.\n\t\t * @param {*} value Value to test\n\t\t * @returns {boolean} `true` if the value is a non-null object\n\t\t */\n\t\tutil.isObject = function isObject(value) {\n\t\t    return value && typeof value === \"object\";\n\t\t};\n\n\t\t/**\n\t\t * Checks if a property on a message is considered to be present.\n\t\t * This is an alias of {@link util.isSet}.\n\t\t * @function\n\t\t * @param {Object} obj Plain object or message instance\n\t\t * @param {string} prop Property name\n\t\t * @returns {boolean} `true` if considered to be present, otherwise `false`\n\t\t */\n\t\tutil.isset =\n\n\t\t/**\n\t\t * Checks if a property on a message is considered to be present.\n\t\t * @param {Object} obj Plain object or message instance\n\t\t * @param {string} prop Property name\n\t\t * @returns {boolean} `true` if considered to be present, otherwise `false`\n\t\t */\n\t\tutil.isSet = function isSet(obj, prop) {\n\t\t    var value = obj[prop];\n\t\t    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n\t\t        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n\t\t    return false;\n\t\t};\n\n\t\t/**\n\t\t * Any compatible Buffer instance.\n\t\t * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n\t\t * @interface Buffer\n\t\t * @extends Uint8Array\n\t\t */\n\n\t\t/**\n\t\t * Node's Buffer class if available.\n\t\t * @type {Constructor<Buffer>}\n\t\t */\n\t\tutil.Buffer = (function() {\n\t\t    try {\n\t\t        var Buffer = util.inquire(\"buffer\").Buffer;\n\t\t        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n\t\t        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n\t\t    } catch (e) {\n\t\t        /* istanbul ignore next */\n\t\t        return null;\n\t\t    }\n\t\t})();\n\n\t\t// Internal alias of or polyfull for Buffer.from.\n\t\tutil._Buffer_from = null;\n\n\t\t// Internal alias of or polyfill for Buffer.allocUnsafe.\n\t\tutil._Buffer_allocUnsafe = null;\n\n\t\t/**\n\t\t * Creates a new buffer of whatever type supported by the environment.\n\t\t * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n\t\t * @returns {Uint8Array|Buffer} Buffer\n\t\t */\n\t\tutil.newBuffer = function newBuffer(sizeOrArray) {\n\t\t    /* istanbul ignore next */\n\t\t    return typeof sizeOrArray === \"number\"\n\t\t        ? util.Buffer\n\t\t            ? util._Buffer_allocUnsafe(sizeOrArray)\n\t\t            : new util.Array(sizeOrArray)\n\t\t        : util.Buffer\n\t\t            ? util._Buffer_from(sizeOrArray)\n\t\t            : typeof Uint8Array === \"undefined\"\n\t\t                ? sizeOrArray\n\t\t                : new Uint8Array(sizeOrArray);\n\t\t};\n\n\t\t/**\n\t\t * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n\t\t * @type {Constructor<Uint8Array>}\n\t\t */\n\t\tutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n\t\t/**\n\t\t * Any compatible Long instance.\n\t\t * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n\t\t * @interface Long\n\t\t * @property {number} low Low bits\n\t\t * @property {number} high High bits\n\t\t * @property {boolean} unsigned Whether unsigned or not\n\t\t */\n\n\t\t/**\n\t\t * Long.js's Long class if available.\n\t\t * @type {Constructor<Long>}\n\t\t */\n\t\tutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n\t\t         || /* istanbul ignore next */ util.global.Long\n\t\t         || util.inquire(\"long\");\n\n\t\t/**\n\t\t * Regular expression used to verify 2 bit (`bool`) map keys.\n\t\t * @type {RegExp}\n\t\t * @const\n\t\t */\n\t\tutil.key2Re = /^true|false|0|1$/;\n\n\t\t/**\n\t\t * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n\t\t * @type {RegExp}\n\t\t * @const\n\t\t */\n\t\tutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n\t\t/**\n\t\t * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n\t\t * @type {RegExp}\n\t\t * @const\n\t\t */\n\t\tutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n\t\t/**\n\t\t * Converts a number or long to an 8 characters long hash string.\n\t\t * @param {Long|number} value Value to convert\n\t\t * @returns {string} Hash\n\t\t */\n\t\tutil.longToHash = function longToHash(value) {\n\t\t    return value\n\t\t        ? util.LongBits.from(value).toHash()\n\t\t        : util.LongBits.zeroHash;\n\t\t};\n\n\t\t/**\n\t\t * Converts an 8 characters long hash string to a long or number.\n\t\t * @param {string} hash Hash\n\t\t * @param {boolean} [unsigned=false] Whether unsigned or not\n\t\t * @returns {Long|number} Original value\n\t\t */\n\t\tutil.longFromHash = function longFromHash(hash, unsigned) {\n\t\t    var bits = util.LongBits.fromHash(hash);\n\t\t    if (util.Long)\n\t\t        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n\t\t    return bits.toNumber(Boolean(unsigned));\n\t\t};\n\n\t\t/**\n\t\t * Merges the properties of the source object into the destination object.\n\t\t * @memberof util\n\t\t * @param {Object.<string,*>} dst Destination object\n\t\t * @param {Object.<string,*>} src Source object\n\t\t * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n\t\t * @returns {Object.<string,*>} Destination object\n\t\t */\n\t\tfunction merge(dst, src, ifNotSet) { // used by converters\n\t\t    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n\t\t        if (dst[keys[i]] === undefined || !ifNotSet)\n\t\t            dst[keys[i]] = src[keys[i]];\n\t\t    return dst;\n\t\t}\n\n\t\tutil.merge = merge;\n\n\t\t/**\n\t\t * Converts the first character of a string to lower case.\n\t\t * @param {string} str String to convert\n\t\t * @returns {string} Converted string\n\t\t */\n\t\tutil.lcFirst = function lcFirst(str) {\n\t\t    return str.charAt(0).toLowerCase() + str.substring(1);\n\t\t};\n\n\t\t/**\n\t\t * Creates a custom error constructor.\n\t\t * @memberof util\n\t\t * @param {string} name Error name\n\t\t * @returns {Constructor<Error>} Custom error constructor\n\t\t */\n\t\tfunction newError(name) {\n\n\t\t    function CustomError(message, properties) {\n\n\t\t        if (!(this instanceof CustomError))\n\t\t            return new CustomError(message, properties);\n\n\t\t        // Error.call(this, message);\n\t\t        // ^ just returns a new error instance because the ctor can be called as a function\n\n\t\t        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n\t\t        /* istanbul ignore next */\n\t\t        if (Error.captureStackTrace) // node\n\t\t            Error.captureStackTrace(this, CustomError);\n\t\t        else\n\t\t            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n\t\t        if (properties)\n\t\t            merge(this, properties);\n\t\t    }\n\n\t\t    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n\t\t    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n\t\t    CustomError.prototype.toString = function toString() {\n\t\t        return this.name + \": \" + this.message;\n\t\t    };\n\n\t\t    return CustomError;\n\t\t}\n\n\t\tutil.newError = newError;\n\n\t\t/**\n\t\t * Constructs a new protocol error.\n\t\t * @classdesc Error subclass indicating a protocol specifc error.\n\t\t * @memberof util\n\t\t * @extends Error\n\t\t * @template T extends Message<T>\n\t\t * @constructor\n\t\t * @param {string} message Error message\n\t\t * @param {Object.<string,*>} [properties] Additional properties\n\t\t * @example\n\t\t * try {\n\t\t *     MyMessage.decode(someBuffer); // throws if required fields are missing\n\t\t * } catch (e) {\n\t\t *     if (e instanceof ProtocolError && e.instance)\n\t\t *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n\t\t * }\n\t\t */\n\t\tutil.ProtocolError = newError(\"ProtocolError\");\n\n\t\t/**\n\t\t * So far decoded message instance.\n\t\t * @name util.ProtocolError#instance\n\t\t * @type {Message<T>}\n\t\t */\n\n\t\t/**\n\t\t * A OneOf getter as returned by {@link util.oneOfGetter}.\n\t\t * @typedef OneOfGetter\n\t\t * @type {function}\n\t\t * @returns {string|undefined} Set field name, if any\n\t\t */\n\n\t\t/**\n\t\t * Builds a getter for a oneof's present field name.\n\t\t * @param {string[]} fieldNames Field names\n\t\t * @returns {OneOfGetter} Unbound getter\n\t\t */\n\t\tutil.oneOfGetter = function getOneOf(fieldNames) {\n\t\t    var fieldMap = {};\n\t\t    for (var i = 0; i < fieldNames.length; ++i)\n\t\t        fieldMap[fieldNames[i]] = 1;\n\n\t\t    /**\n\t\t     * @returns {string|undefined} Set field name, if any\n\t\t     * @this Object\n\t\t     * @ignore\n\t\t     */\n\t\t    return function() { // eslint-disable-line consistent-return\n\t\t        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n\t\t            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n\t\t                return keys[i];\n\t\t    };\n\t\t};\n\n\t\t/**\n\t\t * A OneOf setter as returned by {@link util.oneOfSetter}.\n\t\t * @typedef OneOfSetter\n\t\t * @type {function}\n\t\t * @param {string|undefined} value Field name\n\t\t * @returns {undefined}\n\t\t */\n\n\t\t/**\n\t\t * Builds a setter for a oneof's present field name.\n\t\t * @param {string[]} fieldNames Field names\n\t\t * @returns {OneOfSetter} Unbound setter\n\t\t */\n\t\tutil.oneOfSetter = function setOneOf(fieldNames) {\n\n\t\t    /**\n\t\t     * @param {string} name Field name\n\t\t     * @returns {undefined}\n\t\t     * @this Object\n\t\t     * @ignore\n\t\t     */\n\t\t    return function(name) {\n\t\t        for (var i = 0; i < fieldNames.length; ++i)\n\t\t            if (fieldNames[i] !== name)\n\t\t                delete this[fieldNames[i]];\n\t\t    };\n\t\t};\n\n\t\t/**\n\t\t * Default conversion options used for {@link Message#toJSON} implementations.\n\t\t *\n\t\t * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n\t\t *\n\t\t * - Longs become strings\n\t\t * - Enums become string keys\n\t\t * - Bytes become base64 encoded strings\n\t\t * - (Sub-)Messages become plain objects\n\t\t * - Maps become plain objects with all string keys\n\t\t * - Repeated fields become arrays\n\t\t * - NaN and Infinity for float and double fields become strings\n\t\t *\n\t\t * @type {IConversionOptions}\n\t\t * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n\t\t */\n\t\tutil.toJSONOptions = {\n\t\t    longs: String,\n\t\t    enums: String,\n\t\t    bytes: String,\n\t\t    json: true\n\t\t};\n\n\t\t// Sets up buffer utility according to the environment (called in index-minimal)\n\t\tutil._configure = function() {\n\t\t    var Buffer = util.Buffer;\n\t\t    /* istanbul ignore if */\n\t\t    if (!Buffer) {\n\t\t        util._Buffer_from = util._Buffer_allocUnsafe = null;\n\t\t        return;\n\t\t    }\n\t\t    // because node 4.x buffers are incompatible & immutable\n\t\t    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n\t\t    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n\t\t        /* istanbul ignore next */\n\t\t        function Buffer_from(value, encoding) {\n\t\t            return new Buffer(value, encoding);\n\t\t        };\n\t\t    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n\t\t        /* istanbul ignore next */\n\t\t        function Buffer_allocUnsafe(size) {\n\t\t            return new Buffer(size);\n\t\t        };\n\t\t};\n} (minimal));\n\treturn minimal;\n}\n\nexport { requireMinimal as __require };","start":1670465471317,"end":1670465471323,"order":"normal"}]}
