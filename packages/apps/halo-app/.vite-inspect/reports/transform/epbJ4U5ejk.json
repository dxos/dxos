{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoerror@1.3.0/node_modules/nanoerror/index.js","transforms":[{"name":"vite:load-fallback","result":"const format = require('quick-format-unescaped')\n\nclass Nanoerror extends Error {\n  /**\n   * @readonly\n   * @static\n   * @returns {string}\n   */\n  static get code () {\n    return this.name\n  }\n\n  /**\n   * @readonly\n   * @static\n   * @returns {boolean}\n   */\n  static get isNanoerror () {\n    return true\n  }\n\n  /**\n   * @static\n   * @param {Nanoerror} err\n   * @returns {boolean}\n   */\n  static equals (err) {\n    return err.isNanoerror && err.code === this.code\n  }\n\n  /**\n   * Creates a new Error\n   * @param {...any} [args]\n   */\n  constructor (...args) {\n    super()\n\n    // get information from static props\n    const code = this.constructor.code\n    const unformatMessage = this.constructor.message\n\n    /** @type {string} */\n    this.message = format(unformatMessage, args)\n    /** @type {string} */\n    this.name = code\n    /** @type {string} */\n    this.code = this.name\n    /** @type {Array<any>} */\n    this.args = args\n    /** @type {string} */\n    this.unformatMessage = unformatMessage\n\n    Error.captureStackTrace(this, this.constructor)\n  }\n\n  /**\n   * @readonly\n   * @returns {boolean}\n   */\n  get isNanoerror () {\n    return true\n  }\n\n  /**\n   * @param {Nanoerror} err\n   * @returns {boolean}\n   */\n  equals (err) {\n    return err.isNanoerror && err.code === this.code\n  }\n}\n\n/**\n * @type {string}\n * @static\n * @memberof Nanoerror\n */\nNanoerror.message = ''\n\n/**\n * Creates a new Error class\n *\n * @param {string} code\n * @param {string} message\n */\nfunction createError (code, message = '%s') {\n  const obj = {\n    [code]: class extends Nanoerror {\n      /**\n       * @static\n       * @param {Error} err\n       * @returns {Nanoerror}\n       */\n      static from (err) {\n        const newErr = new obj[code](`[${err.toString()}]`)\n        newErr.stack = err.stack || newErr.stack\n        return newErr\n      }\n    }\n  }\n\n  obj[code].message = message\n\n  return obj[code]\n}\n\nmodule.exports = createError\n","start":1670465468205,"end":1670465468261},{"name":"vite:react-babel","result":"const format = require('quick-format-unescaped')\n\nclass Nanoerror extends Error {\n  /**\n   * @readonly\n   * @static\n   * @returns {string}\n   */\n  static get code () {\n    return this.name\n  }\n\n  /**\n   * @readonly\n   * @static\n   * @returns {boolean}\n   */\n  static get isNanoerror () {\n    return true\n  }\n\n  /**\n   * @static\n   * @param {Nanoerror} err\n   * @returns {boolean}\n   */\n  static equals (err) {\n    return err.isNanoerror && err.code === this.code\n  }\n\n  /**\n   * Creates a new Error\n   * @param {...any} [args]\n   */\n  constructor (...args) {\n    super()\n\n    // get information from static props\n    const code = this.constructor.code\n    const unformatMessage = this.constructor.message\n\n    /** @type {string} */\n    this.message = format(unformatMessage, args)\n    /** @type {string} */\n    this.name = code\n    /** @type {string} */\n    this.code = this.name\n    /** @type {Array<any>} */\n    this.args = args\n    /** @type {string} */\n    this.unformatMessage = unformatMessage\n\n    Error.captureStackTrace(this, this.constructor)\n  }\n\n  /**\n   * @readonly\n   * @returns {boolean}\n   */\n  get isNanoerror () {\n    return true\n  }\n\n  /**\n   * @param {Nanoerror} err\n   * @returns {boolean}\n   */\n  equals (err) {\n    return err.isNanoerror && err.code === this.code\n  }\n}\n\n/**\n * @type {string}\n * @static\n * @memberof Nanoerror\n */\nNanoerror.message = ''\n\n/**\n * Creates a new Error class\n *\n * @param {string} code\n * @param {string} message\n */\nfunction createError (code, message = '%s') {\n  const obj = {\n    [code]: class extends Nanoerror {\n      /**\n       * @static\n       * @param {Error} err\n       * @returns {Nanoerror}\n       */\n      static from (err) {\n        const newErr = new obj[code](`[${err.toString()}]`)\n        newErr.stack = err.stack || newErr.stack\n        return newErr\n      }\n    }\n  }\n\n  obj[code].message = message\n\n  return obj[code]\n}\n\nmodule.exports = createError\n","start":1670465468261,"end":1670465468261,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/quick-format-unescaped@3.0.3/node_modules/quick-format-unescaped/index.js?commonjs-proxy\";\n\nconst format = require$$0\n\nclass Nanoerror extends Error {\n  /**\n   * @readonly\n   * @static\n   * @returns {string}\n   */\n  static get code () {\n    return this.name\n  }\n\n  /**\n   * @readonly\n   * @static\n   * @returns {boolean}\n   */\n  static get isNanoerror () {\n    return true\n  }\n\n  /**\n   * @static\n   * @param {Nanoerror} err\n   * @returns {boolean}\n   */\n  static equals (err) {\n    return err.isNanoerror && err.code === this.code\n  }\n\n  /**\n   * Creates a new Error\n   * @param {...any} [args]\n   */\n  constructor (...args) {\n    super()\n\n    // get information from static props\n    const code = this.constructor.code\n    const unformatMessage = this.constructor.message\n\n    /** @type {string} */\n    this.message = format(unformatMessage, args)\n    /** @type {string} */\n    this.name = code\n    /** @type {string} */\n    this.code = this.name\n    /** @type {Array<any>} */\n    this.args = args\n    /** @type {string} */\n    this.unformatMessage = unformatMessage\n\n    Error.captureStackTrace(this, this.constructor)\n  }\n\n  /**\n   * @readonly\n   * @returns {boolean}\n   */\n  get isNanoerror () {\n    return true\n  }\n\n  /**\n   * @param {Nanoerror} err\n   * @returns {boolean}\n   */\n  equals (err) {\n    return err.isNanoerror && err.code === this.code\n  }\n}\n\n/**\n * @type {string}\n * @static\n * @memberof Nanoerror\n */\nNanoerror.message = ''\n\n/**\n * Creates a new Error class\n *\n * @param {string} code\n * @param {string} message\n */\nfunction createError (code, message = '%s') {\n  const obj = {\n    [code]: class extends Nanoerror {\n      /**\n       * @static\n       * @param {Error} err\n       * @returns {Nanoerror}\n       */\n      static from (err) {\n        const newErr = new obj[code](`[${err.toString()}]`)\n        newErr.stack = err.stack || newErr.stack\n        return newErr\n      }\n    }\n  }\n\n  obj[code].message = message\n\n  return obj[code]\n}\n\nvar nanoerror = createError\n\nexport default nanoerror;\nexport { nanoerror as __moduleExports };","start":1670465468262,"end":1670465469529,"order":"normal"}]}
