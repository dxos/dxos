{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/mapfield.js","transforms":[{"name":"vite:load-fallback","result":"\"use strict\";\nmodule.exports = MapField;\n\n// extends Field\nvar Field = require(\"./field\");\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\n\nvar types   = require(\"./types\"),\n    util    = require(\"./util\");\n\n/**\n * Constructs a new map field instance.\n * @classdesc Reflected map field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} keyType Key type\n * @param {string} type Value type\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction MapField(name, id, keyType, type, options, comment) {\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\n\n    /* istanbul ignore if */\n    if (!util.isString(keyType))\n        throw TypeError(\"keyType must be a string\");\n\n    /**\n     * Key type.\n     * @type {string}\n     */\n    this.keyType = keyType; // toJSON, marker\n\n    /**\n     * Resolved key type if not a basic type.\n     * @type {ReflectionObject|null}\n     */\n    this.resolvedKeyType = null;\n\n    // Overrides Field#map\n    this.map = true;\n}\n\n/**\n * Map field descriptor.\n * @interface IMapField\n * @extends {IField}\n * @property {string} keyType Key type\n */\n\n/**\n * Extension map field descriptor.\n * @interface IExtensionMapField\n * @extends IMapField\n * @property {string} extend Extended type\n */\n\n/**\n * Constructs a map field from a map field descriptor.\n * @param {string} name Field name\n * @param {IMapField} json Map field descriptor\n * @returns {MapField} Created map field\n * @throws {TypeError} If arguments are invalid\n */\nMapField.fromJSON = function fromJSON(name, json) {\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\n};\n\n/**\n * Converts this map field to a map field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMapField} Map field descriptor\n */\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"keyType\" , this.keyType,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nMapField.prototype.resolve = function resolve() {\n    if (this.resolved)\n        return this;\n\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\n    if (types.mapKey[this.keyType] === undefined)\n        throw Error(\"invalid key type: \" + this.keyType);\n\n    return Field.prototype.resolve.call(this);\n};\n\n/**\n * Map field decorator (TypeScript).\n * @name MapField.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\n * @returns {FieldDecorator} Decorator function\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\n */\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\n\n    // submessage value: decorate the submessage and use its name as the type\n    if (typeof fieldValueType === \"function\")\n        fieldValueType = util.decorateType(fieldValueType).name;\n\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\n    else if (fieldValueType && typeof fieldValueType === \"object\")\n        fieldValueType = util.decorateEnum(fieldValueType).name;\n\n    return function mapFieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\n    };\n};\n","start":1670465470605,"end":1670465470667},{"name":"vite:react-babel","result":"\"use strict\";\nmodule.exports = MapField;\n\n// extends Field\nvar Field = require(\"./field\");\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\n\nvar types   = require(\"./types\"),\n    util    = require(\"./util\");\n\n/**\n * Constructs a new map field instance.\n * @classdesc Reflected map field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} keyType Key type\n * @param {string} type Value type\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction MapField(name, id, keyType, type, options, comment) {\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\n\n    /* istanbul ignore if */\n    if (!util.isString(keyType))\n        throw TypeError(\"keyType must be a string\");\n\n    /**\n     * Key type.\n     * @type {string}\n     */\n    this.keyType = keyType; // toJSON, marker\n\n    /**\n     * Resolved key type if not a basic type.\n     * @type {ReflectionObject|null}\n     */\n    this.resolvedKeyType = null;\n\n    // Overrides Field#map\n    this.map = true;\n}\n\n/**\n * Map field descriptor.\n * @interface IMapField\n * @extends {IField}\n * @property {string} keyType Key type\n */\n\n/**\n * Extension map field descriptor.\n * @interface IExtensionMapField\n * @extends IMapField\n * @property {string} extend Extended type\n */\n\n/**\n * Constructs a map field from a map field descriptor.\n * @param {string} name Field name\n * @param {IMapField} json Map field descriptor\n * @returns {MapField} Created map field\n * @throws {TypeError} If arguments are invalid\n */\nMapField.fromJSON = function fromJSON(name, json) {\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\n};\n\n/**\n * Converts this map field to a map field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMapField} Map field descriptor\n */\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"keyType\" , this.keyType,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nMapField.prototype.resolve = function resolve() {\n    if (this.resolved)\n        return this;\n\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\n    if (types.mapKey[this.keyType] === undefined)\n        throw Error(\"invalid key type: \" + this.keyType);\n\n    return Field.prototype.resolve.call(this);\n};\n\n/**\n * Map field decorator (TypeScript).\n * @name MapField.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\n * @returns {FieldDecorator} Decorator function\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\n */\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\n\n    // submessage value: decorate the submessage and use its name as the type\n    if (typeof fieldValueType === \"function\")\n        fieldValueType = util.decorateType(fieldValueType).name;\n\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\n    else if (fieldValueType && typeof fieldValueType === \"object\")\n        fieldValueType = util.decorateEnum(fieldValueType).name;\n\n    return function mapFieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\n    };\n};\n","start":1670465470667,"end":1670465470667,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/field.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/types.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/util.js?commonjs-wrapped\";\n\nvar mapfield;\nvar hasRequiredMapfield;\n\nfunction requireMapfield () {\n\tif (hasRequiredMapfield) return mapfield;\n\thasRequiredMapfield = 1;\n\t\"use strict\";\n\tmapfield = MapField;\n\n\t// extends Field\n\tvar Field = require$$0();\n\t((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\n\n\tvar types   = require$$1(),\n\t    util    = require$$2();\n\n\t/**\n\t * Constructs a new map field instance.\n\t * @classdesc Reflected map field.\n\t * @extends FieldBase\n\t * @constructor\n\t * @param {string} name Unique name within its namespace\n\t * @param {number} id Unique id within its namespace\n\t * @param {string} keyType Key type\n\t * @param {string} type Value type\n\t * @param {Object.<string,*>} [options] Declared options\n\t * @param {string} [comment] Comment associated with this field\n\t */\n\tfunction MapField(name, id, keyType, type, options, comment) {\n\t    Field.call(this, name, id, type, undefined, undefined, options, comment);\n\n\t    /* istanbul ignore if */\n\t    if (!util.isString(keyType))\n\t        throw TypeError(\"keyType must be a string\");\n\n\t    /**\n\t     * Key type.\n\t     * @type {string}\n\t     */\n\t    this.keyType = keyType; // toJSON, marker\n\n\t    /**\n\t     * Resolved key type if not a basic type.\n\t     * @type {ReflectionObject|null}\n\t     */\n\t    this.resolvedKeyType = null;\n\n\t    // Overrides Field#map\n\t    this.map = true;\n\t}\n\n\t/**\n\t * Map field descriptor.\n\t * @interface IMapField\n\t * @extends {IField}\n\t * @property {string} keyType Key type\n\t */\n\n\t/**\n\t * Extension map field descriptor.\n\t * @interface IExtensionMapField\n\t * @extends IMapField\n\t * @property {string} extend Extended type\n\t */\n\n\t/**\n\t * Constructs a map field from a map field descriptor.\n\t * @param {string} name Field name\n\t * @param {IMapField} json Map field descriptor\n\t * @returns {MapField} Created map field\n\t * @throws {TypeError} If arguments are invalid\n\t */\n\tMapField.fromJSON = function fromJSON(name, json) {\n\t    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\n\t};\n\n\t/**\n\t * Converts this map field to a map field descriptor.\n\t * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n\t * @returns {IMapField} Map field descriptor\n\t */\n\tMapField.prototype.toJSON = function toJSON(toJSONOptions) {\n\t    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n\t    return util.toObject([\n\t        \"keyType\" , this.keyType,\n\t        \"type\"    , this.type,\n\t        \"id\"      , this.id,\n\t        \"extend\"  , this.extend,\n\t        \"options\" , this.options,\n\t        \"comment\" , keepComments ? this.comment : undefined\n\t    ]);\n\t};\n\n\t/**\n\t * @override\n\t */\n\tMapField.prototype.resolve = function resolve() {\n\t    if (this.resolved)\n\t        return this;\n\n\t    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\n\t    if (types.mapKey[this.keyType] === undefined)\n\t        throw Error(\"invalid key type: \" + this.keyType);\n\n\t    return Field.prototype.resolve.call(this);\n\t};\n\n\t/**\n\t * Map field decorator (TypeScript).\n\t * @name MapField.d\n\t * @function\n\t * @param {number} fieldId Field id\n\t * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\n\t * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\n\t * @returns {FieldDecorator} Decorator function\n\t * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\n\t */\n\tMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\n\n\t    // submessage value: decorate the submessage and use its name as the type\n\t    if (typeof fieldValueType === \"function\")\n\t        fieldValueType = util.decorateType(fieldValueType).name;\n\n\t    // enum reference value: create a reflected copy of the enum and keep reuseing it\n\t    else if (fieldValueType && typeof fieldValueType === \"object\")\n\t        fieldValueType = util.decorateEnum(fieldValueType).name;\n\n\t    return function mapFieldDecorator(prototype, fieldName) {\n\t        util.decorateType(prototype.constructor)\n\t            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\n\t    };\n\t};\n\treturn mapfield;\n}\n\nexport { requireMapfield as __require };","start":1670465470668,"end":1670465471380,"order":"normal"},{"name":"polyfill-node","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/field.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/types.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/util.js?commonjs-wrapped\";\n\nvar mapfield;\nvar hasRequiredMapfield;\n\nfunction requireMapfield () {\n\tif (hasRequiredMapfield) return mapfield;\n\thasRequiredMapfield = 1;\n\t\"use strict\";\n\tmapfield = MapField;\n\n\t// extends Field\n\tvar Field = require$$0();\n\t((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\n\n\tvar types   = require$$1(),\n\t    util    = require$$2();\n\n\t/**\n\t * Constructs a new map field instance.\n\t * @classdesc Reflected map field.\n\t * @extends FieldBase\n\t * @constructor\n\t * @param {string} name Unique name within its namespace\n\t * @param {number} id Unique id within its namespace\n\t * @param {string} keyType Key type\n\t * @param {string} type Value type\n\t * @param {Object.<string,*>} [options] Declared options\n\t * @param {string} [comment] Comment associated with this field\n\t */\n\tfunction MapField(name, id, keyType, type, options, comment) {\n\t    Field.call(this, name, id, type, undefined, undefined, options, comment);\n\n\t    /* istanbul ignore if */\n\t    if (!util.isString(keyType))\n\t        throw TypeError(\"keyType must be a string\");\n\n\t    /**\n\t     * Key type.\n\t     * @type {string}\n\t     */\n\t    this.keyType = keyType; // toJSON, marker\n\n\t    /**\n\t     * Resolved key type if not a basic type.\n\t     * @type {ReflectionObject|null}\n\t     */\n\t    this.resolvedKeyType = null;\n\n\t    // Overrides Field#map\n\t    this.map = true;\n\t}\n\n\t/**\n\t * Map field descriptor.\n\t * @interface IMapField\n\t * @extends {IField}\n\t * @property {string} keyType Key type\n\t */\n\n\t/**\n\t * Extension map field descriptor.\n\t * @interface IExtensionMapField\n\t * @extends IMapField\n\t * @property {string} extend Extended type\n\t */\n\n\t/**\n\t * Constructs a map field from a map field descriptor.\n\t * @param {string} name Field name\n\t * @param {IMapField} json Map field descriptor\n\t * @returns {MapField} Created map field\n\t * @throws {TypeError} If arguments are invalid\n\t */\n\tMapField.fromJSON = function fromJSON(name, json) {\n\t    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\n\t};\n\n\t/**\n\t * Converts this map field to a map field descriptor.\n\t * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n\t * @returns {IMapField} Map field descriptor\n\t */\n\tMapField.prototype.toJSON = function toJSON(toJSONOptions) {\n\t    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n\t    return util.toObject([\n\t        \"keyType\" , this.keyType,\n\t        \"type\"    , this.type,\n\t        \"id\"      , this.id,\n\t        \"extend\"  , this.extend,\n\t        \"options\" , this.options,\n\t        \"comment\" , keepComments ? this.comment : undefined\n\t    ]);\n\t};\n\n\t/**\n\t * @override\n\t */\n\tMapField.prototype.resolve = function resolve() {\n\t    if (this.resolved)\n\t        return this;\n\n\t    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\n\t    if (types.mapKey[this.keyType] === undefined)\n\t        throw Error(\"invalid key type: \" + this.keyType);\n\n\t    return Field.prototype.resolve.call(this);\n\t};\n\n\t/**\n\t * Map field decorator (TypeScript).\n\t * @name MapField.d\n\t * @function\n\t * @param {number} fieldId Field id\n\t * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\n\t * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\n\t * @returns {FieldDecorator} Decorator function\n\t * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\n\t */\n\tMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\n\n\t    // submessage value: decorate the submessage and use its name as the type\n\t    if (typeof fieldValueType === \"function\")\n\t        fieldValueType = util.decorateType(fieldValueType).name;\n\n\t    // enum reference value: create a reflected copy of the enum and keep reuseing it\n\t    else if (fieldValueType && typeof fieldValueType === \"object\")\n\t        fieldValueType = util.decorateEnum(fieldValueType).name;\n\n\t    return function mapFieldDecorator(prototype, fieldName) {\n\t        util.decorateType(prototype.constructor)\n\t            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\n\t    };\n\t};\n\treturn mapfield;\n}\n\nexport { requireMapfield as __require };","start":1670465471384,"end":1670465471385,"order":"normal"}]}
