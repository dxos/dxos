{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/util/longbits.js","transforms":[{"name":"vite:load-fallback","result":"\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","start":1670465471109,"end":1670465471278},{"name":"vite:react-babel","result":"\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","start":1670465471278,"end":1670465471278,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/util/minimal.js?commonjs-wrapped\";\n\nvar longbits;\nvar hasRequiredLongbits;\n\nfunction requireLongbits () {\n\tif (hasRequiredLongbits) return longbits;\n\thasRequiredLongbits = 1;\n\t\"use strict\";\n\tlongbits = LongBits;\n\n\tvar util = require$$0();\n\n\t/**\n\t * Constructs new long bits.\n\t * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n\t * @memberof util\n\t * @constructor\n\t * @param {number} lo Low 32 bits, unsigned\n\t * @param {number} hi High 32 bits, unsigned\n\t */\n\tfunction LongBits(lo, hi) {\n\n\t    // note that the casts below are theoretically unnecessary as of today, but older statically\n\t    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n\t    /**\n\t     * Low bits.\n\t     * @type {number}\n\t     */\n\t    this.lo = lo >>> 0;\n\n\t    /**\n\t     * High bits.\n\t     * @type {number}\n\t     */\n\t    this.hi = hi >>> 0;\n\t}\n\n\t/**\n\t * Zero bits.\n\t * @memberof util.LongBits\n\t * @type {util.LongBits}\n\t */\n\tvar zero = LongBits.zero = new LongBits(0, 0);\n\n\tzero.toNumber = function() { return 0; };\n\tzero.zzEncode = zero.zzDecode = function() { return this; };\n\tzero.length = function() { return 1; };\n\n\t/**\n\t * Zero hash.\n\t * @memberof util.LongBits\n\t * @type {string}\n\t */\n\tvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n\t/**\n\t * Constructs new long bits from the specified number.\n\t * @param {number} value Value\n\t * @returns {util.LongBits} Instance\n\t */\n\tLongBits.fromNumber = function fromNumber(value) {\n\t    if (value === 0)\n\t        return zero;\n\t    var sign = value < 0;\n\t    if (sign)\n\t        value = -value;\n\t    var lo = value >>> 0,\n\t        hi = (value - lo) / 4294967296 >>> 0;\n\t    if (sign) {\n\t        hi = ~hi >>> 0;\n\t        lo = ~lo >>> 0;\n\t        if (++lo > 4294967295) {\n\t            lo = 0;\n\t            if (++hi > 4294967295)\n\t                hi = 0;\n\t        }\n\t    }\n\t    return new LongBits(lo, hi);\n\t};\n\n\t/**\n\t * Constructs new long bits from a number, long or string.\n\t * @param {Long|number|string} value Value\n\t * @returns {util.LongBits} Instance\n\t */\n\tLongBits.from = function from(value) {\n\t    if (typeof value === \"number\")\n\t        return LongBits.fromNumber(value);\n\t    if (util.isString(value)) {\n\t        /* istanbul ignore else */\n\t        if (util.Long)\n\t            value = util.Long.fromString(value);\n\t        else\n\t            return LongBits.fromNumber(parseInt(value, 10));\n\t    }\n\t    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n\t};\n\n\t/**\n\t * Converts this long bits to a possibly unsafe JavaScript number.\n\t * @param {boolean} [unsigned=false] Whether unsigned or not\n\t * @returns {number} Possibly unsafe number\n\t */\n\tLongBits.prototype.toNumber = function toNumber(unsigned) {\n\t    if (!unsigned && this.hi >>> 31) {\n\t        var lo = ~this.lo + 1 >>> 0,\n\t            hi = ~this.hi     >>> 0;\n\t        if (!lo)\n\t            hi = hi + 1 >>> 0;\n\t        return -(lo + hi * 4294967296);\n\t    }\n\t    return this.lo + this.hi * 4294967296;\n\t};\n\n\t/**\n\t * Converts this long bits to a long.\n\t * @param {boolean} [unsigned=false] Whether unsigned or not\n\t * @returns {Long} Long\n\t */\n\tLongBits.prototype.toLong = function toLong(unsigned) {\n\t    return util.Long\n\t        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n\t        /* istanbul ignore next */\n\t        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n\t};\n\n\tvar charCodeAt = String.prototype.charCodeAt;\n\n\t/**\n\t * Constructs new long bits from the specified 8 characters long hash.\n\t * @param {string} hash Hash\n\t * @returns {util.LongBits} Bits\n\t */\n\tLongBits.fromHash = function fromHash(hash) {\n\t    if (hash === zeroHash)\n\t        return zero;\n\t    return new LongBits(\n\t        ( charCodeAt.call(hash, 0)\n\t        | charCodeAt.call(hash, 1) << 8\n\t        | charCodeAt.call(hash, 2) << 16\n\t        | charCodeAt.call(hash, 3) << 24) >>> 0\n\t    ,\n\t        ( charCodeAt.call(hash, 4)\n\t        | charCodeAt.call(hash, 5) << 8\n\t        | charCodeAt.call(hash, 6) << 16\n\t        | charCodeAt.call(hash, 7) << 24) >>> 0\n\t    );\n\t};\n\n\t/**\n\t * Converts this long bits to a 8 characters long hash.\n\t * @returns {string} Hash\n\t */\n\tLongBits.prototype.toHash = function toHash() {\n\t    return String.fromCharCode(\n\t        this.lo        & 255,\n\t        this.lo >>> 8  & 255,\n\t        this.lo >>> 16 & 255,\n\t        this.lo >>> 24      ,\n\t        this.hi        & 255,\n\t        this.hi >>> 8  & 255,\n\t        this.hi >>> 16 & 255,\n\t        this.hi >>> 24\n\t    );\n\t};\n\n\t/**\n\t * Zig-zag encodes this long bits.\n\t * @returns {util.LongBits} `this`\n\t */\n\tLongBits.prototype.zzEncode = function zzEncode() {\n\t    var mask =   this.hi >> 31;\n\t    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n\t    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n\t    return this;\n\t};\n\n\t/**\n\t * Zig-zag decodes this long bits.\n\t * @returns {util.LongBits} `this`\n\t */\n\tLongBits.prototype.zzDecode = function zzDecode() {\n\t    var mask = -(this.lo & 1);\n\t    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n\t    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n\t    return this;\n\t};\n\n\t/**\n\t * Calculates the length of this longbits when encoded as a varint.\n\t * @returns {number} Length\n\t */\n\tLongBits.prototype.length = function length() {\n\t    var part0 =  this.lo,\n\t        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n\t        part2 =  this.hi >>> 24;\n\t    return part2 === 0\n\t         ? part1 === 0\n\t           ? part0 < 16384\n\t             ? part0 < 128 ? 1 : 2\n\t             : part0 < 2097152 ? 3 : 4\n\t           : part1 < 16384\n\t             ? part1 < 128 ? 5 : 6\n\t             : part1 < 2097152 ? 7 : 8\n\t         : part2 < 128 ? 9 : 10;\n\t};\n\treturn longbits;\n}\n\nexport { requireLongbits as __require };","start":1670465471279,"end":1670465471281,"order":"normal"}]}
