{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/random-access-web@2.0.3/node_modules/random-access-web/mutable-file-wrapper.js","transforms":[{"name":"vite:load-fallback","result":"\nmodule.exports = function mutableStorage (options) {\n  const randomAccess = require('random-access-storage')\n  const mutableAccess = require('random-access-idb-mutable-file')\n\n  let mounted = null\n  let loading = null\n\n  function doMount () {\n    return mutableAccess.mount(options).then((requestFile) => {\n      mounted = requestFile\n      loading = null\n    })\n  }\n\n  return (name) => {\n    let file = null\n\n    return randomAccess({\n      open: function (req) {\n        if (!mounted && !loading) {\n          loading = doMount()\n        }\n        if(loading) {\n          loading.then(() => {\n            this._open(req)\n          }, (err) => {\n            req.callback(err)\n          })\n          return\n        }\n\n        file = mounted(name)\n\n        req.callback()\n      },\n      write: function (req) {\n        file.write(req.offset, req.data, function(err, data) {\n          req.callback(err, data)\n        })\n      },\n      read: function (req) {\n        file.read(req.offset, req.size,  function(err, data) {\n          req.callback(err, data)\n        })\n      },\n      del: function (req) {\n        file.del(req.offset, req.size,  function(err, data) {\n          req.callback(err, data)\n        })\n      },\n      stat: function (req) {\n        file.stat( function(err, data) {\n          req.callback(err, data)\n        })\n      },\n      close: function (req) {\n        file.close( function(err, data) {\n          req.callback(err, data)\n        })\n      },\n      destroy: function (req) {\n        file.destroy( function(err, data) {\n          req.callback(err, data)\n        })\n      }\n    })\n  }\n}\n","start":1670465468279,"end":1670465468357},{"name":"vite:react-babel","result":"\nmodule.exports = function mutableStorage (options) {\n  const randomAccess = require('random-access-storage')\n  const mutableAccess = require('random-access-idb-mutable-file')\n\n  let mounted = null\n  let loading = null\n\n  function doMount () {\n    return mutableAccess.mount(options).then((requestFile) => {\n      mounted = requestFile\n      loading = null\n    })\n  }\n\n  return (name) => {\n    let file = null\n\n    return randomAccess({\n      open: function (req) {\n        if (!mounted && !loading) {\n          loading = doMount()\n        }\n        if(loading) {\n          loading.then(() => {\n            this._open(req)\n          }, (err) => {\n            req.callback(err)\n          })\n          return\n        }\n\n        file = mounted(name)\n\n        req.callback()\n      },\n      write: function (req) {\n        file.write(req.offset, req.data, function(err, data) {\n          req.callback(err, data)\n        })\n      },\n      read: function (req) {\n        file.read(req.offset, req.size,  function(err, data) {\n          req.callback(err, data)\n        })\n      },\n      del: function (req) {\n        file.del(req.offset, req.size,  function(err, data) {\n          req.callback(err, data)\n        })\n      },\n      stat: function (req) {\n        file.stat( function(err, data) {\n          req.callback(err, data)\n        })\n      },\n      close: function (req) {\n        file.close( function(err, data) {\n          req.callback(err, data)\n        })\n      },\n      destroy: function (req) {\n        file.destroy( function(err, data) {\n          req.callback(err, data)\n        })\n      }\n    })\n  }\n}\n","start":1670465468357,"end":1670465468357,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/random-access-storage@1.4.3/node_modules/random-access-storage/index.js?commonjs-proxy\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/random-access-idb-mutable-file@0.3.0/node_modules/random-access-idb-mutable-file/lib/random-access-idb-mutable-file.js?commonjs-wrapped\";\n\nvar mutableFileWrapper = function mutableStorage (options) {\n  const randomAccess = require$$0\n  const mutableAccess = require$$1()\n\n  let mounted = null\n  let loading = null\n\n  function doMount () {\n    return mutableAccess.mount(options).then((requestFile) => {\n      mounted = requestFile\n      loading = null\n    })\n  }\n\n  return (name) => {\n    let file = null\n\n    return randomAccess({\n      open: function (req) {\n        if (!mounted && !loading) {\n          loading = doMount()\n        }\n        if(loading) {\n          loading.then(() => {\n            this._open(req)\n          }, (err) => {\n            req.callback(err)\n          })\n          return\n        }\n\n        file = mounted(name)\n\n        req.callback()\n      },\n      write: function (req) {\n        file.write(req.offset, req.data, function(err, data) {\n          req.callback(err, data)\n        })\n      },\n      read: function (req) {\n        file.read(req.offset, req.size,  function(err, data) {\n          req.callback(err, data)\n        })\n      },\n      del: function (req) {\n        file.del(req.offset, req.size,  function(err, data) {\n          req.callback(err, data)\n        })\n      },\n      stat: function (req) {\n        file.stat( function(err, data) {\n          req.callback(err, data)\n        })\n      },\n      close: function (req) {\n        file.close( function(err, data) {\n          req.callback(err, data)\n        })\n      },\n      destroy: function (req) {\n        file.destroy( function(err, data) {\n          req.callback(err, data)\n        })\n      }\n    })\n  }\n}\n\nexport default mutableFileWrapper;\nexport { mutableFileWrapper as __moduleExports };","start":1670465468358,"end":1670465470491,"order":"normal"}]}
