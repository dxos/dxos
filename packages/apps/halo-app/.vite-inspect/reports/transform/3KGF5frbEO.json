{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/mode-ctr.js","transforms":[{"name":"vite:load-fallback","result":";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Counter block mode.\n\t */\n\tCryptoJS.mode.CTR = (function () {\n\t    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = CTR.Encryptor = CTR.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            var keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Increment counter\n\t            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTR.Decryptor = Encryptor;\n\n\t    return CTR;\n\t}());\n\n\n\treturn CryptoJS.mode.CTR;\n\n}));","start":1670465469029,"end":1670465469171},{"name":"vite:react-babel","result":";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Counter block mode.\n\t */\n\tCryptoJS.mode.CTR = (function () {\n\t    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = CTR.Encryptor = CTR.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            var keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Increment counter\n\t            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTR.Decryptor = Encryptor;\n\n\t    return CTR;\n\t}());\n\n\n\treturn CryptoJS.mode.CTR;\n\n}));","start":1670465469171,"end":1670465469171,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as modeCtrModule, exports as modeCtr } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/mode-ctr.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/core.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/cipher-core.js?commonjs-wrapped\";\n\nvar hasRequiredModeCtr;\n\nfunction requireModeCtr () {\n\tif (hasRequiredModeCtr) return modeCtr;\n\thasRequiredModeCtr = 1;\n\t(function (module, exports) {\n\t\t;(function (root, factory, undef) {\n\t\t\tif ('object' === \"object\") {\n\t\t\t\t// CommonJS\n\t\t\t\tmodule.exports = exports = factory(require$$0(), require$$1());\n\t\t\t}\n\t\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t\t// AMD\n\t\t\t\tundefined([\"./core\", \"./cipher-core\"], factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Global (browser)\n\t\t\t\tfactory(root.CryptoJS);\n\t\t\t}\n\t\t}(commonjsHelpers.commonjsGlobal, function (CryptoJS) {\n\n\t\t\t/**\n\t\t\t * Counter block mode.\n\t\t\t */\n\t\t\tCryptoJS.mode.CTR = (function () {\n\t\t\t    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n\n\t\t\t    var Encryptor = CTR.Encryptor = CTR.extend({\n\t\t\t        processBlock: function (words, offset) {\n\t\t\t            // Shortcuts\n\t\t\t            var cipher = this._cipher\n\t\t\t            var blockSize = cipher.blockSize;\n\t\t\t            var iv = this._iv;\n\t\t\t            var counter = this._counter;\n\n\t\t\t            // Generate keystream\n\t\t\t            if (iv) {\n\t\t\t                counter = this._counter = iv.slice(0);\n\n\t\t\t                // Remove IV for subsequent blocks\n\t\t\t                this._iv = undefined;\n\t\t\t            }\n\t\t\t            var keystream = counter.slice(0);\n\t\t\t            cipher.encryptBlock(keystream, 0);\n\n\t\t\t            // Increment counter\n\t\t\t            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0\n\n\t\t\t            // Encrypt\n\t\t\t            for (var i = 0; i < blockSize; i++) {\n\t\t\t                words[offset + i] ^= keystream[i];\n\t\t\t            }\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    CTR.Decryptor = Encryptor;\n\n\t\t\t    return CTR;\n\t\t\t}());\n\n\n\t\t\treturn CryptoJS.mode.CTR;\n\n\t\t}));\n} (modeCtrModule, modeCtr));\n\treturn modeCtr;\n}\n\nexport { requireModeCtr as __require };","start":1670465469172,"end":1670465469172,"order":"normal"},{"name":"polyfill-node","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as modeCtrModule, exports as modeCtr } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/mode-ctr.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/core.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/cipher-core.js?commonjs-wrapped\";\n\nvar hasRequiredModeCtr;\n\nfunction requireModeCtr () {\n\tif (hasRequiredModeCtr) return modeCtr;\n\thasRequiredModeCtr = 1;\n\t(function (module, exports) {\n\t\t;(function (root, factory, undef) {\n\t\t\tif ('object' === \"object\") {\n\t\t\t\t// CommonJS\n\t\t\t\tmodule.exports = exports = factory(require$$0(), require$$1());\n\t\t\t}\n\t\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t\t// AMD\n\t\t\t\tundefined([\"./core\", \"./cipher-core\"], factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Global (browser)\n\t\t\t\tfactory(root.CryptoJS);\n\t\t\t}\n\t\t}(commonjsHelpers.commonjsGlobal, function (CryptoJS) {\n\n\t\t\t/**\n\t\t\t * Counter block mode.\n\t\t\t */\n\t\t\tCryptoJS.mode.CTR = (function () {\n\t\t\t    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n\n\t\t\t    var Encryptor = CTR.Encryptor = CTR.extend({\n\t\t\t        processBlock: function (words, offset) {\n\t\t\t            // Shortcuts\n\t\t\t            var cipher = this._cipher\n\t\t\t            var blockSize = cipher.blockSize;\n\t\t\t            var iv = this._iv;\n\t\t\t            var counter = this._counter;\n\n\t\t\t            // Generate keystream\n\t\t\t            if (iv) {\n\t\t\t                counter = this._counter = iv.slice(0);\n\n\t\t\t                // Remove IV for subsequent blocks\n\t\t\t                this._iv = undefined;\n\t\t\t            }\n\t\t\t            var keystream = counter.slice(0);\n\t\t\t            cipher.encryptBlock(keystream, 0);\n\n\t\t\t            // Increment counter\n\t\t\t            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0\n\n\t\t\t            // Encrypt\n\t\t\t            for (var i = 0; i < blockSize; i++) {\n\t\t\t                words[offset + i] ^= keystream[i];\n\t\t\t            }\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    CTR.Decryptor = Encryptor;\n\n\t\t\t    return CTR;\n\t\t\t}());\n\n\n\t\t\treturn CryptoJS.mode.CTR;\n\n\t\t}));\n} (modeCtrModule, modeCtr));\n\treturn modeCtr;\n}\n\nexport { requireModeCtr as __require };","start":1670465469172,"end":1670465469173,"order":"normal"}]}
