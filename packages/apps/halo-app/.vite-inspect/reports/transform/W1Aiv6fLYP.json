{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/cipher-core.js","transforms":[{"name":"vite:load-fallback","result":";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./evpkdf\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./evpkdf\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher core components.\n\t */\n\tCryptoJS.lib.Cipher || (function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var Base64 = C_enc.Base64;\n\t    var C_algo = C.algo;\n\t    var EvpKDF = C_algo.EvpKDF;\n\n\t    /**\n\t     * Abstract base cipher template.\n\t     *\n\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n\t     */\n\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {WordArray} iv The IV to use for this operation.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Creates this cipher in encryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createEncryptor: function (key, cfg) {\n\t            return this.create(this._ENC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Creates this cipher in decryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createDecryptor: function (key, cfg) {\n\t            return this.create(this._DEC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created cipher.\n\t         *\n\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n\t         */\n\t        init: function (xformMode, key, cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Store transform mode and key\n\t            this._xformMode = xformMode;\n\t            this._key = key;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this cipher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     cipher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-cipher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Adds data to be encrypted or decrypted.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.process('data');\n\t         *     var encrypted = cipher.process(wordArray);\n\t         */\n\t        process: function (dataUpdate) {\n\t            // Append\n\t            this._append(dataUpdate);\n\n\t            // Process available blocks\n\t            return this._process();\n\t        },\n\n\t        /**\n\t         * Finalizes the encryption or decryption process.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after final processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.finalize();\n\t         *     var encrypted = cipher.finalize('data');\n\t         *     var encrypted = cipher.finalize(wordArray);\n\t         */\n\t        finalize: function (dataUpdate) {\n\t            // Final data update\n\t            if (dataUpdate) {\n\t                this._append(dataUpdate);\n\t            }\n\n\t            // Perform concrete-cipher logic\n\t            var finalProcessedData = this._doFinalize();\n\n\t            return finalProcessedData;\n\t        },\n\n\t        keySize: 128/32,\n\n\t        ivSize: 128/32,\n\n\t        _ENC_XFORM_MODE: 1,\n\n\t        _DEC_XFORM_MODE: 2,\n\n\t        /**\n\t         * Creates shortcut functions to a cipher's object interface.\n\t         *\n\t         * @param {Cipher} cipher The cipher to create a helper for.\n\t         *\n\t         * @return {Object} An object with encrypt and decrypt shortcut functions.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n\t         */\n\t        _createHelper: (function () {\n\t            function selectCipherStrategy(key) {\n\t                if (typeof key == 'string') {\n\t                    return PasswordBasedCipher;\n\t                } else {\n\t                    return SerializableCipher;\n\t                }\n\t            }\n\n\t            return function (cipher) {\n\t                return {\n\t                    encrypt: function (message, key, cfg) {\n\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n\t                    },\n\n\t                    decrypt: function (ciphertext, key, cfg) {\n\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n\t                    }\n\t                };\n\t            };\n\t        }())\n\t    });\n\n\t    /**\n\t     * Abstract base stream cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n\t     */\n\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n\t        _doFinalize: function () {\n\t            // Process partial blocks\n\t            var finalProcessedBlocks = this._process(!!'flush');\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 1\n\t    });\n\n\t    /**\n\t     * Mode namespace.\n\t     */\n\t    var C_mode = C.mode = {};\n\n\t    /**\n\t     * Abstract base block cipher mode template.\n\t     */\n\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n\t        /**\n\t         * Creates this mode for encryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n\t         */\n\t        createEncryptor: function (cipher, iv) {\n\t            return this.Encryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Creates this mode for decryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n\t         */\n\t        createDecryptor: function (cipher, iv) {\n\t            return this.Decryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created mode.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n\t         */\n\t        init: function (cipher, iv) {\n\t            this._cipher = cipher;\n\t            this._iv = iv;\n\t        }\n\t    });\n\n\t    /**\n\t     * Cipher Block Chaining mode.\n\t     */\n\t    var CBC = C_mode.CBC = (function () {\n\t        /**\n\t         * Abstract base CBC mode.\n\t         */\n\t        var CBC = BlockCipherMode.extend();\n\n\t        /**\n\t         * CBC encryptor.\n\t         */\n\t        CBC.Encryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // XOR and encrypt\n\t                xorBlock.call(this, words, offset, blockSize);\n\t                cipher.encryptBlock(words, offset);\n\n\t                // Remember this block to use with next block\n\t                this._prevBlock = words.slice(offset, offset + blockSize);\n\t            }\n\t        });\n\n\t        /**\n\t         * CBC decryptor.\n\t         */\n\t        CBC.Decryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // Remember this block to use with next block\n\t                var thisBlock = words.slice(offset, offset + blockSize);\n\n\t                // Decrypt and XOR\n\t                cipher.decryptBlock(words, offset);\n\t                xorBlock.call(this, words, offset, blockSize);\n\n\t                // This block becomes the previous block\n\t                this._prevBlock = thisBlock;\n\t            }\n\t        });\n\n\t        function xorBlock(words, offset, blockSize) {\n\t            // Shortcut\n\t            var iv = this._iv;\n\n\t            // Choose mixing block\n\t            if (iv) {\n\t                var block = iv;\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            } else {\n\t                var block = this._prevBlock;\n\t            }\n\n\t            // XOR blocks\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= block[i];\n\t            }\n\t        }\n\n\t        return CBC;\n\t    }());\n\n\t    /**\n\t     * Padding namespace.\n\t     */\n\t    var C_pad = C.pad = {};\n\n\t    /**\n\t     * PKCS #5/7 padding strategy.\n\t     */\n\t    var Pkcs7 = C_pad.Pkcs7 = {\n\t        /**\n\t         * Pads data using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to pad.\n\t         * @param {number} blockSize The multiple that the data should be padded to.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n\t         */\n\t        pad: function (data, blockSize) {\n\t            // Shortcut\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count padding bytes\n\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t            // Create padding word\n\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n\n\t            // Create padding\n\t            var paddingWords = [];\n\t            for (var i = 0; i < nPaddingBytes; i += 4) {\n\t                paddingWords.push(paddingWord);\n\t            }\n\t            var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n\t            // Add padding\n\t            data.concat(padding);\n\t        },\n\n\t        /**\n\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to unpad.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n\t         */\n\t        unpad: function (data) {\n\t            // Get number of padding bytes from last byte\n\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t            // Remove padding\n\t            data.sigBytes -= nPaddingBytes;\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract base block cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n\t     */\n\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Mode} mode The block mode to use. Default: CBC\n\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n\t         */\n\t        cfg: Cipher.cfg.extend({\n\t            mode: CBC,\n\t            padding: Pkcs7\n\t        }),\n\n\t        reset: function () {\n\t            // Reset cipher\n\t            Cipher.reset.call(this);\n\n\t            // Shortcuts\n\t            var cfg = this.cfg;\n\t            var iv = cfg.iv;\n\t            var mode = cfg.mode;\n\n\t            // Reset block mode\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                var modeCreator = mode.createEncryptor;\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                var modeCreator = mode.createDecryptor;\n\t                // Keep at least one block in the buffer for unpadding\n\t                this._minBufferSize = 1;\n\t            }\n\n\t            if (this._mode && this._mode.__creator == modeCreator) {\n\t                this._mode.init(this, iv && iv.words);\n\t            } else {\n\t                this._mode = modeCreator.call(mode, this, iv && iv.words);\n\t                this._mode.__creator = modeCreator;\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (words, offset) {\n\t            this._mode.processBlock(words, offset);\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcut\n\t            var padding = this.cfg.padding;\n\n\t            // Finalize\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                // Pad data\n\t                padding.pad(this._data, this.blockSize);\n\n\t                // Process final blocks\n\t                var finalProcessedBlocks = this._process(!!'flush');\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                // Process final blocks\n\t                var finalProcessedBlocks = this._process(!!'flush');\n\n\t                // Unpad data\n\t                padding.unpad(finalProcessedBlocks);\n\t            }\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 128/32\n\t    });\n\n\t    /**\n\t     * A collection of cipher parameters.\n\t     *\n\t     * @property {WordArray} ciphertext The raw ciphertext.\n\t     * @property {WordArray} key The key to this ciphertext.\n\t     * @property {WordArray} iv The IV used in the ciphering operation.\n\t     * @property {WordArray} salt The salt used with a key derivation function.\n\t     * @property {Cipher} algorithm The cipher algorithm.\n\t     * @property {Mode} mode The block mode used in the ciphering operation.\n\t     * @property {Padding} padding The padding scheme used in the ciphering operation.\n\t     * @property {number} blockSize The block size of the cipher.\n\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n\t     */\n\t    var CipherParams = C_lib.CipherParams = Base.extend({\n\t        /**\n\t         * Initializes a newly created cipher params object.\n\t         *\n\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({\n\t         *         ciphertext: ciphertextWordArray,\n\t         *         key: keyWordArray,\n\t         *         iv: ivWordArray,\n\t         *         salt: saltWordArray,\n\t         *         algorithm: CryptoJS.algo.AES,\n\t         *         mode: CryptoJS.mode.CBC,\n\t         *         padding: CryptoJS.pad.PKCS7,\n\t         *         blockSize: 4,\n\t         *         formatter: CryptoJS.format.OpenSSL\n\t         *     });\n\t         */\n\t        init: function (cipherParams) {\n\t            this.mixIn(cipherParams);\n\t        },\n\n\t        /**\n\t         * Converts this cipher params object to a string.\n\t         *\n\t         * @param {Format} formatter (Optional) The formatting strategy to use.\n\t         *\n\t         * @return {string} The stringified cipher params.\n\t         *\n\t         * @throws Error If neither the formatter nor the default formatter is set.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = cipherParams + '';\n\t         *     var string = cipherParams.toString();\n\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n\t         */\n\t        toString: function (formatter) {\n\t            return (formatter || this.formatter).stringify(this);\n\t        }\n\t    });\n\n\t    /**\n\t     * Format namespace.\n\t     */\n\t    var C_format = C.format = {};\n\n\t    /**\n\t     * OpenSSL formatting strategy.\n\t     */\n\t    var OpenSSLFormatter = C_format.OpenSSL = {\n\t        /**\n\t         * Converts a cipher params object to an OpenSSL-compatible string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The OpenSSL-compatible string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            // Shortcuts\n\t            var ciphertext = cipherParams.ciphertext;\n\t            var salt = cipherParams.salt;\n\n\t            // Format\n\t            if (salt) {\n\t                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n\t            } else {\n\t                var wordArray = ciphertext;\n\t            }\n\n\t            return wordArray.toString(Base64);\n\t        },\n\n\t        /**\n\t         * Converts an OpenSSL-compatible string to a cipher params object.\n\t         *\n\t         * @param {string} openSSLStr The OpenSSL-compatible string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n\t         */\n\t        parse: function (openSSLStr) {\n\t            // Parse base64\n\t            var ciphertext = Base64.parse(openSSLStr);\n\n\t            // Shortcut\n\t            var ciphertextWords = ciphertext.words;\n\n\t            // Test for salt\n\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n\t                // Extract salt\n\t                var salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n\t                // Remove salt from ciphertext\n\t                ciphertextWords.splice(0, 4);\n\t                ciphertext.sigBytes -= 16;\n\t            }\n\n\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n\t         */\n\t        cfg: Base.extend({\n\t            format: OpenSSLFormatter\n\t        }),\n\n\t        /**\n\t         * Encrypts a message.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Encrypt\n\t            var encryptor = cipher.createEncryptor(key, cfg);\n\t            var ciphertext = encryptor.finalize(message);\n\n\t            // Shortcut\n\t            var cipherCfg = encryptor.cfg;\n\n\t            // Create and return serializable cipher params\n\t            return CipherParams.create({\n\t                ciphertext: ciphertext,\n\t                key: key,\n\t                iv: cipherCfg.iv,\n\t                algorithm: cipher,\n\t                mode: cipherCfg.mode,\n\t                padding: cipherCfg.padding,\n\t                blockSize: cipher.blockSize,\n\t                formatter: cfg.format\n\t            });\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Decrypt\n\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n\t            return plaintext;\n\t        },\n\n\t        /**\n\t         * Converts serialized ciphertext to CipherParams,\n\t         * else assumed CipherParams already and returns ciphertext unchanged.\n\t         *\n\t         * @param {CipherParams|string} ciphertext The ciphertext.\n\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n\t         *\n\t         * @return {CipherParams} The unserialized ciphertext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n\t         */\n\t        _parse: function (ciphertext, format) {\n\t            if (typeof ciphertext == 'string') {\n\t                return format.parse(ciphertext, this);\n\t            } else {\n\t                return ciphertext;\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Key derivation function namespace.\n\t     */\n\t    var C_kdf = C.kdf = {};\n\n\t    /**\n\t     * OpenSSL key derivation function.\n\t     */\n\t    var OpenSSLKdf = C_kdf.OpenSSL = {\n\t        /**\n\t         * Derives a key and IV from a password.\n\t         *\n\t         * @param {string} password The password to derive from.\n\t         * @param {number} keySize The size in words of the key to generate.\n\t         * @param {number} ivSize The size in words of the IV to generate.\n\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n\t         *\n\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n\t         */\n\t        execute: function (password, keySize, ivSize, salt) {\n\t            // Generate random salt\n\t            if (!salt) {\n\t                salt = WordArray.random(64/8);\n\t            }\n\n\t            // Derive key and IV\n\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n\t            // Separate key and IV\n\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n\t            key.sigBytes = keySize * 4;\n\n\t            // Return params\n\t            return CipherParams.create({ key: key, iv: iv, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A serializable cipher wrapper that derives the key from a password,\n\t     * and returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n\t         */\n\t        cfg: SerializableCipher.cfg.extend({\n\t            kdf: OpenSSLKdf\n\t        }),\n\n\t        /**\n\t         * Encrypts a message using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Encrypt\n\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n\t            // Mix in derived params\n\t            ciphertext.mixIn(derivedParams);\n\n\t            return ciphertext;\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Decrypt\n\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n\t            return plaintext;\n\t        }\n\t    });\n\t}());\n\n\n}));","start":1670465468967,"end":1670465469150},{"name":"vite:react-babel","result":";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./evpkdf\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./evpkdf\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher core components.\n\t */\n\tCryptoJS.lib.Cipher || (function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var Base64 = C_enc.Base64;\n\t    var C_algo = C.algo;\n\t    var EvpKDF = C_algo.EvpKDF;\n\n\t    /**\n\t     * Abstract base cipher template.\n\t     *\n\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n\t     */\n\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {WordArray} iv The IV to use for this operation.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Creates this cipher in encryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createEncryptor: function (key, cfg) {\n\t            return this.create(this._ENC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Creates this cipher in decryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createDecryptor: function (key, cfg) {\n\t            return this.create(this._DEC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created cipher.\n\t         *\n\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n\t         */\n\t        init: function (xformMode, key, cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Store transform mode and key\n\t            this._xformMode = xformMode;\n\t            this._key = key;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this cipher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     cipher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-cipher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Adds data to be encrypted or decrypted.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.process('data');\n\t         *     var encrypted = cipher.process(wordArray);\n\t         */\n\t        process: function (dataUpdate) {\n\t            // Append\n\t            this._append(dataUpdate);\n\n\t            // Process available blocks\n\t            return this._process();\n\t        },\n\n\t        /**\n\t         * Finalizes the encryption or decryption process.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after final processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.finalize();\n\t         *     var encrypted = cipher.finalize('data');\n\t         *     var encrypted = cipher.finalize(wordArray);\n\t         */\n\t        finalize: function (dataUpdate) {\n\t            // Final data update\n\t            if (dataUpdate) {\n\t                this._append(dataUpdate);\n\t            }\n\n\t            // Perform concrete-cipher logic\n\t            var finalProcessedData = this._doFinalize();\n\n\t            return finalProcessedData;\n\t        },\n\n\t        keySize: 128/32,\n\n\t        ivSize: 128/32,\n\n\t        _ENC_XFORM_MODE: 1,\n\n\t        _DEC_XFORM_MODE: 2,\n\n\t        /**\n\t         * Creates shortcut functions to a cipher's object interface.\n\t         *\n\t         * @param {Cipher} cipher The cipher to create a helper for.\n\t         *\n\t         * @return {Object} An object with encrypt and decrypt shortcut functions.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n\t         */\n\t        _createHelper: (function () {\n\t            function selectCipherStrategy(key) {\n\t                if (typeof key == 'string') {\n\t                    return PasswordBasedCipher;\n\t                } else {\n\t                    return SerializableCipher;\n\t                }\n\t            }\n\n\t            return function (cipher) {\n\t                return {\n\t                    encrypt: function (message, key, cfg) {\n\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n\t                    },\n\n\t                    decrypt: function (ciphertext, key, cfg) {\n\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n\t                    }\n\t                };\n\t            };\n\t        }())\n\t    });\n\n\t    /**\n\t     * Abstract base stream cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n\t     */\n\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n\t        _doFinalize: function () {\n\t            // Process partial blocks\n\t            var finalProcessedBlocks = this._process(!!'flush');\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 1\n\t    });\n\n\t    /**\n\t     * Mode namespace.\n\t     */\n\t    var C_mode = C.mode = {};\n\n\t    /**\n\t     * Abstract base block cipher mode template.\n\t     */\n\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n\t        /**\n\t         * Creates this mode for encryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n\t         */\n\t        createEncryptor: function (cipher, iv) {\n\t            return this.Encryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Creates this mode for decryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n\t         */\n\t        createDecryptor: function (cipher, iv) {\n\t            return this.Decryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created mode.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n\t         */\n\t        init: function (cipher, iv) {\n\t            this._cipher = cipher;\n\t            this._iv = iv;\n\t        }\n\t    });\n\n\t    /**\n\t     * Cipher Block Chaining mode.\n\t     */\n\t    var CBC = C_mode.CBC = (function () {\n\t        /**\n\t         * Abstract base CBC mode.\n\t         */\n\t        var CBC = BlockCipherMode.extend();\n\n\t        /**\n\t         * CBC encryptor.\n\t         */\n\t        CBC.Encryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // XOR and encrypt\n\t                xorBlock.call(this, words, offset, blockSize);\n\t                cipher.encryptBlock(words, offset);\n\n\t                // Remember this block to use with next block\n\t                this._prevBlock = words.slice(offset, offset + blockSize);\n\t            }\n\t        });\n\n\t        /**\n\t         * CBC decryptor.\n\t         */\n\t        CBC.Decryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // Remember this block to use with next block\n\t                var thisBlock = words.slice(offset, offset + blockSize);\n\n\t                // Decrypt and XOR\n\t                cipher.decryptBlock(words, offset);\n\t                xorBlock.call(this, words, offset, blockSize);\n\n\t                // This block becomes the previous block\n\t                this._prevBlock = thisBlock;\n\t            }\n\t        });\n\n\t        function xorBlock(words, offset, blockSize) {\n\t            // Shortcut\n\t            var iv = this._iv;\n\n\t            // Choose mixing block\n\t            if (iv) {\n\t                var block = iv;\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            } else {\n\t                var block = this._prevBlock;\n\t            }\n\n\t            // XOR blocks\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= block[i];\n\t            }\n\t        }\n\n\t        return CBC;\n\t    }());\n\n\t    /**\n\t     * Padding namespace.\n\t     */\n\t    var C_pad = C.pad = {};\n\n\t    /**\n\t     * PKCS #5/7 padding strategy.\n\t     */\n\t    var Pkcs7 = C_pad.Pkcs7 = {\n\t        /**\n\t         * Pads data using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to pad.\n\t         * @param {number} blockSize The multiple that the data should be padded to.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n\t         */\n\t        pad: function (data, blockSize) {\n\t            // Shortcut\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count padding bytes\n\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t            // Create padding word\n\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n\n\t            // Create padding\n\t            var paddingWords = [];\n\t            for (var i = 0; i < nPaddingBytes; i += 4) {\n\t                paddingWords.push(paddingWord);\n\t            }\n\t            var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n\t            // Add padding\n\t            data.concat(padding);\n\t        },\n\n\t        /**\n\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to unpad.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n\t         */\n\t        unpad: function (data) {\n\t            // Get number of padding bytes from last byte\n\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t            // Remove padding\n\t            data.sigBytes -= nPaddingBytes;\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract base block cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n\t     */\n\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Mode} mode The block mode to use. Default: CBC\n\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n\t         */\n\t        cfg: Cipher.cfg.extend({\n\t            mode: CBC,\n\t            padding: Pkcs7\n\t        }),\n\n\t        reset: function () {\n\t            // Reset cipher\n\t            Cipher.reset.call(this);\n\n\t            // Shortcuts\n\t            var cfg = this.cfg;\n\t            var iv = cfg.iv;\n\t            var mode = cfg.mode;\n\n\t            // Reset block mode\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                var modeCreator = mode.createEncryptor;\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                var modeCreator = mode.createDecryptor;\n\t                // Keep at least one block in the buffer for unpadding\n\t                this._minBufferSize = 1;\n\t            }\n\n\t            if (this._mode && this._mode.__creator == modeCreator) {\n\t                this._mode.init(this, iv && iv.words);\n\t            } else {\n\t                this._mode = modeCreator.call(mode, this, iv && iv.words);\n\t                this._mode.__creator = modeCreator;\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (words, offset) {\n\t            this._mode.processBlock(words, offset);\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcut\n\t            var padding = this.cfg.padding;\n\n\t            // Finalize\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                // Pad data\n\t                padding.pad(this._data, this.blockSize);\n\n\t                // Process final blocks\n\t                var finalProcessedBlocks = this._process(!!'flush');\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                // Process final blocks\n\t                var finalProcessedBlocks = this._process(!!'flush');\n\n\t                // Unpad data\n\t                padding.unpad(finalProcessedBlocks);\n\t            }\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 128/32\n\t    });\n\n\t    /**\n\t     * A collection of cipher parameters.\n\t     *\n\t     * @property {WordArray} ciphertext The raw ciphertext.\n\t     * @property {WordArray} key The key to this ciphertext.\n\t     * @property {WordArray} iv The IV used in the ciphering operation.\n\t     * @property {WordArray} salt The salt used with a key derivation function.\n\t     * @property {Cipher} algorithm The cipher algorithm.\n\t     * @property {Mode} mode The block mode used in the ciphering operation.\n\t     * @property {Padding} padding The padding scheme used in the ciphering operation.\n\t     * @property {number} blockSize The block size of the cipher.\n\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n\t     */\n\t    var CipherParams = C_lib.CipherParams = Base.extend({\n\t        /**\n\t         * Initializes a newly created cipher params object.\n\t         *\n\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({\n\t         *         ciphertext: ciphertextWordArray,\n\t         *         key: keyWordArray,\n\t         *         iv: ivWordArray,\n\t         *         salt: saltWordArray,\n\t         *         algorithm: CryptoJS.algo.AES,\n\t         *         mode: CryptoJS.mode.CBC,\n\t         *         padding: CryptoJS.pad.PKCS7,\n\t         *         blockSize: 4,\n\t         *         formatter: CryptoJS.format.OpenSSL\n\t         *     });\n\t         */\n\t        init: function (cipherParams) {\n\t            this.mixIn(cipherParams);\n\t        },\n\n\t        /**\n\t         * Converts this cipher params object to a string.\n\t         *\n\t         * @param {Format} formatter (Optional) The formatting strategy to use.\n\t         *\n\t         * @return {string} The stringified cipher params.\n\t         *\n\t         * @throws Error If neither the formatter nor the default formatter is set.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = cipherParams + '';\n\t         *     var string = cipherParams.toString();\n\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n\t         */\n\t        toString: function (formatter) {\n\t            return (formatter || this.formatter).stringify(this);\n\t        }\n\t    });\n\n\t    /**\n\t     * Format namespace.\n\t     */\n\t    var C_format = C.format = {};\n\n\t    /**\n\t     * OpenSSL formatting strategy.\n\t     */\n\t    var OpenSSLFormatter = C_format.OpenSSL = {\n\t        /**\n\t         * Converts a cipher params object to an OpenSSL-compatible string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The OpenSSL-compatible string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            // Shortcuts\n\t            var ciphertext = cipherParams.ciphertext;\n\t            var salt = cipherParams.salt;\n\n\t            // Format\n\t            if (salt) {\n\t                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n\t            } else {\n\t                var wordArray = ciphertext;\n\t            }\n\n\t            return wordArray.toString(Base64);\n\t        },\n\n\t        /**\n\t         * Converts an OpenSSL-compatible string to a cipher params object.\n\t         *\n\t         * @param {string} openSSLStr The OpenSSL-compatible string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n\t         */\n\t        parse: function (openSSLStr) {\n\t            // Parse base64\n\t            var ciphertext = Base64.parse(openSSLStr);\n\n\t            // Shortcut\n\t            var ciphertextWords = ciphertext.words;\n\n\t            // Test for salt\n\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n\t                // Extract salt\n\t                var salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n\t                // Remove salt from ciphertext\n\t                ciphertextWords.splice(0, 4);\n\t                ciphertext.sigBytes -= 16;\n\t            }\n\n\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n\t         */\n\t        cfg: Base.extend({\n\t            format: OpenSSLFormatter\n\t        }),\n\n\t        /**\n\t         * Encrypts a message.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Encrypt\n\t            var encryptor = cipher.createEncryptor(key, cfg);\n\t            var ciphertext = encryptor.finalize(message);\n\n\t            // Shortcut\n\t            var cipherCfg = encryptor.cfg;\n\n\t            // Create and return serializable cipher params\n\t            return CipherParams.create({\n\t                ciphertext: ciphertext,\n\t                key: key,\n\t                iv: cipherCfg.iv,\n\t                algorithm: cipher,\n\t                mode: cipherCfg.mode,\n\t                padding: cipherCfg.padding,\n\t                blockSize: cipher.blockSize,\n\t                formatter: cfg.format\n\t            });\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Decrypt\n\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n\t            return plaintext;\n\t        },\n\n\t        /**\n\t         * Converts serialized ciphertext to CipherParams,\n\t         * else assumed CipherParams already and returns ciphertext unchanged.\n\t         *\n\t         * @param {CipherParams|string} ciphertext The ciphertext.\n\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n\t         *\n\t         * @return {CipherParams} The unserialized ciphertext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n\t         */\n\t        _parse: function (ciphertext, format) {\n\t            if (typeof ciphertext == 'string') {\n\t                return format.parse(ciphertext, this);\n\t            } else {\n\t                return ciphertext;\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Key derivation function namespace.\n\t     */\n\t    var C_kdf = C.kdf = {};\n\n\t    /**\n\t     * OpenSSL key derivation function.\n\t     */\n\t    var OpenSSLKdf = C_kdf.OpenSSL = {\n\t        /**\n\t         * Derives a key and IV from a password.\n\t         *\n\t         * @param {string} password The password to derive from.\n\t         * @param {number} keySize The size in words of the key to generate.\n\t         * @param {number} ivSize The size in words of the IV to generate.\n\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n\t         *\n\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n\t         */\n\t        execute: function (password, keySize, ivSize, salt) {\n\t            // Generate random salt\n\t            if (!salt) {\n\t                salt = WordArray.random(64/8);\n\t            }\n\n\t            // Derive key and IV\n\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n\t            // Separate key and IV\n\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n\t            key.sigBytes = keySize * 4;\n\n\t            // Return params\n\t            return CipherParams.create({ key: key, iv: iv, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A serializable cipher wrapper that derives the key from a password,\n\t     * and returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n\t         */\n\t        cfg: SerializableCipher.cfg.extend({\n\t            kdf: OpenSSLKdf\n\t        }),\n\n\t        /**\n\t         * Encrypts a message using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Encrypt\n\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n\t            // Mix in derived params\n\t            ciphertext.mixIn(derivedParams);\n\n\t            return ciphertext;\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Decrypt\n\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n\t            return plaintext;\n\t        }\n\t    });\n\t}());\n\n\n}));","start":1670465469150,"end":1670465469150,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as cipherCoreModule, exports as cipherCore } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/cipher-core.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/core.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/evpkdf.js?commonjs-wrapped\";\n\nvar hasRequiredCipherCore;\n\nfunction requireCipherCore () {\n\tif (hasRequiredCipherCore) return cipherCore;\n\thasRequiredCipherCore = 1;\n\t(function (module, exports) {\n\t\t;(function (root, factory, undef) {\n\t\t\tif ('object' === \"object\") {\n\t\t\t\t// CommonJS\n\t\t\t\tmodule.exports = exports = factory(require$$0(), require$$1());\n\t\t\t}\n\t\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t\t// AMD\n\t\t\t\tundefined([\"./core\", \"./evpkdf\"], factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Global (browser)\n\t\t\t\tfactory(root.CryptoJS);\n\t\t\t}\n\t\t}(commonjsHelpers.commonjsGlobal, function (CryptoJS) {\n\n\t\t\t/**\n\t\t\t * Cipher core components.\n\t\t\t */\n\t\t\tCryptoJS.lib.Cipher || (function (undefined) {\n\t\t\t    // Shortcuts\n\t\t\t    var C = CryptoJS;\n\t\t\t    var C_lib = C.lib;\n\t\t\t    var Base = C_lib.Base;\n\t\t\t    var WordArray = C_lib.WordArray;\n\t\t\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n\t\t\t    var C_enc = C.enc;\n\t\t\t    var Utf8 = C_enc.Utf8;\n\t\t\t    var Base64 = C_enc.Base64;\n\t\t\t    var C_algo = C.algo;\n\t\t\t    var EvpKDF = C_algo.EvpKDF;\n\n\t\t\t    /**\n\t\t\t     * Abstract base cipher template.\n\t\t\t     *\n\t\t\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n\t\t\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n\t\t\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n\t\t\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n\t\t\t     */\n\t\t\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n\t\t\t        /**\n\t\t\t         * Configuration options.\n\t\t\t         *\n\t\t\t         * @property {WordArray} iv The IV to use for this operation.\n\t\t\t         */\n\t\t\t        cfg: Base.extend(),\n\n\t\t\t        /**\n\t\t\t         * Creates this cipher in encryption mode.\n\t\t\t         *\n\t\t\t         * @param {WordArray} key The key.\n\t\t\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t\t\t         *\n\t\t\t         * @return {Cipher} A cipher instance.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n\t\t\t         */\n\t\t\t        createEncryptor: function (key, cfg) {\n\t\t\t            return this.create(this._ENC_XFORM_MODE, key, cfg);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Creates this cipher in decryption mode.\n\t\t\t         *\n\t\t\t         * @param {WordArray} key The key.\n\t\t\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t\t\t         *\n\t\t\t         * @return {Cipher} A cipher instance.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n\t\t\t         */\n\t\t\t        createDecryptor: function (key, cfg) {\n\t\t\t            return this.create(this._DEC_XFORM_MODE, key, cfg);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Initializes a newly created cipher.\n\t\t\t         *\n\t\t\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n\t\t\t         * @param {WordArray} key The key.\n\t\t\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n\t\t\t         */\n\t\t\t        init: function (xformMode, key, cfg) {\n\t\t\t            // Apply config defaults\n\t\t\t            this.cfg = this.cfg.extend(cfg);\n\n\t\t\t            // Store transform mode and key\n\t\t\t            this._xformMode = xformMode;\n\t\t\t            this._key = key;\n\n\t\t\t            // Set initial values\n\t\t\t            this.reset();\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Resets this cipher to its initial state.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     cipher.reset();\n\t\t\t         */\n\t\t\t        reset: function () {\n\t\t\t            // Reset data buffer\n\t\t\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t\t\t            // Perform concrete-cipher logic\n\t\t\t            this._doReset();\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Adds data to be encrypted or decrypted.\n\t\t\t         *\n\t\t\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The data after processing.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var encrypted = cipher.process('data');\n\t\t\t         *     var encrypted = cipher.process(wordArray);\n\t\t\t         */\n\t\t\t        process: function (dataUpdate) {\n\t\t\t            // Append\n\t\t\t            this._append(dataUpdate);\n\n\t\t\t            // Process available blocks\n\t\t\t            return this._process();\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Finalizes the encryption or decryption process.\n\t\t\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t\t\t         *\n\t\t\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The data after final processing.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var encrypted = cipher.finalize();\n\t\t\t         *     var encrypted = cipher.finalize('data');\n\t\t\t         *     var encrypted = cipher.finalize(wordArray);\n\t\t\t         */\n\t\t\t        finalize: function (dataUpdate) {\n\t\t\t            // Final data update\n\t\t\t            if (dataUpdate) {\n\t\t\t                this._append(dataUpdate);\n\t\t\t            }\n\n\t\t\t            // Perform concrete-cipher logic\n\t\t\t            var finalProcessedData = this._doFinalize();\n\n\t\t\t            return finalProcessedData;\n\t\t\t        },\n\n\t\t\t        keySize: 128/32,\n\n\t\t\t        ivSize: 128/32,\n\n\t\t\t        _ENC_XFORM_MODE: 1,\n\n\t\t\t        _DEC_XFORM_MODE: 2,\n\n\t\t\t        /**\n\t\t\t         * Creates shortcut functions to a cipher's object interface.\n\t\t\t         *\n\t\t\t         * @param {Cipher} cipher The cipher to create a helper for.\n\t\t\t         *\n\t\t\t         * @return {Object} An object with encrypt and decrypt shortcut functions.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n\t\t\t         */\n\t\t\t        _createHelper: (function () {\n\t\t\t            function selectCipherStrategy(key) {\n\t\t\t                if (typeof key == 'string') {\n\t\t\t                    return PasswordBasedCipher;\n\t\t\t                } else {\n\t\t\t                    return SerializableCipher;\n\t\t\t                }\n\t\t\t            }\n\n\t\t\t            return function (cipher) {\n\t\t\t                return {\n\t\t\t                    encrypt: function (message, key, cfg) {\n\t\t\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n\t\t\t                    },\n\n\t\t\t                    decrypt: function (ciphertext, key, cfg) {\n\t\t\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n\t\t\t                    }\n\t\t\t                };\n\t\t\t            };\n\t\t\t        }())\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Abstract base stream cipher template.\n\t\t\t     *\n\t\t\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n\t\t\t     */\n\t\t\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n\t\t\t        _doFinalize: function () {\n\t\t\t            // Process partial blocks\n\t\t\t            var finalProcessedBlocks = this._process(!!'flush');\n\n\t\t\t            return finalProcessedBlocks;\n\t\t\t        },\n\n\t\t\t        blockSize: 1\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Mode namespace.\n\t\t\t     */\n\t\t\t    var C_mode = C.mode = {};\n\n\t\t\t    /**\n\t\t\t     * Abstract base block cipher mode template.\n\t\t\t     */\n\t\t\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n\t\t\t        /**\n\t\t\t         * Creates this mode for encryption.\n\t\t\t         *\n\t\t\t         * @param {Cipher} cipher A block cipher instance.\n\t\t\t         * @param {Array} iv The IV words.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n\t\t\t         */\n\t\t\t        createEncryptor: function (cipher, iv) {\n\t\t\t            return this.Encryptor.create(cipher, iv);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Creates this mode for decryption.\n\t\t\t         *\n\t\t\t         * @param {Cipher} cipher A block cipher instance.\n\t\t\t         * @param {Array} iv The IV words.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n\t\t\t         */\n\t\t\t        createDecryptor: function (cipher, iv) {\n\t\t\t            return this.Decryptor.create(cipher, iv);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Initializes a newly created mode.\n\t\t\t         *\n\t\t\t         * @param {Cipher} cipher A block cipher instance.\n\t\t\t         * @param {Array} iv The IV words.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n\t\t\t         */\n\t\t\t        init: function (cipher, iv) {\n\t\t\t            this._cipher = cipher;\n\t\t\t            this._iv = iv;\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Cipher Block Chaining mode.\n\t\t\t     */\n\t\t\t    var CBC = C_mode.CBC = (function () {\n\t\t\t        /**\n\t\t\t         * Abstract base CBC mode.\n\t\t\t         */\n\t\t\t        var CBC = BlockCipherMode.extend();\n\n\t\t\t        /**\n\t\t\t         * CBC encryptor.\n\t\t\t         */\n\t\t\t        CBC.Encryptor = CBC.extend({\n\t\t\t            /**\n\t\t\t             * Processes the data block at offset.\n\t\t\t             *\n\t\t\t             * @param {Array} words The data words to operate on.\n\t\t\t             * @param {number} offset The offset where the block starts.\n\t\t\t             *\n\t\t\t             * @example\n\t\t\t             *\n\t\t\t             *     mode.processBlock(data.words, offset);\n\t\t\t             */\n\t\t\t            processBlock: function (words, offset) {\n\t\t\t                // Shortcuts\n\t\t\t                var cipher = this._cipher;\n\t\t\t                var blockSize = cipher.blockSize;\n\n\t\t\t                // XOR and encrypt\n\t\t\t                xorBlock.call(this, words, offset, blockSize);\n\t\t\t                cipher.encryptBlock(words, offset);\n\n\t\t\t                // Remember this block to use with next block\n\t\t\t                this._prevBlock = words.slice(offset, offset + blockSize);\n\t\t\t            }\n\t\t\t        });\n\n\t\t\t        /**\n\t\t\t         * CBC decryptor.\n\t\t\t         */\n\t\t\t        CBC.Decryptor = CBC.extend({\n\t\t\t            /**\n\t\t\t             * Processes the data block at offset.\n\t\t\t             *\n\t\t\t             * @param {Array} words The data words to operate on.\n\t\t\t             * @param {number} offset The offset where the block starts.\n\t\t\t             *\n\t\t\t             * @example\n\t\t\t             *\n\t\t\t             *     mode.processBlock(data.words, offset);\n\t\t\t             */\n\t\t\t            processBlock: function (words, offset) {\n\t\t\t                // Shortcuts\n\t\t\t                var cipher = this._cipher;\n\t\t\t                var blockSize = cipher.blockSize;\n\n\t\t\t                // Remember this block to use with next block\n\t\t\t                var thisBlock = words.slice(offset, offset + blockSize);\n\n\t\t\t                // Decrypt and XOR\n\t\t\t                cipher.decryptBlock(words, offset);\n\t\t\t                xorBlock.call(this, words, offset, blockSize);\n\n\t\t\t                // This block becomes the previous block\n\t\t\t                this._prevBlock = thisBlock;\n\t\t\t            }\n\t\t\t        });\n\n\t\t\t        function xorBlock(words, offset, blockSize) {\n\t\t\t            // Shortcut\n\t\t\t            var iv = this._iv;\n\n\t\t\t            // Choose mixing block\n\t\t\t            if (iv) {\n\t\t\t                var block = iv;\n\n\t\t\t                // Remove IV for subsequent blocks\n\t\t\t                this._iv = undefined;\n\t\t\t            } else {\n\t\t\t                var block = this._prevBlock;\n\t\t\t            }\n\n\t\t\t            // XOR blocks\n\t\t\t            for (var i = 0; i < blockSize; i++) {\n\t\t\t                words[offset + i] ^= block[i];\n\t\t\t            }\n\t\t\t        }\n\n\t\t\t        return CBC;\n\t\t\t    }());\n\n\t\t\t    /**\n\t\t\t     * Padding namespace.\n\t\t\t     */\n\t\t\t    var C_pad = C.pad = {};\n\n\t\t\t    /**\n\t\t\t     * PKCS #5/7 padding strategy.\n\t\t\t     */\n\t\t\t    var Pkcs7 = C_pad.Pkcs7 = {\n\t\t\t        /**\n\t\t\t         * Pads data using the algorithm defined in PKCS #5/7.\n\t\t\t         *\n\t\t\t         * @param {WordArray} data The data to pad.\n\t\t\t         * @param {number} blockSize The multiple that the data should be padded to.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n\t\t\t         */\n\t\t\t        pad: function (data, blockSize) {\n\t\t\t            // Shortcut\n\t\t\t            var blockSizeBytes = blockSize * 4;\n\n\t\t\t            // Count padding bytes\n\t\t\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t\t\t            // Create padding word\n\t\t\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n\n\t\t\t            // Create padding\n\t\t\t            var paddingWords = [];\n\t\t\t            for (var i = 0; i < nPaddingBytes; i += 4) {\n\t\t\t                paddingWords.push(paddingWord);\n\t\t\t            }\n\t\t\t            var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n\t\t\t            // Add padding\n\t\t\t            data.concat(padding);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n\t\t\t         *\n\t\t\t         * @param {WordArray} data The data to unpad.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n\t\t\t         */\n\t\t\t        unpad: function (data) {\n\t\t\t            // Get number of padding bytes from last byte\n\t\t\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t\t\t            // Remove padding\n\t\t\t            data.sigBytes -= nPaddingBytes;\n\t\t\t        }\n\t\t\t    };\n\n\t\t\t    /**\n\t\t\t     * Abstract base block cipher template.\n\t\t\t     *\n\t\t\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n\t\t\t     */\n\t\t\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n\t\t\t        /**\n\t\t\t         * Configuration options.\n\t\t\t         *\n\t\t\t         * @property {Mode} mode The block mode to use. Default: CBC\n\t\t\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n\t\t\t         */\n\t\t\t        cfg: Cipher.cfg.extend({\n\t\t\t            mode: CBC,\n\t\t\t            padding: Pkcs7\n\t\t\t        }),\n\n\t\t\t        reset: function () {\n\t\t\t            // Reset cipher\n\t\t\t            Cipher.reset.call(this);\n\n\t\t\t            // Shortcuts\n\t\t\t            var cfg = this.cfg;\n\t\t\t            var iv = cfg.iv;\n\t\t\t            var mode = cfg.mode;\n\n\t\t\t            // Reset block mode\n\t\t\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t\t\t                var modeCreator = mode.createEncryptor;\n\t\t\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t\t\t                var modeCreator = mode.createDecryptor;\n\t\t\t                // Keep at least one block in the buffer for unpadding\n\t\t\t                this._minBufferSize = 1;\n\t\t\t            }\n\n\t\t\t            if (this._mode && this._mode.__creator == modeCreator) {\n\t\t\t                this._mode.init(this, iv && iv.words);\n\t\t\t            } else {\n\t\t\t                this._mode = modeCreator.call(mode, this, iv && iv.words);\n\t\t\t                this._mode.__creator = modeCreator;\n\t\t\t            }\n\t\t\t        },\n\n\t\t\t        _doProcessBlock: function (words, offset) {\n\t\t\t            this._mode.processBlock(words, offset);\n\t\t\t        },\n\n\t\t\t        _doFinalize: function () {\n\t\t\t            // Shortcut\n\t\t\t            var padding = this.cfg.padding;\n\n\t\t\t            // Finalize\n\t\t\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t\t\t                // Pad data\n\t\t\t                padding.pad(this._data, this.blockSize);\n\n\t\t\t                // Process final blocks\n\t\t\t                var finalProcessedBlocks = this._process(!!'flush');\n\t\t\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t\t\t                // Process final blocks\n\t\t\t                var finalProcessedBlocks = this._process(!!'flush');\n\n\t\t\t                // Unpad data\n\t\t\t                padding.unpad(finalProcessedBlocks);\n\t\t\t            }\n\n\t\t\t            return finalProcessedBlocks;\n\t\t\t        },\n\n\t\t\t        blockSize: 128/32\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * A collection of cipher parameters.\n\t\t\t     *\n\t\t\t     * @property {WordArray} ciphertext The raw ciphertext.\n\t\t\t     * @property {WordArray} key The key to this ciphertext.\n\t\t\t     * @property {WordArray} iv The IV used in the ciphering operation.\n\t\t\t     * @property {WordArray} salt The salt used with a key derivation function.\n\t\t\t     * @property {Cipher} algorithm The cipher algorithm.\n\t\t\t     * @property {Mode} mode The block mode used in the ciphering operation.\n\t\t\t     * @property {Padding} padding The padding scheme used in the ciphering operation.\n\t\t\t     * @property {number} blockSize The block size of the cipher.\n\t\t\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n\t\t\t     */\n\t\t\t    var CipherParams = C_lib.CipherParams = Base.extend({\n\t\t\t        /**\n\t\t\t         * Initializes a newly created cipher params object.\n\t\t\t         *\n\t\t\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({\n\t\t\t         *         ciphertext: ciphertextWordArray,\n\t\t\t         *         key: keyWordArray,\n\t\t\t         *         iv: ivWordArray,\n\t\t\t         *         salt: saltWordArray,\n\t\t\t         *         algorithm: CryptoJS.algo.AES,\n\t\t\t         *         mode: CryptoJS.mode.CBC,\n\t\t\t         *         padding: CryptoJS.pad.PKCS7,\n\t\t\t         *         blockSize: 4,\n\t\t\t         *         formatter: CryptoJS.format.OpenSSL\n\t\t\t         *     });\n\t\t\t         */\n\t\t\t        init: function (cipherParams) {\n\t\t\t            this.mixIn(cipherParams);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Converts this cipher params object to a string.\n\t\t\t         *\n\t\t\t         * @param {Format} formatter (Optional) The formatting strategy to use.\n\t\t\t         *\n\t\t\t         * @return {string} The stringified cipher params.\n\t\t\t         *\n\t\t\t         * @throws Error If neither the formatter nor the default formatter is set.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var string = cipherParams + '';\n\t\t\t         *     var string = cipherParams.toString();\n\t\t\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n\t\t\t         */\n\t\t\t        toString: function (formatter) {\n\t\t\t            return (formatter || this.formatter).stringify(this);\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Format namespace.\n\t\t\t     */\n\t\t\t    var C_format = C.format = {};\n\n\t\t\t    /**\n\t\t\t     * OpenSSL formatting strategy.\n\t\t\t     */\n\t\t\t    var OpenSSLFormatter = C_format.OpenSSL = {\n\t\t\t        /**\n\t\t\t         * Converts a cipher params object to an OpenSSL-compatible string.\n\t\t\t         *\n\t\t\t         * @param {CipherParams} cipherParams The cipher params object.\n\t\t\t         *\n\t\t\t         * @return {string} The OpenSSL-compatible string.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n\t\t\t         */\n\t\t\t        stringify: function (cipherParams) {\n\t\t\t            // Shortcuts\n\t\t\t            var ciphertext = cipherParams.ciphertext;\n\t\t\t            var salt = cipherParams.salt;\n\n\t\t\t            // Format\n\t\t\t            if (salt) {\n\t\t\t                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n\t\t\t            } else {\n\t\t\t                var wordArray = ciphertext;\n\t\t\t            }\n\n\t\t\t            return wordArray.toString(Base64);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Converts an OpenSSL-compatible string to a cipher params object.\n\t\t\t         *\n\t\t\t         * @param {string} openSSLStr The OpenSSL-compatible string.\n\t\t\t         *\n\t\t\t         * @return {CipherParams} The cipher params object.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n\t\t\t         */\n\t\t\t        parse: function (openSSLStr) {\n\t\t\t            // Parse base64\n\t\t\t            var ciphertext = Base64.parse(openSSLStr);\n\n\t\t\t            // Shortcut\n\t\t\t            var ciphertextWords = ciphertext.words;\n\n\t\t\t            // Test for salt\n\t\t\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n\t\t\t                // Extract salt\n\t\t\t                var salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n\t\t\t                // Remove salt from ciphertext\n\t\t\t                ciphertextWords.splice(0, 4);\n\t\t\t                ciphertext.sigBytes -= 16;\n\t\t\t            }\n\n\t\t\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n\t\t\t        }\n\t\t\t    };\n\n\t\t\t    /**\n\t\t\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n\t\t\t     */\n\t\t\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n\t\t\t        /**\n\t\t\t         * Configuration options.\n\t\t\t         *\n\t\t\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n\t\t\t         */\n\t\t\t        cfg: Base.extend({\n\t\t\t            format: OpenSSLFormatter\n\t\t\t        }),\n\n\t\t\t        /**\n\t\t\t         * Encrypts a message.\n\t\t\t         *\n\t\t\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t\t\t         * @param {WordArray|string} message The message to encrypt.\n\t\t\t         * @param {WordArray} key The key.\n\t\t\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t\t\t         *\n\t\t\t         * @return {CipherParams} A cipher params object.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n\t\t\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n\t\t\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t\t\t         */\n\t\t\t        encrypt: function (cipher, message, key, cfg) {\n\t\t\t            // Apply config defaults\n\t\t\t            cfg = this.cfg.extend(cfg);\n\n\t\t\t            // Encrypt\n\t\t\t            var encryptor = cipher.createEncryptor(key, cfg);\n\t\t\t            var ciphertext = encryptor.finalize(message);\n\n\t\t\t            // Shortcut\n\t\t\t            var cipherCfg = encryptor.cfg;\n\n\t\t\t            // Create and return serializable cipher params\n\t\t\t            return CipherParams.create({\n\t\t\t                ciphertext: ciphertext,\n\t\t\t                key: key,\n\t\t\t                iv: cipherCfg.iv,\n\t\t\t                algorithm: cipher,\n\t\t\t                mode: cipherCfg.mode,\n\t\t\t                padding: cipherCfg.padding,\n\t\t\t                blockSize: cipher.blockSize,\n\t\t\t                formatter: cfg.format\n\t\t\t            });\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Decrypts serialized ciphertext.\n\t\t\t         *\n\t\t\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t\t\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t\t\t         * @param {WordArray} key The key.\n\t\t\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The plaintext.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t\t\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t\t\t         */\n\t\t\t        decrypt: function (cipher, ciphertext, key, cfg) {\n\t\t\t            // Apply config defaults\n\t\t\t            cfg = this.cfg.extend(cfg);\n\n\t\t\t            // Convert string to CipherParams\n\t\t\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t\t\t            // Decrypt\n\t\t\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n\t\t\t            return plaintext;\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Converts serialized ciphertext to CipherParams,\n\t\t\t         * else assumed CipherParams already and returns ciphertext unchanged.\n\t\t\t         *\n\t\t\t         * @param {CipherParams|string} ciphertext The ciphertext.\n\t\t\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n\t\t\t         *\n\t\t\t         * @return {CipherParams} The unserialized ciphertext.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n\t\t\t         */\n\t\t\t        _parse: function (ciphertext, format) {\n\t\t\t            if (typeof ciphertext == 'string') {\n\t\t\t                return format.parse(ciphertext, this);\n\t\t\t            } else {\n\t\t\t                return ciphertext;\n\t\t\t            }\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Key derivation function namespace.\n\t\t\t     */\n\t\t\t    var C_kdf = C.kdf = {};\n\n\t\t\t    /**\n\t\t\t     * OpenSSL key derivation function.\n\t\t\t     */\n\t\t\t    var OpenSSLKdf = C_kdf.OpenSSL = {\n\t\t\t        /**\n\t\t\t         * Derives a key and IV from a password.\n\t\t\t         *\n\t\t\t         * @param {string} password The password to derive from.\n\t\t\t         * @param {number} keySize The size in words of the key to generate.\n\t\t\t         * @param {number} ivSize The size in words of the IV to generate.\n\t\t\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n\t\t\t         *\n\t\t\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n\t\t\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n\t\t\t         */\n\t\t\t        execute: function (password, keySize, ivSize, salt) {\n\t\t\t            // Generate random salt\n\t\t\t            if (!salt) {\n\t\t\t                salt = WordArray.random(64/8);\n\t\t\t            }\n\n\t\t\t            // Derive key and IV\n\t\t\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n\t\t\t            // Separate key and IV\n\t\t\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n\t\t\t            key.sigBytes = keySize * 4;\n\n\t\t\t            // Return params\n\t\t\t            return CipherParams.create({ key: key, iv: iv, salt: salt });\n\t\t\t        }\n\t\t\t    };\n\n\t\t\t    /**\n\t\t\t     * A serializable cipher wrapper that derives the key from a password,\n\t\t\t     * and returns ciphertext as a serializable cipher params object.\n\t\t\t     */\n\t\t\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n\t\t\t        /**\n\t\t\t         * Configuration options.\n\t\t\t         *\n\t\t\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n\t\t\t         */\n\t\t\t        cfg: SerializableCipher.cfg.extend({\n\t\t\t            kdf: OpenSSLKdf\n\t\t\t        }),\n\n\t\t\t        /**\n\t\t\t         * Encrypts a message using a password.\n\t\t\t         *\n\t\t\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t\t\t         * @param {WordArray|string} message The message to encrypt.\n\t\t\t         * @param {string} password The password.\n\t\t\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t\t\t         *\n\t\t\t         * @return {CipherParams} A cipher params object.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n\t\t\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n\t\t\t         */\n\t\t\t        encrypt: function (cipher, message, password, cfg) {\n\t\t\t            // Apply config defaults\n\t\t\t            cfg = this.cfg.extend(cfg);\n\n\t\t\t            // Derive key and other params\n\t\t\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n\t\t\t            // Add IV to config\n\t\t\t            cfg.iv = derivedParams.iv;\n\n\t\t\t            // Encrypt\n\t\t\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n\t\t\t            // Mix in derived params\n\t\t\t            ciphertext.mixIn(derivedParams);\n\n\t\t\t            return ciphertext;\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Decrypts serialized ciphertext using a password.\n\t\t\t         *\n\t\t\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t\t\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t\t\t         * @param {string} password The password.\n\t\t\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The plaintext.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n\t\t\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n\t\t\t         */\n\t\t\t        decrypt: function (cipher, ciphertext, password, cfg) {\n\t\t\t            // Apply config defaults\n\t\t\t            cfg = this.cfg.extend(cfg);\n\n\t\t\t            // Convert string to CipherParams\n\t\t\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t\t\t            // Derive key and other params\n\t\t\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n\t\t\t            // Add IV to config\n\t\t\t            cfg.iv = derivedParams.iv;\n\n\t\t\t            // Decrypt\n\t\t\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n\t\t\t            return plaintext;\n\t\t\t        }\n\t\t\t    });\n\t\t\t}());\n\n\n\t\t}));\n} (cipherCoreModule, cipherCore));\n\treturn cipherCore;\n}\n\nexport { requireCipherCore as __require };","start":1670465469150,"end":1670465469154,"order":"normal"},{"name":"polyfill-node","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as cipherCoreModule, exports as cipherCore } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/cipher-core.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/core.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/evpkdf.js?commonjs-wrapped\";\n\nvar hasRequiredCipherCore;\n\nfunction requireCipherCore () {\n\tif (hasRequiredCipherCore) return cipherCore;\n\thasRequiredCipherCore = 1;\n\t(function (module, exports) {\n\t\t;(function (root, factory, undef) {\n\t\t\tif ('object' === \"object\") {\n\t\t\t\t// CommonJS\n\t\t\t\tmodule.exports = exports = factory(require$$0(), require$$1());\n\t\t\t}\n\t\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t\t// AMD\n\t\t\t\tundefined([\"./core\", \"./evpkdf\"], factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Global (browser)\n\t\t\t\tfactory(root.CryptoJS);\n\t\t\t}\n\t\t}(commonjsHelpers.commonjsGlobal, function (CryptoJS) {\n\n\t\t\t/**\n\t\t\t * Cipher core components.\n\t\t\t */\n\t\t\tCryptoJS.lib.Cipher || (function (undefined) {\n\t\t\t    // Shortcuts\n\t\t\t    var C = CryptoJS;\n\t\t\t    var C_lib = C.lib;\n\t\t\t    var Base = C_lib.Base;\n\t\t\t    var WordArray = C_lib.WordArray;\n\t\t\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n\t\t\t    var C_enc = C.enc;\n\t\t\t    var Utf8 = C_enc.Utf8;\n\t\t\t    var Base64 = C_enc.Base64;\n\t\t\t    var C_algo = C.algo;\n\t\t\t    var EvpKDF = C_algo.EvpKDF;\n\n\t\t\t    /**\n\t\t\t     * Abstract base cipher template.\n\t\t\t     *\n\t\t\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n\t\t\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n\t\t\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n\t\t\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n\t\t\t     */\n\t\t\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n\t\t\t        /**\n\t\t\t         * Configuration options.\n\t\t\t         *\n\t\t\t         * @property {WordArray} iv The IV to use for this operation.\n\t\t\t         */\n\t\t\t        cfg: Base.extend(),\n\n\t\t\t        /**\n\t\t\t         * Creates this cipher in encryption mode.\n\t\t\t         *\n\t\t\t         * @param {WordArray} key The key.\n\t\t\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t\t\t         *\n\t\t\t         * @return {Cipher} A cipher instance.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n\t\t\t         */\n\t\t\t        createEncryptor: function (key, cfg) {\n\t\t\t            return this.create(this._ENC_XFORM_MODE, key, cfg);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Creates this cipher in decryption mode.\n\t\t\t         *\n\t\t\t         * @param {WordArray} key The key.\n\t\t\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t\t\t         *\n\t\t\t         * @return {Cipher} A cipher instance.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n\t\t\t         */\n\t\t\t        createDecryptor: function (key, cfg) {\n\t\t\t            return this.create(this._DEC_XFORM_MODE, key, cfg);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Initializes a newly created cipher.\n\t\t\t         *\n\t\t\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n\t\t\t         * @param {WordArray} key The key.\n\t\t\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n\t\t\t         */\n\t\t\t        init: function (xformMode, key, cfg) {\n\t\t\t            // Apply config defaults\n\t\t\t            this.cfg = this.cfg.extend(cfg);\n\n\t\t\t            // Store transform mode and key\n\t\t\t            this._xformMode = xformMode;\n\t\t\t            this._key = key;\n\n\t\t\t            // Set initial values\n\t\t\t            this.reset();\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Resets this cipher to its initial state.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     cipher.reset();\n\t\t\t         */\n\t\t\t        reset: function () {\n\t\t\t            // Reset data buffer\n\t\t\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t\t\t            // Perform concrete-cipher logic\n\t\t\t            this._doReset();\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Adds data to be encrypted or decrypted.\n\t\t\t         *\n\t\t\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The data after processing.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var encrypted = cipher.process('data');\n\t\t\t         *     var encrypted = cipher.process(wordArray);\n\t\t\t         */\n\t\t\t        process: function (dataUpdate) {\n\t\t\t            // Append\n\t\t\t            this._append(dataUpdate);\n\n\t\t\t            // Process available blocks\n\t\t\t            return this._process();\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Finalizes the encryption or decryption process.\n\t\t\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t\t\t         *\n\t\t\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The data after final processing.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var encrypted = cipher.finalize();\n\t\t\t         *     var encrypted = cipher.finalize('data');\n\t\t\t         *     var encrypted = cipher.finalize(wordArray);\n\t\t\t         */\n\t\t\t        finalize: function (dataUpdate) {\n\t\t\t            // Final data update\n\t\t\t            if (dataUpdate) {\n\t\t\t                this._append(dataUpdate);\n\t\t\t            }\n\n\t\t\t            // Perform concrete-cipher logic\n\t\t\t            var finalProcessedData = this._doFinalize();\n\n\t\t\t            return finalProcessedData;\n\t\t\t        },\n\n\t\t\t        keySize: 128/32,\n\n\t\t\t        ivSize: 128/32,\n\n\t\t\t        _ENC_XFORM_MODE: 1,\n\n\t\t\t        _DEC_XFORM_MODE: 2,\n\n\t\t\t        /**\n\t\t\t         * Creates shortcut functions to a cipher's object interface.\n\t\t\t         *\n\t\t\t         * @param {Cipher} cipher The cipher to create a helper for.\n\t\t\t         *\n\t\t\t         * @return {Object} An object with encrypt and decrypt shortcut functions.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n\t\t\t         */\n\t\t\t        _createHelper: (function () {\n\t\t\t            function selectCipherStrategy(key) {\n\t\t\t                if (typeof key == 'string') {\n\t\t\t                    return PasswordBasedCipher;\n\t\t\t                } else {\n\t\t\t                    return SerializableCipher;\n\t\t\t                }\n\t\t\t            }\n\n\t\t\t            return function (cipher) {\n\t\t\t                return {\n\t\t\t                    encrypt: function (message, key, cfg) {\n\t\t\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n\t\t\t                    },\n\n\t\t\t                    decrypt: function (ciphertext, key, cfg) {\n\t\t\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n\t\t\t                    }\n\t\t\t                };\n\t\t\t            };\n\t\t\t        }())\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Abstract base stream cipher template.\n\t\t\t     *\n\t\t\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n\t\t\t     */\n\t\t\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n\t\t\t        _doFinalize: function () {\n\t\t\t            // Process partial blocks\n\t\t\t            var finalProcessedBlocks = this._process(!!'flush');\n\n\t\t\t            return finalProcessedBlocks;\n\t\t\t        },\n\n\t\t\t        blockSize: 1\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Mode namespace.\n\t\t\t     */\n\t\t\t    var C_mode = C.mode = {};\n\n\t\t\t    /**\n\t\t\t     * Abstract base block cipher mode template.\n\t\t\t     */\n\t\t\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n\t\t\t        /**\n\t\t\t         * Creates this mode for encryption.\n\t\t\t         *\n\t\t\t         * @param {Cipher} cipher A block cipher instance.\n\t\t\t         * @param {Array} iv The IV words.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n\t\t\t         */\n\t\t\t        createEncryptor: function (cipher, iv) {\n\t\t\t            return this.Encryptor.create(cipher, iv);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Creates this mode for decryption.\n\t\t\t         *\n\t\t\t         * @param {Cipher} cipher A block cipher instance.\n\t\t\t         * @param {Array} iv The IV words.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n\t\t\t         */\n\t\t\t        createDecryptor: function (cipher, iv) {\n\t\t\t            return this.Decryptor.create(cipher, iv);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Initializes a newly created mode.\n\t\t\t         *\n\t\t\t         * @param {Cipher} cipher A block cipher instance.\n\t\t\t         * @param {Array} iv The IV words.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n\t\t\t         */\n\t\t\t        init: function (cipher, iv) {\n\t\t\t            this._cipher = cipher;\n\t\t\t            this._iv = iv;\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Cipher Block Chaining mode.\n\t\t\t     */\n\t\t\t    var CBC = C_mode.CBC = (function () {\n\t\t\t        /**\n\t\t\t         * Abstract base CBC mode.\n\t\t\t         */\n\t\t\t        var CBC = BlockCipherMode.extend();\n\n\t\t\t        /**\n\t\t\t         * CBC encryptor.\n\t\t\t         */\n\t\t\t        CBC.Encryptor = CBC.extend({\n\t\t\t            /**\n\t\t\t             * Processes the data block at offset.\n\t\t\t             *\n\t\t\t             * @param {Array} words The data words to operate on.\n\t\t\t             * @param {number} offset The offset where the block starts.\n\t\t\t             *\n\t\t\t             * @example\n\t\t\t             *\n\t\t\t             *     mode.processBlock(data.words, offset);\n\t\t\t             */\n\t\t\t            processBlock: function (words, offset) {\n\t\t\t                // Shortcuts\n\t\t\t                var cipher = this._cipher;\n\t\t\t                var blockSize = cipher.blockSize;\n\n\t\t\t                // XOR and encrypt\n\t\t\t                xorBlock.call(this, words, offset, blockSize);\n\t\t\t                cipher.encryptBlock(words, offset);\n\n\t\t\t                // Remember this block to use with next block\n\t\t\t                this._prevBlock = words.slice(offset, offset + blockSize);\n\t\t\t            }\n\t\t\t        });\n\n\t\t\t        /**\n\t\t\t         * CBC decryptor.\n\t\t\t         */\n\t\t\t        CBC.Decryptor = CBC.extend({\n\t\t\t            /**\n\t\t\t             * Processes the data block at offset.\n\t\t\t             *\n\t\t\t             * @param {Array} words The data words to operate on.\n\t\t\t             * @param {number} offset The offset where the block starts.\n\t\t\t             *\n\t\t\t             * @example\n\t\t\t             *\n\t\t\t             *     mode.processBlock(data.words, offset);\n\t\t\t             */\n\t\t\t            processBlock: function (words, offset) {\n\t\t\t                // Shortcuts\n\t\t\t                var cipher = this._cipher;\n\t\t\t                var blockSize = cipher.blockSize;\n\n\t\t\t                // Remember this block to use with next block\n\t\t\t                var thisBlock = words.slice(offset, offset + blockSize);\n\n\t\t\t                // Decrypt and XOR\n\t\t\t                cipher.decryptBlock(words, offset);\n\t\t\t                xorBlock.call(this, words, offset, blockSize);\n\n\t\t\t                // This block becomes the previous block\n\t\t\t                this._prevBlock = thisBlock;\n\t\t\t            }\n\t\t\t        });\n\n\t\t\t        function xorBlock(words, offset, blockSize) {\n\t\t\t            // Shortcut\n\t\t\t            var iv = this._iv;\n\n\t\t\t            // Choose mixing block\n\t\t\t            if (iv) {\n\t\t\t                var block = iv;\n\n\t\t\t                // Remove IV for subsequent blocks\n\t\t\t                this._iv = undefined;\n\t\t\t            } else {\n\t\t\t                var block = this._prevBlock;\n\t\t\t            }\n\n\t\t\t            // XOR blocks\n\t\t\t            for (var i = 0; i < blockSize; i++) {\n\t\t\t                words[offset + i] ^= block[i];\n\t\t\t            }\n\t\t\t        }\n\n\t\t\t        return CBC;\n\t\t\t    }());\n\n\t\t\t    /**\n\t\t\t     * Padding namespace.\n\t\t\t     */\n\t\t\t    var C_pad = C.pad = {};\n\n\t\t\t    /**\n\t\t\t     * PKCS #5/7 padding strategy.\n\t\t\t     */\n\t\t\t    var Pkcs7 = C_pad.Pkcs7 = {\n\t\t\t        /**\n\t\t\t         * Pads data using the algorithm defined in PKCS #5/7.\n\t\t\t         *\n\t\t\t         * @param {WordArray} data The data to pad.\n\t\t\t         * @param {number} blockSize The multiple that the data should be padded to.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n\t\t\t         */\n\t\t\t        pad: function (data, blockSize) {\n\t\t\t            // Shortcut\n\t\t\t            var blockSizeBytes = blockSize * 4;\n\n\t\t\t            // Count padding bytes\n\t\t\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t\t\t            // Create padding word\n\t\t\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n\n\t\t\t            // Create padding\n\t\t\t            var paddingWords = [];\n\t\t\t            for (var i = 0; i < nPaddingBytes; i += 4) {\n\t\t\t                paddingWords.push(paddingWord);\n\t\t\t            }\n\t\t\t            var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n\t\t\t            // Add padding\n\t\t\t            data.concat(padding);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n\t\t\t         *\n\t\t\t         * @param {WordArray} data The data to unpad.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n\t\t\t         */\n\t\t\t        unpad: function (data) {\n\t\t\t            // Get number of padding bytes from last byte\n\t\t\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t\t\t            // Remove padding\n\t\t\t            data.sigBytes -= nPaddingBytes;\n\t\t\t        }\n\t\t\t    };\n\n\t\t\t    /**\n\t\t\t     * Abstract base block cipher template.\n\t\t\t     *\n\t\t\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n\t\t\t     */\n\t\t\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n\t\t\t        /**\n\t\t\t         * Configuration options.\n\t\t\t         *\n\t\t\t         * @property {Mode} mode The block mode to use. Default: CBC\n\t\t\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n\t\t\t         */\n\t\t\t        cfg: Cipher.cfg.extend({\n\t\t\t            mode: CBC,\n\t\t\t            padding: Pkcs7\n\t\t\t        }),\n\n\t\t\t        reset: function () {\n\t\t\t            // Reset cipher\n\t\t\t            Cipher.reset.call(this);\n\n\t\t\t            // Shortcuts\n\t\t\t            var cfg = this.cfg;\n\t\t\t            var iv = cfg.iv;\n\t\t\t            var mode = cfg.mode;\n\n\t\t\t            // Reset block mode\n\t\t\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t\t\t                var modeCreator = mode.createEncryptor;\n\t\t\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t\t\t                var modeCreator = mode.createDecryptor;\n\t\t\t                // Keep at least one block in the buffer for unpadding\n\t\t\t                this._minBufferSize = 1;\n\t\t\t            }\n\n\t\t\t            if (this._mode && this._mode.__creator == modeCreator) {\n\t\t\t                this._mode.init(this, iv && iv.words);\n\t\t\t            } else {\n\t\t\t                this._mode = modeCreator.call(mode, this, iv && iv.words);\n\t\t\t                this._mode.__creator = modeCreator;\n\t\t\t            }\n\t\t\t        },\n\n\t\t\t        _doProcessBlock: function (words, offset) {\n\t\t\t            this._mode.processBlock(words, offset);\n\t\t\t        },\n\n\t\t\t        _doFinalize: function () {\n\t\t\t            // Shortcut\n\t\t\t            var padding = this.cfg.padding;\n\n\t\t\t            // Finalize\n\t\t\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t\t\t                // Pad data\n\t\t\t                padding.pad(this._data, this.blockSize);\n\n\t\t\t                // Process final blocks\n\t\t\t                var finalProcessedBlocks = this._process(!!'flush');\n\t\t\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t\t\t                // Process final blocks\n\t\t\t                var finalProcessedBlocks = this._process(!!'flush');\n\n\t\t\t                // Unpad data\n\t\t\t                padding.unpad(finalProcessedBlocks);\n\t\t\t            }\n\n\t\t\t            return finalProcessedBlocks;\n\t\t\t        },\n\n\t\t\t        blockSize: 128/32\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * A collection of cipher parameters.\n\t\t\t     *\n\t\t\t     * @property {WordArray} ciphertext The raw ciphertext.\n\t\t\t     * @property {WordArray} key The key to this ciphertext.\n\t\t\t     * @property {WordArray} iv The IV used in the ciphering operation.\n\t\t\t     * @property {WordArray} salt The salt used with a key derivation function.\n\t\t\t     * @property {Cipher} algorithm The cipher algorithm.\n\t\t\t     * @property {Mode} mode The block mode used in the ciphering operation.\n\t\t\t     * @property {Padding} padding The padding scheme used in the ciphering operation.\n\t\t\t     * @property {number} blockSize The block size of the cipher.\n\t\t\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n\t\t\t     */\n\t\t\t    var CipherParams = C_lib.CipherParams = Base.extend({\n\t\t\t        /**\n\t\t\t         * Initializes a newly created cipher params object.\n\t\t\t         *\n\t\t\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({\n\t\t\t         *         ciphertext: ciphertextWordArray,\n\t\t\t         *         key: keyWordArray,\n\t\t\t         *         iv: ivWordArray,\n\t\t\t         *         salt: saltWordArray,\n\t\t\t         *         algorithm: CryptoJS.algo.AES,\n\t\t\t         *         mode: CryptoJS.mode.CBC,\n\t\t\t         *         padding: CryptoJS.pad.PKCS7,\n\t\t\t         *         blockSize: 4,\n\t\t\t         *         formatter: CryptoJS.format.OpenSSL\n\t\t\t         *     });\n\t\t\t         */\n\t\t\t        init: function (cipherParams) {\n\t\t\t            this.mixIn(cipherParams);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Converts this cipher params object to a string.\n\t\t\t         *\n\t\t\t         * @param {Format} formatter (Optional) The formatting strategy to use.\n\t\t\t         *\n\t\t\t         * @return {string} The stringified cipher params.\n\t\t\t         *\n\t\t\t         * @throws Error If neither the formatter nor the default formatter is set.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var string = cipherParams + '';\n\t\t\t         *     var string = cipherParams.toString();\n\t\t\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n\t\t\t         */\n\t\t\t        toString: function (formatter) {\n\t\t\t            return (formatter || this.formatter).stringify(this);\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Format namespace.\n\t\t\t     */\n\t\t\t    var C_format = C.format = {};\n\n\t\t\t    /**\n\t\t\t     * OpenSSL formatting strategy.\n\t\t\t     */\n\t\t\t    var OpenSSLFormatter = C_format.OpenSSL = {\n\t\t\t        /**\n\t\t\t         * Converts a cipher params object to an OpenSSL-compatible string.\n\t\t\t         *\n\t\t\t         * @param {CipherParams} cipherParams The cipher params object.\n\t\t\t         *\n\t\t\t         * @return {string} The OpenSSL-compatible string.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n\t\t\t         */\n\t\t\t        stringify: function (cipherParams) {\n\t\t\t            // Shortcuts\n\t\t\t            var ciphertext = cipherParams.ciphertext;\n\t\t\t            var salt = cipherParams.salt;\n\n\t\t\t            // Format\n\t\t\t            if (salt) {\n\t\t\t                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n\t\t\t            } else {\n\t\t\t                var wordArray = ciphertext;\n\t\t\t            }\n\n\t\t\t            return wordArray.toString(Base64);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Converts an OpenSSL-compatible string to a cipher params object.\n\t\t\t         *\n\t\t\t         * @param {string} openSSLStr The OpenSSL-compatible string.\n\t\t\t         *\n\t\t\t         * @return {CipherParams} The cipher params object.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n\t\t\t         */\n\t\t\t        parse: function (openSSLStr) {\n\t\t\t            // Parse base64\n\t\t\t            var ciphertext = Base64.parse(openSSLStr);\n\n\t\t\t            // Shortcut\n\t\t\t            var ciphertextWords = ciphertext.words;\n\n\t\t\t            // Test for salt\n\t\t\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n\t\t\t                // Extract salt\n\t\t\t                var salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n\t\t\t                // Remove salt from ciphertext\n\t\t\t                ciphertextWords.splice(0, 4);\n\t\t\t                ciphertext.sigBytes -= 16;\n\t\t\t            }\n\n\t\t\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n\t\t\t        }\n\t\t\t    };\n\n\t\t\t    /**\n\t\t\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n\t\t\t     */\n\t\t\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n\t\t\t        /**\n\t\t\t         * Configuration options.\n\t\t\t         *\n\t\t\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n\t\t\t         */\n\t\t\t        cfg: Base.extend({\n\t\t\t            format: OpenSSLFormatter\n\t\t\t        }),\n\n\t\t\t        /**\n\t\t\t         * Encrypts a message.\n\t\t\t         *\n\t\t\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t\t\t         * @param {WordArray|string} message The message to encrypt.\n\t\t\t         * @param {WordArray} key The key.\n\t\t\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t\t\t         *\n\t\t\t         * @return {CipherParams} A cipher params object.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n\t\t\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n\t\t\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t\t\t         */\n\t\t\t        encrypt: function (cipher, message, key, cfg) {\n\t\t\t            // Apply config defaults\n\t\t\t            cfg = this.cfg.extend(cfg);\n\n\t\t\t            // Encrypt\n\t\t\t            var encryptor = cipher.createEncryptor(key, cfg);\n\t\t\t            var ciphertext = encryptor.finalize(message);\n\n\t\t\t            // Shortcut\n\t\t\t            var cipherCfg = encryptor.cfg;\n\n\t\t\t            // Create and return serializable cipher params\n\t\t\t            return CipherParams.create({\n\t\t\t                ciphertext: ciphertext,\n\t\t\t                key: key,\n\t\t\t                iv: cipherCfg.iv,\n\t\t\t                algorithm: cipher,\n\t\t\t                mode: cipherCfg.mode,\n\t\t\t                padding: cipherCfg.padding,\n\t\t\t                blockSize: cipher.blockSize,\n\t\t\t                formatter: cfg.format\n\t\t\t            });\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Decrypts serialized ciphertext.\n\t\t\t         *\n\t\t\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t\t\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t\t\t         * @param {WordArray} key The key.\n\t\t\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The plaintext.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t\t\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t\t\t         */\n\t\t\t        decrypt: function (cipher, ciphertext, key, cfg) {\n\t\t\t            // Apply config defaults\n\t\t\t            cfg = this.cfg.extend(cfg);\n\n\t\t\t            // Convert string to CipherParams\n\t\t\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t\t\t            // Decrypt\n\t\t\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n\t\t\t            return plaintext;\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Converts serialized ciphertext to CipherParams,\n\t\t\t         * else assumed CipherParams already and returns ciphertext unchanged.\n\t\t\t         *\n\t\t\t         * @param {CipherParams|string} ciphertext The ciphertext.\n\t\t\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n\t\t\t         *\n\t\t\t         * @return {CipherParams} The unserialized ciphertext.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n\t\t\t         */\n\t\t\t        _parse: function (ciphertext, format) {\n\t\t\t            if (typeof ciphertext == 'string') {\n\t\t\t                return format.parse(ciphertext, this);\n\t\t\t            } else {\n\t\t\t                return ciphertext;\n\t\t\t            }\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Key derivation function namespace.\n\t\t\t     */\n\t\t\t    var C_kdf = C.kdf = {};\n\n\t\t\t    /**\n\t\t\t     * OpenSSL key derivation function.\n\t\t\t     */\n\t\t\t    var OpenSSLKdf = C_kdf.OpenSSL = {\n\t\t\t        /**\n\t\t\t         * Derives a key and IV from a password.\n\t\t\t         *\n\t\t\t         * @param {string} password The password to derive from.\n\t\t\t         * @param {number} keySize The size in words of the key to generate.\n\t\t\t         * @param {number} ivSize The size in words of the IV to generate.\n\t\t\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n\t\t\t         *\n\t\t\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n\t\t\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n\t\t\t         */\n\t\t\t        execute: function (password, keySize, ivSize, salt) {\n\t\t\t            // Generate random salt\n\t\t\t            if (!salt) {\n\t\t\t                salt = WordArray.random(64/8);\n\t\t\t            }\n\n\t\t\t            // Derive key and IV\n\t\t\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n\t\t\t            // Separate key and IV\n\t\t\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n\t\t\t            key.sigBytes = keySize * 4;\n\n\t\t\t            // Return params\n\t\t\t            return CipherParams.create({ key: key, iv: iv, salt: salt });\n\t\t\t        }\n\t\t\t    };\n\n\t\t\t    /**\n\t\t\t     * A serializable cipher wrapper that derives the key from a password,\n\t\t\t     * and returns ciphertext as a serializable cipher params object.\n\t\t\t     */\n\t\t\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n\t\t\t        /**\n\t\t\t         * Configuration options.\n\t\t\t         *\n\t\t\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n\t\t\t         */\n\t\t\t        cfg: SerializableCipher.cfg.extend({\n\t\t\t            kdf: OpenSSLKdf\n\t\t\t        }),\n\n\t\t\t        /**\n\t\t\t         * Encrypts a message using a password.\n\t\t\t         *\n\t\t\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t\t\t         * @param {WordArray|string} message The message to encrypt.\n\t\t\t         * @param {string} password The password.\n\t\t\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t\t\t         *\n\t\t\t         * @return {CipherParams} A cipher params object.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n\t\t\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n\t\t\t         */\n\t\t\t        encrypt: function (cipher, message, password, cfg) {\n\t\t\t            // Apply config defaults\n\t\t\t            cfg = this.cfg.extend(cfg);\n\n\t\t\t            // Derive key and other params\n\t\t\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n\t\t\t            // Add IV to config\n\t\t\t            cfg.iv = derivedParams.iv;\n\n\t\t\t            // Encrypt\n\t\t\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n\t\t\t            // Mix in derived params\n\t\t\t            ciphertext.mixIn(derivedParams);\n\n\t\t\t            return ciphertext;\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Decrypts serialized ciphertext using a password.\n\t\t\t         *\n\t\t\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t\t\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t\t\t         * @param {string} password The password.\n\t\t\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The plaintext.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n\t\t\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n\t\t\t         */\n\t\t\t        decrypt: function (cipher, ciphertext, password, cfg) {\n\t\t\t            // Apply config defaults\n\t\t\t            cfg = this.cfg.extend(cfg);\n\n\t\t\t            // Convert string to CipherParams\n\t\t\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t\t\t            // Derive key and other params\n\t\t\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n\t\t\t            // Add IV to config\n\t\t\t            cfg.iv = derivedParams.iv;\n\n\t\t\t            // Decrypt\n\t\t\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n\t\t\t            return plaintext;\n\t\t\t        }\n\t\t\t    });\n\t\t\t}());\n\n\n\t\t}));\n} (cipherCoreModule, cipherCore));\n\treturn cipherCore;\n}\n\nexport { requireCipherCore as __require };","start":1670465469155,"end":1670465469164,"order":"normal"}]}
