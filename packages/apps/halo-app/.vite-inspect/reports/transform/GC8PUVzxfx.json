{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/field.js","transforms":[{"name":"vite:load-fallback","result":"\"use strict\";\nmodule.exports = Field;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\n\nvar Enum  = require(\"./enum\"),\n    types = require(\"./types\"),\n    util  = require(\"./util\");\n\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n\n/**\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n * @name Field\n * @classdesc Reflected message field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a field from a field descriptor.\n * @param {string} name Field name\n * @param {IField} json Field descriptor\n * @returns {Field} Created field\n * @throws {TypeError} If arguments are invalid\n */\nField.fromJSON = function fromJSON(name, json) {\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n};\n\n/**\n * Not an actual constructor. Use {@link Field} instead.\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports FieldBase\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction Field(name, id, type, rule, extend, options, comment) {\n\n    if (util.isObject(rule)) {\n        comment = extend;\n        options = rule;\n        rule = extend = undefined;\n    } else if (util.isObject(extend)) {\n        comment = options;\n        options = extend;\n        extend = undefined;\n    }\n\n    ReflectionObject.call(this, name, options);\n\n    if (!util.isInteger(id) || id < 0)\n        throw TypeError(\"id must be a non-negative integer\");\n\n    if (!util.isString(type))\n        throw TypeError(\"type must be a string\");\n\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\n        throw TypeError(\"rule must be a string rule\");\n\n    if (extend !== undefined && !util.isString(extend))\n        throw TypeError(\"extend must be a string\");\n\n    if (rule === \"proto3_optional\") {\n        rule = \"optional\";\n    }\n    /**\n     * Field rule, if any.\n     * @type {string|undefined}\n     */\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n    /**\n     * Field type.\n     * @type {string}\n     */\n    this.type = type; // toJSON\n\n    /**\n     * Unique field id.\n     * @type {number}\n     */\n    this.id = id; // toJSON, marker\n\n    /**\n     * Extended type if different from parent.\n     * @type {string|undefined}\n     */\n    this.extend = extend || undefined; // toJSON\n\n    /**\n     * Whether this field is required.\n     * @type {boolean}\n     */\n    this.required = rule === \"required\";\n\n    /**\n     * Whether this field is optional.\n     * @type {boolean}\n     */\n    this.optional = !this.required;\n\n    /**\n     * Whether this field is repeated.\n     * @type {boolean}\n     */\n    this.repeated = rule === \"repeated\";\n\n    /**\n     * Whether this field is a map or not.\n     * @type {boolean}\n     */\n    this.map = false;\n\n    /**\n     * Message this field belongs to.\n     * @type {Type|null}\n     */\n    this.message = null;\n\n    /**\n     * OneOf this field belongs to, if any,\n     * @type {OneOf|null}\n     */\n    this.partOf = null;\n\n    /**\n     * The field type's default value.\n     * @type {*}\n     */\n    this.typeDefault = null;\n\n    /**\n     * The field's default value on prototypes.\n     * @type {*}\n     */\n    this.defaultValue = null;\n\n    /**\n     * Whether this field's value should be treated as a long.\n     * @type {boolean}\n     */\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\n\n    /**\n     * Whether this field's value is a buffer.\n     * @type {boolean}\n     */\n    this.bytes = type === \"bytes\";\n\n    /**\n     * Resolved type if not a basic type.\n     * @type {Type|Enum|null}\n     */\n    this.resolvedType = null;\n\n    /**\n     * Sister-field within the extended type if a declaring extension field.\n     * @type {Field|null}\n     */\n    this.extensionField = null;\n\n    /**\n     * Sister-field within the declaring namespace if an extended field.\n     * @type {Field|null}\n     */\n    this.declaringField = null;\n\n    /**\n     * Internally remembers whether this field is packed.\n     * @type {boolean|null}\n     * @private\n     */\n    this._packed = null;\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\n * @name Field#packed\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"packed\", {\n    get: function() {\n        // defaults to packed=true if not explicity set to false\n        if (this._packed === null)\n            this._packed = this.getOption(\"packed\") !== false;\n        return this._packed;\n    }\n});\n\n/**\n * @override\n */\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (name === \"packed\") // clear cached before setting\n        this._packed = null;\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n\n/**\n * Field descriptor.\n * @interface IField\n * @property {string} [rule=\"optional\"] Field rule\n * @property {string} type Field type\n * @property {number} id Field id\n * @property {Object.<string,*>} [options] Field options\n */\n\n/**\n * Extension field descriptor.\n * @interface IExtensionField\n * @extends IField\n * @property {string} extend Extended type\n */\n\n/**\n * Converts this field to a field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IField} Field descriptor\n */\nField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Resolves this field's type references.\n * @returns {Field} `this`\n * @throws {Error} If any reference cannot be resolved\n */\nField.prototype.resolve = function resolve() {\n\n    if (this.resolved)\n        return this;\n\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n        if (this.resolvedType instanceof Type)\n            this.typeDefault = null;\n        else // instanceof Enum\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n    }\n\n    // use explicitly set default value if present\n    if (this.options && this.options[\"default\"] != null) {\n        this.typeDefault = this.options[\"default\"];\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\n    }\n\n    // remove unnecessary options\n    if (this.options) {\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\n            delete this.options.packed;\n        if (!Object.keys(this.options).length)\n            this.options = undefined;\n    }\n\n    // convert to internal data type if necesssary\n    if (this.long) {\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n\n        /* istanbul ignore else */\n        if (Object.freeze)\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\n        var buf;\n        if (util.base64.test(this.typeDefault))\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\n        else\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n        this.typeDefault = buf;\n    }\n\n    // take special care of maps and repeated fields\n    if (this.map)\n        this.defaultValue = util.emptyObject;\n    else if (this.repeated)\n        this.defaultValue = util.emptyArray;\n    else\n        this.defaultValue = this.typeDefault;\n\n    // ensure proper value on prototype\n    if (this.parent instanceof Type)\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n\n/**\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n * @typedef FieldDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} fieldName Field name\n * @returns {undefined}\n */\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @param {T} [defaultValue] Default value\n * @returns {FieldDecorator} Decorator function\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n */\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n\n    // submessage: decorate the submessage and use its name as the type\n    if (typeof fieldType === \"function\")\n        fieldType = util.decorateType(fieldType).name;\n\n    // enum reference: create a reflected copy of the enum and keep reuseing it\n    else if (fieldType && typeof fieldType === \"object\")\n        fieldType = util.decorateEnum(fieldType).name;\n\n    return function fieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\n    };\n};\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {Constructor<T>|string} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @returns {FieldDecorator} Decorator function\n * @template T extends Message<T>\n * @variation 2\n */\n// like Field.d but without a default value\n\n// Sets up cyclic dependencies (called in index-light)\nField._configure = function configure(Type_) {\n    Type = Type_;\n};\n","start":1670465470602,"end":1670465470661},{"name":"vite:react-babel","result":"\"use strict\";\nmodule.exports = Field;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\n\nvar Enum  = require(\"./enum\"),\n    types = require(\"./types\"),\n    util  = require(\"./util\");\n\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n\n/**\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n * @name Field\n * @classdesc Reflected message field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a field from a field descriptor.\n * @param {string} name Field name\n * @param {IField} json Field descriptor\n * @returns {Field} Created field\n * @throws {TypeError} If arguments are invalid\n */\nField.fromJSON = function fromJSON(name, json) {\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n};\n\n/**\n * Not an actual constructor. Use {@link Field} instead.\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports FieldBase\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction Field(name, id, type, rule, extend, options, comment) {\n\n    if (util.isObject(rule)) {\n        comment = extend;\n        options = rule;\n        rule = extend = undefined;\n    } else if (util.isObject(extend)) {\n        comment = options;\n        options = extend;\n        extend = undefined;\n    }\n\n    ReflectionObject.call(this, name, options);\n\n    if (!util.isInteger(id) || id < 0)\n        throw TypeError(\"id must be a non-negative integer\");\n\n    if (!util.isString(type))\n        throw TypeError(\"type must be a string\");\n\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\n        throw TypeError(\"rule must be a string rule\");\n\n    if (extend !== undefined && !util.isString(extend))\n        throw TypeError(\"extend must be a string\");\n\n    if (rule === \"proto3_optional\") {\n        rule = \"optional\";\n    }\n    /**\n     * Field rule, if any.\n     * @type {string|undefined}\n     */\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n    /**\n     * Field type.\n     * @type {string}\n     */\n    this.type = type; // toJSON\n\n    /**\n     * Unique field id.\n     * @type {number}\n     */\n    this.id = id; // toJSON, marker\n\n    /**\n     * Extended type if different from parent.\n     * @type {string|undefined}\n     */\n    this.extend = extend || undefined; // toJSON\n\n    /**\n     * Whether this field is required.\n     * @type {boolean}\n     */\n    this.required = rule === \"required\";\n\n    /**\n     * Whether this field is optional.\n     * @type {boolean}\n     */\n    this.optional = !this.required;\n\n    /**\n     * Whether this field is repeated.\n     * @type {boolean}\n     */\n    this.repeated = rule === \"repeated\";\n\n    /**\n     * Whether this field is a map or not.\n     * @type {boolean}\n     */\n    this.map = false;\n\n    /**\n     * Message this field belongs to.\n     * @type {Type|null}\n     */\n    this.message = null;\n\n    /**\n     * OneOf this field belongs to, if any,\n     * @type {OneOf|null}\n     */\n    this.partOf = null;\n\n    /**\n     * The field type's default value.\n     * @type {*}\n     */\n    this.typeDefault = null;\n\n    /**\n     * The field's default value on prototypes.\n     * @type {*}\n     */\n    this.defaultValue = null;\n\n    /**\n     * Whether this field's value should be treated as a long.\n     * @type {boolean}\n     */\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\n\n    /**\n     * Whether this field's value is a buffer.\n     * @type {boolean}\n     */\n    this.bytes = type === \"bytes\";\n\n    /**\n     * Resolved type if not a basic type.\n     * @type {Type|Enum|null}\n     */\n    this.resolvedType = null;\n\n    /**\n     * Sister-field within the extended type if a declaring extension field.\n     * @type {Field|null}\n     */\n    this.extensionField = null;\n\n    /**\n     * Sister-field within the declaring namespace if an extended field.\n     * @type {Field|null}\n     */\n    this.declaringField = null;\n\n    /**\n     * Internally remembers whether this field is packed.\n     * @type {boolean|null}\n     * @private\n     */\n    this._packed = null;\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\n * @name Field#packed\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"packed\", {\n    get: function() {\n        // defaults to packed=true if not explicity set to false\n        if (this._packed === null)\n            this._packed = this.getOption(\"packed\") !== false;\n        return this._packed;\n    }\n});\n\n/**\n * @override\n */\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (name === \"packed\") // clear cached before setting\n        this._packed = null;\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n\n/**\n * Field descriptor.\n * @interface IField\n * @property {string} [rule=\"optional\"] Field rule\n * @property {string} type Field type\n * @property {number} id Field id\n * @property {Object.<string,*>} [options] Field options\n */\n\n/**\n * Extension field descriptor.\n * @interface IExtensionField\n * @extends IField\n * @property {string} extend Extended type\n */\n\n/**\n * Converts this field to a field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IField} Field descriptor\n */\nField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Resolves this field's type references.\n * @returns {Field} `this`\n * @throws {Error} If any reference cannot be resolved\n */\nField.prototype.resolve = function resolve() {\n\n    if (this.resolved)\n        return this;\n\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n        if (this.resolvedType instanceof Type)\n            this.typeDefault = null;\n        else // instanceof Enum\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n    }\n\n    // use explicitly set default value if present\n    if (this.options && this.options[\"default\"] != null) {\n        this.typeDefault = this.options[\"default\"];\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\n    }\n\n    // remove unnecessary options\n    if (this.options) {\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\n            delete this.options.packed;\n        if (!Object.keys(this.options).length)\n            this.options = undefined;\n    }\n\n    // convert to internal data type if necesssary\n    if (this.long) {\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n\n        /* istanbul ignore else */\n        if (Object.freeze)\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\n        var buf;\n        if (util.base64.test(this.typeDefault))\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\n        else\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n        this.typeDefault = buf;\n    }\n\n    // take special care of maps and repeated fields\n    if (this.map)\n        this.defaultValue = util.emptyObject;\n    else if (this.repeated)\n        this.defaultValue = util.emptyArray;\n    else\n        this.defaultValue = this.typeDefault;\n\n    // ensure proper value on prototype\n    if (this.parent instanceof Type)\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n\n/**\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n * @typedef FieldDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} fieldName Field name\n * @returns {undefined}\n */\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @param {T} [defaultValue] Default value\n * @returns {FieldDecorator} Decorator function\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n */\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n\n    // submessage: decorate the submessage and use its name as the type\n    if (typeof fieldType === \"function\")\n        fieldType = util.decorateType(fieldType).name;\n\n    // enum reference: create a reflected copy of the enum and keep reuseing it\n    else if (fieldType && typeof fieldType === \"object\")\n        fieldType = util.decorateEnum(fieldType).name;\n\n    return function fieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\n    };\n};\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {Constructor<T>|string} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @returns {FieldDecorator} Decorator function\n * @template T extends Message<T>\n * @variation 2\n */\n// like Field.d but without a default value\n\n// Sets up cyclic dependencies (called in index-light)\nField._configure = function configure(Type_) {\n    Type = Type_;\n};\n","start":1670465470661,"end":1670465470661,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/object.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/enum.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/types.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/util.js?commonjs-wrapped\";\n\nvar field;\nvar hasRequiredField;\n\nfunction requireField () {\n\tif (hasRequiredField) return field;\n\thasRequiredField = 1;\n\t\"use strict\";\n\tfield = Field;\n\n\t// extends ReflectionObject\n\tvar ReflectionObject = require$$0();\n\t((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\n\n\tvar Enum  = require$$1(),\n\t    types = require$$2(),\n\t    util  = require$$3();\n\n\tvar Type; // cyclic\n\n\tvar ruleRe = /^required|optional|repeated$/;\n\n\t/**\n\t * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n\t * @name Field\n\t * @classdesc Reflected message field.\n\t * @extends FieldBase\n\t * @constructor\n\t * @param {string} name Unique name within its namespace\n\t * @param {number} id Unique id within its namespace\n\t * @param {string} type Value type\n\t * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n\t * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n\t * @param {Object.<string,*>} [options] Declared options\n\t */\n\n\t/**\n\t * Constructs a field from a field descriptor.\n\t * @param {string} name Field name\n\t * @param {IField} json Field descriptor\n\t * @returns {Field} Created field\n\t * @throws {TypeError} If arguments are invalid\n\t */\n\tField.fromJSON = function fromJSON(name, json) {\n\t    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n\t};\n\n\t/**\n\t * Not an actual constructor. Use {@link Field} instead.\n\t * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n\t * @exports FieldBase\n\t * @extends ReflectionObject\n\t * @constructor\n\t * @param {string} name Unique name within its namespace\n\t * @param {number} id Unique id within its namespace\n\t * @param {string} type Value type\n\t * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n\t * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n\t * @param {Object.<string,*>} [options] Declared options\n\t * @param {string} [comment] Comment associated with this field\n\t */\n\tfunction Field(name, id, type, rule, extend, options, comment) {\n\n\t    if (util.isObject(rule)) {\n\t        comment = extend;\n\t        options = rule;\n\t        rule = extend = undefined;\n\t    } else if (util.isObject(extend)) {\n\t        comment = options;\n\t        options = extend;\n\t        extend = undefined;\n\t    }\n\n\t    ReflectionObject.call(this, name, options);\n\n\t    if (!util.isInteger(id) || id < 0)\n\t        throw TypeError(\"id must be a non-negative integer\");\n\n\t    if (!util.isString(type))\n\t        throw TypeError(\"type must be a string\");\n\n\t    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\n\t        throw TypeError(\"rule must be a string rule\");\n\n\t    if (extend !== undefined && !util.isString(extend))\n\t        throw TypeError(\"extend must be a string\");\n\n\t    if (rule === \"proto3_optional\") {\n\t        rule = \"optional\";\n\t    }\n\t    /**\n\t     * Field rule, if any.\n\t     * @type {string|undefined}\n\t     */\n\t    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n\t    /**\n\t     * Field type.\n\t     * @type {string}\n\t     */\n\t    this.type = type; // toJSON\n\n\t    /**\n\t     * Unique field id.\n\t     * @type {number}\n\t     */\n\t    this.id = id; // toJSON, marker\n\n\t    /**\n\t     * Extended type if different from parent.\n\t     * @type {string|undefined}\n\t     */\n\t    this.extend = extend || undefined; // toJSON\n\n\t    /**\n\t     * Whether this field is required.\n\t     * @type {boolean}\n\t     */\n\t    this.required = rule === \"required\";\n\n\t    /**\n\t     * Whether this field is optional.\n\t     * @type {boolean}\n\t     */\n\t    this.optional = !this.required;\n\n\t    /**\n\t     * Whether this field is repeated.\n\t     * @type {boolean}\n\t     */\n\t    this.repeated = rule === \"repeated\";\n\n\t    /**\n\t     * Whether this field is a map or not.\n\t     * @type {boolean}\n\t     */\n\t    this.map = false;\n\n\t    /**\n\t     * Message this field belongs to.\n\t     * @type {Type|null}\n\t     */\n\t    this.message = null;\n\n\t    /**\n\t     * OneOf this field belongs to, if any,\n\t     * @type {OneOf|null}\n\t     */\n\t    this.partOf = null;\n\n\t    /**\n\t     * The field type's default value.\n\t     * @type {*}\n\t     */\n\t    this.typeDefault = null;\n\n\t    /**\n\t     * The field's default value on prototypes.\n\t     * @type {*}\n\t     */\n\t    this.defaultValue = null;\n\n\t    /**\n\t     * Whether this field's value should be treated as a long.\n\t     * @type {boolean}\n\t     */\n\t    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\n\n\t    /**\n\t     * Whether this field's value is a buffer.\n\t     * @type {boolean}\n\t     */\n\t    this.bytes = type === \"bytes\";\n\n\t    /**\n\t     * Resolved type if not a basic type.\n\t     * @type {Type|Enum|null}\n\t     */\n\t    this.resolvedType = null;\n\n\t    /**\n\t     * Sister-field within the extended type if a declaring extension field.\n\t     * @type {Field|null}\n\t     */\n\t    this.extensionField = null;\n\n\t    /**\n\t     * Sister-field within the declaring namespace if an extended field.\n\t     * @type {Field|null}\n\t     */\n\t    this.declaringField = null;\n\n\t    /**\n\t     * Internally remembers whether this field is packed.\n\t     * @type {boolean|null}\n\t     * @private\n\t     */\n\t    this._packed = null;\n\n\t    /**\n\t     * Comment for this field.\n\t     * @type {string|null}\n\t     */\n\t    this.comment = comment;\n\t}\n\n\t/**\n\t * Determines whether this field is packed. Only relevant when repeated and working with proto2.\n\t * @name Field#packed\n\t * @type {boolean}\n\t * @readonly\n\t */\n\tObject.defineProperty(Field.prototype, \"packed\", {\n\t    get: function() {\n\t        // defaults to packed=true if not explicity set to false\n\t        if (this._packed === null)\n\t            this._packed = this.getOption(\"packed\") !== false;\n\t        return this._packed;\n\t    }\n\t});\n\n\t/**\n\t * @override\n\t */\n\tField.prototype.setOption = function setOption(name, value, ifNotSet) {\n\t    if (name === \"packed\") // clear cached before setting\n\t        this._packed = null;\n\t    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n\t};\n\n\t/**\n\t * Field descriptor.\n\t * @interface IField\n\t * @property {string} [rule=\"optional\"] Field rule\n\t * @property {string} type Field type\n\t * @property {number} id Field id\n\t * @property {Object.<string,*>} [options] Field options\n\t */\n\n\t/**\n\t * Extension field descriptor.\n\t * @interface IExtensionField\n\t * @extends IField\n\t * @property {string} extend Extended type\n\t */\n\n\t/**\n\t * Converts this field to a field descriptor.\n\t * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n\t * @returns {IField} Field descriptor\n\t */\n\tField.prototype.toJSON = function toJSON(toJSONOptions) {\n\t    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n\t    return util.toObject([\n\t        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\n\t        \"type\"    , this.type,\n\t        \"id\"      , this.id,\n\t        \"extend\"  , this.extend,\n\t        \"options\" , this.options,\n\t        \"comment\" , keepComments ? this.comment : undefined\n\t    ]);\n\t};\n\n\t/**\n\t * Resolves this field's type references.\n\t * @returns {Field} `this`\n\t * @throws {Error} If any reference cannot be resolved\n\t */\n\tField.prototype.resolve = function resolve() {\n\n\t    if (this.resolved)\n\t        return this;\n\n\t    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\n\t        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n\t        if (this.resolvedType instanceof Type)\n\t            this.typeDefault = null;\n\t        else // instanceof Enum\n\t            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n\t    }\n\n\t    // use explicitly set default value if present\n\t    if (this.options && this.options[\"default\"] != null) {\n\t        this.typeDefault = this.options[\"default\"];\n\t        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\n\t            this.typeDefault = this.resolvedType.values[this.typeDefault];\n\t    }\n\n\t    // remove unnecessary options\n\t    if (this.options) {\n\t        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\n\t            delete this.options.packed;\n\t        if (!Object.keys(this.options).length)\n\t            this.options = undefined;\n\t    }\n\n\t    // convert to internal data type if necesssary\n\t    if (this.long) {\n\t        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n\n\t        /* istanbul ignore else */\n\t        if (Object.freeze)\n\t            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n\n\t    } else if (this.bytes && typeof this.typeDefault === \"string\") {\n\t        var buf;\n\t        if (util.base64.test(this.typeDefault))\n\t            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\n\t        else\n\t            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n\t        this.typeDefault = buf;\n\t    }\n\n\t    // take special care of maps and repeated fields\n\t    if (this.map)\n\t        this.defaultValue = util.emptyObject;\n\t    else if (this.repeated)\n\t        this.defaultValue = util.emptyArray;\n\t    else\n\t        this.defaultValue = this.typeDefault;\n\n\t    // ensure proper value on prototype\n\t    if (this.parent instanceof Type)\n\t        this.parent.ctor.prototype[this.name] = this.defaultValue;\n\n\t    return ReflectionObject.prototype.resolve.call(this);\n\t};\n\n\t/**\n\t * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n\t * @typedef FieldDecorator\n\t * @type {function}\n\t * @param {Object} prototype Target prototype\n\t * @param {string} fieldName Field name\n\t * @returns {undefined}\n\t */\n\n\t/**\n\t * Field decorator (TypeScript).\n\t * @name Field.d\n\t * @function\n\t * @param {number} fieldId Field id\n\t * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n\t * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n\t * @param {T} [defaultValue] Default value\n\t * @returns {FieldDecorator} Decorator function\n\t * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n\t */\n\tField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n\n\t    // submessage: decorate the submessage and use its name as the type\n\t    if (typeof fieldType === \"function\")\n\t        fieldType = util.decorateType(fieldType).name;\n\n\t    // enum reference: create a reflected copy of the enum and keep reuseing it\n\t    else if (fieldType && typeof fieldType === \"object\")\n\t        fieldType = util.decorateEnum(fieldType).name;\n\n\t    return function fieldDecorator(prototype, fieldName) {\n\t        util.decorateType(prototype.constructor)\n\t            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\n\t    };\n\t};\n\n\t/**\n\t * Field decorator (TypeScript).\n\t * @name Field.d\n\t * @function\n\t * @param {number} fieldId Field id\n\t * @param {Constructor<T>|string} fieldType Field type\n\t * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n\t * @returns {FieldDecorator} Decorator function\n\t * @template T extends Message<T>\n\t * @variation 2\n\t */\n\t// like Field.d but without a default value\n\n\t// Sets up cyclic dependencies (called in index-light)\n\tField._configure = function configure(Type_) {\n\t    Type = Type_;\n\t};\n\treturn field;\n}\n\nexport { requireField as __require };","start":1670465470661,"end":1670465471380,"order":"normal"},{"name":"polyfill-node","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/object.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/enum.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/types.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/util.js?commonjs-wrapped\";\n\nvar field;\nvar hasRequiredField;\n\nfunction requireField () {\n\tif (hasRequiredField) return field;\n\thasRequiredField = 1;\n\t\"use strict\";\n\tfield = Field;\n\n\t// extends ReflectionObject\n\tvar ReflectionObject = require$$0();\n\t((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\n\n\tvar Enum  = require$$1(),\n\t    types = require$$2(),\n\t    util  = require$$3();\n\n\tvar Type; // cyclic\n\n\tvar ruleRe = /^required|optional|repeated$/;\n\n\t/**\n\t * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n\t * @name Field\n\t * @classdesc Reflected message field.\n\t * @extends FieldBase\n\t * @constructor\n\t * @param {string} name Unique name within its namespace\n\t * @param {number} id Unique id within its namespace\n\t * @param {string} type Value type\n\t * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n\t * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n\t * @param {Object.<string,*>} [options] Declared options\n\t */\n\n\t/**\n\t * Constructs a field from a field descriptor.\n\t * @param {string} name Field name\n\t * @param {IField} json Field descriptor\n\t * @returns {Field} Created field\n\t * @throws {TypeError} If arguments are invalid\n\t */\n\tField.fromJSON = function fromJSON(name, json) {\n\t    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n\t};\n\n\t/**\n\t * Not an actual constructor. Use {@link Field} instead.\n\t * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n\t * @exports FieldBase\n\t * @extends ReflectionObject\n\t * @constructor\n\t * @param {string} name Unique name within its namespace\n\t * @param {number} id Unique id within its namespace\n\t * @param {string} type Value type\n\t * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n\t * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n\t * @param {Object.<string,*>} [options] Declared options\n\t * @param {string} [comment] Comment associated with this field\n\t */\n\tfunction Field(name, id, type, rule, extend, options, comment) {\n\n\t    if (util.isObject(rule)) {\n\t        comment = extend;\n\t        options = rule;\n\t        rule = extend = undefined;\n\t    } else if (util.isObject(extend)) {\n\t        comment = options;\n\t        options = extend;\n\t        extend = undefined;\n\t    }\n\n\t    ReflectionObject.call(this, name, options);\n\n\t    if (!util.isInteger(id) || id < 0)\n\t        throw TypeError(\"id must be a non-negative integer\");\n\n\t    if (!util.isString(type))\n\t        throw TypeError(\"type must be a string\");\n\n\t    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\n\t        throw TypeError(\"rule must be a string rule\");\n\n\t    if (extend !== undefined && !util.isString(extend))\n\t        throw TypeError(\"extend must be a string\");\n\n\t    if (rule === \"proto3_optional\") {\n\t        rule = \"optional\";\n\t    }\n\t    /**\n\t     * Field rule, if any.\n\t     * @type {string|undefined}\n\t     */\n\t    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n\t    /**\n\t     * Field type.\n\t     * @type {string}\n\t     */\n\t    this.type = type; // toJSON\n\n\t    /**\n\t     * Unique field id.\n\t     * @type {number}\n\t     */\n\t    this.id = id; // toJSON, marker\n\n\t    /**\n\t     * Extended type if different from parent.\n\t     * @type {string|undefined}\n\t     */\n\t    this.extend = extend || undefined; // toJSON\n\n\t    /**\n\t     * Whether this field is required.\n\t     * @type {boolean}\n\t     */\n\t    this.required = rule === \"required\";\n\n\t    /**\n\t     * Whether this field is optional.\n\t     * @type {boolean}\n\t     */\n\t    this.optional = !this.required;\n\n\t    /**\n\t     * Whether this field is repeated.\n\t     * @type {boolean}\n\t     */\n\t    this.repeated = rule === \"repeated\";\n\n\t    /**\n\t     * Whether this field is a map or not.\n\t     * @type {boolean}\n\t     */\n\t    this.map = false;\n\n\t    /**\n\t     * Message this field belongs to.\n\t     * @type {Type|null}\n\t     */\n\t    this.message = null;\n\n\t    /**\n\t     * OneOf this field belongs to, if any,\n\t     * @type {OneOf|null}\n\t     */\n\t    this.partOf = null;\n\n\t    /**\n\t     * The field type's default value.\n\t     * @type {*}\n\t     */\n\t    this.typeDefault = null;\n\n\t    /**\n\t     * The field's default value on prototypes.\n\t     * @type {*}\n\t     */\n\t    this.defaultValue = null;\n\n\t    /**\n\t     * Whether this field's value should be treated as a long.\n\t     * @type {boolean}\n\t     */\n\t    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\n\n\t    /**\n\t     * Whether this field's value is a buffer.\n\t     * @type {boolean}\n\t     */\n\t    this.bytes = type === \"bytes\";\n\n\t    /**\n\t     * Resolved type if not a basic type.\n\t     * @type {Type|Enum|null}\n\t     */\n\t    this.resolvedType = null;\n\n\t    /**\n\t     * Sister-field within the extended type if a declaring extension field.\n\t     * @type {Field|null}\n\t     */\n\t    this.extensionField = null;\n\n\t    /**\n\t     * Sister-field within the declaring namespace if an extended field.\n\t     * @type {Field|null}\n\t     */\n\t    this.declaringField = null;\n\n\t    /**\n\t     * Internally remembers whether this field is packed.\n\t     * @type {boolean|null}\n\t     * @private\n\t     */\n\t    this._packed = null;\n\n\t    /**\n\t     * Comment for this field.\n\t     * @type {string|null}\n\t     */\n\t    this.comment = comment;\n\t}\n\n\t/**\n\t * Determines whether this field is packed. Only relevant when repeated and working with proto2.\n\t * @name Field#packed\n\t * @type {boolean}\n\t * @readonly\n\t */\n\tObject.defineProperty(Field.prototype, \"packed\", {\n\t    get: function() {\n\t        // defaults to packed=true if not explicity set to false\n\t        if (this._packed === null)\n\t            this._packed = this.getOption(\"packed\") !== false;\n\t        return this._packed;\n\t    }\n\t});\n\n\t/**\n\t * @override\n\t */\n\tField.prototype.setOption = function setOption(name, value, ifNotSet) {\n\t    if (name === \"packed\") // clear cached before setting\n\t        this._packed = null;\n\t    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n\t};\n\n\t/**\n\t * Field descriptor.\n\t * @interface IField\n\t * @property {string} [rule=\"optional\"] Field rule\n\t * @property {string} type Field type\n\t * @property {number} id Field id\n\t * @property {Object.<string,*>} [options] Field options\n\t */\n\n\t/**\n\t * Extension field descriptor.\n\t * @interface IExtensionField\n\t * @extends IField\n\t * @property {string} extend Extended type\n\t */\n\n\t/**\n\t * Converts this field to a field descriptor.\n\t * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n\t * @returns {IField} Field descriptor\n\t */\n\tField.prototype.toJSON = function toJSON(toJSONOptions) {\n\t    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n\t    return util.toObject([\n\t        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\n\t        \"type\"    , this.type,\n\t        \"id\"      , this.id,\n\t        \"extend\"  , this.extend,\n\t        \"options\" , this.options,\n\t        \"comment\" , keepComments ? this.comment : undefined\n\t    ]);\n\t};\n\n\t/**\n\t * Resolves this field's type references.\n\t * @returns {Field} `this`\n\t * @throws {Error} If any reference cannot be resolved\n\t */\n\tField.prototype.resolve = function resolve() {\n\n\t    if (this.resolved)\n\t        return this;\n\n\t    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\n\t        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n\t        if (this.resolvedType instanceof Type)\n\t            this.typeDefault = null;\n\t        else // instanceof Enum\n\t            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n\t    }\n\n\t    // use explicitly set default value if present\n\t    if (this.options && this.options[\"default\"] != null) {\n\t        this.typeDefault = this.options[\"default\"];\n\t        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\n\t            this.typeDefault = this.resolvedType.values[this.typeDefault];\n\t    }\n\n\t    // remove unnecessary options\n\t    if (this.options) {\n\t        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\n\t            delete this.options.packed;\n\t        if (!Object.keys(this.options).length)\n\t            this.options = undefined;\n\t    }\n\n\t    // convert to internal data type if necesssary\n\t    if (this.long) {\n\t        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n\n\t        /* istanbul ignore else */\n\t        if (Object.freeze)\n\t            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n\n\t    } else if (this.bytes && typeof this.typeDefault === \"string\") {\n\t        var buf;\n\t        if (util.base64.test(this.typeDefault))\n\t            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\n\t        else\n\t            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n\t        this.typeDefault = buf;\n\t    }\n\n\t    // take special care of maps and repeated fields\n\t    if (this.map)\n\t        this.defaultValue = util.emptyObject;\n\t    else if (this.repeated)\n\t        this.defaultValue = util.emptyArray;\n\t    else\n\t        this.defaultValue = this.typeDefault;\n\n\t    // ensure proper value on prototype\n\t    if (this.parent instanceof Type)\n\t        this.parent.ctor.prototype[this.name] = this.defaultValue;\n\n\t    return ReflectionObject.prototype.resolve.call(this);\n\t};\n\n\t/**\n\t * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n\t * @typedef FieldDecorator\n\t * @type {function}\n\t * @param {Object} prototype Target prototype\n\t * @param {string} fieldName Field name\n\t * @returns {undefined}\n\t */\n\n\t/**\n\t * Field decorator (TypeScript).\n\t * @name Field.d\n\t * @function\n\t * @param {number} fieldId Field id\n\t * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n\t * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n\t * @param {T} [defaultValue] Default value\n\t * @returns {FieldDecorator} Decorator function\n\t * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n\t */\n\tField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n\n\t    // submessage: decorate the submessage and use its name as the type\n\t    if (typeof fieldType === \"function\")\n\t        fieldType = util.decorateType(fieldType).name;\n\n\t    // enum reference: create a reflected copy of the enum and keep reuseing it\n\t    else if (fieldType && typeof fieldType === \"object\")\n\t        fieldType = util.decorateEnum(fieldType).name;\n\n\t    return function fieldDecorator(prototype, fieldName) {\n\t        util.decorateType(prototype.constructor)\n\t            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\n\t    };\n\t};\n\n\t/**\n\t * Field decorator (TypeScript).\n\t * @name Field.d\n\t * @function\n\t * @param {number} fieldId Field id\n\t * @param {Constructor<T>|string} fieldType Field type\n\t * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n\t * @returns {FieldDecorator} Decorator function\n\t * @template T extends Message<T>\n\t * @variation 2\n\t */\n\t// like Field.d but without a default value\n\n\t// Sets up cyclic dependencies (called in index-light)\n\tField._configure = function configure(Type_) {\n\t    Type = Type_;\n\t};\n\treturn field;\n}\n\nexport { requireField as __require };","start":1670465471381,"end":1670465471385,"order":"normal"}]}
