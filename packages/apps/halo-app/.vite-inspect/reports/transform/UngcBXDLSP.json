{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+base64@1.1.2/node_modules/@protobufjs/base64/index.js","transforms":[{"name":"vite:load-fallback","result":"\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","start":1670465471128,"end":1670465471282},{"name":"vite:react-babel","result":"\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","start":1670465471282,"end":1670465471282,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as base64_1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+base64@1.1.2/node_modules/@protobufjs/base64/index.js?commonjs-exports\"\n\n(function (exports) {\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * A minimal base64 implementation for number arrays.\r\n\t * @memberof util\r\n\t * @namespace\r\n\t */\r\n\tvar base64 = exports;\r\n\r\n\t/**\r\n\t * Calculates the byte length of a base64 encoded string.\r\n\t * @param {string} string Base64 encoded string\r\n\t * @returns {number} Byte length\r\n\t */\r\n\tbase64.length = function length(string) {\r\n\t    var p = string.length;\r\n\t    if (!p)\r\n\t        return 0;\r\n\t    var n = 0;\r\n\t    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n\t        ++n;\r\n\t    return Math.ceil(string.length * 3) / 4 - n;\r\n\t};\r\n\r\n\t// Base64 encoding table\r\n\tvar b64 = new Array(64);\r\n\r\n\t// Base64 decoding table\r\n\tvar s64 = new Array(123);\r\n\r\n\t// 65..90, 97..122, 48..57, 43, 47\r\n\tfor (var i = 0; i < 64;)\r\n\t    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n\t/**\r\n\t * Encodes a buffer to a base64 encoded string.\r\n\t * @param {Uint8Array} buffer Source buffer\r\n\t * @param {number} start Source start\r\n\t * @param {number} end Source end\r\n\t * @returns {string} Base64 encoded string\r\n\t */\r\n\tbase64.encode = function encode(buffer, start, end) {\r\n\t    var parts = null,\r\n\t        chunk = [];\r\n\t    var i = 0, // output index\r\n\t        j = 0, // goto index\r\n\t        t;     // temporary\r\n\t    while (start < end) {\r\n\t        var b = buffer[start++];\r\n\t        switch (j) {\r\n\t            case 0:\r\n\t                chunk[i++] = b64[b >> 2];\r\n\t                t = (b & 3) << 4;\r\n\t                j = 1;\r\n\t                break;\r\n\t            case 1:\r\n\t                chunk[i++] = b64[t | b >> 4];\r\n\t                t = (b & 15) << 2;\r\n\t                j = 2;\r\n\t                break;\r\n\t            case 2:\r\n\t                chunk[i++] = b64[t | b >> 6];\r\n\t                chunk[i++] = b64[b & 63];\r\n\t                j = 0;\r\n\t                break;\r\n\t        }\r\n\t        if (i > 8191) {\r\n\t            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n\t            i = 0;\r\n\t        }\r\n\t    }\r\n\t    if (j) {\r\n\t        chunk[i++] = b64[t];\r\n\t        chunk[i++] = 61;\r\n\t        if (j === 1)\r\n\t            chunk[i++] = 61;\r\n\t    }\r\n\t    if (parts) {\r\n\t        if (i)\r\n\t            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n\t        return parts.join(\"\");\r\n\t    }\r\n\t    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n\t};\r\n\r\n\tvar invalidEncoding = \"invalid encoding\";\r\n\r\n\t/**\r\n\t * Decodes a base64 encoded string to a buffer.\r\n\t * @param {string} string Source string\r\n\t * @param {Uint8Array} buffer Destination buffer\r\n\t * @param {number} offset Destination offset\r\n\t * @returns {number} Number of bytes written\r\n\t * @throws {Error} If encoding is invalid\r\n\t */\r\n\tbase64.decode = function decode(string, buffer, offset) {\r\n\t    var start = offset;\r\n\t    var j = 0, // goto index\r\n\t        t;     // temporary\r\n\t    for (var i = 0; i < string.length;) {\r\n\t        var c = string.charCodeAt(i++);\r\n\t        if (c === 61 && j > 1)\r\n\t            break;\r\n\t        if ((c = s64[c]) === undefined)\r\n\t            throw Error(invalidEncoding);\r\n\t        switch (j) {\r\n\t            case 0:\r\n\t                t = c;\r\n\t                j = 1;\r\n\t                break;\r\n\t            case 1:\r\n\t                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n\t                t = c;\r\n\t                j = 2;\r\n\t                break;\r\n\t            case 2:\r\n\t                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n\t                t = c;\r\n\t                j = 3;\r\n\t                break;\r\n\t            case 3:\r\n\t                buffer[offset++] = (t & 3) << 6 | c;\r\n\t                j = 0;\r\n\t                break;\r\n\t        }\r\n\t    }\r\n\t    if (j === 1)\r\n\t        throw Error(invalidEncoding);\r\n\t    return offset - start;\r\n\t};\r\n\r\n\t/**\r\n\t * Tests if the specified string appears to be base64 encoded.\r\n\t * @param {string} string String to test\r\n\t * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n\t */\r\n\tbase64.test = function test(string) {\r\n\t    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n\t};\n} (base64_1));\n\nexport default base64_1;\nexport { base64_1 as __moduleExports };","start":1670465471283,"end":1670465471284,"order":"normal"}]}
