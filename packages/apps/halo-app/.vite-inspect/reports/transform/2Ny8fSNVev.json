{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_auth.js","transforms":[{"name":"vite:load-fallback","result":"/* eslint-disable camelcase */\nconst { crypto_verify_32 } = require('./crypto_verify')\nconst Sha512 = require('sha512-universal')\nconst assert = require('nanoassert')\n\nconst crypto_auth_BYTES = 32\nconst crypto_auth_KEYBYTES = 32\n\nfunction crypto_auth (out, input, k) {\n  assert(out.byteLength === crypto_auth_BYTES, \"out should be 'crypto_auth_BYTES' in length\")\n  assert(k.byteLength === crypto_auth_KEYBYTES, \"key should be 'crypto_auth_KEYBYTES' in length\")\n\n  const out0 = new Uint8Array(64)\n  const hmac = Sha512.HMAC(k)\n  hmac.update(input)\n  hmac.digest(out0)\n\n  out.set(out0.subarray(0, 32))\n}\n\nfunction crypto_auth_verify (h, input, k) {\n  assert(h.byteLength === crypto_auth_BYTES, \"h should be 'crypto_auth_BYTES' in length\")\n  assert(k.byteLength === crypto_auth_KEYBYTES, \"key should be 'crypto_auth_KEYBYTES' in length\")\n\n  const correct = Sha512.HMAC(k).update(input).digest()\n\n  return crypto_verify_32(h, 0, correct, 0)\n}\n\nmodule.exports = {\n  crypto_auth_BYTES,\n  crypto_auth_KEYBYTES,\n  crypto_auth,\n  crypto_auth_verify\n}\n","start":1670465470667,"end":1670465470837},{"name":"vite:react-babel","result":"/* eslint-disable camelcase */\nconst { crypto_verify_32 } = require('./crypto_verify')\nconst Sha512 = require('sha512-universal')\nconst assert = require('nanoassert')\n\nconst crypto_auth_BYTES = 32\nconst crypto_auth_KEYBYTES = 32\n\nfunction crypto_auth (out, input, k) {\n  assert(out.byteLength === crypto_auth_BYTES, \"out should be 'crypto_auth_BYTES' in length\")\n  assert(k.byteLength === crypto_auth_KEYBYTES, \"key should be 'crypto_auth_KEYBYTES' in length\")\n\n  const out0 = new Uint8Array(64)\n  const hmac = Sha512.HMAC(k)\n  hmac.update(input)\n  hmac.digest(out0)\n\n  out.set(out0.subarray(0, 32))\n}\n\nfunction crypto_auth_verify (h, input, k) {\n  assert(h.byteLength === crypto_auth_BYTES, \"h should be 'crypto_auth_BYTES' in length\")\n  assert(k.byteLength === crypto_auth_KEYBYTES, \"key should be 'crypto_auth_KEYBYTES' in length\")\n\n  const correct = Sha512.HMAC(k).update(input).digest()\n\n  return crypto_verify_32(h, 0, correct, 0)\n}\n\nmodule.exports = {\n  crypto_auth_BYTES,\n  crypto_auth_KEYBYTES,\n  crypto_auth,\n  crypto_auth_verify\n}\n","start":1670465470837,"end":1670465470837,"order":"pre"},{"name":"commonjs","result":"/* eslint-disable camelcase */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_verify.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sha512-universal@1.2.1/node_modules/sha512-universal/index.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoassert@2.0.0/node_modules/nanoassert/index.js?commonjs-proxy\";\n\nconst { crypto_verify_32 } = require$$0\nconst Sha512 = require$$1\nconst assert = require$$2\n\nconst crypto_auth_BYTES = 32\nconst crypto_auth_KEYBYTES = 32\n\nfunction crypto_auth (out, input, k) {\n  assert(out.byteLength === crypto_auth_BYTES, \"out should be 'crypto_auth_BYTES' in length\")\n  assert(k.byteLength === crypto_auth_KEYBYTES, \"key should be 'crypto_auth_KEYBYTES' in length\")\n\n  const out0 = new Uint8Array(64)\n  const hmac = Sha512.HMAC(k)\n  hmac.update(input)\n  hmac.digest(out0)\n\n  out.set(out0.subarray(0, 32))\n}\n\nfunction crypto_auth_verify (h, input, k) {\n  assert(h.byteLength === crypto_auth_BYTES, \"h should be 'crypto_auth_BYTES' in length\")\n  assert(k.byteLength === crypto_auth_KEYBYTES, \"key should be 'crypto_auth_KEYBYTES' in length\")\n\n  const correct = Sha512.HMAC(k).update(input).digest()\n\n  return crypto_verify_32(h, 0, correct, 0)\n}\n\nvar crypto_auth_1 = {\n  crypto_auth_BYTES,\n  crypto_auth_KEYBYTES,\n  crypto_auth,\n  crypto_auth_verify\n}\n\nexport default crypto_auth_1;\nexport { crypto_auth_1 as __moduleExports };","start":1670465470837,"end":1670465471682,"order":"normal"}]}
