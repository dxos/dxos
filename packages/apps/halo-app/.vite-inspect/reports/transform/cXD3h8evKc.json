{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_sign.js","transforms":[{"name":"vite:load-fallback","result":"/* eslint-disable camelcase, one-var */\nconst { crypto_verify_32 } = require('./crypto_verify')\nconst { crypto_hash } = require('./crypto_hash')\nconst {\n  gf, gf0, gf1, D, D2,\n  X, Y, I, A, Z, M, S,\n  sel25519, pack25519,\n  inv25519, unpack25519\n} = require('./internal/ed25519')\nconst { randombytes } = require('./randombytes')\nconst { crypto_scalarmult_BYTES } = require('./crypto_scalarmult.js')\nconst { crypto_hash_sha512_BYTES } = require('./crypto_hash.js')\nconst assert = require('nanoassert')\n\nconst crypto_sign_ed25519_PUBLICKEYBYTES = 32\nconst crypto_sign_ed25519_SECRETKEYBYTES = 64\nconst crypto_sign_ed25519_SEEDBYTES = 32\nconst crypto_sign_ed25519_BYTES = 64\n\nconst crypto_sign_BYTES = crypto_sign_ed25519_BYTES\nconst crypto_sign_PUBLICKEYBYTES = crypto_sign_ed25519_PUBLICKEYBYTES\nconst crypto_sign_SECRETKEYBYTES = crypto_sign_ed25519_SECRETKEYBYTES\nconst crypto_sign_SEEDBYTES = crypto_sign_ed25519_SEEDBYTES\n\nmodule.exports = {\n  crypto_sign_keypair,\n  crypto_sign_seed_keypair,\n  crypto_sign,\n  crypto_sign_detached,\n  crypto_sign_open,\n  crypto_sign_verify_detached,\n  crypto_sign_BYTES,\n  crypto_sign_PUBLICKEYBYTES,\n  crypto_sign_SECRETKEYBYTES,\n  crypto_sign_SEEDBYTES,\n  crypto_sign_ed25519_PUBLICKEYBYTES,\n  crypto_sign_ed25519_SECRETKEYBYTES,\n  crypto_sign_ed25519_SEEDBYTES,\n  crypto_sign_ed25519_BYTES,\n  crypto_sign_ed25519_pk_to_curve25519,\n  crypto_sign_ed25519_sk_to_curve25519,\n  crypto_sign_ed25519_sk_to_pk,\n  unpackneg,\n  pack\n}\n\nfunction set25519 (r, a) {\n  for (let i = 0; i < 16; i++) r[i] = a[i] | 0\n}\n\nfunction pow2523 (o, i) {\n  var c = gf()\n  var a\n  for (a = 0; a < 16; a++) c[a] = i[a]\n  for (a = 250; a >= 0; a--) {\n    S(c, c)\n    if (a !== 1) M(c, c, i)\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a]\n}\n\nfunction add (p, q) {\n  var a = gf(), b = gf(), c = gf(),\n    d = gf(), e = gf(), f = gf(),\n    g = gf(), h = gf(), t = gf()\n\n  Z(a, p[1], p[0])\n  Z(t, q[1], q[0])\n  M(a, a, t)\n  A(b, p[0], p[1])\n  A(t, q[0], q[1])\n  M(b, b, t)\n  M(c, p[3], q[3])\n  M(c, c, D2)\n  M(d, p[2], q[2])\n  A(d, d, d)\n  Z(e, b, a)\n  Z(f, d, c)\n  A(g, d, c)\n  A(h, b, a)\n\n  M(p[0], e, f)\n  M(p[1], h, g)\n  M(p[2], g, f)\n  M(p[3], e, h)\n}\n\nfunction cswap (p, q, b) {\n  var i\n  for (i = 0; i < 4; i++) {\n    sel25519(p[i], q[i], b)\n  }\n}\n\nfunction pack (r, p) {\n  var tx = gf(), ty = gf(), zi = gf()\n  inv25519(zi, p[2])\n  M(tx, p[0], zi)\n  M(ty, p[1], zi)\n  pack25519(r, ty)\n  r[31] ^= par25519(tx) << 7\n}\n\nfunction scalarmult (p, q, s) {\n  // don't mutate q\n  var h = [gf(q[0]), gf(q[1]), gf(q[2]), gf(q[3])]\n  var b, i\n  set25519(p[0], gf0)\n  set25519(p[1], gf1)\n  set25519(p[2], gf1)\n  set25519(p[3], gf0)\n  for (i = 255; i >= 0; --i) {\n    b = (s[(i / 8) | 0] >> (i & 7)) & 1\n    cswap(p, h, b)\n    add(h, p)\n    add(p, p)\n    cswap(p, h, b)\n  }\n}\n\nfunction scalarbase (p, s) {\n  var q = [gf(), gf(), gf(), gf()]\n  set25519(q[0], X)\n  set25519(q[1], Y)\n  set25519(q[2], gf1)\n  M(q[3], X, Y)\n  scalarmult(p, q, s)\n}\n\nfunction crypto_sign_keypair (pk, sk, seeded) {\n  check(pk, crypto_sign_PUBLICKEYBYTES)\n  check(sk, crypto_sign_SECRETKEYBYTES)\n\n  var d = new Uint8Array(64)\n  var p = [gf(), gf(), gf(), gf()]\n  var i\n\n  if (!seeded) randombytes(sk, 32)\n  crypto_hash(d, sk, 32)\n  d[0] &= 248\n  d[31] &= 127\n  d[31] |= 64\n\n  scalarbase(p, d)\n  pack(pk, p)\n\n  for (i = 0; i < 32; i++) sk[i + 32] = pk[i]\n}\n\nfunction crypto_sign_seed_keypair (pk, sk, seed) {\n  check(seed, crypto_sign_SEEDBYTES)\n  sk.set(seed)\n  return crypto_sign_keypair(pk, sk, true)\n}\n\nvar L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10])\n\nfunction modL (r, x) {\n  var carry, i, j, k\n  for (i = 63; i >= 32; --i) {\n    carry = 0\n    for (j = i - 32, k = i - 12; j < k; ++j) {\n      x[j] += carry - 16 * x[i] * L[j - (i - 32)]\n      carry = (x[j] + 128) >> 8\n      x[j] -= carry * 256\n    }\n    x[j] += carry\n    x[i] = 0\n  }\n  carry = 0\n  for (j = 0; j < 32; j++) {\n    x[j] += carry - (x[31] >> 4) * L[j]\n    carry = x[j] >> 8\n    x[j] &= 255\n  }\n  for (j = 0; j < 32; j++) x[j] -= carry * L[j]\n  for (i = 0; i < 32; i++) {\n    x[i + 1] += x[i] >> 8\n    r[i] = x[i] & 255\n  }\n}\n\nfunction reduce (r) {\n  var x = new Float64Array(64)\n  for (let i = 0; i < 64; i++) x[i] = r[i]\n  for (let i = 0; i < 64; i++) r[i] = 0\n  modL(r, x)\n}\n\n// Note: difference from C - smlen returned, not passed as argument.\nfunction crypto_sign (sm, m, sk) {\n  check(sm, crypto_sign_BYTES + m.length)\n  check(m, 0)\n  check(sk, crypto_sign_SECRETKEYBYTES)\n  var n = m.length\n\n  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64)\n  var i, j, x = new Float64Array(64)\n  var p = [gf(), gf(), gf(), gf()]\n\n  crypto_hash(d, sk, 32)\n  d[0] &= 248\n  d[31] &= 127\n  d[31] |= 64\n\n  var smlen = n + 64\n  for (i = 0; i < n; i++) sm[64 + i] = m[i]\n  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i]\n\n  crypto_hash(r, sm.subarray(32), n + 32)\n  reduce(r)\n  scalarbase(p, r)\n  pack(sm, p)\n\n  for (i = 32; i < 64; i++) sm[i] = sk[i]\n  crypto_hash(h, sm, n + 64)\n  reduce(h)\n\n  for (i = 0; i < 64; i++) x[i] = 0\n  for (i = 0; i < 32; i++) x[i] = r[i]\n  for (i = 0; i < 32; i++) {\n    for (j = 0; j < 32; j++) {\n      x[i + j] += h[i] * d[j]\n    }\n  }\n\n  modL(sm.subarray(32), x)\n  return smlen\n}\n\nfunction crypto_sign_detached (sig, m, sk) {\n  var sm = new Uint8Array(m.length + crypto_sign_BYTES)\n  crypto_sign(sm, m, sk)\n  for (let i = 0; i < crypto_sign_BYTES; i++) sig[i] = sm[i]\n}\n\nfunction unpackneg (r, p) {\n  var t = gf(), chk = gf(), num = gf(),\n    den = gf(), den2 = gf(), den4 = gf(),\n    den6 = gf()\n\n  set25519(r[2], gf1)\n  unpack25519(r[1], p)\n  S(num, r[1])\n  M(den, num, D)\n  Z(num, num, r[2])\n  A(den, r[2], den)\n\n  S(den2, den)\n  S(den4, den2)\n  M(den6, den4, den2)\n  M(t, den6, num)\n  M(t, t, den)\n\n  pow2523(t, t)\n  M(t, t, num)\n  M(t, t, den)\n  M(t, t, den)\n  M(r[0], t, den)\n\n  S(chk, r[0])\n  M(chk, chk, den)\n  if (!neq25519(chk, num)) M(r[0], r[0], I)\n\n  S(chk, r[0])\n  M(chk, chk, den)\n  if (!neq25519(chk, num)) return false\n\n  if (par25519(r[0]) === (p[31] >> 7)) {\n    Z(r[0], gf(), r[0])\n  }\n\n  M(r[3], r[0], r[1])\n  return true\n}\n\n/* eslint-disable no-unused-vars */\nfunction crypto_sign_open (msg, sm, pk) {\n  check(msg, sm.length - crypto_sign_BYTES)\n  check(sm, crypto_sign_BYTES)\n  check(pk, crypto_sign_PUBLICKEYBYTES)\n  var n = sm.length\n  var m = new Uint8Array(sm.length)\n\n  var i, mlen\n  var t = new Uint8Array(32), h = new Uint8Array(64)\n  var p = [gf(), gf(), gf(), gf()],\n    q = [gf(), gf(), gf(), gf()]\n\n  mlen = -1\n  if (n < 64) return false\n\n  if (!unpackneg(q, pk)) return false\n\n  for (i = 0; i < n; i++) m[i] = sm[i]\n  for (i = 0; i < 32; i++) m[i + 32] = pk[i]\n  crypto_hash(h, m, n)\n  reduce(h)\n  scalarmult(p, q, h)\n\n  scalarbase(q, sm.subarray(32))\n  add(p, q)\n  pack(t, p)\n\n  n -= 64\n  if (!crypto_verify_32(sm, 0, t, 0)) {\n    for (i = 0; i < n; i++) m[i] = 0\n    return false\n    // throw new Error('crypto_sign_open failed')\n  }\n\n  for (i = 0; i < n; i++) msg[i] = sm[i + 64]\n  mlen = n\n  return true\n}\n/* eslint-enable no-unused-vars */\n\nfunction crypto_sign_verify_detached (sig, m, pk) {\n  check(sig, crypto_sign_BYTES)\n  var sm = new Uint8Array(m.length + crypto_sign_BYTES)\n  var i = 0\n  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i]\n  for (i = 0; i < m.length; i++) sm[i + crypto_sign_BYTES] = m[i]\n  return crypto_sign_open(m, sm, pk)\n}\n\nfunction par25519 (a) {\n  var d = new Uint8Array(32)\n  pack25519(d, a)\n  return d[0] & 1\n}\n\nfunction neq25519 (a, b) {\n  var c = new Uint8Array(32), d = new Uint8Array(32)\n  pack25519(c, a)\n  pack25519(d, b)\n  return crypto_verify_32(c, 0, d, 0)\n}\n\nfunction ed25519_mul_l (p, q) {\n  scalarmult(p, q, L)\n}\n\nfunction ed25519_is_on_main_subgroup (p) {\n  var pl = [gf(), gf(), gf(), gf()]\n\n  ed25519_mul_l(pl, p)\n\n  var zero = 0\n  for (let i = 0; i < 16; i++) {\n    zero |= (pl[0][i] & 0xffff)\n  }\n\n  return zero === 0\n}\n\nfunction crypto_sign_ed25519_pk_to_curve25519 (x25519_pk, ed25519_pk) {\n  check(x25519_pk, crypto_sign_PUBLICKEYBYTES)\n  check(ed25519_pk, crypto_sign_ed25519_PUBLICKEYBYTES)\n\n  var a = [gf(), gf(), gf(), gf()]\n  var x = gf([1])\n  var one_minus_y = gf([1])\n\n  assert(\n    isSmallOrder(ed25519_pk) &&\n    unpackneg(a, ed25519_pk) &&\n    ed25519_is_on_main_subgroup(a), 'Cannot convert key: bad point')\n\n  for (let i = 0; i < a.length; i++) {\n    pack25519(x25519_pk, a[i])\n  }\n\n  Z(one_minus_y, one_minus_y, a[1])\n  A(x, x, a[1])\n  inv25519(one_minus_y, one_minus_y)\n  M(x, x, one_minus_y)\n  pack25519(x25519_pk, x)\n\n  return 0\n}\n\nfunction isSmallOrder (s) {\n  Uint8Array.from([])\n\n  var bad_points = [\n    // 0 (order 4)\n    Uint8Array.from([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),\n\n    // 1 (order 1)\n    Uint8Array.from([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),\n\n    // 2707385501144840649318225287225658788936804267575313519463743609750303402022(order 8)\n    Uint8Array.from([0x26, 0xe8, 0x95, 0x8f, 0xc2, 0xb2, 0x27, 0xb0, 0x45, 0xc3,\n      0xf4, 0x89, 0xf2, 0xef, 0x98, 0xf0, 0xd5, 0xdf, 0xac, 0x05, 0xd3,\n      0xc6, 0x33, 0x39, 0xb1, 0x38, 0x02, 0x88, 0x6d, 0x53, 0xfc, 0x05]),\n\n    // 55188659117513257062467267217118295137698188065244968500265048394206261417927 (order 8)\n    Uint8Array.from([0xc7, 0x17, 0x6a, 0x70, 0x3d, 0x4d, 0xd8, 0x4f, 0xba, 0x3c,\n      0x0b, 0x76, 0x0d, 0x10, 0x67, 0x0f, 0x2a, 0x20, 0x53, 0xfa, 0x2c,\n      0x39, 0xcc, 0xc6, 0x4e, 0xc7, 0xfd, 0x77, 0x92, 0xac, 0x03, 0x7a]),\n\n    // p-1 (order 2)\n    Uint8Array.from([0xec, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f]),\n\n    //  p (=0 order 4)\n    Uint8Array.from([0xed, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f]),\n\n    // p + 1 (=1 order 1)\n    Uint8Array.from([0xee, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f])\n  ]\n\n  var c = new Uint8Array(7)\n  var j\n\n  check(bad_points, 7)\n  for (let i = 0; i < bad_points.length; i++) {\n    for (j = 0; j < 31; j++) {\n      c[i] |= s[j] ^ bad_points[i][j]\n    }\n  }\n\n  for (let i = 0; i < bad_points.length; i++) {\n    c[i] |= (s[j] & 0x7f) ^ bad_points[i][j]\n  }\n\n  var k = 0\n  for (let i = 0; i < bad_points.length; i++) {\n    k |= (c[i] - 1)\n  }\n\n  return ((k >> 8) & 1) === 0\n}\n\nfunction crypto_sign_ed25519_sk_to_pk (pk, sk) {\n  check(pk, crypto_sign_ed25519_PUBLICKEYBYTES)\n  pk.set(sk.subarray(crypto_sign_ed25519_SEEDBYTES))\n  return pk\n}\n\nfunction crypto_sign_ed25519_sk_to_curve25519 (curveSk, edSk) {\n  assert(curveSk && curveSk.byteLength === crypto_scalarmult_BYTES, \"curveSk must be 'crypto_sign_SECRETKEYBYTES' long\")\n  assert(edSk && edSk.byteLength === crypto_sign_ed25519_SECRETKEYBYTES, \"edSk must be 'crypto_sign_ed25519_SECRETKEYBYTES' long\")\n\n  var h = new Uint8Array(crypto_hash_sha512_BYTES)\n  crypto_hash(h, edSk, 32)\n\n  h[0] &= 248\n  h[31] &= 127\n  h[31] |= 64\n\n  curveSk.set(h.subarray(0, crypto_scalarmult_BYTES))\n  h.fill(0)\n  return curveSk\n}\n\nfunction check (buf, len, arg = 'Argument') {\n  if (!buf || (len && buf.length < len)) throw new Error(arg + ' must be a buffer' + (len ? ' of length ' + len : ''))\n}\n","start":1670465470740,"end":1670465470867},{"name":"vite:react-babel","result":"/* eslint-disable camelcase, one-var */\nconst { crypto_verify_32 } = require('./crypto_verify')\nconst { crypto_hash } = require('./crypto_hash')\nconst {\n  gf, gf0, gf1, D, D2,\n  X, Y, I, A, Z, M, S,\n  sel25519, pack25519,\n  inv25519, unpack25519\n} = require('./internal/ed25519')\nconst { randombytes } = require('./randombytes')\nconst { crypto_scalarmult_BYTES } = require('./crypto_scalarmult.js')\nconst { crypto_hash_sha512_BYTES } = require('./crypto_hash.js')\nconst assert = require('nanoassert')\n\nconst crypto_sign_ed25519_PUBLICKEYBYTES = 32\nconst crypto_sign_ed25519_SECRETKEYBYTES = 64\nconst crypto_sign_ed25519_SEEDBYTES = 32\nconst crypto_sign_ed25519_BYTES = 64\n\nconst crypto_sign_BYTES = crypto_sign_ed25519_BYTES\nconst crypto_sign_PUBLICKEYBYTES = crypto_sign_ed25519_PUBLICKEYBYTES\nconst crypto_sign_SECRETKEYBYTES = crypto_sign_ed25519_SECRETKEYBYTES\nconst crypto_sign_SEEDBYTES = crypto_sign_ed25519_SEEDBYTES\n\nmodule.exports = {\n  crypto_sign_keypair,\n  crypto_sign_seed_keypair,\n  crypto_sign,\n  crypto_sign_detached,\n  crypto_sign_open,\n  crypto_sign_verify_detached,\n  crypto_sign_BYTES,\n  crypto_sign_PUBLICKEYBYTES,\n  crypto_sign_SECRETKEYBYTES,\n  crypto_sign_SEEDBYTES,\n  crypto_sign_ed25519_PUBLICKEYBYTES,\n  crypto_sign_ed25519_SECRETKEYBYTES,\n  crypto_sign_ed25519_SEEDBYTES,\n  crypto_sign_ed25519_BYTES,\n  crypto_sign_ed25519_pk_to_curve25519,\n  crypto_sign_ed25519_sk_to_curve25519,\n  crypto_sign_ed25519_sk_to_pk,\n  unpackneg,\n  pack\n}\n\nfunction set25519 (r, a) {\n  for (let i = 0; i < 16; i++) r[i] = a[i] | 0\n}\n\nfunction pow2523 (o, i) {\n  var c = gf()\n  var a\n  for (a = 0; a < 16; a++) c[a] = i[a]\n  for (a = 250; a >= 0; a--) {\n    S(c, c)\n    if (a !== 1) M(c, c, i)\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a]\n}\n\nfunction add (p, q) {\n  var a = gf(), b = gf(), c = gf(),\n    d = gf(), e = gf(), f = gf(),\n    g = gf(), h = gf(), t = gf()\n\n  Z(a, p[1], p[0])\n  Z(t, q[1], q[0])\n  M(a, a, t)\n  A(b, p[0], p[1])\n  A(t, q[0], q[1])\n  M(b, b, t)\n  M(c, p[3], q[3])\n  M(c, c, D2)\n  M(d, p[2], q[2])\n  A(d, d, d)\n  Z(e, b, a)\n  Z(f, d, c)\n  A(g, d, c)\n  A(h, b, a)\n\n  M(p[0], e, f)\n  M(p[1], h, g)\n  M(p[2], g, f)\n  M(p[3], e, h)\n}\n\nfunction cswap (p, q, b) {\n  var i\n  for (i = 0; i < 4; i++) {\n    sel25519(p[i], q[i], b)\n  }\n}\n\nfunction pack (r, p) {\n  var tx = gf(), ty = gf(), zi = gf()\n  inv25519(zi, p[2])\n  M(tx, p[0], zi)\n  M(ty, p[1], zi)\n  pack25519(r, ty)\n  r[31] ^= par25519(tx) << 7\n}\n\nfunction scalarmult (p, q, s) {\n  // don't mutate q\n  var h = [gf(q[0]), gf(q[1]), gf(q[2]), gf(q[3])]\n  var b, i\n  set25519(p[0], gf0)\n  set25519(p[1], gf1)\n  set25519(p[2], gf1)\n  set25519(p[3], gf0)\n  for (i = 255; i >= 0; --i) {\n    b = (s[(i / 8) | 0] >> (i & 7)) & 1\n    cswap(p, h, b)\n    add(h, p)\n    add(p, p)\n    cswap(p, h, b)\n  }\n}\n\nfunction scalarbase (p, s) {\n  var q = [gf(), gf(), gf(), gf()]\n  set25519(q[0], X)\n  set25519(q[1], Y)\n  set25519(q[2], gf1)\n  M(q[3], X, Y)\n  scalarmult(p, q, s)\n}\n\nfunction crypto_sign_keypair (pk, sk, seeded) {\n  check(pk, crypto_sign_PUBLICKEYBYTES)\n  check(sk, crypto_sign_SECRETKEYBYTES)\n\n  var d = new Uint8Array(64)\n  var p = [gf(), gf(), gf(), gf()]\n  var i\n\n  if (!seeded) randombytes(sk, 32)\n  crypto_hash(d, sk, 32)\n  d[0] &= 248\n  d[31] &= 127\n  d[31] |= 64\n\n  scalarbase(p, d)\n  pack(pk, p)\n\n  for (i = 0; i < 32; i++) sk[i + 32] = pk[i]\n}\n\nfunction crypto_sign_seed_keypair (pk, sk, seed) {\n  check(seed, crypto_sign_SEEDBYTES)\n  sk.set(seed)\n  return crypto_sign_keypair(pk, sk, true)\n}\n\nvar L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10])\n\nfunction modL (r, x) {\n  var carry, i, j, k\n  for (i = 63; i >= 32; --i) {\n    carry = 0\n    for (j = i - 32, k = i - 12; j < k; ++j) {\n      x[j] += carry - 16 * x[i] * L[j - (i - 32)]\n      carry = (x[j] + 128) >> 8\n      x[j] -= carry * 256\n    }\n    x[j] += carry\n    x[i] = 0\n  }\n  carry = 0\n  for (j = 0; j < 32; j++) {\n    x[j] += carry - (x[31] >> 4) * L[j]\n    carry = x[j] >> 8\n    x[j] &= 255\n  }\n  for (j = 0; j < 32; j++) x[j] -= carry * L[j]\n  for (i = 0; i < 32; i++) {\n    x[i + 1] += x[i] >> 8\n    r[i] = x[i] & 255\n  }\n}\n\nfunction reduce (r) {\n  var x = new Float64Array(64)\n  for (let i = 0; i < 64; i++) x[i] = r[i]\n  for (let i = 0; i < 64; i++) r[i] = 0\n  modL(r, x)\n}\n\n// Note: difference from C - smlen returned, not passed as argument.\nfunction crypto_sign (sm, m, sk) {\n  check(sm, crypto_sign_BYTES + m.length)\n  check(m, 0)\n  check(sk, crypto_sign_SECRETKEYBYTES)\n  var n = m.length\n\n  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64)\n  var i, j, x = new Float64Array(64)\n  var p = [gf(), gf(), gf(), gf()]\n\n  crypto_hash(d, sk, 32)\n  d[0] &= 248\n  d[31] &= 127\n  d[31] |= 64\n\n  var smlen = n + 64\n  for (i = 0; i < n; i++) sm[64 + i] = m[i]\n  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i]\n\n  crypto_hash(r, sm.subarray(32), n + 32)\n  reduce(r)\n  scalarbase(p, r)\n  pack(sm, p)\n\n  for (i = 32; i < 64; i++) sm[i] = sk[i]\n  crypto_hash(h, sm, n + 64)\n  reduce(h)\n\n  for (i = 0; i < 64; i++) x[i] = 0\n  for (i = 0; i < 32; i++) x[i] = r[i]\n  for (i = 0; i < 32; i++) {\n    for (j = 0; j < 32; j++) {\n      x[i + j] += h[i] * d[j]\n    }\n  }\n\n  modL(sm.subarray(32), x)\n  return smlen\n}\n\nfunction crypto_sign_detached (sig, m, sk) {\n  var sm = new Uint8Array(m.length + crypto_sign_BYTES)\n  crypto_sign(sm, m, sk)\n  for (let i = 0; i < crypto_sign_BYTES; i++) sig[i] = sm[i]\n}\n\nfunction unpackneg (r, p) {\n  var t = gf(), chk = gf(), num = gf(),\n    den = gf(), den2 = gf(), den4 = gf(),\n    den6 = gf()\n\n  set25519(r[2], gf1)\n  unpack25519(r[1], p)\n  S(num, r[1])\n  M(den, num, D)\n  Z(num, num, r[2])\n  A(den, r[2], den)\n\n  S(den2, den)\n  S(den4, den2)\n  M(den6, den4, den2)\n  M(t, den6, num)\n  M(t, t, den)\n\n  pow2523(t, t)\n  M(t, t, num)\n  M(t, t, den)\n  M(t, t, den)\n  M(r[0], t, den)\n\n  S(chk, r[0])\n  M(chk, chk, den)\n  if (!neq25519(chk, num)) M(r[0], r[0], I)\n\n  S(chk, r[0])\n  M(chk, chk, den)\n  if (!neq25519(chk, num)) return false\n\n  if (par25519(r[0]) === (p[31] >> 7)) {\n    Z(r[0], gf(), r[0])\n  }\n\n  M(r[3], r[0], r[1])\n  return true\n}\n\n/* eslint-disable no-unused-vars */\nfunction crypto_sign_open (msg, sm, pk) {\n  check(msg, sm.length - crypto_sign_BYTES)\n  check(sm, crypto_sign_BYTES)\n  check(pk, crypto_sign_PUBLICKEYBYTES)\n  var n = sm.length\n  var m = new Uint8Array(sm.length)\n\n  var i, mlen\n  var t = new Uint8Array(32), h = new Uint8Array(64)\n  var p = [gf(), gf(), gf(), gf()],\n    q = [gf(), gf(), gf(), gf()]\n\n  mlen = -1\n  if (n < 64) return false\n\n  if (!unpackneg(q, pk)) return false\n\n  for (i = 0; i < n; i++) m[i] = sm[i]\n  for (i = 0; i < 32; i++) m[i + 32] = pk[i]\n  crypto_hash(h, m, n)\n  reduce(h)\n  scalarmult(p, q, h)\n\n  scalarbase(q, sm.subarray(32))\n  add(p, q)\n  pack(t, p)\n\n  n -= 64\n  if (!crypto_verify_32(sm, 0, t, 0)) {\n    for (i = 0; i < n; i++) m[i] = 0\n    return false\n    // throw new Error('crypto_sign_open failed')\n  }\n\n  for (i = 0; i < n; i++) msg[i] = sm[i + 64]\n  mlen = n\n  return true\n}\n/* eslint-enable no-unused-vars */\n\nfunction crypto_sign_verify_detached (sig, m, pk) {\n  check(sig, crypto_sign_BYTES)\n  var sm = new Uint8Array(m.length + crypto_sign_BYTES)\n  var i = 0\n  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i]\n  for (i = 0; i < m.length; i++) sm[i + crypto_sign_BYTES] = m[i]\n  return crypto_sign_open(m, sm, pk)\n}\n\nfunction par25519 (a) {\n  var d = new Uint8Array(32)\n  pack25519(d, a)\n  return d[0] & 1\n}\n\nfunction neq25519 (a, b) {\n  var c = new Uint8Array(32), d = new Uint8Array(32)\n  pack25519(c, a)\n  pack25519(d, b)\n  return crypto_verify_32(c, 0, d, 0)\n}\n\nfunction ed25519_mul_l (p, q) {\n  scalarmult(p, q, L)\n}\n\nfunction ed25519_is_on_main_subgroup (p) {\n  var pl = [gf(), gf(), gf(), gf()]\n\n  ed25519_mul_l(pl, p)\n\n  var zero = 0\n  for (let i = 0; i < 16; i++) {\n    zero |= (pl[0][i] & 0xffff)\n  }\n\n  return zero === 0\n}\n\nfunction crypto_sign_ed25519_pk_to_curve25519 (x25519_pk, ed25519_pk) {\n  check(x25519_pk, crypto_sign_PUBLICKEYBYTES)\n  check(ed25519_pk, crypto_sign_ed25519_PUBLICKEYBYTES)\n\n  var a = [gf(), gf(), gf(), gf()]\n  var x = gf([1])\n  var one_minus_y = gf([1])\n\n  assert(\n    isSmallOrder(ed25519_pk) &&\n    unpackneg(a, ed25519_pk) &&\n    ed25519_is_on_main_subgroup(a), 'Cannot convert key: bad point')\n\n  for (let i = 0; i < a.length; i++) {\n    pack25519(x25519_pk, a[i])\n  }\n\n  Z(one_minus_y, one_minus_y, a[1])\n  A(x, x, a[1])\n  inv25519(one_minus_y, one_minus_y)\n  M(x, x, one_minus_y)\n  pack25519(x25519_pk, x)\n\n  return 0\n}\n\nfunction isSmallOrder (s) {\n  Uint8Array.from([])\n\n  var bad_points = [\n    // 0 (order 4)\n    Uint8Array.from([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),\n\n    // 1 (order 1)\n    Uint8Array.from([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),\n\n    // 2707385501144840649318225287225658788936804267575313519463743609750303402022(order 8)\n    Uint8Array.from([0x26, 0xe8, 0x95, 0x8f, 0xc2, 0xb2, 0x27, 0xb0, 0x45, 0xc3,\n      0xf4, 0x89, 0xf2, 0xef, 0x98, 0xf0, 0xd5, 0xdf, 0xac, 0x05, 0xd3,\n      0xc6, 0x33, 0x39, 0xb1, 0x38, 0x02, 0x88, 0x6d, 0x53, 0xfc, 0x05]),\n\n    // 55188659117513257062467267217118295137698188065244968500265048394206261417927 (order 8)\n    Uint8Array.from([0xc7, 0x17, 0x6a, 0x70, 0x3d, 0x4d, 0xd8, 0x4f, 0xba, 0x3c,\n      0x0b, 0x76, 0x0d, 0x10, 0x67, 0x0f, 0x2a, 0x20, 0x53, 0xfa, 0x2c,\n      0x39, 0xcc, 0xc6, 0x4e, 0xc7, 0xfd, 0x77, 0x92, 0xac, 0x03, 0x7a]),\n\n    // p-1 (order 2)\n    Uint8Array.from([0xec, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f]),\n\n    //  p (=0 order 4)\n    Uint8Array.from([0xed, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f]),\n\n    // p + 1 (=1 order 1)\n    Uint8Array.from([0xee, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f])\n  ]\n\n  var c = new Uint8Array(7)\n  var j\n\n  check(bad_points, 7)\n  for (let i = 0; i < bad_points.length; i++) {\n    for (j = 0; j < 31; j++) {\n      c[i] |= s[j] ^ bad_points[i][j]\n    }\n  }\n\n  for (let i = 0; i < bad_points.length; i++) {\n    c[i] |= (s[j] & 0x7f) ^ bad_points[i][j]\n  }\n\n  var k = 0\n  for (let i = 0; i < bad_points.length; i++) {\n    k |= (c[i] - 1)\n  }\n\n  return ((k >> 8) & 1) === 0\n}\n\nfunction crypto_sign_ed25519_sk_to_pk (pk, sk) {\n  check(pk, crypto_sign_ed25519_PUBLICKEYBYTES)\n  pk.set(sk.subarray(crypto_sign_ed25519_SEEDBYTES))\n  return pk\n}\n\nfunction crypto_sign_ed25519_sk_to_curve25519 (curveSk, edSk) {\n  assert(curveSk && curveSk.byteLength === crypto_scalarmult_BYTES, \"curveSk must be 'crypto_sign_SECRETKEYBYTES' long\")\n  assert(edSk && edSk.byteLength === crypto_sign_ed25519_SECRETKEYBYTES, \"edSk must be 'crypto_sign_ed25519_SECRETKEYBYTES' long\")\n\n  var h = new Uint8Array(crypto_hash_sha512_BYTES)\n  crypto_hash(h, edSk, 32)\n\n  h[0] &= 248\n  h[31] &= 127\n  h[31] |= 64\n\n  curveSk.set(h.subarray(0, crypto_scalarmult_BYTES))\n  h.fill(0)\n  return curveSk\n}\n\nfunction check (buf, len, arg = 'Argument') {\n  if (!buf || (len && buf.length < len)) throw new Error(arg + ' must be a buffer' + (len ? ' of length ' + len : ''))\n}\n","start":1670465470867,"end":1670465470867,"order":"pre"},{"name":"commonjs","result":"/* eslint-disable camelcase, one-var */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_verify.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_hash.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/internal/ed25519.js?commonjs-proxy\";\nimport require$$3 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/randombytes.js?commonjs-proxy\";\nimport require$$4 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_scalarmult.js?commonjs-proxy\";\nimport require$$5 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_hash.js?commonjs-proxy\";\nimport require$$6 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoassert@2.0.0/node_modules/nanoassert/index.js?commonjs-proxy\";\n\nconst { crypto_verify_32 } = require$$0\nconst { crypto_hash } = require$$1\nconst {\n  gf, gf0, gf1, D, D2,\n  X, Y, I, A, Z, M, S,\n  sel25519, pack25519,\n  inv25519, unpack25519\n} = require$$2\nconst { randombytes } = require$$3\nconst { crypto_scalarmult_BYTES } = require$$4\nconst { crypto_hash_sha512_BYTES } = require$$5\nconst assert = require$$6\n\nconst crypto_sign_ed25519_PUBLICKEYBYTES = 32\nconst crypto_sign_ed25519_SECRETKEYBYTES = 64\nconst crypto_sign_ed25519_SEEDBYTES = 32\nconst crypto_sign_ed25519_BYTES = 64\n\nconst crypto_sign_BYTES = crypto_sign_ed25519_BYTES\nconst crypto_sign_PUBLICKEYBYTES = crypto_sign_ed25519_PUBLICKEYBYTES\nconst crypto_sign_SECRETKEYBYTES = crypto_sign_ed25519_SECRETKEYBYTES\nconst crypto_sign_SEEDBYTES = crypto_sign_ed25519_SEEDBYTES\n\nvar crypto_sign_1 = {\n  crypto_sign_keypair,\n  crypto_sign_seed_keypair,\n  crypto_sign,\n  crypto_sign_detached,\n  crypto_sign_open,\n  crypto_sign_verify_detached,\n  crypto_sign_BYTES,\n  crypto_sign_PUBLICKEYBYTES,\n  crypto_sign_SECRETKEYBYTES,\n  crypto_sign_SEEDBYTES,\n  crypto_sign_ed25519_PUBLICKEYBYTES,\n  crypto_sign_ed25519_SECRETKEYBYTES,\n  crypto_sign_ed25519_SEEDBYTES,\n  crypto_sign_ed25519_BYTES,\n  crypto_sign_ed25519_pk_to_curve25519,\n  crypto_sign_ed25519_sk_to_curve25519,\n  crypto_sign_ed25519_sk_to_pk,\n  unpackneg,\n  pack\n}\n\nfunction set25519 (r, a) {\n  for (let i = 0; i < 16; i++) r[i] = a[i] | 0\n}\n\nfunction pow2523 (o, i) {\n  var c = gf()\n  var a\n  for (a = 0; a < 16; a++) c[a] = i[a]\n  for (a = 250; a >= 0; a--) {\n    S(c, c)\n    if (a !== 1) M(c, c, i)\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a]\n}\n\nfunction add (p, q) {\n  var a = gf(), b = gf(), c = gf(),\n    d = gf(), e = gf(), f = gf(),\n    g = gf(), h = gf(), t = gf()\n\n  Z(a, p[1], p[0])\n  Z(t, q[1], q[0])\n  M(a, a, t)\n  A(b, p[0], p[1])\n  A(t, q[0], q[1])\n  M(b, b, t)\n  M(c, p[3], q[3])\n  M(c, c, D2)\n  M(d, p[2], q[2])\n  A(d, d, d)\n  Z(e, b, a)\n  Z(f, d, c)\n  A(g, d, c)\n  A(h, b, a)\n\n  M(p[0], e, f)\n  M(p[1], h, g)\n  M(p[2], g, f)\n  M(p[3], e, h)\n}\n\nfunction cswap (p, q, b) {\n  var i\n  for (i = 0; i < 4; i++) {\n    sel25519(p[i], q[i], b)\n  }\n}\n\nfunction pack (r, p) {\n  var tx = gf(), ty = gf(), zi = gf()\n  inv25519(zi, p[2])\n  M(tx, p[0], zi)\n  M(ty, p[1], zi)\n  pack25519(r, ty)\n  r[31] ^= par25519(tx) << 7\n}\n\nfunction scalarmult (p, q, s) {\n  // don't mutate q\n  var h = [gf(q[0]), gf(q[1]), gf(q[2]), gf(q[3])]\n  var b, i\n  set25519(p[0], gf0)\n  set25519(p[1], gf1)\n  set25519(p[2], gf1)\n  set25519(p[3], gf0)\n  for (i = 255; i >= 0; --i) {\n    b = (s[(i / 8) | 0] >> (i & 7)) & 1\n    cswap(p, h, b)\n    add(h, p)\n    add(p, p)\n    cswap(p, h, b)\n  }\n}\n\nfunction scalarbase (p, s) {\n  var q = [gf(), gf(), gf(), gf()]\n  set25519(q[0], X)\n  set25519(q[1], Y)\n  set25519(q[2], gf1)\n  M(q[3], X, Y)\n  scalarmult(p, q, s)\n}\n\nfunction crypto_sign_keypair (pk, sk, seeded) {\n  check(pk, crypto_sign_PUBLICKEYBYTES)\n  check(sk, crypto_sign_SECRETKEYBYTES)\n\n  var d = new Uint8Array(64)\n  var p = [gf(), gf(), gf(), gf()]\n  var i\n\n  if (!seeded) randombytes(sk, 32)\n  crypto_hash(d, sk, 32)\n  d[0] &= 248\n  d[31] &= 127\n  d[31] |= 64\n\n  scalarbase(p, d)\n  pack(pk, p)\n\n  for (i = 0; i < 32; i++) sk[i + 32] = pk[i]\n}\n\nfunction crypto_sign_seed_keypair (pk, sk, seed) {\n  check(seed, crypto_sign_SEEDBYTES)\n  sk.set(seed)\n  return crypto_sign_keypair(pk, sk, true)\n}\n\nvar L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10])\n\nfunction modL (r, x) {\n  var carry, i, j, k\n  for (i = 63; i >= 32; --i) {\n    carry = 0\n    for (j = i - 32, k = i - 12; j < k; ++j) {\n      x[j] += carry - 16 * x[i] * L[j - (i - 32)]\n      carry = (x[j] + 128) >> 8\n      x[j] -= carry * 256\n    }\n    x[j] += carry\n    x[i] = 0\n  }\n  carry = 0\n  for (j = 0; j < 32; j++) {\n    x[j] += carry - (x[31] >> 4) * L[j]\n    carry = x[j] >> 8\n    x[j] &= 255\n  }\n  for (j = 0; j < 32; j++) x[j] -= carry * L[j]\n  for (i = 0; i < 32; i++) {\n    x[i + 1] += x[i] >> 8\n    r[i] = x[i] & 255\n  }\n}\n\nfunction reduce (r) {\n  var x = new Float64Array(64)\n  for (let i = 0; i < 64; i++) x[i] = r[i]\n  for (let i = 0; i < 64; i++) r[i] = 0\n  modL(r, x)\n}\n\n// Note: difference from C - smlen returned, not passed as argument.\nfunction crypto_sign (sm, m, sk) {\n  check(sm, crypto_sign_BYTES + m.length)\n  check(m, 0)\n  check(sk, crypto_sign_SECRETKEYBYTES)\n  var n = m.length\n\n  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64)\n  var i, j, x = new Float64Array(64)\n  var p = [gf(), gf(), gf(), gf()]\n\n  crypto_hash(d, sk, 32)\n  d[0] &= 248\n  d[31] &= 127\n  d[31] |= 64\n\n  var smlen = n + 64\n  for (i = 0; i < n; i++) sm[64 + i] = m[i]\n  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i]\n\n  crypto_hash(r, sm.subarray(32), n + 32)\n  reduce(r)\n  scalarbase(p, r)\n  pack(sm, p)\n\n  for (i = 32; i < 64; i++) sm[i] = sk[i]\n  crypto_hash(h, sm, n + 64)\n  reduce(h)\n\n  for (i = 0; i < 64; i++) x[i] = 0\n  for (i = 0; i < 32; i++) x[i] = r[i]\n  for (i = 0; i < 32; i++) {\n    for (j = 0; j < 32; j++) {\n      x[i + j] += h[i] * d[j]\n    }\n  }\n\n  modL(sm.subarray(32), x)\n  return smlen\n}\n\nfunction crypto_sign_detached (sig, m, sk) {\n  var sm = new Uint8Array(m.length + crypto_sign_BYTES)\n  crypto_sign(sm, m, sk)\n  for (let i = 0; i < crypto_sign_BYTES; i++) sig[i] = sm[i]\n}\n\nfunction unpackneg (r, p) {\n  var t = gf(), chk = gf(), num = gf(),\n    den = gf(), den2 = gf(), den4 = gf(),\n    den6 = gf()\n\n  set25519(r[2], gf1)\n  unpack25519(r[1], p)\n  S(num, r[1])\n  M(den, num, D)\n  Z(num, num, r[2])\n  A(den, r[2], den)\n\n  S(den2, den)\n  S(den4, den2)\n  M(den6, den4, den2)\n  M(t, den6, num)\n  M(t, t, den)\n\n  pow2523(t, t)\n  M(t, t, num)\n  M(t, t, den)\n  M(t, t, den)\n  M(r[0], t, den)\n\n  S(chk, r[0])\n  M(chk, chk, den)\n  if (!neq25519(chk, num)) M(r[0], r[0], I)\n\n  S(chk, r[0])\n  M(chk, chk, den)\n  if (!neq25519(chk, num)) return false\n\n  if (par25519(r[0]) === (p[31] >> 7)) {\n    Z(r[0], gf(), r[0])\n  }\n\n  M(r[3], r[0], r[1])\n  return true\n}\n\n/* eslint-disable no-unused-vars */\nfunction crypto_sign_open (msg, sm, pk) {\n  check(msg, sm.length - crypto_sign_BYTES)\n  check(sm, crypto_sign_BYTES)\n  check(pk, crypto_sign_PUBLICKEYBYTES)\n  var n = sm.length\n  var m = new Uint8Array(sm.length)\n\n  var i, mlen\n  var t = new Uint8Array(32), h = new Uint8Array(64)\n  var p = [gf(), gf(), gf(), gf()],\n    q = [gf(), gf(), gf(), gf()]\n\n  mlen = -1\n  if (n < 64) return false\n\n  if (!unpackneg(q, pk)) return false\n\n  for (i = 0; i < n; i++) m[i] = sm[i]\n  for (i = 0; i < 32; i++) m[i + 32] = pk[i]\n  crypto_hash(h, m, n)\n  reduce(h)\n  scalarmult(p, q, h)\n\n  scalarbase(q, sm.subarray(32))\n  add(p, q)\n  pack(t, p)\n\n  n -= 64\n  if (!crypto_verify_32(sm, 0, t, 0)) {\n    for (i = 0; i < n; i++) m[i] = 0\n    return false\n    // throw new Error('crypto_sign_open failed')\n  }\n\n  for (i = 0; i < n; i++) msg[i] = sm[i + 64]\n  mlen = n\n  return true\n}\n/* eslint-enable no-unused-vars */\n\nfunction crypto_sign_verify_detached (sig, m, pk) {\n  check(sig, crypto_sign_BYTES)\n  var sm = new Uint8Array(m.length + crypto_sign_BYTES)\n  var i = 0\n  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i]\n  for (i = 0; i < m.length; i++) sm[i + crypto_sign_BYTES] = m[i]\n  return crypto_sign_open(m, sm, pk)\n}\n\nfunction par25519 (a) {\n  var d = new Uint8Array(32)\n  pack25519(d, a)\n  return d[0] & 1\n}\n\nfunction neq25519 (a, b) {\n  var c = new Uint8Array(32), d = new Uint8Array(32)\n  pack25519(c, a)\n  pack25519(d, b)\n  return crypto_verify_32(c, 0, d, 0)\n}\n\nfunction ed25519_mul_l (p, q) {\n  scalarmult(p, q, L)\n}\n\nfunction ed25519_is_on_main_subgroup (p) {\n  var pl = [gf(), gf(), gf(), gf()]\n\n  ed25519_mul_l(pl, p)\n\n  var zero = 0\n  for (let i = 0; i < 16; i++) {\n    zero |= (pl[0][i] & 0xffff)\n  }\n\n  return zero === 0\n}\n\nfunction crypto_sign_ed25519_pk_to_curve25519 (x25519_pk, ed25519_pk) {\n  check(x25519_pk, crypto_sign_PUBLICKEYBYTES)\n  check(ed25519_pk, crypto_sign_ed25519_PUBLICKEYBYTES)\n\n  var a = [gf(), gf(), gf(), gf()]\n  var x = gf([1])\n  var one_minus_y = gf([1])\n\n  assert(\n    isSmallOrder(ed25519_pk) &&\n    unpackneg(a, ed25519_pk) &&\n    ed25519_is_on_main_subgroup(a), 'Cannot convert key: bad point')\n\n  for (let i = 0; i < a.length; i++) {\n    pack25519(x25519_pk, a[i])\n  }\n\n  Z(one_minus_y, one_minus_y, a[1])\n  A(x, x, a[1])\n  inv25519(one_minus_y, one_minus_y)\n  M(x, x, one_minus_y)\n  pack25519(x25519_pk, x)\n\n  return 0\n}\n\nfunction isSmallOrder (s) {\n  Uint8Array.from([])\n\n  var bad_points = [\n    // 0 (order 4)\n    Uint8Array.from([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),\n\n    // 1 (order 1)\n    Uint8Array.from([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),\n\n    // 2707385501144840649318225287225658788936804267575313519463743609750303402022(order 8)\n    Uint8Array.from([0x26, 0xe8, 0x95, 0x8f, 0xc2, 0xb2, 0x27, 0xb0, 0x45, 0xc3,\n      0xf4, 0x89, 0xf2, 0xef, 0x98, 0xf0, 0xd5, 0xdf, 0xac, 0x05, 0xd3,\n      0xc6, 0x33, 0x39, 0xb1, 0x38, 0x02, 0x88, 0x6d, 0x53, 0xfc, 0x05]),\n\n    // 55188659117513257062467267217118295137698188065244968500265048394206261417927 (order 8)\n    Uint8Array.from([0xc7, 0x17, 0x6a, 0x70, 0x3d, 0x4d, 0xd8, 0x4f, 0xba, 0x3c,\n      0x0b, 0x76, 0x0d, 0x10, 0x67, 0x0f, 0x2a, 0x20, 0x53, 0xfa, 0x2c,\n      0x39, 0xcc, 0xc6, 0x4e, 0xc7, 0xfd, 0x77, 0x92, 0xac, 0x03, 0x7a]),\n\n    // p-1 (order 2)\n    Uint8Array.from([0xec, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f]),\n\n    //  p (=0 order 4)\n    Uint8Array.from([0xed, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f]),\n\n    // p + 1 (=1 order 1)\n    Uint8Array.from([0xee, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f])\n  ]\n\n  var c = new Uint8Array(7)\n  var j\n\n  check(bad_points, 7)\n  for (let i = 0; i < bad_points.length; i++) {\n    for (j = 0; j < 31; j++) {\n      c[i] |= s[j] ^ bad_points[i][j]\n    }\n  }\n\n  for (let i = 0; i < bad_points.length; i++) {\n    c[i] |= (s[j] & 0x7f) ^ bad_points[i][j]\n  }\n\n  var k = 0\n  for (let i = 0; i < bad_points.length; i++) {\n    k |= (c[i] - 1)\n  }\n\n  return ((k >> 8) & 1) === 0\n}\n\nfunction crypto_sign_ed25519_sk_to_pk (pk, sk) {\n  check(pk, crypto_sign_ed25519_PUBLICKEYBYTES)\n  pk.set(sk.subarray(crypto_sign_ed25519_SEEDBYTES))\n  return pk\n}\n\nfunction crypto_sign_ed25519_sk_to_curve25519 (curveSk, edSk) {\n  assert(curveSk && curveSk.byteLength === crypto_scalarmult_BYTES, \"curveSk must be 'crypto_sign_SECRETKEYBYTES' long\")\n  assert(edSk && edSk.byteLength === crypto_sign_ed25519_SECRETKEYBYTES, \"edSk must be 'crypto_sign_ed25519_SECRETKEYBYTES' long\")\n\n  var h = new Uint8Array(crypto_hash_sha512_BYTES)\n  crypto_hash(h, edSk, 32)\n\n  h[0] &= 248\n  h[31] &= 127\n  h[31] |= 64\n\n  curveSk.set(h.subarray(0, crypto_scalarmult_BYTES))\n  h.fill(0)\n  return curveSk\n}\n\nfunction check (buf, len, arg = 'Argument') {\n  if (!buf || (len && buf.length < len)) throw new Error(arg + ' must be a buffer' + (len ? ' of length ' + len : ''))\n}\n\nexport default crypto_sign_1;\nexport { crypto_sign_1 as __moduleExports };","start":1670465470867,"end":1670465471684,"order":"normal"}]}
