{"resolvedId":"/home/jdw/Code/dxos/dxos/packages/core/protocols/dist/src/proto/substitutions.js","transforms":[{"name":"vite:load-fallback","result":"\"use strict\";\n//\n// Copyright 2020 DXOS.org\n//\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.substitutions = void 0;\nconst codec_protobuf_1 = require(\"@dxos/codec-protobuf\");\nconst keys_1 = require(\"@dxos/keys\");\nconst timeframe_1 = require(\"@dxos/timeframe\");\nexports.substitutions = {\n    'dxos.keys.PublicKey': {\n        encode: (value) => ({ data: value.asUint8Array() }),\n        decode: (value) => keys_1.PublicKey.from(new Uint8Array(value.data))\n    },\n    // TODO(dmaretskyi): Shouldn't be substituted to PublicKey.\n    'dxos.keys.PrivateKey': {\n        encode: (value) => ({ data: new Uint8Array(value) }),\n        decode: (value) => keys_1.PublicKey.from(new Uint8Array(value.data)).asBuffer()\n    },\n    'dxos.echo.timeframe.TimeframeVector': {\n        encode: (timeframe) => ({\n            frames: timeframe.frames().map(([feedKey, seq]) => ({ feedKey: feedKey.asUint8Array(), seq }))\n        }),\n        decode: (vector) => {\n            var _a;\n            return new timeframe_1.Timeframe(((_a = vector.frames) !== null && _a !== void 0 ? _a : [])\n                .filter((frame) => frame.feedKey != null && frame.seq != null)\n                .map((frame) => [keys_1.PublicKey.from(new Uint8Array(frame.feedKey)), frame.seq]));\n        }\n    }\n};\nexports.default = {\n    ...codec_protobuf_1.anySubstitutions,\n    ...codec_protobuf_1.structSubstitutions,\n    ...exports.substitutions,\n    ...codec_protobuf_1.timestampSubstitutions\n};\n//# sourceMappingURL=substitutions.js.map","start":1670465468814,"end":1670465468966},{"name":"vite:react-babel","result":"\"use strict\";\n//\n// Copyright 2020 DXOS.org\n//\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.substitutions = void 0;\nconst codec_protobuf_1 = require(\"@dxos/codec-protobuf\");\nconst keys_1 = require(\"@dxos/keys\");\nconst timeframe_1 = require(\"@dxos/timeframe\");\nexports.substitutions = {\n    'dxos.keys.PublicKey': {\n        encode: (value) => ({ data: value.asUint8Array() }),\n        decode: (value) => keys_1.PublicKey.from(new Uint8Array(value.data))\n    },\n    // TODO(dmaretskyi): Shouldn't be substituted to PublicKey.\n    'dxos.keys.PrivateKey': {\n        encode: (value) => ({ data: new Uint8Array(value) }),\n        decode: (value) => keys_1.PublicKey.from(new Uint8Array(value.data)).asBuffer()\n    },\n    'dxos.echo.timeframe.TimeframeVector': {\n        encode: (timeframe) => ({\n            frames: timeframe.frames().map(([feedKey, seq]) => ({ feedKey: feedKey.asUint8Array(), seq }))\n        }),\n        decode: (vector) => {\n            var _a;\n            return new timeframe_1.Timeframe(((_a = vector.frames) !== null && _a !== void 0 ? _a : [])\n                .filter((frame) => frame.feedKey != null && frame.seq != null)\n                .map((frame) => [keys_1.PublicKey.from(new Uint8Array(frame.feedKey)), frame.seq]));\n        }\n    }\n};\nexports.default = {\n    ...codec_protobuf_1.anySubstitutions,\n    ...codec_protobuf_1.structSubstitutions,\n    ...exports.substitutions,\n    ...codec_protobuf_1.timestampSubstitutions\n};\n//# sourceMappingURL=substitutions.js.map","start":1670465468966,"end":1670465468966,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as substitutions } from \"\\u0000/home/jdw/Code/dxos/dxos/packages/core/protocols/dist/src/proto/substitutions.js?commonjs-exports\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/packages/common/codec-protobuf/dist/lib/browser/index.mjs?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/packages/common/keys/dist/lib/browser/index.mjs?commonjs-proxy\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/packages/common/timeframe/dist/lib/browser/index.mjs?commonjs-proxy\";\n\n(function (exports) {\n\t\"use strict\";\n\t//\n\t// Copyright 2020 DXOS.org\n\t//\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.substitutions = void 0;\n\tconst codec_protobuf_1 = require$$0;\n\tconst keys_1 = require$$1;\n\tconst timeframe_1 = require$$2;\n\texports.substitutions = {\n\t    'dxos.keys.PublicKey': {\n\t        encode: (value) => ({ data: value.asUint8Array() }),\n\t        decode: (value) => keys_1.PublicKey.from(new Uint8Array(value.data))\n\t    },\n\t    // TODO(dmaretskyi): Shouldn't be substituted to PublicKey.\n\t    'dxos.keys.PrivateKey': {\n\t        encode: (value) => ({ data: new Uint8Array(value) }),\n\t        decode: (value) => keys_1.PublicKey.from(new Uint8Array(value.data)).asBuffer()\n\t    },\n\t    'dxos.echo.timeframe.TimeframeVector': {\n\t        encode: (timeframe) => ({\n\t            frames: timeframe.frames().map(([feedKey, seq]) => ({ feedKey: feedKey.asUint8Array(), seq }))\n\t        }),\n\t        decode: (vector) => {\n\t            var _a;\n\t            return new timeframe_1.Timeframe(((_a = vector.frames) !== null && _a !== void 0 ? _a : [])\n\t                .filter((frame) => frame.feedKey != null && frame.seq != null)\n\t                .map((frame) => [keys_1.PublicKey.from(new Uint8Array(frame.feedKey)), frame.seq]));\n\t        }\n\t    }\n\t};\n\texports.default = {\n\t    ...codec_protobuf_1.anySubstitutions,\n\t    ...codec_protobuf_1.structSubstitutions,\n\t    ...exports.substitutions,\n\t    ...codec_protobuf_1.timestampSubstitutions\n\t};\n\t//# sourceMappingURL=substitutions.js.map\n} (substitutions));\n\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(substitutions);\nexport { substitutions as __moduleExports };","start":1670465468966,"end":1670465468967,"order":"normal"},{"name":"polyfill-node","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as substitutions } from \"\\u0000/home/jdw/Code/dxos/dxos/packages/core/protocols/dist/src/proto/substitutions.js?commonjs-exports\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/packages/common/codec-protobuf/dist/lib/browser/index.mjs?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/packages/common/keys/dist/lib/browser/index.mjs?commonjs-proxy\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/packages/common/timeframe/dist/lib/browser/index.mjs?commonjs-proxy\";\n\n(function (exports) {\n\t\"use strict\";\n\t//\n\t// Copyright 2020 DXOS.org\n\t//\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.substitutions = void 0;\n\tconst codec_protobuf_1 = require$$0;\n\tconst keys_1 = require$$1;\n\tconst timeframe_1 = require$$2;\n\texports.substitutions = {\n\t    'dxos.keys.PublicKey': {\n\t        encode: (value) => ({ data: value.asUint8Array() }),\n\t        decode: (value) => keys_1.PublicKey.from(new Uint8Array(value.data))\n\t    },\n\t    // TODO(dmaretskyi): Shouldn't be substituted to PublicKey.\n\t    'dxos.keys.PrivateKey': {\n\t        encode: (value) => ({ data: new Uint8Array(value) }),\n\t        decode: (value) => keys_1.PublicKey.from(new Uint8Array(value.data)).asBuffer()\n\t    },\n\t    'dxos.echo.timeframe.TimeframeVector': {\n\t        encode: (timeframe) => ({\n\t            frames: timeframe.frames().map(([feedKey, seq]) => ({ feedKey: feedKey.asUint8Array(), seq }))\n\t        }),\n\t        decode: (vector) => {\n\t            var _a;\n\t            return new timeframe_1.Timeframe(((_a = vector.frames) !== null && _a !== void 0 ? _a : [])\n\t                .filter((frame) => frame.feedKey != null && frame.seq != null)\n\t                .map((frame) => [keys_1.PublicKey.from(new Uint8Array(frame.feedKey)), frame.seq]));\n\t        }\n\t    }\n\t};\n\texports.default = {\n\t    ...codec_protobuf_1.anySubstitutions,\n\t    ...codec_protobuf_1.structSubstitutions,\n\t    ...exports.substitutions,\n\t    ...codec_protobuf_1.timestampSubstitutions\n\t};\n\t//# sourceMappingURL=substitutions.js.map\n} (substitutions));\n\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(substitutions);\nexport { substitutions as __moduleExports };","start":1670465468967,"end":1670465468968,"order":"normal"}]}
