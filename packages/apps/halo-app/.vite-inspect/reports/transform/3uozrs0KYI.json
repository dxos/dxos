{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/tripledes.js","transforms":[{"name":"vite:load-fallback","result":";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Permuted Choice 1 constants\n\t    var PC1 = [\n\t        57, 49, 41, 33, 25, 17, 9,  1,\n\t        58, 50, 42, 34, 26, 18, 10, 2,\n\t        59, 51, 43, 35, 27, 19, 11, 3,\n\t        60, 52, 44, 36, 63, 55, 47, 39,\n\t        31, 23, 15, 7,  62, 54, 46, 38,\n\t        30, 22, 14, 6,  61, 53, 45, 37,\n\t        29, 21, 13, 5,  28, 20, 12, 4\n\t    ];\n\n\t    // Permuted Choice 2 constants\n\t    var PC2 = [\n\t        14, 17, 11, 24, 1,  5,\n\t        3,  28, 15, 6,  21, 10,\n\t        23, 19, 12, 4,  26, 8,\n\t        16, 7,  27, 20, 13, 2,\n\t        41, 52, 31, 37, 47, 55,\n\t        30, 40, 51, 45, 33, 48,\n\t        44, 49, 39, 56, 34, 53,\n\t        46, 42, 50, 36, 29, 32\n\t    ];\n\n\t    // Cumulative bit shift constants\n\t    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];\n\n\t    // SBOXes and round permutation constants\n\t    var SBOX_P = [\n\t        {\n\t            0x0: 0x808200,\n\t            0x10000000: 0x8000,\n\t            0x20000000: 0x808002,\n\t            0x30000000: 0x2,\n\t            0x40000000: 0x200,\n\t            0x50000000: 0x808202,\n\t            0x60000000: 0x800202,\n\t            0x70000000: 0x800000,\n\t            0x80000000: 0x202,\n\t            0x90000000: 0x800200,\n\t            0xa0000000: 0x8200,\n\t            0xb0000000: 0x808000,\n\t            0xc0000000: 0x8002,\n\t            0xd0000000: 0x800002,\n\t            0xe0000000: 0x0,\n\t            0xf0000000: 0x8202,\n\t            0x8000000: 0x0,\n\t            0x18000000: 0x808202,\n\t            0x28000000: 0x8202,\n\t            0x38000000: 0x8000,\n\t            0x48000000: 0x808200,\n\t            0x58000000: 0x200,\n\t            0x68000000: 0x808002,\n\t            0x78000000: 0x2,\n\t            0x88000000: 0x800200,\n\t            0x98000000: 0x8200,\n\t            0xa8000000: 0x808000,\n\t            0xb8000000: 0x800202,\n\t            0xc8000000: 0x800002,\n\t            0xd8000000: 0x8002,\n\t            0xe8000000: 0x202,\n\t            0xf8000000: 0x800000,\n\t            0x1: 0x8000,\n\t            0x10000001: 0x2,\n\t            0x20000001: 0x808200,\n\t            0x30000001: 0x800000,\n\t            0x40000001: 0x808002,\n\t            0x50000001: 0x8200,\n\t            0x60000001: 0x200,\n\t            0x70000001: 0x800202,\n\t            0x80000001: 0x808202,\n\t            0x90000001: 0x808000,\n\t            0xa0000001: 0x800002,\n\t            0xb0000001: 0x8202,\n\t            0xc0000001: 0x202,\n\t            0xd0000001: 0x800200,\n\t            0xe0000001: 0x8002,\n\t            0xf0000001: 0x0,\n\t            0x8000001: 0x808202,\n\t            0x18000001: 0x808000,\n\t            0x28000001: 0x800000,\n\t            0x38000001: 0x200,\n\t            0x48000001: 0x8000,\n\t            0x58000001: 0x800002,\n\t            0x68000001: 0x2,\n\t            0x78000001: 0x8202,\n\t            0x88000001: 0x8002,\n\t            0x98000001: 0x800202,\n\t            0xa8000001: 0x202,\n\t            0xb8000001: 0x808200,\n\t            0xc8000001: 0x800200,\n\t            0xd8000001: 0x0,\n\t            0xe8000001: 0x8200,\n\t            0xf8000001: 0x808002\n\t        },\n\t        {\n\t            0x0: 0x40084010,\n\t            0x1000000: 0x4000,\n\t            0x2000000: 0x80000,\n\t            0x3000000: 0x40080010,\n\t            0x4000000: 0x40000010,\n\t            0x5000000: 0x40084000,\n\t            0x6000000: 0x40004000,\n\t            0x7000000: 0x10,\n\t            0x8000000: 0x84000,\n\t            0x9000000: 0x40004010,\n\t            0xa000000: 0x40000000,\n\t            0xb000000: 0x84010,\n\t            0xc000000: 0x80010,\n\t            0xd000000: 0x0,\n\t            0xe000000: 0x4010,\n\t            0xf000000: 0x40080000,\n\t            0x800000: 0x40004000,\n\t            0x1800000: 0x84010,\n\t            0x2800000: 0x10,\n\t            0x3800000: 0x40004010,\n\t            0x4800000: 0x40084010,\n\t            0x5800000: 0x40000000,\n\t            0x6800000: 0x80000,\n\t            0x7800000: 0x40080010,\n\t            0x8800000: 0x80010,\n\t            0x9800000: 0x0,\n\t            0xa800000: 0x4000,\n\t            0xb800000: 0x40080000,\n\t            0xc800000: 0x40000010,\n\t            0xd800000: 0x84000,\n\t            0xe800000: 0x40084000,\n\t            0xf800000: 0x4010,\n\t            0x10000000: 0x0,\n\t            0x11000000: 0x40080010,\n\t            0x12000000: 0x40004010,\n\t            0x13000000: 0x40084000,\n\t            0x14000000: 0x40080000,\n\t            0x15000000: 0x10,\n\t            0x16000000: 0x84010,\n\t            0x17000000: 0x4000,\n\t            0x18000000: 0x4010,\n\t            0x19000000: 0x80000,\n\t            0x1a000000: 0x80010,\n\t            0x1b000000: 0x40000010,\n\t            0x1c000000: 0x84000,\n\t            0x1d000000: 0x40004000,\n\t            0x1e000000: 0x40000000,\n\t            0x1f000000: 0x40084010,\n\t            0x10800000: 0x84010,\n\t            0x11800000: 0x80000,\n\t            0x12800000: 0x40080000,\n\t            0x13800000: 0x4000,\n\t            0x14800000: 0x40004000,\n\t            0x15800000: 0x40084010,\n\t            0x16800000: 0x10,\n\t            0x17800000: 0x40000000,\n\t            0x18800000: 0x40084000,\n\t            0x19800000: 0x40000010,\n\t            0x1a800000: 0x40004010,\n\t            0x1b800000: 0x80010,\n\t            0x1c800000: 0x0,\n\t            0x1d800000: 0x4010,\n\t            0x1e800000: 0x40080010,\n\t            0x1f800000: 0x84000\n\t        },\n\t        {\n\t            0x0: 0x104,\n\t            0x100000: 0x0,\n\t            0x200000: 0x4000100,\n\t            0x300000: 0x10104,\n\t            0x400000: 0x10004,\n\t            0x500000: 0x4000004,\n\t            0x600000: 0x4010104,\n\t            0x700000: 0x4010000,\n\t            0x800000: 0x4000000,\n\t            0x900000: 0x4010100,\n\t            0xa00000: 0x10100,\n\t            0xb00000: 0x4010004,\n\t            0xc00000: 0x4000104,\n\t            0xd00000: 0x10000,\n\t            0xe00000: 0x4,\n\t            0xf00000: 0x100,\n\t            0x80000: 0x4010100,\n\t            0x180000: 0x4010004,\n\t            0x280000: 0x0,\n\t            0x380000: 0x4000100,\n\t            0x480000: 0x4000004,\n\t            0x580000: 0x10000,\n\t            0x680000: 0x10004,\n\t            0x780000: 0x104,\n\t            0x880000: 0x4,\n\t            0x980000: 0x100,\n\t            0xa80000: 0x4010000,\n\t            0xb80000: 0x10104,\n\t            0xc80000: 0x10100,\n\t            0xd80000: 0x4000104,\n\t            0xe80000: 0x4010104,\n\t            0xf80000: 0x4000000,\n\t            0x1000000: 0x4010100,\n\t            0x1100000: 0x10004,\n\t            0x1200000: 0x10000,\n\t            0x1300000: 0x4000100,\n\t            0x1400000: 0x100,\n\t            0x1500000: 0x4010104,\n\t            0x1600000: 0x4000004,\n\t            0x1700000: 0x0,\n\t            0x1800000: 0x4000104,\n\t            0x1900000: 0x4000000,\n\t            0x1a00000: 0x4,\n\t            0x1b00000: 0x10100,\n\t            0x1c00000: 0x4010000,\n\t            0x1d00000: 0x104,\n\t            0x1e00000: 0x10104,\n\t            0x1f00000: 0x4010004,\n\t            0x1080000: 0x4000000,\n\t            0x1180000: 0x104,\n\t            0x1280000: 0x4010100,\n\t            0x1380000: 0x0,\n\t            0x1480000: 0x10004,\n\t            0x1580000: 0x4000100,\n\t            0x1680000: 0x100,\n\t            0x1780000: 0x4010004,\n\t            0x1880000: 0x10000,\n\t            0x1980000: 0x4010104,\n\t            0x1a80000: 0x10104,\n\t            0x1b80000: 0x4000004,\n\t            0x1c80000: 0x4000104,\n\t            0x1d80000: 0x4010000,\n\t            0x1e80000: 0x4,\n\t            0x1f80000: 0x10100\n\t        },\n\t        {\n\t            0x0: 0x80401000,\n\t            0x10000: 0x80001040,\n\t            0x20000: 0x401040,\n\t            0x30000: 0x80400000,\n\t            0x40000: 0x0,\n\t            0x50000: 0x401000,\n\t            0x60000: 0x80000040,\n\t            0x70000: 0x400040,\n\t            0x80000: 0x80000000,\n\t            0x90000: 0x400000,\n\t            0xa0000: 0x40,\n\t            0xb0000: 0x80001000,\n\t            0xc0000: 0x80400040,\n\t            0xd0000: 0x1040,\n\t            0xe0000: 0x1000,\n\t            0xf0000: 0x80401040,\n\t            0x8000: 0x80001040,\n\t            0x18000: 0x40,\n\t            0x28000: 0x80400040,\n\t            0x38000: 0x80001000,\n\t            0x48000: 0x401000,\n\t            0x58000: 0x80401040,\n\t            0x68000: 0x0,\n\t            0x78000: 0x80400000,\n\t            0x88000: 0x1000,\n\t            0x98000: 0x80401000,\n\t            0xa8000: 0x400000,\n\t            0xb8000: 0x1040,\n\t            0xc8000: 0x80000000,\n\t            0xd8000: 0x400040,\n\t            0xe8000: 0x401040,\n\t            0xf8000: 0x80000040,\n\t            0x100000: 0x400040,\n\t            0x110000: 0x401000,\n\t            0x120000: 0x80000040,\n\t            0x130000: 0x0,\n\t            0x140000: 0x1040,\n\t            0x150000: 0x80400040,\n\t            0x160000: 0x80401000,\n\t            0x170000: 0x80001040,\n\t            0x180000: 0x80401040,\n\t            0x190000: 0x80000000,\n\t            0x1a0000: 0x80400000,\n\t            0x1b0000: 0x401040,\n\t            0x1c0000: 0x80001000,\n\t            0x1d0000: 0x400000,\n\t            0x1e0000: 0x40,\n\t            0x1f0000: 0x1000,\n\t            0x108000: 0x80400000,\n\t            0x118000: 0x80401040,\n\t            0x128000: 0x0,\n\t            0x138000: 0x401000,\n\t            0x148000: 0x400040,\n\t            0x158000: 0x80000000,\n\t            0x168000: 0x80001040,\n\t            0x178000: 0x40,\n\t            0x188000: 0x80000040,\n\t            0x198000: 0x1000,\n\t            0x1a8000: 0x80001000,\n\t            0x1b8000: 0x80400040,\n\t            0x1c8000: 0x1040,\n\t            0x1d8000: 0x80401000,\n\t            0x1e8000: 0x400000,\n\t            0x1f8000: 0x401040\n\t        },\n\t        {\n\t            0x0: 0x80,\n\t            0x1000: 0x1040000,\n\t            0x2000: 0x40000,\n\t            0x3000: 0x20000000,\n\t            0x4000: 0x20040080,\n\t            0x5000: 0x1000080,\n\t            0x6000: 0x21000080,\n\t            0x7000: 0x40080,\n\t            0x8000: 0x1000000,\n\t            0x9000: 0x20040000,\n\t            0xa000: 0x20000080,\n\t            0xb000: 0x21040080,\n\t            0xc000: 0x21040000,\n\t            0xd000: 0x0,\n\t            0xe000: 0x1040080,\n\t            0xf000: 0x21000000,\n\t            0x800: 0x1040080,\n\t            0x1800: 0x21000080,\n\t            0x2800: 0x80,\n\t            0x3800: 0x1040000,\n\t            0x4800: 0x40000,\n\t            0x5800: 0x20040080,\n\t            0x6800: 0x21040000,\n\t            0x7800: 0x20000000,\n\t            0x8800: 0x20040000,\n\t            0x9800: 0x0,\n\t            0xa800: 0x21040080,\n\t            0xb800: 0x1000080,\n\t            0xc800: 0x20000080,\n\t            0xd800: 0x21000000,\n\t            0xe800: 0x1000000,\n\t            0xf800: 0x40080,\n\t            0x10000: 0x40000,\n\t            0x11000: 0x80,\n\t            0x12000: 0x20000000,\n\t            0x13000: 0x21000080,\n\t            0x14000: 0x1000080,\n\t            0x15000: 0x21040000,\n\t            0x16000: 0x20040080,\n\t            0x17000: 0x1000000,\n\t            0x18000: 0x21040080,\n\t            0x19000: 0x21000000,\n\t            0x1a000: 0x1040000,\n\t            0x1b000: 0x20040000,\n\t            0x1c000: 0x40080,\n\t            0x1d000: 0x20000080,\n\t            0x1e000: 0x0,\n\t            0x1f000: 0x1040080,\n\t            0x10800: 0x21000080,\n\t            0x11800: 0x1000000,\n\t            0x12800: 0x1040000,\n\t            0x13800: 0x20040080,\n\t            0x14800: 0x20000000,\n\t            0x15800: 0x1040080,\n\t            0x16800: 0x80,\n\t            0x17800: 0x21040000,\n\t            0x18800: 0x40080,\n\t            0x19800: 0x21040080,\n\t            0x1a800: 0x0,\n\t            0x1b800: 0x21000000,\n\t            0x1c800: 0x1000080,\n\t            0x1d800: 0x40000,\n\t            0x1e800: 0x20040000,\n\t            0x1f800: 0x20000080\n\t        },\n\t        {\n\t            0x0: 0x10000008,\n\t            0x100: 0x2000,\n\t            0x200: 0x10200000,\n\t            0x300: 0x10202008,\n\t            0x400: 0x10002000,\n\t            0x500: 0x200000,\n\t            0x600: 0x200008,\n\t            0x700: 0x10000000,\n\t            0x800: 0x0,\n\t            0x900: 0x10002008,\n\t            0xa00: 0x202000,\n\t            0xb00: 0x8,\n\t            0xc00: 0x10200008,\n\t            0xd00: 0x202008,\n\t            0xe00: 0x2008,\n\t            0xf00: 0x10202000,\n\t            0x80: 0x10200000,\n\t            0x180: 0x10202008,\n\t            0x280: 0x8,\n\t            0x380: 0x200000,\n\t            0x480: 0x202008,\n\t            0x580: 0x10000008,\n\t            0x680: 0x10002000,\n\t            0x780: 0x2008,\n\t            0x880: 0x200008,\n\t            0x980: 0x2000,\n\t            0xa80: 0x10002008,\n\t            0xb80: 0x10200008,\n\t            0xc80: 0x0,\n\t            0xd80: 0x10202000,\n\t            0xe80: 0x202000,\n\t            0xf80: 0x10000000,\n\t            0x1000: 0x10002000,\n\t            0x1100: 0x10200008,\n\t            0x1200: 0x10202008,\n\t            0x1300: 0x2008,\n\t            0x1400: 0x200000,\n\t            0x1500: 0x10000000,\n\t            0x1600: 0x10000008,\n\t            0x1700: 0x202000,\n\t            0x1800: 0x202008,\n\t            0x1900: 0x0,\n\t            0x1a00: 0x8,\n\t            0x1b00: 0x10200000,\n\t            0x1c00: 0x2000,\n\t            0x1d00: 0x10002008,\n\t            0x1e00: 0x10202000,\n\t            0x1f00: 0x200008,\n\t            0x1080: 0x8,\n\t            0x1180: 0x202000,\n\t            0x1280: 0x200000,\n\t            0x1380: 0x10000008,\n\t            0x1480: 0x10002000,\n\t            0x1580: 0x2008,\n\t            0x1680: 0x10202008,\n\t            0x1780: 0x10200000,\n\t            0x1880: 0x10202000,\n\t            0x1980: 0x10200008,\n\t            0x1a80: 0x2000,\n\t            0x1b80: 0x202008,\n\t            0x1c80: 0x200008,\n\t            0x1d80: 0x0,\n\t            0x1e80: 0x10000000,\n\t            0x1f80: 0x10002008\n\t        },\n\t        {\n\t            0x0: 0x100000,\n\t            0x10: 0x2000401,\n\t            0x20: 0x400,\n\t            0x30: 0x100401,\n\t            0x40: 0x2100401,\n\t            0x50: 0x0,\n\t            0x60: 0x1,\n\t            0x70: 0x2100001,\n\t            0x80: 0x2000400,\n\t            0x90: 0x100001,\n\t            0xa0: 0x2000001,\n\t            0xb0: 0x2100400,\n\t            0xc0: 0x2100000,\n\t            0xd0: 0x401,\n\t            0xe0: 0x100400,\n\t            0xf0: 0x2000000,\n\t            0x8: 0x2100001,\n\t            0x18: 0x0,\n\t            0x28: 0x2000401,\n\t            0x38: 0x2100400,\n\t            0x48: 0x100000,\n\t            0x58: 0x2000001,\n\t            0x68: 0x2000000,\n\t            0x78: 0x401,\n\t            0x88: 0x100401,\n\t            0x98: 0x2000400,\n\t            0xa8: 0x2100000,\n\t            0xb8: 0x100001,\n\t            0xc8: 0x400,\n\t            0xd8: 0x2100401,\n\t            0xe8: 0x1,\n\t            0xf8: 0x100400,\n\t            0x100: 0x2000000,\n\t            0x110: 0x100000,\n\t            0x120: 0x2000401,\n\t            0x130: 0x2100001,\n\t            0x140: 0x100001,\n\t            0x150: 0x2000400,\n\t            0x160: 0x2100400,\n\t            0x170: 0x100401,\n\t            0x180: 0x401,\n\t            0x190: 0x2100401,\n\t            0x1a0: 0x100400,\n\t            0x1b0: 0x1,\n\t            0x1c0: 0x0,\n\t            0x1d0: 0x2100000,\n\t            0x1e0: 0x2000001,\n\t            0x1f0: 0x400,\n\t            0x108: 0x100400,\n\t            0x118: 0x2000401,\n\t            0x128: 0x2100001,\n\t            0x138: 0x1,\n\t            0x148: 0x2000000,\n\t            0x158: 0x100000,\n\t            0x168: 0x401,\n\t            0x178: 0x2100400,\n\t            0x188: 0x2000001,\n\t            0x198: 0x2100000,\n\t            0x1a8: 0x0,\n\t            0x1b8: 0x2100401,\n\t            0x1c8: 0x100401,\n\t            0x1d8: 0x400,\n\t            0x1e8: 0x2000400,\n\t            0x1f8: 0x100001\n\t        },\n\t        {\n\t            0x0: 0x8000820,\n\t            0x1: 0x20000,\n\t            0x2: 0x8000000,\n\t            0x3: 0x20,\n\t            0x4: 0x20020,\n\t            0x5: 0x8020820,\n\t            0x6: 0x8020800,\n\t            0x7: 0x800,\n\t            0x8: 0x8020000,\n\t            0x9: 0x8000800,\n\t            0xa: 0x20800,\n\t            0xb: 0x8020020,\n\t            0xc: 0x820,\n\t            0xd: 0x0,\n\t            0xe: 0x8000020,\n\t            0xf: 0x20820,\n\t            0x80000000: 0x800,\n\t            0x80000001: 0x8020820,\n\t            0x80000002: 0x8000820,\n\t            0x80000003: 0x8000000,\n\t            0x80000004: 0x8020000,\n\t            0x80000005: 0x20800,\n\t            0x80000006: 0x20820,\n\t            0x80000007: 0x20,\n\t            0x80000008: 0x8000020,\n\t            0x80000009: 0x820,\n\t            0x8000000a: 0x20020,\n\t            0x8000000b: 0x8020800,\n\t            0x8000000c: 0x0,\n\t            0x8000000d: 0x8020020,\n\t            0x8000000e: 0x8000800,\n\t            0x8000000f: 0x20000,\n\t            0x10: 0x20820,\n\t            0x11: 0x8020800,\n\t            0x12: 0x20,\n\t            0x13: 0x800,\n\t            0x14: 0x8000800,\n\t            0x15: 0x8000020,\n\t            0x16: 0x8020020,\n\t            0x17: 0x20000,\n\t            0x18: 0x0,\n\t            0x19: 0x20020,\n\t            0x1a: 0x8020000,\n\t            0x1b: 0x8000820,\n\t            0x1c: 0x8020820,\n\t            0x1d: 0x20800,\n\t            0x1e: 0x820,\n\t            0x1f: 0x8000000,\n\t            0x80000010: 0x20000,\n\t            0x80000011: 0x800,\n\t            0x80000012: 0x8020020,\n\t            0x80000013: 0x20820,\n\t            0x80000014: 0x20,\n\t            0x80000015: 0x8020000,\n\t            0x80000016: 0x8000000,\n\t            0x80000017: 0x8000820,\n\t            0x80000018: 0x8020820,\n\t            0x80000019: 0x8000020,\n\t            0x8000001a: 0x8000800,\n\t            0x8000001b: 0x0,\n\t            0x8000001c: 0x20800,\n\t            0x8000001d: 0x820,\n\t            0x8000001e: 0x20020,\n\t            0x8000001f: 0x8020800\n\t        }\n\t    ];\n\n\t    // Masks that select the SBOX input\n\t    var SBOX_MASK = [\n\t        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,\n\t        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f\n\t    ];\n\n\t    /**\n\t     * DES block cipher algorithm.\n\t     */\n\t    var DES = C_algo.DES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\n\t            // Select 56 bits according to PC1\n\t            var keyBits = [];\n\t            for (var i = 0; i < 56; i++) {\n\t                var keyBitPos = PC1[i] - 1;\n\t                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;\n\t            }\n\n\t            // Assemble 16 subkeys\n\t            var subKeys = this._subKeys = [];\n\t            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {\n\t                // Create subkey\n\t                var subKey = subKeys[nSubKey] = [];\n\n\t                // Shortcut\n\t                var bitShift = BIT_SHIFTS[nSubKey];\n\n\t                // Select 48 bits according to PC2\n\t                for (var i = 0; i < 24; i++) {\n\t                    // Select from the left 28 key bits\n\t                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);\n\n\t                    // Select from the right 28 key bits\n\t                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);\n\t                }\n\n\t                // Since each subkey is applied to an expanded 32-bit input,\n\t                // the subkey can be broken into 8 values scaled to 32-bits,\n\t                // which allows the key to be used without expansion\n\t                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);\n\t                for (var i = 1; i < 7; i++) {\n\t                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);\n\t                }\n\t                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);\n\t            }\n\n\t            // Compute inverse subkeys\n\t            var invSubKeys = this._invSubKeys = [];\n\t            for (var i = 0; i < 16; i++) {\n\t                invSubKeys[i] = subKeys[15 - i];\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._subKeys);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._invSubKeys);\n\t        },\n\n\t        _doCryptBlock: function (M, offset, subKeys) {\n\t            // Get input\n\t            this._lBlock = M[offset];\n\t            this._rBlock = M[offset + 1];\n\n\t            // Initial permutation\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t            exchangeRL.call(this, 2,  0x33333333);\n\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t            exchangeLR.call(this, 1,  0x55555555);\n\n\t            // Rounds\n\t            for (var round = 0; round < 16; round++) {\n\t                // Shortcuts\n\t                var subKey = subKeys[round];\n\t                var lBlock = this._lBlock;\n\t                var rBlock = this._rBlock;\n\n\t                // Feistel function\n\t                var f = 0;\n\t                for (var i = 0; i < 8; i++) {\n\t                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n\t                }\n\t                this._lBlock = rBlock;\n\t                this._rBlock = lBlock ^ f;\n\t            }\n\n\t            // Undo swap from last round\n\t            var t = this._lBlock;\n\t            this._lBlock = this._rBlock;\n\t            this._rBlock = t;\n\n\t            // Final permutation\n\t            exchangeLR.call(this, 1,  0x55555555);\n\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t            exchangeRL.call(this, 2,  0x33333333);\n\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\n\t            // Set output\n\t            M[offset] = this._lBlock;\n\t            M[offset + 1] = this._rBlock;\n\t        },\n\n\t        keySize: 64/32,\n\n\t        ivSize: 64/32,\n\n\t        blockSize: 64/32\n\t    });\n\n\t    // Swap bits across the left and right words\n\t    function exchangeLR(offset, mask) {\n\t        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;\n\t        this._rBlock ^= t;\n\t        this._lBlock ^= t << offset;\n\t    }\n\n\t    function exchangeRL(offset, mask) {\n\t        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;\n\t        this._lBlock ^= t;\n\t        this._rBlock ^= t << offset;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.DES = BlockCipher._createHelper(DES);\n\n\t    /**\n\t     * Triple-DES block cipher algorithm.\n\t     */\n\t    var TripleDES = C_algo.TripleDES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\n\t            // Create DES instances\n\t            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));\n\t            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));\n\t            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._des1.encryptBlock(M, offset);\n\t            this._des2.decryptBlock(M, offset);\n\t            this._des3.encryptBlock(M, offset);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            this._des3.decryptBlock(M, offset);\n\t            this._des2.encryptBlock(M, offset);\n\t            this._des1.decryptBlock(M, offset);\n\t        },\n\n\t        keySize: 192/32,\n\n\t        ivSize: 64/32,\n\n\t        blockSize: 64/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.TripleDES = BlockCipher._createHelper(TripleDES);\n\t}());\n\n\n\treturn CryptoJS.TripleDES;\n\n}));","start":1670465469102,"end":1670465469201},{"name":"vite:react-babel","result":";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Permuted Choice 1 constants\n\t    var PC1 = [\n\t        57, 49, 41, 33, 25, 17, 9,  1,\n\t        58, 50, 42, 34, 26, 18, 10, 2,\n\t        59, 51, 43, 35, 27, 19, 11, 3,\n\t        60, 52, 44, 36, 63, 55, 47, 39,\n\t        31, 23, 15, 7,  62, 54, 46, 38,\n\t        30, 22, 14, 6,  61, 53, 45, 37,\n\t        29, 21, 13, 5,  28, 20, 12, 4\n\t    ];\n\n\t    // Permuted Choice 2 constants\n\t    var PC2 = [\n\t        14, 17, 11, 24, 1,  5,\n\t        3,  28, 15, 6,  21, 10,\n\t        23, 19, 12, 4,  26, 8,\n\t        16, 7,  27, 20, 13, 2,\n\t        41, 52, 31, 37, 47, 55,\n\t        30, 40, 51, 45, 33, 48,\n\t        44, 49, 39, 56, 34, 53,\n\t        46, 42, 50, 36, 29, 32\n\t    ];\n\n\t    // Cumulative bit shift constants\n\t    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];\n\n\t    // SBOXes and round permutation constants\n\t    var SBOX_P = [\n\t        {\n\t            0x0: 0x808200,\n\t            0x10000000: 0x8000,\n\t            0x20000000: 0x808002,\n\t            0x30000000: 0x2,\n\t            0x40000000: 0x200,\n\t            0x50000000: 0x808202,\n\t            0x60000000: 0x800202,\n\t            0x70000000: 0x800000,\n\t            0x80000000: 0x202,\n\t            0x90000000: 0x800200,\n\t            0xa0000000: 0x8200,\n\t            0xb0000000: 0x808000,\n\t            0xc0000000: 0x8002,\n\t            0xd0000000: 0x800002,\n\t            0xe0000000: 0x0,\n\t            0xf0000000: 0x8202,\n\t            0x8000000: 0x0,\n\t            0x18000000: 0x808202,\n\t            0x28000000: 0x8202,\n\t            0x38000000: 0x8000,\n\t            0x48000000: 0x808200,\n\t            0x58000000: 0x200,\n\t            0x68000000: 0x808002,\n\t            0x78000000: 0x2,\n\t            0x88000000: 0x800200,\n\t            0x98000000: 0x8200,\n\t            0xa8000000: 0x808000,\n\t            0xb8000000: 0x800202,\n\t            0xc8000000: 0x800002,\n\t            0xd8000000: 0x8002,\n\t            0xe8000000: 0x202,\n\t            0xf8000000: 0x800000,\n\t            0x1: 0x8000,\n\t            0x10000001: 0x2,\n\t            0x20000001: 0x808200,\n\t            0x30000001: 0x800000,\n\t            0x40000001: 0x808002,\n\t            0x50000001: 0x8200,\n\t            0x60000001: 0x200,\n\t            0x70000001: 0x800202,\n\t            0x80000001: 0x808202,\n\t            0x90000001: 0x808000,\n\t            0xa0000001: 0x800002,\n\t            0xb0000001: 0x8202,\n\t            0xc0000001: 0x202,\n\t            0xd0000001: 0x800200,\n\t            0xe0000001: 0x8002,\n\t            0xf0000001: 0x0,\n\t            0x8000001: 0x808202,\n\t            0x18000001: 0x808000,\n\t            0x28000001: 0x800000,\n\t            0x38000001: 0x200,\n\t            0x48000001: 0x8000,\n\t            0x58000001: 0x800002,\n\t            0x68000001: 0x2,\n\t            0x78000001: 0x8202,\n\t            0x88000001: 0x8002,\n\t            0x98000001: 0x800202,\n\t            0xa8000001: 0x202,\n\t            0xb8000001: 0x808200,\n\t            0xc8000001: 0x800200,\n\t            0xd8000001: 0x0,\n\t            0xe8000001: 0x8200,\n\t            0xf8000001: 0x808002\n\t        },\n\t        {\n\t            0x0: 0x40084010,\n\t            0x1000000: 0x4000,\n\t            0x2000000: 0x80000,\n\t            0x3000000: 0x40080010,\n\t            0x4000000: 0x40000010,\n\t            0x5000000: 0x40084000,\n\t            0x6000000: 0x40004000,\n\t            0x7000000: 0x10,\n\t            0x8000000: 0x84000,\n\t            0x9000000: 0x40004010,\n\t            0xa000000: 0x40000000,\n\t            0xb000000: 0x84010,\n\t            0xc000000: 0x80010,\n\t            0xd000000: 0x0,\n\t            0xe000000: 0x4010,\n\t            0xf000000: 0x40080000,\n\t            0x800000: 0x40004000,\n\t            0x1800000: 0x84010,\n\t            0x2800000: 0x10,\n\t            0x3800000: 0x40004010,\n\t            0x4800000: 0x40084010,\n\t            0x5800000: 0x40000000,\n\t            0x6800000: 0x80000,\n\t            0x7800000: 0x40080010,\n\t            0x8800000: 0x80010,\n\t            0x9800000: 0x0,\n\t            0xa800000: 0x4000,\n\t            0xb800000: 0x40080000,\n\t            0xc800000: 0x40000010,\n\t            0xd800000: 0x84000,\n\t            0xe800000: 0x40084000,\n\t            0xf800000: 0x4010,\n\t            0x10000000: 0x0,\n\t            0x11000000: 0x40080010,\n\t            0x12000000: 0x40004010,\n\t            0x13000000: 0x40084000,\n\t            0x14000000: 0x40080000,\n\t            0x15000000: 0x10,\n\t            0x16000000: 0x84010,\n\t            0x17000000: 0x4000,\n\t            0x18000000: 0x4010,\n\t            0x19000000: 0x80000,\n\t            0x1a000000: 0x80010,\n\t            0x1b000000: 0x40000010,\n\t            0x1c000000: 0x84000,\n\t            0x1d000000: 0x40004000,\n\t            0x1e000000: 0x40000000,\n\t            0x1f000000: 0x40084010,\n\t            0x10800000: 0x84010,\n\t            0x11800000: 0x80000,\n\t            0x12800000: 0x40080000,\n\t            0x13800000: 0x4000,\n\t            0x14800000: 0x40004000,\n\t            0x15800000: 0x40084010,\n\t            0x16800000: 0x10,\n\t            0x17800000: 0x40000000,\n\t            0x18800000: 0x40084000,\n\t            0x19800000: 0x40000010,\n\t            0x1a800000: 0x40004010,\n\t            0x1b800000: 0x80010,\n\t            0x1c800000: 0x0,\n\t            0x1d800000: 0x4010,\n\t            0x1e800000: 0x40080010,\n\t            0x1f800000: 0x84000\n\t        },\n\t        {\n\t            0x0: 0x104,\n\t            0x100000: 0x0,\n\t            0x200000: 0x4000100,\n\t            0x300000: 0x10104,\n\t            0x400000: 0x10004,\n\t            0x500000: 0x4000004,\n\t            0x600000: 0x4010104,\n\t            0x700000: 0x4010000,\n\t            0x800000: 0x4000000,\n\t            0x900000: 0x4010100,\n\t            0xa00000: 0x10100,\n\t            0xb00000: 0x4010004,\n\t            0xc00000: 0x4000104,\n\t            0xd00000: 0x10000,\n\t            0xe00000: 0x4,\n\t            0xf00000: 0x100,\n\t            0x80000: 0x4010100,\n\t            0x180000: 0x4010004,\n\t            0x280000: 0x0,\n\t            0x380000: 0x4000100,\n\t            0x480000: 0x4000004,\n\t            0x580000: 0x10000,\n\t            0x680000: 0x10004,\n\t            0x780000: 0x104,\n\t            0x880000: 0x4,\n\t            0x980000: 0x100,\n\t            0xa80000: 0x4010000,\n\t            0xb80000: 0x10104,\n\t            0xc80000: 0x10100,\n\t            0xd80000: 0x4000104,\n\t            0xe80000: 0x4010104,\n\t            0xf80000: 0x4000000,\n\t            0x1000000: 0x4010100,\n\t            0x1100000: 0x10004,\n\t            0x1200000: 0x10000,\n\t            0x1300000: 0x4000100,\n\t            0x1400000: 0x100,\n\t            0x1500000: 0x4010104,\n\t            0x1600000: 0x4000004,\n\t            0x1700000: 0x0,\n\t            0x1800000: 0x4000104,\n\t            0x1900000: 0x4000000,\n\t            0x1a00000: 0x4,\n\t            0x1b00000: 0x10100,\n\t            0x1c00000: 0x4010000,\n\t            0x1d00000: 0x104,\n\t            0x1e00000: 0x10104,\n\t            0x1f00000: 0x4010004,\n\t            0x1080000: 0x4000000,\n\t            0x1180000: 0x104,\n\t            0x1280000: 0x4010100,\n\t            0x1380000: 0x0,\n\t            0x1480000: 0x10004,\n\t            0x1580000: 0x4000100,\n\t            0x1680000: 0x100,\n\t            0x1780000: 0x4010004,\n\t            0x1880000: 0x10000,\n\t            0x1980000: 0x4010104,\n\t            0x1a80000: 0x10104,\n\t            0x1b80000: 0x4000004,\n\t            0x1c80000: 0x4000104,\n\t            0x1d80000: 0x4010000,\n\t            0x1e80000: 0x4,\n\t            0x1f80000: 0x10100\n\t        },\n\t        {\n\t            0x0: 0x80401000,\n\t            0x10000: 0x80001040,\n\t            0x20000: 0x401040,\n\t            0x30000: 0x80400000,\n\t            0x40000: 0x0,\n\t            0x50000: 0x401000,\n\t            0x60000: 0x80000040,\n\t            0x70000: 0x400040,\n\t            0x80000: 0x80000000,\n\t            0x90000: 0x400000,\n\t            0xa0000: 0x40,\n\t            0xb0000: 0x80001000,\n\t            0xc0000: 0x80400040,\n\t            0xd0000: 0x1040,\n\t            0xe0000: 0x1000,\n\t            0xf0000: 0x80401040,\n\t            0x8000: 0x80001040,\n\t            0x18000: 0x40,\n\t            0x28000: 0x80400040,\n\t            0x38000: 0x80001000,\n\t            0x48000: 0x401000,\n\t            0x58000: 0x80401040,\n\t            0x68000: 0x0,\n\t            0x78000: 0x80400000,\n\t            0x88000: 0x1000,\n\t            0x98000: 0x80401000,\n\t            0xa8000: 0x400000,\n\t            0xb8000: 0x1040,\n\t            0xc8000: 0x80000000,\n\t            0xd8000: 0x400040,\n\t            0xe8000: 0x401040,\n\t            0xf8000: 0x80000040,\n\t            0x100000: 0x400040,\n\t            0x110000: 0x401000,\n\t            0x120000: 0x80000040,\n\t            0x130000: 0x0,\n\t            0x140000: 0x1040,\n\t            0x150000: 0x80400040,\n\t            0x160000: 0x80401000,\n\t            0x170000: 0x80001040,\n\t            0x180000: 0x80401040,\n\t            0x190000: 0x80000000,\n\t            0x1a0000: 0x80400000,\n\t            0x1b0000: 0x401040,\n\t            0x1c0000: 0x80001000,\n\t            0x1d0000: 0x400000,\n\t            0x1e0000: 0x40,\n\t            0x1f0000: 0x1000,\n\t            0x108000: 0x80400000,\n\t            0x118000: 0x80401040,\n\t            0x128000: 0x0,\n\t            0x138000: 0x401000,\n\t            0x148000: 0x400040,\n\t            0x158000: 0x80000000,\n\t            0x168000: 0x80001040,\n\t            0x178000: 0x40,\n\t            0x188000: 0x80000040,\n\t            0x198000: 0x1000,\n\t            0x1a8000: 0x80001000,\n\t            0x1b8000: 0x80400040,\n\t            0x1c8000: 0x1040,\n\t            0x1d8000: 0x80401000,\n\t            0x1e8000: 0x400000,\n\t            0x1f8000: 0x401040\n\t        },\n\t        {\n\t            0x0: 0x80,\n\t            0x1000: 0x1040000,\n\t            0x2000: 0x40000,\n\t            0x3000: 0x20000000,\n\t            0x4000: 0x20040080,\n\t            0x5000: 0x1000080,\n\t            0x6000: 0x21000080,\n\t            0x7000: 0x40080,\n\t            0x8000: 0x1000000,\n\t            0x9000: 0x20040000,\n\t            0xa000: 0x20000080,\n\t            0xb000: 0x21040080,\n\t            0xc000: 0x21040000,\n\t            0xd000: 0x0,\n\t            0xe000: 0x1040080,\n\t            0xf000: 0x21000000,\n\t            0x800: 0x1040080,\n\t            0x1800: 0x21000080,\n\t            0x2800: 0x80,\n\t            0x3800: 0x1040000,\n\t            0x4800: 0x40000,\n\t            0x5800: 0x20040080,\n\t            0x6800: 0x21040000,\n\t            0x7800: 0x20000000,\n\t            0x8800: 0x20040000,\n\t            0x9800: 0x0,\n\t            0xa800: 0x21040080,\n\t            0xb800: 0x1000080,\n\t            0xc800: 0x20000080,\n\t            0xd800: 0x21000000,\n\t            0xe800: 0x1000000,\n\t            0xf800: 0x40080,\n\t            0x10000: 0x40000,\n\t            0x11000: 0x80,\n\t            0x12000: 0x20000000,\n\t            0x13000: 0x21000080,\n\t            0x14000: 0x1000080,\n\t            0x15000: 0x21040000,\n\t            0x16000: 0x20040080,\n\t            0x17000: 0x1000000,\n\t            0x18000: 0x21040080,\n\t            0x19000: 0x21000000,\n\t            0x1a000: 0x1040000,\n\t            0x1b000: 0x20040000,\n\t            0x1c000: 0x40080,\n\t            0x1d000: 0x20000080,\n\t            0x1e000: 0x0,\n\t            0x1f000: 0x1040080,\n\t            0x10800: 0x21000080,\n\t            0x11800: 0x1000000,\n\t            0x12800: 0x1040000,\n\t            0x13800: 0x20040080,\n\t            0x14800: 0x20000000,\n\t            0x15800: 0x1040080,\n\t            0x16800: 0x80,\n\t            0x17800: 0x21040000,\n\t            0x18800: 0x40080,\n\t            0x19800: 0x21040080,\n\t            0x1a800: 0x0,\n\t            0x1b800: 0x21000000,\n\t            0x1c800: 0x1000080,\n\t            0x1d800: 0x40000,\n\t            0x1e800: 0x20040000,\n\t            0x1f800: 0x20000080\n\t        },\n\t        {\n\t            0x0: 0x10000008,\n\t            0x100: 0x2000,\n\t            0x200: 0x10200000,\n\t            0x300: 0x10202008,\n\t            0x400: 0x10002000,\n\t            0x500: 0x200000,\n\t            0x600: 0x200008,\n\t            0x700: 0x10000000,\n\t            0x800: 0x0,\n\t            0x900: 0x10002008,\n\t            0xa00: 0x202000,\n\t            0xb00: 0x8,\n\t            0xc00: 0x10200008,\n\t            0xd00: 0x202008,\n\t            0xe00: 0x2008,\n\t            0xf00: 0x10202000,\n\t            0x80: 0x10200000,\n\t            0x180: 0x10202008,\n\t            0x280: 0x8,\n\t            0x380: 0x200000,\n\t            0x480: 0x202008,\n\t            0x580: 0x10000008,\n\t            0x680: 0x10002000,\n\t            0x780: 0x2008,\n\t            0x880: 0x200008,\n\t            0x980: 0x2000,\n\t            0xa80: 0x10002008,\n\t            0xb80: 0x10200008,\n\t            0xc80: 0x0,\n\t            0xd80: 0x10202000,\n\t            0xe80: 0x202000,\n\t            0xf80: 0x10000000,\n\t            0x1000: 0x10002000,\n\t            0x1100: 0x10200008,\n\t            0x1200: 0x10202008,\n\t            0x1300: 0x2008,\n\t            0x1400: 0x200000,\n\t            0x1500: 0x10000000,\n\t            0x1600: 0x10000008,\n\t            0x1700: 0x202000,\n\t            0x1800: 0x202008,\n\t            0x1900: 0x0,\n\t            0x1a00: 0x8,\n\t            0x1b00: 0x10200000,\n\t            0x1c00: 0x2000,\n\t            0x1d00: 0x10002008,\n\t            0x1e00: 0x10202000,\n\t            0x1f00: 0x200008,\n\t            0x1080: 0x8,\n\t            0x1180: 0x202000,\n\t            0x1280: 0x200000,\n\t            0x1380: 0x10000008,\n\t            0x1480: 0x10002000,\n\t            0x1580: 0x2008,\n\t            0x1680: 0x10202008,\n\t            0x1780: 0x10200000,\n\t            0x1880: 0x10202000,\n\t            0x1980: 0x10200008,\n\t            0x1a80: 0x2000,\n\t            0x1b80: 0x202008,\n\t            0x1c80: 0x200008,\n\t            0x1d80: 0x0,\n\t            0x1e80: 0x10000000,\n\t            0x1f80: 0x10002008\n\t        },\n\t        {\n\t            0x0: 0x100000,\n\t            0x10: 0x2000401,\n\t            0x20: 0x400,\n\t            0x30: 0x100401,\n\t            0x40: 0x2100401,\n\t            0x50: 0x0,\n\t            0x60: 0x1,\n\t            0x70: 0x2100001,\n\t            0x80: 0x2000400,\n\t            0x90: 0x100001,\n\t            0xa0: 0x2000001,\n\t            0xb0: 0x2100400,\n\t            0xc0: 0x2100000,\n\t            0xd0: 0x401,\n\t            0xe0: 0x100400,\n\t            0xf0: 0x2000000,\n\t            0x8: 0x2100001,\n\t            0x18: 0x0,\n\t            0x28: 0x2000401,\n\t            0x38: 0x2100400,\n\t            0x48: 0x100000,\n\t            0x58: 0x2000001,\n\t            0x68: 0x2000000,\n\t            0x78: 0x401,\n\t            0x88: 0x100401,\n\t            0x98: 0x2000400,\n\t            0xa8: 0x2100000,\n\t            0xb8: 0x100001,\n\t            0xc8: 0x400,\n\t            0xd8: 0x2100401,\n\t            0xe8: 0x1,\n\t            0xf8: 0x100400,\n\t            0x100: 0x2000000,\n\t            0x110: 0x100000,\n\t            0x120: 0x2000401,\n\t            0x130: 0x2100001,\n\t            0x140: 0x100001,\n\t            0x150: 0x2000400,\n\t            0x160: 0x2100400,\n\t            0x170: 0x100401,\n\t            0x180: 0x401,\n\t            0x190: 0x2100401,\n\t            0x1a0: 0x100400,\n\t            0x1b0: 0x1,\n\t            0x1c0: 0x0,\n\t            0x1d0: 0x2100000,\n\t            0x1e0: 0x2000001,\n\t            0x1f0: 0x400,\n\t            0x108: 0x100400,\n\t            0x118: 0x2000401,\n\t            0x128: 0x2100001,\n\t            0x138: 0x1,\n\t            0x148: 0x2000000,\n\t            0x158: 0x100000,\n\t            0x168: 0x401,\n\t            0x178: 0x2100400,\n\t            0x188: 0x2000001,\n\t            0x198: 0x2100000,\n\t            0x1a8: 0x0,\n\t            0x1b8: 0x2100401,\n\t            0x1c8: 0x100401,\n\t            0x1d8: 0x400,\n\t            0x1e8: 0x2000400,\n\t            0x1f8: 0x100001\n\t        },\n\t        {\n\t            0x0: 0x8000820,\n\t            0x1: 0x20000,\n\t            0x2: 0x8000000,\n\t            0x3: 0x20,\n\t            0x4: 0x20020,\n\t            0x5: 0x8020820,\n\t            0x6: 0x8020800,\n\t            0x7: 0x800,\n\t            0x8: 0x8020000,\n\t            0x9: 0x8000800,\n\t            0xa: 0x20800,\n\t            0xb: 0x8020020,\n\t            0xc: 0x820,\n\t            0xd: 0x0,\n\t            0xe: 0x8000020,\n\t            0xf: 0x20820,\n\t            0x80000000: 0x800,\n\t            0x80000001: 0x8020820,\n\t            0x80000002: 0x8000820,\n\t            0x80000003: 0x8000000,\n\t            0x80000004: 0x8020000,\n\t            0x80000005: 0x20800,\n\t            0x80000006: 0x20820,\n\t            0x80000007: 0x20,\n\t            0x80000008: 0x8000020,\n\t            0x80000009: 0x820,\n\t            0x8000000a: 0x20020,\n\t            0x8000000b: 0x8020800,\n\t            0x8000000c: 0x0,\n\t            0x8000000d: 0x8020020,\n\t            0x8000000e: 0x8000800,\n\t            0x8000000f: 0x20000,\n\t            0x10: 0x20820,\n\t            0x11: 0x8020800,\n\t            0x12: 0x20,\n\t            0x13: 0x800,\n\t            0x14: 0x8000800,\n\t            0x15: 0x8000020,\n\t            0x16: 0x8020020,\n\t            0x17: 0x20000,\n\t            0x18: 0x0,\n\t            0x19: 0x20020,\n\t            0x1a: 0x8020000,\n\t            0x1b: 0x8000820,\n\t            0x1c: 0x8020820,\n\t            0x1d: 0x20800,\n\t            0x1e: 0x820,\n\t            0x1f: 0x8000000,\n\t            0x80000010: 0x20000,\n\t            0x80000011: 0x800,\n\t            0x80000012: 0x8020020,\n\t            0x80000013: 0x20820,\n\t            0x80000014: 0x20,\n\t            0x80000015: 0x8020000,\n\t            0x80000016: 0x8000000,\n\t            0x80000017: 0x8000820,\n\t            0x80000018: 0x8020820,\n\t            0x80000019: 0x8000020,\n\t            0x8000001a: 0x8000800,\n\t            0x8000001b: 0x0,\n\t            0x8000001c: 0x20800,\n\t            0x8000001d: 0x820,\n\t            0x8000001e: 0x20020,\n\t            0x8000001f: 0x8020800\n\t        }\n\t    ];\n\n\t    // Masks that select the SBOX input\n\t    var SBOX_MASK = [\n\t        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,\n\t        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f\n\t    ];\n\n\t    /**\n\t     * DES block cipher algorithm.\n\t     */\n\t    var DES = C_algo.DES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\n\t            // Select 56 bits according to PC1\n\t            var keyBits = [];\n\t            for (var i = 0; i < 56; i++) {\n\t                var keyBitPos = PC1[i] - 1;\n\t                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;\n\t            }\n\n\t            // Assemble 16 subkeys\n\t            var subKeys = this._subKeys = [];\n\t            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {\n\t                // Create subkey\n\t                var subKey = subKeys[nSubKey] = [];\n\n\t                // Shortcut\n\t                var bitShift = BIT_SHIFTS[nSubKey];\n\n\t                // Select 48 bits according to PC2\n\t                for (var i = 0; i < 24; i++) {\n\t                    // Select from the left 28 key bits\n\t                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);\n\n\t                    // Select from the right 28 key bits\n\t                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);\n\t                }\n\n\t                // Since each subkey is applied to an expanded 32-bit input,\n\t                // the subkey can be broken into 8 values scaled to 32-bits,\n\t                // which allows the key to be used without expansion\n\t                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);\n\t                for (var i = 1; i < 7; i++) {\n\t                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);\n\t                }\n\t                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);\n\t            }\n\n\t            // Compute inverse subkeys\n\t            var invSubKeys = this._invSubKeys = [];\n\t            for (var i = 0; i < 16; i++) {\n\t                invSubKeys[i] = subKeys[15 - i];\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._subKeys);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._invSubKeys);\n\t        },\n\n\t        _doCryptBlock: function (M, offset, subKeys) {\n\t            // Get input\n\t            this._lBlock = M[offset];\n\t            this._rBlock = M[offset + 1];\n\n\t            // Initial permutation\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t            exchangeRL.call(this, 2,  0x33333333);\n\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t            exchangeLR.call(this, 1,  0x55555555);\n\n\t            // Rounds\n\t            for (var round = 0; round < 16; round++) {\n\t                // Shortcuts\n\t                var subKey = subKeys[round];\n\t                var lBlock = this._lBlock;\n\t                var rBlock = this._rBlock;\n\n\t                // Feistel function\n\t                var f = 0;\n\t                for (var i = 0; i < 8; i++) {\n\t                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n\t                }\n\t                this._lBlock = rBlock;\n\t                this._rBlock = lBlock ^ f;\n\t            }\n\n\t            // Undo swap from last round\n\t            var t = this._lBlock;\n\t            this._lBlock = this._rBlock;\n\t            this._rBlock = t;\n\n\t            // Final permutation\n\t            exchangeLR.call(this, 1,  0x55555555);\n\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t            exchangeRL.call(this, 2,  0x33333333);\n\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\n\t            // Set output\n\t            M[offset] = this._lBlock;\n\t            M[offset + 1] = this._rBlock;\n\t        },\n\n\t        keySize: 64/32,\n\n\t        ivSize: 64/32,\n\n\t        blockSize: 64/32\n\t    });\n\n\t    // Swap bits across the left and right words\n\t    function exchangeLR(offset, mask) {\n\t        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;\n\t        this._rBlock ^= t;\n\t        this._lBlock ^= t << offset;\n\t    }\n\n\t    function exchangeRL(offset, mask) {\n\t        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;\n\t        this._lBlock ^= t;\n\t        this._rBlock ^= t << offset;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.DES = BlockCipher._createHelper(DES);\n\n\t    /**\n\t     * Triple-DES block cipher algorithm.\n\t     */\n\t    var TripleDES = C_algo.TripleDES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\n\t            // Create DES instances\n\t            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));\n\t            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));\n\t            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._des1.encryptBlock(M, offset);\n\t            this._des2.decryptBlock(M, offset);\n\t            this._des3.encryptBlock(M, offset);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            this._des3.decryptBlock(M, offset);\n\t            this._des2.encryptBlock(M, offset);\n\t            this._des1.decryptBlock(M, offset);\n\t        },\n\n\t        keySize: 192/32,\n\n\t        ivSize: 64/32,\n\n\t        blockSize: 64/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher's object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.TripleDES = BlockCipher._createHelper(TripleDES);\n\t}());\n\n\n\treturn CryptoJS.TripleDES;\n\n}));","start":1670465469201,"end":1670465469201,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as tripledesModule, exports as tripledes } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/tripledes.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/core.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/enc-base64.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/md5.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/evpkdf.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/cipher-core.js?commonjs-wrapped\";\n\nvar hasRequiredTripledes;\n\nfunction requireTripledes () {\n\tif (hasRequiredTripledes) return tripledes;\n\thasRequiredTripledes = 1;\n\t(function (module, exports) {\n\t\t;(function (root, factory, undef) {\n\t\t\tif ('object' === \"object\") {\n\t\t\t\t// CommonJS\n\t\t\t\tmodule.exports = exports = factory(require$$0(), require$$1(), require$$2(), require$$3(), require$$4());\n\t\t\t}\n\t\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t\t// AMD\n\t\t\t\tundefined([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Global (browser)\n\t\t\t\tfactory(root.CryptoJS);\n\t\t\t}\n\t\t}(commonjsHelpers.commonjsGlobal, function (CryptoJS) {\n\n\t\t\t(function () {\n\t\t\t    // Shortcuts\n\t\t\t    var C = CryptoJS;\n\t\t\t    var C_lib = C.lib;\n\t\t\t    var WordArray = C_lib.WordArray;\n\t\t\t    var BlockCipher = C_lib.BlockCipher;\n\t\t\t    var C_algo = C.algo;\n\n\t\t\t    // Permuted Choice 1 constants\n\t\t\t    var PC1 = [\n\t\t\t        57, 49, 41, 33, 25, 17, 9,  1,\n\t\t\t        58, 50, 42, 34, 26, 18, 10, 2,\n\t\t\t        59, 51, 43, 35, 27, 19, 11, 3,\n\t\t\t        60, 52, 44, 36, 63, 55, 47, 39,\n\t\t\t        31, 23, 15, 7,  62, 54, 46, 38,\n\t\t\t        30, 22, 14, 6,  61, 53, 45, 37,\n\t\t\t        29, 21, 13, 5,  28, 20, 12, 4\n\t\t\t    ];\n\n\t\t\t    // Permuted Choice 2 constants\n\t\t\t    var PC2 = [\n\t\t\t        14, 17, 11, 24, 1,  5,\n\t\t\t        3,  28, 15, 6,  21, 10,\n\t\t\t        23, 19, 12, 4,  26, 8,\n\t\t\t        16, 7,  27, 20, 13, 2,\n\t\t\t        41, 52, 31, 37, 47, 55,\n\t\t\t        30, 40, 51, 45, 33, 48,\n\t\t\t        44, 49, 39, 56, 34, 53,\n\t\t\t        46, 42, 50, 36, 29, 32\n\t\t\t    ];\n\n\t\t\t    // Cumulative bit shift constants\n\t\t\t    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];\n\n\t\t\t    // SBOXes and round permutation constants\n\t\t\t    var SBOX_P = [\n\t\t\t        {\n\t\t\t            0x0: 0x808200,\n\t\t\t            0x10000000: 0x8000,\n\t\t\t            0x20000000: 0x808002,\n\t\t\t            0x30000000: 0x2,\n\t\t\t            0x40000000: 0x200,\n\t\t\t            0x50000000: 0x808202,\n\t\t\t            0x60000000: 0x800202,\n\t\t\t            0x70000000: 0x800000,\n\t\t\t            0x80000000: 0x202,\n\t\t\t            0x90000000: 0x800200,\n\t\t\t            0xa0000000: 0x8200,\n\t\t\t            0xb0000000: 0x808000,\n\t\t\t            0xc0000000: 0x8002,\n\t\t\t            0xd0000000: 0x800002,\n\t\t\t            0xe0000000: 0x0,\n\t\t\t            0xf0000000: 0x8202,\n\t\t\t            0x8000000: 0x0,\n\t\t\t            0x18000000: 0x808202,\n\t\t\t            0x28000000: 0x8202,\n\t\t\t            0x38000000: 0x8000,\n\t\t\t            0x48000000: 0x808200,\n\t\t\t            0x58000000: 0x200,\n\t\t\t            0x68000000: 0x808002,\n\t\t\t            0x78000000: 0x2,\n\t\t\t            0x88000000: 0x800200,\n\t\t\t            0x98000000: 0x8200,\n\t\t\t            0xa8000000: 0x808000,\n\t\t\t            0xb8000000: 0x800202,\n\t\t\t            0xc8000000: 0x800002,\n\t\t\t            0xd8000000: 0x8002,\n\t\t\t            0xe8000000: 0x202,\n\t\t\t            0xf8000000: 0x800000,\n\t\t\t            0x1: 0x8000,\n\t\t\t            0x10000001: 0x2,\n\t\t\t            0x20000001: 0x808200,\n\t\t\t            0x30000001: 0x800000,\n\t\t\t            0x40000001: 0x808002,\n\t\t\t            0x50000001: 0x8200,\n\t\t\t            0x60000001: 0x200,\n\t\t\t            0x70000001: 0x800202,\n\t\t\t            0x80000001: 0x808202,\n\t\t\t            0x90000001: 0x808000,\n\t\t\t            0xa0000001: 0x800002,\n\t\t\t            0xb0000001: 0x8202,\n\t\t\t            0xc0000001: 0x202,\n\t\t\t            0xd0000001: 0x800200,\n\t\t\t            0xe0000001: 0x8002,\n\t\t\t            0xf0000001: 0x0,\n\t\t\t            0x8000001: 0x808202,\n\t\t\t            0x18000001: 0x808000,\n\t\t\t            0x28000001: 0x800000,\n\t\t\t            0x38000001: 0x200,\n\t\t\t            0x48000001: 0x8000,\n\t\t\t            0x58000001: 0x800002,\n\t\t\t            0x68000001: 0x2,\n\t\t\t            0x78000001: 0x8202,\n\t\t\t            0x88000001: 0x8002,\n\t\t\t            0x98000001: 0x800202,\n\t\t\t            0xa8000001: 0x202,\n\t\t\t            0xb8000001: 0x808200,\n\t\t\t            0xc8000001: 0x800200,\n\t\t\t            0xd8000001: 0x0,\n\t\t\t            0xe8000001: 0x8200,\n\t\t\t            0xf8000001: 0x808002\n\t\t\t        },\n\t\t\t        {\n\t\t\t            0x0: 0x40084010,\n\t\t\t            0x1000000: 0x4000,\n\t\t\t            0x2000000: 0x80000,\n\t\t\t            0x3000000: 0x40080010,\n\t\t\t            0x4000000: 0x40000010,\n\t\t\t            0x5000000: 0x40084000,\n\t\t\t            0x6000000: 0x40004000,\n\t\t\t            0x7000000: 0x10,\n\t\t\t            0x8000000: 0x84000,\n\t\t\t            0x9000000: 0x40004010,\n\t\t\t            0xa000000: 0x40000000,\n\t\t\t            0xb000000: 0x84010,\n\t\t\t            0xc000000: 0x80010,\n\t\t\t            0xd000000: 0x0,\n\t\t\t            0xe000000: 0x4010,\n\t\t\t            0xf000000: 0x40080000,\n\t\t\t            0x800000: 0x40004000,\n\t\t\t            0x1800000: 0x84010,\n\t\t\t            0x2800000: 0x10,\n\t\t\t            0x3800000: 0x40004010,\n\t\t\t            0x4800000: 0x40084010,\n\t\t\t            0x5800000: 0x40000000,\n\t\t\t            0x6800000: 0x80000,\n\t\t\t            0x7800000: 0x40080010,\n\t\t\t            0x8800000: 0x80010,\n\t\t\t            0x9800000: 0x0,\n\t\t\t            0xa800000: 0x4000,\n\t\t\t            0xb800000: 0x40080000,\n\t\t\t            0xc800000: 0x40000010,\n\t\t\t            0xd800000: 0x84000,\n\t\t\t            0xe800000: 0x40084000,\n\t\t\t            0xf800000: 0x4010,\n\t\t\t            0x10000000: 0x0,\n\t\t\t            0x11000000: 0x40080010,\n\t\t\t            0x12000000: 0x40004010,\n\t\t\t            0x13000000: 0x40084000,\n\t\t\t            0x14000000: 0x40080000,\n\t\t\t            0x15000000: 0x10,\n\t\t\t            0x16000000: 0x84010,\n\t\t\t            0x17000000: 0x4000,\n\t\t\t            0x18000000: 0x4010,\n\t\t\t            0x19000000: 0x80000,\n\t\t\t            0x1a000000: 0x80010,\n\t\t\t            0x1b000000: 0x40000010,\n\t\t\t            0x1c000000: 0x84000,\n\t\t\t            0x1d000000: 0x40004000,\n\t\t\t            0x1e000000: 0x40000000,\n\t\t\t            0x1f000000: 0x40084010,\n\t\t\t            0x10800000: 0x84010,\n\t\t\t            0x11800000: 0x80000,\n\t\t\t            0x12800000: 0x40080000,\n\t\t\t            0x13800000: 0x4000,\n\t\t\t            0x14800000: 0x40004000,\n\t\t\t            0x15800000: 0x40084010,\n\t\t\t            0x16800000: 0x10,\n\t\t\t            0x17800000: 0x40000000,\n\t\t\t            0x18800000: 0x40084000,\n\t\t\t            0x19800000: 0x40000010,\n\t\t\t            0x1a800000: 0x40004010,\n\t\t\t            0x1b800000: 0x80010,\n\t\t\t            0x1c800000: 0x0,\n\t\t\t            0x1d800000: 0x4010,\n\t\t\t            0x1e800000: 0x40080010,\n\t\t\t            0x1f800000: 0x84000\n\t\t\t        },\n\t\t\t        {\n\t\t\t            0x0: 0x104,\n\t\t\t            0x100000: 0x0,\n\t\t\t            0x200000: 0x4000100,\n\t\t\t            0x300000: 0x10104,\n\t\t\t            0x400000: 0x10004,\n\t\t\t            0x500000: 0x4000004,\n\t\t\t            0x600000: 0x4010104,\n\t\t\t            0x700000: 0x4010000,\n\t\t\t            0x800000: 0x4000000,\n\t\t\t            0x900000: 0x4010100,\n\t\t\t            0xa00000: 0x10100,\n\t\t\t            0xb00000: 0x4010004,\n\t\t\t            0xc00000: 0x4000104,\n\t\t\t            0xd00000: 0x10000,\n\t\t\t            0xe00000: 0x4,\n\t\t\t            0xf00000: 0x100,\n\t\t\t            0x80000: 0x4010100,\n\t\t\t            0x180000: 0x4010004,\n\t\t\t            0x280000: 0x0,\n\t\t\t            0x380000: 0x4000100,\n\t\t\t            0x480000: 0x4000004,\n\t\t\t            0x580000: 0x10000,\n\t\t\t            0x680000: 0x10004,\n\t\t\t            0x780000: 0x104,\n\t\t\t            0x880000: 0x4,\n\t\t\t            0x980000: 0x100,\n\t\t\t            0xa80000: 0x4010000,\n\t\t\t            0xb80000: 0x10104,\n\t\t\t            0xc80000: 0x10100,\n\t\t\t            0xd80000: 0x4000104,\n\t\t\t            0xe80000: 0x4010104,\n\t\t\t            0xf80000: 0x4000000,\n\t\t\t            0x1000000: 0x4010100,\n\t\t\t            0x1100000: 0x10004,\n\t\t\t            0x1200000: 0x10000,\n\t\t\t            0x1300000: 0x4000100,\n\t\t\t            0x1400000: 0x100,\n\t\t\t            0x1500000: 0x4010104,\n\t\t\t            0x1600000: 0x4000004,\n\t\t\t            0x1700000: 0x0,\n\t\t\t            0x1800000: 0x4000104,\n\t\t\t            0x1900000: 0x4000000,\n\t\t\t            0x1a00000: 0x4,\n\t\t\t            0x1b00000: 0x10100,\n\t\t\t            0x1c00000: 0x4010000,\n\t\t\t            0x1d00000: 0x104,\n\t\t\t            0x1e00000: 0x10104,\n\t\t\t            0x1f00000: 0x4010004,\n\t\t\t            0x1080000: 0x4000000,\n\t\t\t            0x1180000: 0x104,\n\t\t\t            0x1280000: 0x4010100,\n\t\t\t            0x1380000: 0x0,\n\t\t\t            0x1480000: 0x10004,\n\t\t\t            0x1580000: 0x4000100,\n\t\t\t            0x1680000: 0x100,\n\t\t\t            0x1780000: 0x4010004,\n\t\t\t            0x1880000: 0x10000,\n\t\t\t            0x1980000: 0x4010104,\n\t\t\t            0x1a80000: 0x10104,\n\t\t\t            0x1b80000: 0x4000004,\n\t\t\t            0x1c80000: 0x4000104,\n\t\t\t            0x1d80000: 0x4010000,\n\t\t\t            0x1e80000: 0x4,\n\t\t\t            0x1f80000: 0x10100\n\t\t\t        },\n\t\t\t        {\n\t\t\t            0x0: 0x80401000,\n\t\t\t            0x10000: 0x80001040,\n\t\t\t            0x20000: 0x401040,\n\t\t\t            0x30000: 0x80400000,\n\t\t\t            0x40000: 0x0,\n\t\t\t            0x50000: 0x401000,\n\t\t\t            0x60000: 0x80000040,\n\t\t\t            0x70000: 0x400040,\n\t\t\t            0x80000: 0x80000000,\n\t\t\t            0x90000: 0x400000,\n\t\t\t            0xa0000: 0x40,\n\t\t\t            0xb0000: 0x80001000,\n\t\t\t            0xc0000: 0x80400040,\n\t\t\t            0xd0000: 0x1040,\n\t\t\t            0xe0000: 0x1000,\n\t\t\t            0xf0000: 0x80401040,\n\t\t\t            0x8000: 0x80001040,\n\t\t\t            0x18000: 0x40,\n\t\t\t            0x28000: 0x80400040,\n\t\t\t            0x38000: 0x80001000,\n\t\t\t            0x48000: 0x401000,\n\t\t\t            0x58000: 0x80401040,\n\t\t\t            0x68000: 0x0,\n\t\t\t            0x78000: 0x80400000,\n\t\t\t            0x88000: 0x1000,\n\t\t\t            0x98000: 0x80401000,\n\t\t\t            0xa8000: 0x400000,\n\t\t\t            0xb8000: 0x1040,\n\t\t\t            0xc8000: 0x80000000,\n\t\t\t            0xd8000: 0x400040,\n\t\t\t            0xe8000: 0x401040,\n\t\t\t            0xf8000: 0x80000040,\n\t\t\t            0x100000: 0x400040,\n\t\t\t            0x110000: 0x401000,\n\t\t\t            0x120000: 0x80000040,\n\t\t\t            0x130000: 0x0,\n\t\t\t            0x140000: 0x1040,\n\t\t\t            0x150000: 0x80400040,\n\t\t\t            0x160000: 0x80401000,\n\t\t\t            0x170000: 0x80001040,\n\t\t\t            0x180000: 0x80401040,\n\t\t\t            0x190000: 0x80000000,\n\t\t\t            0x1a0000: 0x80400000,\n\t\t\t            0x1b0000: 0x401040,\n\t\t\t            0x1c0000: 0x80001000,\n\t\t\t            0x1d0000: 0x400000,\n\t\t\t            0x1e0000: 0x40,\n\t\t\t            0x1f0000: 0x1000,\n\t\t\t            0x108000: 0x80400000,\n\t\t\t            0x118000: 0x80401040,\n\t\t\t            0x128000: 0x0,\n\t\t\t            0x138000: 0x401000,\n\t\t\t            0x148000: 0x400040,\n\t\t\t            0x158000: 0x80000000,\n\t\t\t            0x168000: 0x80001040,\n\t\t\t            0x178000: 0x40,\n\t\t\t            0x188000: 0x80000040,\n\t\t\t            0x198000: 0x1000,\n\t\t\t            0x1a8000: 0x80001000,\n\t\t\t            0x1b8000: 0x80400040,\n\t\t\t            0x1c8000: 0x1040,\n\t\t\t            0x1d8000: 0x80401000,\n\t\t\t            0x1e8000: 0x400000,\n\t\t\t            0x1f8000: 0x401040\n\t\t\t        },\n\t\t\t        {\n\t\t\t            0x0: 0x80,\n\t\t\t            0x1000: 0x1040000,\n\t\t\t            0x2000: 0x40000,\n\t\t\t            0x3000: 0x20000000,\n\t\t\t            0x4000: 0x20040080,\n\t\t\t            0x5000: 0x1000080,\n\t\t\t            0x6000: 0x21000080,\n\t\t\t            0x7000: 0x40080,\n\t\t\t            0x8000: 0x1000000,\n\t\t\t            0x9000: 0x20040000,\n\t\t\t            0xa000: 0x20000080,\n\t\t\t            0xb000: 0x21040080,\n\t\t\t            0xc000: 0x21040000,\n\t\t\t            0xd000: 0x0,\n\t\t\t            0xe000: 0x1040080,\n\t\t\t            0xf000: 0x21000000,\n\t\t\t            0x800: 0x1040080,\n\t\t\t            0x1800: 0x21000080,\n\t\t\t            0x2800: 0x80,\n\t\t\t            0x3800: 0x1040000,\n\t\t\t            0x4800: 0x40000,\n\t\t\t            0x5800: 0x20040080,\n\t\t\t            0x6800: 0x21040000,\n\t\t\t            0x7800: 0x20000000,\n\t\t\t            0x8800: 0x20040000,\n\t\t\t            0x9800: 0x0,\n\t\t\t            0xa800: 0x21040080,\n\t\t\t            0xb800: 0x1000080,\n\t\t\t            0xc800: 0x20000080,\n\t\t\t            0xd800: 0x21000000,\n\t\t\t            0xe800: 0x1000000,\n\t\t\t            0xf800: 0x40080,\n\t\t\t            0x10000: 0x40000,\n\t\t\t            0x11000: 0x80,\n\t\t\t            0x12000: 0x20000000,\n\t\t\t            0x13000: 0x21000080,\n\t\t\t            0x14000: 0x1000080,\n\t\t\t            0x15000: 0x21040000,\n\t\t\t            0x16000: 0x20040080,\n\t\t\t            0x17000: 0x1000000,\n\t\t\t            0x18000: 0x21040080,\n\t\t\t            0x19000: 0x21000000,\n\t\t\t            0x1a000: 0x1040000,\n\t\t\t            0x1b000: 0x20040000,\n\t\t\t            0x1c000: 0x40080,\n\t\t\t            0x1d000: 0x20000080,\n\t\t\t            0x1e000: 0x0,\n\t\t\t            0x1f000: 0x1040080,\n\t\t\t            0x10800: 0x21000080,\n\t\t\t            0x11800: 0x1000000,\n\t\t\t            0x12800: 0x1040000,\n\t\t\t            0x13800: 0x20040080,\n\t\t\t            0x14800: 0x20000000,\n\t\t\t            0x15800: 0x1040080,\n\t\t\t            0x16800: 0x80,\n\t\t\t            0x17800: 0x21040000,\n\t\t\t            0x18800: 0x40080,\n\t\t\t            0x19800: 0x21040080,\n\t\t\t            0x1a800: 0x0,\n\t\t\t            0x1b800: 0x21000000,\n\t\t\t            0x1c800: 0x1000080,\n\t\t\t            0x1d800: 0x40000,\n\t\t\t            0x1e800: 0x20040000,\n\t\t\t            0x1f800: 0x20000080\n\t\t\t        },\n\t\t\t        {\n\t\t\t            0x0: 0x10000008,\n\t\t\t            0x100: 0x2000,\n\t\t\t            0x200: 0x10200000,\n\t\t\t            0x300: 0x10202008,\n\t\t\t            0x400: 0x10002000,\n\t\t\t            0x500: 0x200000,\n\t\t\t            0x600: 0x200008,\n\t\t\t            0x700: 0x10000000,\n\t\t\t            0x800: 0x0,\n\t\t\t            0x900: 0x10002008,\n\t\t\t            0xa00: 0x202000,\n\t\t\t            0xb00: 0x8,\n\t\t\t            0xc00: 0x10200008,\n\t\t\t            0xd00: 0x202008,\n\t\t\t            0xe00: 0x2008,\n\t\t\t            0xf00: 0x10202000,\n\t\t\t            0x80: 0x10200000,\n\t\t\t            0x180: 0x10202008,\n\t\t\t            0x280: 0x8,\n\t\t\t            0x380: 0x200000,\n\t\t\t            0x480: 0x202008,\n\t\t\t            0x580: 0x10000008,\n\t\t\t            0x680: 0x10002000,\n\t\t\t            0x780: 0x2008,\n\t\t\t            0x880: 0x200008,\n\t\t\t            0x980: 0x2000,\n\t\t\t            0xa80: 0x10002008,\n\t\t\t            0xb80: 0x10200008,\n\t\t\t            0xc80: 0x0,\n\t\t\t            0xd80: 0x10202000,\n\t\t\t            0xe80: 0x202000,\n\t\t\t            0xf80: 0x10000000,\n\t\t\t            0x1000: 0x10002000,\n\t\t\t            0x1100: 0x10200008,\n\t\t\t            0x1200: 0x10202008,\n\t\t\t            0x1300: 0x2008,\n\t\t\t            0x1400: 0x200000,\n\t\t\t            0x1500: 0x10000000,\n\t\t\t            0x1600: 0x10000008,\n\t\t\t            0x1700: 0x202000,\n\t\t\t            0x1800: 0x202008,\n\t\t\t            0x1900: 0x0,\n\t\t\t            0x1a00: 0x8,\n\t\t\t            0x1b00: 0x10200000,\n\t\t\t            0x1c00: 0x2000,\n\t\t\t            0x1d00: 0x10002008,\n\t\t\t            0x1e00: 0x10202000,\n\t\t\t            0x1f00: 0x200008,\n\t\t\t            0x1080: 0x8,\n\t\t\t            0x1180: 0x202000,\n\t\t\t            0x1280: 0x200000,\n\t\t\t            0x1380: 0x10000008,\n\t\t\t            0x1480: 0x10002000,\n\t\t\t            0x1580: 0x2008,\n\t\t\t            0x1680: 0x10202008,\n\t\t\t            0x1780: 0x10200000,\n\t\t\t            0x1880: 0x10202000,\n\t\t\t            0x1980: 0x10200008,\n\t\t\t            0x1a80: 0x2000,\n\t\t\t            0x1b80: 0x202008,\n\t\t\t            0x1c80: 0x200008,\n\t\t\t            0x1d80: 0x0,\n\t\t\t            0x1e80: 0x10000000,\n\t\t\t            0x1f80: 0x10002008\n\t\t\t        },\n\t\t\t        {\n\t\t\t            0x0: 0x100000,\n\t\t\t            0x10: 0x2000401,\n\t\t\t            0x20: 0x400,\n\t\t\t            0x30: 0x100401,\n\t\t\t            0x40: 0x2100401,\n\t\t\t            0x50: 0x0,\n\t\t\t            0x60: 0x1,\n\t\t\t            0x70: 0x2100001,\n\t\t\t            0x80: 0x2000400,\n\t\t\t            0x90: 0x100001,\n\t\t\t            0xa0: 0x2000001,\n\t\t\t            0xb0: 0x2100400,\n\t\t\t            0xc0: 0x2100000,\n\t\t\t            0xd0: 0x401,\n\t\t\t            0xe0: 0x100400,\n\t\t\t            0xf0: 0x2000000,\n\t\t\t            0x8: 0x2100001,\n\t\t\t            0x18: 0x0,\n\t\t\t            0x28: 0x2000401,\n\t\t\t            0x38: 0x2100400,\n\t\t\t            0x48: 0x100000,\n\t\t\t            0x58: 0x2000001,\n\t\t\t            0x68: 0x2000000,\n\t\t\t            0x78: 0x401,\n\t\t\t            0x88: 0x100401,\n\t\t\t            0x98: 0x2000400,\n\t\t\t            0xa8: 0x2100000,\n\t\t\t            0xb8: 0x100001,\n\t\t\t            0xc8: 0x400,\n\t\t\t            0xd8: 0x2100401,\n\t\t\t            0xe8: 0x1,\n\t\t\t            0xf8: 0x100400,\n\t\t\t            0x100: 0x2000000,\n\t\t\t            0x110: 0x100000,\n\t\t\t            0x120: 0x2000401,\n\t\t\t            0x130: 0x2100001,\n\t\t\t            0x140: 0x100001,\n\t\t\t            0x150: 0x2000400,\n\t\t\t            0x160: 0x2100400,\n\t\t\t            0x170: 0x100401,\n\t\t\t            0x180: 0x401,\n\t\t\t            0x190: 0x2100401,\n\t\t\t            0x1a0: 0x100400,\n\t\t\t            0x1b0: 0x1,\n\t\t\t            0x1c0: 0x0,\n\t\t\t            0x1d0: 0x2100000,\n\t\t\t            0x1e0: 0x2000001,\n\t\t\t            0x1f0: 0x400,\n\t\t\t            0x108: 0x100400,\n\t\t\t            0x118: 0x2000401,\n\t\t\t            0x128: 0x2100001,\n\t\t\t            0x138: 0x1,\n\t\t\t            0x148: 0x2000000,\n\t\t\t            0x158: 0x100000,\n\t\t\t            0x168: 0x401,\n\t\t\t            0x178: 0x2100400,\n\t\t\t            0x188: 0x2000001,\n\t\t\t            0x198: 0x2100000,\n\t\t\t            0x1a8: 0x0,\n\t\t\t            0x1b8: 0x2100401,\n\t\t\t            0x1c8: 0x100401,\n\t\t\t            0x1d8: 0x400,\n\t\t\t            0x1e8: 0x2000400,\n\t\t\t            0x1f8: 0x100001\n\t\t\t        },\n\t\t\t        {\n\t\t\t            0x0: 0x8000820,\n\t\t\t            0x1: 0x20000,\n\t\t\t            0x2: 0x8000000,\n\t\t\t            0x3: 0x20,\n\t\t\t            0x4: 0x20020,\n\t\t\t            0x5: 0x8020820,\n\t\t\t            0x6: 0x8020800,\n\t\t\t            0x7: 0x800,\n\t\t\t            0x8: 0x8020000,\n\t\t\t            0x9: 0x8000800,\n\t\t\t            0xa: 0x20800,\n\t\t\t            0xb: 0x8020020,\n\t\t\t            0xc: 0x820,\n\t\t\t            0xd: 0x0,\n\t\t\t            0xe: 0x8000020,\n\t\t\t            0xf: 0x20820,\n\t\t\t            0x80000000: 0x800,\n\t\t\t            0x80000001: 0x8020820,\n\t\t\t            0x80000002: 0x8000820,\n\t\t\t            0x80000003: 0x8000000,\n\t\t\t            0x80000004: 0x8020000,\n\t\t\t            0x80000005: 0x20800,\n\t\t\t            0x80000006: 0x20820,\n\t\t\t            0x80000007: 0x20,\n\t\t\t            0x80000008: 0x8000020,\n\t\t\t            0x80000009: 0x820,\n\t\t\t            0x8000000a: 0x20020,\n\t\t\t            0x8000000b: 0x8020800,\n\t\t\t            0x8000000c: 0x0,\n\t\t\t            0x8000000d: 0x8020020,\n\t\t\t            0x8000000e: 0x8000800,\n\t\t\t            0x8000000f: 0x20000,\n\t\t\t            0x10: 0x20820,\n\t\t\t            0x11: 0x8020800,\n\t\t\t            0x12: 0x20,\n\t\t\t            0x13: 0x800,\n\t\t\t            0x14: 0x8000800,\n\t\t\t            0x15: 0x8000020,\n\t\t\t            0x16: 0x8020020,\n\t\t\t            0x17: 0x20000,\n\t\t\t            0x18: 0x0,\n\t\t\t            0x19: 0x20020,\n\t\t\t            0x1a: 0x8020000,\n\t\t\t            0x1b: 0x8000820,\n\t\t\t            0x1c: 0x8020820,\n\t\t\t            0x1d: 0x20800,\n\t\t\t            0x1e: 0x820,\n\t\t\t            0x1f: 0x8000000,\n\t\t\t            0x80000010: 0x20000,\n\t\t\t            0x80000011: 0x800,\n\t\t\t            0x80000012: 0x8020020,\n\t\t\t            0x80000013: 0x20820,\n\t\t\t            0x80000014: 0x20,\n\t\t\t            0x80000015: 0x8020000,\n\t\t\t            0x80000016: 0x8000000,\n\t\t\t            0x80000017: 0x8000820,\n\t\t\t            0x80000018: 0x8020820,\n\t\t\t            0x80000019: 0x8000020,\n\t\t\t            0x8000001a: 0x8000800,\n\t\t\t            0x8000001b: 0x0,\n\t\t\t            0x8000001c: 0x20800,\n\t\t\t            0x8000001d: 0x820,\n\t\t\t            0x8000001e: 0x20020,\n\t\t\t            0x8000001f: 0x8020800\n\t\t\t        }\n\t\t\t    ];\n\n\t\t\t    // Masks that select the SBOX input\n\t\t\t    var SBOX_MASK = [\n\t\t\t        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,\n\t\t\t        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f\n\t\t\t    ];\n\n\t\t\t    /**\n\t\t\t     * DES block cipher algorithm.\n\t\t\t     */\n\t\t\t    var DES = C_algo.DES = BlockCipher.extend({\n\t\t\t        _doReset: function () {\n\t\t\t            // Shortcuts\n\t\t\t            var key = this._key;\n\t\t\t            var keyWords = key.words;\n\n\t\t\t            // Select 56 bits according to PC1\n\t\t\t            var keyBits = [];\n\t\t\t            for (var i = 0; i < 56; i++) {\n\t\t\t                var keyBitPos = PC1[i] - 1;\n\t\t\t                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;\n\t\t\t            }\n\n\t\t\t            // Assemble 16 subkeys\n\t\t\t            var subKeys = this._subKeys = [];\n\t\t\t            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {\n\t\t\t                // Create subkey\n\t\t\t                var subKey = subKeys[nSubKey] = [];\n\n\t\t\t                // Shortcut\n\t\t\t                var bitShift = BIT_SHIFTS[nSubKey];\n\n\t\t\t                // Select 48 bits according to PC2\n\t\t\t                for (var i = 0; i < 24; i++) {\n\t\t\t                    // Select from the left 28 key bits\n\t\t\t                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);\n\n\t\t\t                    // Select from the right 28 key bits\n\t\t\t                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);\n\t\t\t                }\n\n\t\t\t                // Since each subkey is applied to an expanded 32-bit input,\n\t\t\t                // the subkey can be broken into 8 values scaled to 32-bits,\n\t\t\t                // which allows the key to be used without expansion\n\t\t\t                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);\n\t\t\t                for (var i = 1; i < 7; i++) {\n\t\t\t                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);\n\t\t\t                }\n\t\t\t                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);\n\t\t\t            }\n\n\t\t\t            // Compute inverse subkeys\n\t\t\t            var invSubKeys = this._invSubKeys = [];\n\t\t\t            for (var i = 0; i < 16; i++) {\n\t\t\t                invSubKeys[i] = subKeys[15 - i];\n\t\t\t            }\n\t\t\t        },\n\n\t\t\t        encryptBlock: function (M, offset) {\n\t\t\t            this._doCryptBlock(M, offset, this._subKeys);\n\t\t\t        },\n\n\t\t\t        decryptBlock: function (M, offset) {\n\t\t\t            this._doCryptBlock(M, offset, this._invSubKeys);\n\t\t\t        },\n\n\t\t\t        _doCryptBlock: function (M, offset, subKeys) {\n\t\t\t            // Get input\n\t\t\t            this._lBlock = M[offset];\n\t\t\t            this._rBlock = M[offset + 1];\n\n\t\t\t            // Initial permutation\n\t\t\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\t\t\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t\t\t            exchangeRL.call(this, 2,  0x33333333);\n\t\t\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t\t\t            exchangeLR.call(this, 1,  0x55555555);\n\n\t\t\t            // Rounds\n\t\t\t            for (var round = 0; round < 16; round++) {\n\t\t\t                // Shortcuts\n\t\t\t                var subKey = subKeys[round];\n\t\t\t                var lBlock = this._lBlock;\n\t\t\t                var rBlock = this._rBlock;\n\n\t\t\t                // Feistel function\n\t\t\t                var f = 0;\n\t\t\t                for (var i = 0; i < 8; i++) {\n\t\t\t                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n\t\t\t                }\n\t\t\t                this._lBlock = rBlock;\n\t\t\t                this._rBlock = lBlock ^ f;\n\t\t\t            }\n\n\t\t\t            // Undo swap from last round\n\t\t\t            var t = this._lBlock;\n\t\t\t            this._lBlock = this._rBlock;\n\t\t\t            this._rBlock = t;\n\n\t\t\t            // Final permutation\n\t\t\t            exchangeLR.call(this, 1,  0x55555555);\n\t\t\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t\t\t            exchangeRL.call(this, 2,  0x33333333);\n\t\t\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t\t\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\n\t\t\t            // Set output\n\t\t\t            M[offset] = this._lBlock;\n\t\t\t            M[offset + 1] = this._rBlock;\n\t\t\t        },\n\n\t\t\t        keySize: 64/32,\n\n\t\t\t        ivSize: 64/32,\n\n\t\t\t        blockSize: 64/32\n\t\t\t    });\n\n\t\t\t    // Swap bits across the left and right words\n\t\t\t    function exchangeLR(offset, mask) {\n\t\t\t        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;\n\t\t\t        this._rBlock ^= t;\n\t\t\t        this._lBlock ^= t << offset;\n\t\t\t    }\n\n\t\t\t    function exchangeRL(offset, mask) {\n\t\t\t        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;\n\t\t\t        this._lBlock ^= t;\n\t\t\t        this._rBlock ^= t << offset;\n\t\t\t    }\n\n\t\t\t    /**\n\t\t\t     * Shortcut functions to the cipher's object interface.\n\t\t\t     *\n\t\t\t     * @example\n\t\t\t     *\n\t\t\t     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n\t\t\t     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n\t\t\t     */\n\t\t\t    C.DES = BlockCipher._createHelper(DES);\n\n\t\t\t    /**\n\t\t\t     * Triple-DES block cipher algorithm.\n\t\t\t     */\n\t\t\t    var TripleDES = C_algo.TripleDES = BlockCipher.extend({\n\t\t\t        _doReset: function () {\n\t\t\t            // Shortcuts\n\t\t\t            var key = this._key;\n\t\t\t            var keyWords = key.words;\n\n\t\t\t            // Create DES instances\n\t\t\t            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));\n\t\t\t            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));\n\t\t\t            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));\n\t\t\t        },\n\n\t\t\t        encryptBlock: function (M, offset) {\n\t\t\t            this._des1.encryptBlock(M, offset);\n\t\t\t            this._des2.decryptBlock(M, offset);\n\t\t\t            this._des3.encryptBlock(M, offset);\n\t\t\t        },\n\n\t\t\t        decryptBlock: function (M, offset) {\n\t\t\t            this._des3.decryptBlock(M, offset);\n\t\t\t            this._des2.encryptBlock(M, offset);\n\t\t\t            this._des1.decryptBlock(M, offset);\n\t\t\t        },\n\n\t\t\t        keySize: 192/32,\n\n\t\t\t        ivSize: 64/32,\n\n\t\t\t        blockSize: 64/32\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Shortcut functions to the cipher's object interface.\n\t\t\t     *\n\t\t\t     * @example\n\t\t\t     *\n\t\t\t     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n\t\t\t     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n\t\t\t     */\n\t\t\t    C.TripleDES = BlockCipher._createHelper(TripleDES);\n\t\t\t}());\n\n\n\t\t\treturn CryptoJS.TripleDES;\n\n\t\t}));\n} (tripledesModule, tripledes));\n\treturn tripledes;\n}\n\nexport { requireTripledes as __require };","start":1670465469201,"end":1670465469207,"order":"normal"}]}
