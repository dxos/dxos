{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/mode-cfb.js","transforms":[{"name":"vite:load-fallback","result":";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher Feedback block mode.\n\t */\n\tCryptoJS.mode.CFB = (function () {\n\t    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    CFB.Encryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // Remember this block to use with next block\n\t            this._prevBlock = words.slice(offset, offset + blockSize);\n\t        }\n\t    });\n\n\t    CFB.Decryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            // Remember this block to use with next block\n\t            var thisBlock = words.slice(offset, offset + blockSize);\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // This block becomes the previous block\n\t            this._prevBlock = thisBlock;\n\t        }\n\t    });\n\n\t    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n\t        // Shortcut\n\t        var iv = this._iv;\n\n\t        // Generate keystream\n\t        if (iv) {\n\t            var keystream = iv.slice(0);\n\n\t            // Remove IV for subsequent blocks\n\t            this._iv = undefined;\n\t        } else {\n\t            var keystream = this._prevBlock;\n\t        }\n\t        cipher.encryptBlock(keystream, 0);\n\n\t        // Encrypt\n\t        for (var i = 0; i < blockSize; i++) {\n\t            words[offset + i] ^= keystream[i];\n\t        }\n\t    }\n\n\t    return CFB;\n\t}());\n\n\n\treturn CryptoJS.mode.CFB;\n\n}));","start":1670465469026,"end":1670465469168},{"name":"vite:react-babel","result":";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher Feedback block mode.\n\t */\n\tCryptoJS.mode.CFB = (function () {\n\t    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    CFB.Encryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // Remember this block to use with next block\n\t            this._prevBlock = words.slice(offset, offset + blockSize);\n\t        }\n\t    });\n\n\t    CFB.Decryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            // Remember this block to use with next block\n\t            var thisBlock = words.slice(offset, offset + blockSize);\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // This block becomes the previous block\n\t            this._prevBlock = thisBlock;\n\t        }\n\t    });\n\n\t    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n\t        // Shortcut\n\t        var iv = this._iv;\n\n\t        // Generate keystream\n\t        if (iv) {\n\t            var keystream = iv.slice(0);\n\n\t            // Remove IV for subsequent blocks\n\t            this._iv = undefined;\n\t        } else {\n\t            var keystream = this._prevBlock;\n\t        }\n\t        cipher.encryptBlock(keystream, 0);\n\n\t        // Encrypt\n\t        for (var i = 0; i < blockSize; i++) {\n\t            words[offset + i] ^= keystream[i];\n\t        }\n\t    }\n\n\t    return CFB;\n\t}());\n\n\n\treturn CryptoJS.mode.CFB;\n\n}));","start":1670465469168,"end":1670465469168,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as modeCfbModule, exports as modeCfb } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/mode-cfb.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/core.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/cipher-core.js?commonjs-wrapped\";\n\nvar hasRequiredModeCfb;\n\nfunction requireModeCfb () {\n\tif (hasRequiredModeCfb) return modeCfb;\n\thasRequiredModeCfb = 1;\n\t(function (module, exports) {\n\t\t;(function (root, factory, undef) {\n\t\t\tif ('object' === \"object\") {\n\t\t\t\t// CommonJS\n\t\t\t\tmodule.exports = exports = factory(require$$0(), require$$1());\n\t\t\t}\n\t\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t\t// AMD\n\t\t\t\tundefined([\"./core\", \"./cipher-core\"], factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Global (browser)\n\t\t\t\tfactory(root.CryptoJS);\n\t\t\t}\n\t\t}(commonjsHelpers.commonjsGlobal, function (CryptoJS) {\n\n\t\t\t/**\n\t\t\t * Cipher Feedback block mode.\n\t\t\t */\n\t\t\tCryptoJS.mode.CFB = (function () {\n\t\t\t    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t\t\t    CFB.Encryptor = CFB.extend({\n\t\t\t        processBlock: function (words, offset) {\n\t\t\t            // Shortcuts\n\t\t\t            var cipher = this._cipher;\n\t\t\t            var blockSize = cipher.blockSize;\n\n\t\t\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t\t\t            // Remember this block to use with next block\n\t\t\t            this._prevBlock = words.slice(offset, offset + blockSize);\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    CFB.Decryptor = CFB.extend({\n\t\t\t        processBlock: function (words, offset) {\n\t\t\t            // Shortcuts\n\t\t\t            var cipher = this._cipher;\n\t\t\t            var blockSize = cipher.blockSize;\n\n\t\t\t            // Remember this block to use with next block\n\t\t\t            var thisBlock = words.slice(offset, offset + blockSize);\n\n\t\t\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t\t\t            // This block becomes the previous block\n\t\t\t            this._prevBlock = thisBlock;\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n\t\t\t        // Shortcut\n\t\t\t        var iv = this._iv;\n\n\t\t\t        // Generate keystream\n\t\t\t        if (iv) {\n\t\t\t            var keystream = iv.slice(0);\n\n\t\t\t            // Remove IV for subsequent blocks\n\t\t\t            this._iv = undefined;\n\t\t\t        } else {\n\t\t\t            var keystream = this._prevBlock;\n\t\t\t        }\n\t\t\t        cipher.encryptBlock(keystream, 0);\n\n\t\t\t        // Encrypt\n\t\t\t        for (var i = 0; i < blockSize; i++) {\n\t\t\t            words[offset + i] ^= keystream[i];\n\t\t\t        }\n\t\t\t    }\n\n\t\t\t    return CFB;\n\t\t\t}());\n\n\n\t\t\treturn CryptoJS.mode.CFB;\n\n\t\t}));\n} (modeCfbModule, modeCfb));\n\treturn modeCfb;\n}\n\nexport { requireModeCfb as __require };","start":1670465469169,"end":1670465469170,"order":"normal"},{"name":"polyfill-node","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as modeCfbModule, exports as modeCfb } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/mode-cfb.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/core.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/cipher-core.js?commonjs-wrapped\";\n\nvar hasRequiredModeCfb;\n\nfunction requireModeCfb () {\n\tif (hasRequiredModeCfb) return modeCfb;\n\thasRequiredModeCfb = 1;\n\t(function (module, exports) {\n\t\t;(function (root, factory, undef) {\n\t\t\tif ('object' === \"object\") {\n\t\t\t\t// CommonJS\n\t\t\t\tmodule.exports = exports = factory(require$$0(), require$$1());\n\t\t\t}\n\t\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t\t// AMD\n\t\t\t\tundefined([\"./core\", \"./cipher-core\"], factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Global (browser)\n\t\t\t\tfactory(root.CryptoJS);\n\t\t\t}\n\t\t}(commonjsHelpers.commonjsGlobal, function (CryptoJS) {\n\n\t\t\t/**\n\t\t\t * Cipher Feedback block mode.\n\t\t\t */\n\t\t\tCryptoJS.mode.CFB = (function () {\n\t\t\t    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t\t\t    CFB.Encryptor = CFB.extend({\n\t\t\t        processBlock: function (words, offset) {\n\t\t\t            // Shortcuts\n\t\t\t            var cipher = this._cipher;\n\t\t\t            var blockSize = cipher.blockSize;\n\n\t\t\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t\t\t            // Remember this block to use with next block\n\t\t\t            this._prevBlock = words.slice(offset, offset + blockSize);\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    CFB.Decryptor = CFB.extend({\n\t\t\t        processBlock: function (words, offset) {\n\t\t\t            // Shortcuts\n\t\t\t            var cipher = this._cipher;\n\t\t\t            var blockSize = cipher.blockSize;\n\n\t\t\t            // Remember this block to use with next block\n\t\t\t            var thisBlock = words.slice(offset, offset + blockSize);\n\n\t\t\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t\t\t            // This block becomes the previous block\n\t\t\t            this._prevBlock = thisBlock;\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n\t\t\t        // Shortcut\n\t\t\t        var iv = this._iv;\n\n\t\t\t        // Generate keystream\n\t\t\t        if (iv) {\n\t\t\t            var keystream = iv.slice(0);\n\n\t\t\t            // Remove IV for subsequent blocks\n\t\t\t            this._iv = undefined;\n\t\t\t        } else {\n\t\t\t            var keystream = this._prevBlock;\n\t\t\t        }\n\t\t\t        cipher.encryptBlock(keystream, 0);\n\n\t\t\t        // Encrypt\n\t\t\t        for (var i = 0; i < blockSize; i++) {\n\t\t\t            words[offset + i] ^= keystream[i];\n\t\t\t        }\n\t\t\t    }\n\n\t\t\t    return CFB;\n\t\t\t}());\n\n\n\t\t\treturn CryptoJS.mode.CFB;\n\n\t\t}));\n} (modeCfbModule, modeCfb));\n\treturn modeCfb;\n}\n\nexport { requireModeCfb as __require };","start":1670465469170,"end":1670465469171,"order":"normal"}]}
