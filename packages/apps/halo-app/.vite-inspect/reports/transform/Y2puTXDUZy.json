{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/core.js","transforms":[{"name":"vite:load-fallback","result":";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory();\n\t}\n}(this, function () {\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\t    /*\n\t     * Local polyfil of Object.create\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {};\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }())\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var i = 0; i < thatSigBytes; i += 4) {\n\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            var r = (function (m_w) {\n\t                var m_w = m_w;\n\t                var m_z = 0x3ade68b1;\n\t                var mask = 0xffffffff;\n\n\t                return function () {\n\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\n\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\n\t                    var result = ((m_z << 0x10) + m_w) & mask;\n\t                    result /= 0x100000000;\n\t                    result += 0.5;\n\t                    return result * (Math.random() > .5 ? 1 : -1);\n\t                }\n\t            });\n\n\t            for (var i = 0, rcache; i < nBytes; i += 4) {\n\t                var _r = r((rcache || Math.random()) * 0x100000000);\n\n\t                rcache = _r() * 0x3ade67b7;\n\t                words.push((_r() * 0x100000000) | 0);\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                var processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));","start":1670465468883,"end":1670465469035},{"name":"vite:react-babel","result":";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory();\n\t}\n}(this, function () {\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\t    /*\n\t     * Local polyfil of Object.create\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {};\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }())\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var i = 0; i < thatSigBytes; i += 4) {\n\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            var r = (function (m_w) {\n\t                var m_w = m_w;\n\t                var m_z = 0x3ade68b1;\n\t                var mask = 0xffffffff;\n\n\t                return function () {\n\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\n\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\n\t                    var result = ((m_z << 0x10) + m_w) & mask;\n\t                    result /= 0x100000000;\n\t                    result += 0.5;\n\t                    return result * (Math.random() > .5 ? 1 : -1);\n\t                }\n\t            });\n\n\t            for (var i = 0, rcache; i < nBytes; i += 4) {\n\t                var _r = r((rcache || Math.random()) * 0x100000000);\n\n\t                rcache = _r() * 0x3ade67b7;\n\t                words.push((_r() * 0x100000000) | 0);\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                var processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));","start":1670465469035,"end":1670465469035,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as coreModule, exports as core } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/core.js?commonjs-module\"\n\nvar hasRequiredCore;\n\nfunction requireCore () {\n\tif (hasRequiredCore) return core;\n\thasRequiredCore = 1;\n\t(function (module, exports) {\n\t\t;(function (root, factory) {\n\t\t\tif ('object' === \"object\") {\n\t\t\t\t// CommonJS\n\t\t\t\tmodule.exports = exports = factory();\n\t\t\t}\n\t\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t\t// AMD\n\t\t\t\tundefined([], factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Global (browser)\n\t\t\t\troot.CryptoJS = factory();\n\t\t\t}\n\t\t}(commonjsHelpers.commonjsGlobal, function () {\n\n\t\t\t/**\n\t\t\t * CryptoJS core components.\n\t\t\t */\n\t\t\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\t\t\t    /*\n\t\t\t     * Local polyfil of Object.create\n\t\t\t     */\n\t\t\t    var create = Object.create || (function () {\n\t\t\t        function F() {};\n\n\t\t\t        return function (obj) {\n\t\t\t            var subtype;\n\n\t\t\t            F.prototype = obj;\n\n\t\t\t            subtype = new F();\n\n\t\t\t            F.prototype = null;\n\n\t\t\t            return subtype;\n\t\t\t        };\n\t\t\t    }())\n\n\t\t\t    /**\n\t\t\t     * CryptoJS namespace.\n\t\t\t     */\n\t\t\t    var C = {};\n\n\t\t\t    /**\n\t\t\t     * Library namespace.\n\t\t\t     */\n\t\t\t    var C_lib = C.lib = {};\n\n\t\t\t    /**\n\t\t\t     * Base object for prototypal inheritance.\n\t\t\t     */\n\t\t\t    var Base = C_lib.Base = (function () {\n\n\n\t\t\t        return {\n\t\t\t            /**\n\t\t\t             * Creates a new object that inherits from this object.\n\t\t\t             *\n\t\t\t             * @param {Object} overrides Properties to copy into the new object.\n\t\t\t             *\n\t\t\t             * @return {Object} The new object.\n\t\t\t             *\n\t\t\t             * @static\n\t\t\t             *\n\t\t\t             * @example\n\t\t\t             *\n\t\t\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t\t\t             *         field: 'value',\n\t\t\t             *\n\t\t\t             *         method: function () {\n\t\t\t             *         }\n\t\t\t             *     });\n\t\t\t             */\n\t\t\t            extend: function (overrides) {\n\t\t\t                // Spawn\n\t\t\t                var subtype = create(this);\n\n\t\t\t                // Augment\n\t\t\t                if (overrides) {\n\t\t\t                    subtype.mixIn(overrides);\n\t\t\t                }\n\n\t\t\t                // Create default initializer\n\t\t\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t\t\t                    subtype.init = function () {\n\t\t\t                        subtype.$super.init.apply(this, arguments);\n\t\t\t                    };\n\t\t\t                }\n\n\t\t\t                // Initializer's prototype is the subtype object\n\t\t\t                subtype.init.prototype = subtype;\n\n\t\t\t                // Reference supertype\n\t\t\t                subtype.$super = this;\n\n\t\t\t                return subtype;\n\t\t\t            },\n\n\t\t\t            /**\n\t\t\t             * Extends this object and runs the init method.\n\t\t\t             * Arguments to create() will be passed to init().\n\t\t\t             *\n\t\t\t             * @return {Object} The new object.\n\t\t\t             *\n\t\t\t             * @static\n\t\t\t             *\n\t\t\t             * @example\n\t\t\t             *\n\t\t\t             *     var instance = MyType.create();\n\t\t\t             */\n\t\t\t            create: function () {\n\t\t\t                var instance = this.extend();\n\t\t\t                instance.init.apply(instance, arguments);\n\n\t\t\t                return instance;\n\t\t\t            },\n\n\t\t\t            /**\n\t\t\t             * Initializes a newly created object.\n\t\t\t             * Override this method to add some logic when your objects are created.\n\t\t\t             *\n\t\t\t             * @example\n\t\t\t             *\n\t\t\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t\t\t             *         init: function () {\n\t\t\t             *             // ...\n\t\t\t             *         }\n\t\t\t             *     });\n\t\t\t             */\n\t\t\t            init: function () {\n\t\t\t            },\n\n\t\t\t            /**\n\t\t\t             * Copies properties into this object.\n\t\t\t             *\n\t\t\t             * @param {Object} properties The properties to mix in.\n\t\t\t             *\n\t\t\t             * @example\n\t\t\t             *\n\t\t\t             *     MyType.mixIn({\n\t\t\t             *         field: 'value'\n\t\t\t             *     });\n\t\t\t             */\n\t\t\t            mixIn: function (properties) {\n\t\t\t                for (var propertyName in properties) {\n\t\t\t                    if (properties.hasOwnProperty(propertyName)) {\n\t\t\t                        this[propertyName] = properties[propertyName];\n\t\t\t                    }\n\t\t\t                }\n\n\t\t\t                // IE won't copy toString using the loop above\n\t\t\t                if (properties.hasOwnProperty('toString')) {\n\t\t\t                    this.toString = properties.toString;\n\t\t\t                }\n\t\t\t            },\n\n\t\t\t            /**\n\t\t\t             * Creates a copy of this object.\n\t\t\t             *\n\t\t\t             * @return {Object} The clone.\n\t\t\t             *\n\t\t\t             * @example\n\t\t\t             *\n\t\t\t             *     var clone = instance.clone();\n\t\t\t             */\n\t\t\t            clone: function () {\n\t\t\t                return this.init.prototype.extend(this);\n\t\t\t            }\n\t\t\t        };\n\t\t\t    }());\n\n\t\t\t    /**\n\t\t\t     * An array of 32-bit words.\n\t\t\t     *\n\t\t\t     * @property {Array} words The array of 32-bit words.\n\t\t\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t\t\t     */\n\t\t\t    var WordArray = C_lib.WordArray = Base.extend({\n\t\t\t        /**\n\t\t\t         * Initializes a newly created word array.\n\t\t\t         *\n\t\t\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t\t\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t\t\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t\t\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t\t\t         */\n\t\t\t        init: function (words, sigBytes) {\n\t\t\t            words = this.words = words || [];\n\n\t\t\t            if (sigBytes != undefined) {\n\t\t\t                this.sigBytes = sigBytes;\n\t\t\t            } else {\n\t\t\t                this.sigBytes = words.length * 4;\n\t\t\t            }\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Converts this word array to a string.\n\t\t\t         *\n\t\t\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t\t\t         *\n\t\t\t         * @return {string} The stringified word array.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var string = wordArray + '';\n\t\t\t         *     var string = wordArray.toString();\n\t\t\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t\t\t         */\n\t\t\t        toString: function (encoder) {\n\t\t\t            return (encoder || Hex).stringify(this);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Concatenates a word array to this word array.\n\t\t\t         *\n\t\t\t         * @param {WordArray} wordArray The word array to append.\n\t\t\t         *\n\t\t\t         * @return {WordArray} This word array.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     wordArray1.concat(wordArray2);\n\t\t\t         */\n\t\t\t        concat: function (wordArray) {\n\t\t\t            // Shortcuts\n\t\t\t            var thisWords = this.words;\n\t\t\t            var thatWords = wordArray.words;\n\t\t\t            var thisSigBytes = this.sigBytes;\n\t\t\t            var thatSigBytes = wordArray.sigBytes;\n\n\t\t\t            // Clamp excess bits\n\t\t\t            this.clamp();\n\n\t\t\t            // Concat\n\t\t\t            if (thisSigBytes % 4) {\n\t\t\t                // Copy one byte at a time\n\t\t\t                for (var i = 0; i < thatSigBytes; i++) {\n\t\t\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t\t\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t\t\t                }\n\t\t\t            } else {\n\t\t\t                // Copy one word at a time\n\t\t\t                for (var i = 0; i < thatSigBytes; i += 4) {\n\t\t\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n\t\t\t                }\n\t\t\t            }\n\t\t\t            this.sigBytes += thatSigBytes;\n\n\t\t\t            // Chainable\n\t\t\t            return this;\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Removes insignificant bits.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     wordArray.clamp();\n\t\t\t         */\n\t\t\t        clamp: function () {\n\t\t\t            // Shortcuts\n\t\t\t            var words = this.words;\n\t\t\t            var sigBytes = this.sigBytes;\n\n\t\t\t            // Clamp\n\t\t\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t\t\t            words.length = Math.ceil(sigBytes / 4);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Creates a copy of this word array.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The clone.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var clone = wordArray.clone();\n\t\t\t         */\n\t\t\t        clone: function () {\n\t\t\t            var clone = Base.clone.call(this);\n\t\t\t            clone.words = this.words.slice(0);\n\n\t\t\t            return clone;\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Creates a word array filled with random bytes.\n\t\t\t         *\n\t\t\t         * @param {number} nBytes The number of random bytes to generate.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The random word array.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t\t\t         */\n\t\t\t        random: function (nBytes) {\n\t\t\t            var words = [];\n\n\t\t\t            var r = (function (m_w) {\n\t\t\t                var m_w = m_w;\n\t\t\t                var m_z = 0x3ade68b1;\n\t\t\t                var mask = 0xffffffff;\n\n\t\t\t                return function () {\n\t\t\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\n\t\t\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\n\t\t\t                    var result = ((m_z << 0x10) + m_w) & mask;\n\t\t\t                    result /= 0x100000000;\n\t\t\t                    result += 0.5;\n\t\t\t                    return result * (Math.random() > .5 ? 1 : -1);\n\t\t\t                }\n\t\t\t            });\n\n\t\t\t            for (var i = 0, rcache; i < nBytes; i += 4) {\n\t\t\t                var _r = r((rcache || Math.random()) * 0x100000000);\n\n\t\t\t                rcache = _r() * 0x3ade67b7;\n\t\t\t                words.push((_r() * 0x100000000) | 0);\n\t\t\t            }\n\n\t\t\t            return new WordArray.init(words, nBytes);\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Encoder namespace.\n\t\t\t     */\n\t\t\t    var C_enc = C.enc = {};\n\n\t\t\t    /**\n\t\t\t     * Hex encoding strategy.\n\t\t\t     */\n\t\t\t    var Hex = C_enc.Hex = {\n\t\t\t        /**\n\t\t\t         * Converts a word array to a hex string.\n\t\t\t         *\n\t\t\t         * @param {WordArray} wordArray The word array.\n\t\t\t         *\n\t\t\t         * @return {string} The hex string.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t\t\t         */\n\t\t\t        stringify: function (wordArray) {\n\t\t\t            // Shortcuts\n\t\t\t            var words = wordArray.words;\n\t\t\t            var sigBytes = wordArray.sigBytes;\n\n\t\t\t            // Convert\n\t\t\t            var hexChars = [];\n\t\t\t            for (var i = 0; i < sigBytes; i++) {\n\t\t\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t\t\t                hexChars.push((bite >>> 4).toString(16));\n\t\t\t                hexChars.push((bite & 0x0f).toString(16));\n\t\t\t            }\n\n\t\t\t            return hexChars.join('');\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Converts a hex string to a word array.\n\t\t\t         *\n\t\t\t         * @param {string} hexStr The hex string.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The word array.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t\t\t         */\n\t\t\t        parse: function (hexStr) {\n\t\t\t            // Shortcut\n\t\t\t            var hexStrLength = hexStr.length;\n\n\t\t\t            // Convert\n\t\t\t            var words = [];\n\t\t\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t\t\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t\t\t            }\n\n\t\t\t            return new WordArray.init(words, hexStrLength / 2);\n\t\t\t        }\n\t\t\t    };\n\n\t\t\t    /**\n\t\t\t     * Latin1 encoding strategy.\n\t\t\t     */\n\t\t\t    var Latin1 = C_enc.Latin1 = {\n\t\t\t        /**\n\t\t\t         * Converts a word array to a Latin1 string.\n\t\t\t         *\n\t\t\t         * @param {WordArray} wordArray The word array.\n\t\t\t         *\n\t\t\t         * @return {string} The Latin1 string.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t\t\t         */\n\t\t\t        stringify: function (wordArray) {\n\t\t\t            // Shortcuts\n\t\t\t            var words = wordArray.words;\n\t\t\t            var sigBytes = wordArray.sigBytes;\n\n\t\t\t            // Convert\n\t\t\t            var latin1Chars = [];\n\t\t\t            for (var i = 0; i < sigBytes; i++) {\n\t\t\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t\t\t                latin1Chars.push(String.fromCharCode(bite));\n\t\t\t            }\n\n\t\t\t            return latin1Chars.join('');\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Converts a Latin1 string to a word array.\n\t\t\t         *\n\t\t\t         * @param {string} latin1Str The Latin1 string.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The word array.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t\t\t         */\n\t\t\t        parse: function (latin1Str) {\n\t\t\t            // Shortcut\n\t\t\t            var latin1StrLength = latin1Str.length;\n\n\t\t\t            // Convert\n\t\t\t            var words = [];\n\t\t\t            for (var i = 0; i < latin1StrLength; i++) {\n\t\t\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t\t\t            }\n\n\t\t\t            return new WordArray.init(words, latin1StrLength);\n\t\t\t        }\n\t\t\t    };\n\n\t\t\t    /**\n\t\t\t     * UTF-8 encoding strategy.\n\t\t\t     */\n\t\t\t    var Utf8 = C_enc.Utf8 = {\n\t\t\t        /**\n\t\t\t         * Converts a word array to a UTF-8 string.\n\t\t\t         *\n\t\t\t         * @param {WordArray} wordArray The word array.\n\t\t\t         *\n\t\t\t         * @return {string} The UTF-8 string.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t\t\t         */\n\t\t\t        stringify: function (wordArray) {\n\t\t\t            try {\n\t\t\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t\t\t            } catch (e) {\n\t\t\t                throw new Error('Malformed UTF-8 data');\n\t\t\t            }\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Converts a UTF-8 string to a word array.\n\t\t\t         *\n\t\t\t         * @param {string} utf8Str The UTF-8 string.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The word array.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t\t\t         */\n\t\t\t        parse: function (utf8Str) {\n\t\t\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t\t\t        }\n\t\t\t    };\n\n\t\t\t    /**\n\t\t\t     * Abstract buffered block algorithm template.\n\t\t\t     *\n\t\t\t     * The property blockSize must be implemented in a concrete subtype.\n\t\t\t     *\n\t\t\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t\t\t     */\n\t\t\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t\t\t        /**\n\t\t\t         * Resets this block algorithm's data buffer to its initial state.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     bufferedBlockAlgorithm.reset();\n\t\t\t         */\n\t\t\t        reset: function () {\n\t\t\t            // Initial values\n\t\t\t            this._data = new WordArray.init();\n\t\t\t            this._nDataBytes = 0;\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Adds new data to this block algorithm's buffer.\n\t\t\t         *\n\t\t\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     bufferedBlockAlgorithm._append('data');\n\t\t\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t\t\t         */\n\t\t\t        _append: function (data) {\n\t\t\t            // Convert string to WordArray, else assume WordArray already\n\t\t\t            if (typeof data == 'string') {\n\t\t\t                data = Utf8.parse(data);\n\t\t\t            }\n\n\t\t\t            // Append\n\t\t\t            this._data.concat(data);\n\t\t\t            this._nDataBytes += data.sigBytes;\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Processes available data blocks.\n\t\t\t         *\n\t\t\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t\t\t         *\n\t\t\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The processed data.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t\t\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t\t\t         */\n\t\t\t        _process: function (doFlush) {\n\t\t\t            // Shortcuts\n\t\t\t            var data = this._data;\n\t\t\t            var dataWords = data.words;\n\t\t\t            var dataSigBytes = data.sigBytes;\n\t\t\t            var blockSize = this.blockSize;\n\t\t\t            var blockSizeBytes = blockSize * 4;\n\n\t\t\t            // Count blocks ready\n\t\t\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t\t\t            if (doFlush) {\n\t\t\t                // Round up to include partial blocks\n\t\t\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t\t\t            } else {\n\t\t\t                // Round down to include only full blocks,\n\t\t\t                // less the number of blocks that must remain in the buffer\n\t\t\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t\t\t            }\n\n\t\t\t            // Count words ready\n\t\t\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t\t\t            // Count bytes ready\n\t\t\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t\t\t            // Process blocks\n\t\t\t            if (nWordsReady) {\n\t\t\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t\t\t                    // Perform concrete-algorithm logic\n\t\t\t                    this._doProcessBlock(dataWords, offset);\n\t\t\t                }\n\n\t\t\t                // Remove processed words\n\t\t\t                var processedWords = dataWords.splice(0, nWordsReady);\n\t\t\t                data.sigBytes -= nBytesReady;\n\t\t\t            }\n\n\t\t\t            // Return processed words\n\t\t\t            return new WordArray.init(processedWords, nBytesReady);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Creates a copy of this object.\n\t\t\t         *\n\t\t\t         * @return {Object} The clone.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t\t\t         */\n\t\t\t        clone: function () {\n\t\t\t            var clone = Base.clone.call(this);\n\t\t\t            clone._data = this._data.clone();\n\n\t\t\t            return clone;\n\t\t\t        },\n\n\t\t\t        _minBufferSize: 0\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Abstract hasher template.\n\t\t\t     *\n\t\t\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t\t\t     */\n\t\t\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t\t\t        /**\n\t\t\t         * Configuration options.\n\t\t\t         */\n\t\t\t        cfg: Base.extend(),\n\n\t\t\t        /**\n\t\t\t         * Initializes a newly created hasher.\n\t\t\t         *\n\t\t\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t\t\t         */\n\t\t\t        init: function (cfg) {\n\t\t\t            // Apply config defaults\n\t\t\t            this.cfg = this.cfg.extend(cfg);\n\n\t\t\t            // Set initial values\n\t\t\t            this.reset();\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Resets this hasher to its initial state.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     hasher.reset();\n\t\t\t         */\n\t\t\t        reset: function () {\n\t\t\t            // Reset data buffer\n\t\t\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t\t\t            // Perform concrete-hasher logic\n\t\t\t            this._doReset();\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Updates this hasher with a message.\n\t\t\t         *\n\t\t\t         * @param {WordArray|string} messageUpdate The message to append.\n\t\t\t         *\n\t\t\t         * @return {Hasher} This hasher.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     hasher.update('message');\n\t\t\t         *     hasher.update(wordArray);\n\t\t\t         */\n\t\t\t        update: function (messageUpdate) {\n\t\t\t            // Append\n\t\t\t            this._append(messageUpdate);\n\n\t\t\t            // Update the hash\n\t\t\t            this._process();\n\n\t\t\t            // Chainable\n\t\t\t            return this;\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Finalizes the hash computation.\n\t\t\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t\t\t         *\n\t\t\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The hash.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var hash = hasher.finalize();\n\t\t\t         *     var hash = hasher.finalize('message');\n\t\t\t         *     var hash = hasher.finalize(wordArray);\n\t\t\t         */\n\t\t\t        finalize: function (messageUpdate) {\n\t\t\t            // Final message update\n\t\t\t            if (messageUpdate) {\n\t\t\t                this._append(messageUpdate);\n\t\t\t            }\n\n\t\t\t            // Perform concrete-hasher logic\n\t\t\t            var hash = this._doFinalize();\n\n\t\t\t            return hash;\n\t\t\t        },\n\n\t\t\t        blockSize: 512/32,\n\n\t\t\t        /**\n\t\t\t         * Creates a shortcut function to a hasher's object interface.\n\t\t\t         *\n\t\t\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t\t\t         *\n\t\t\t         * @return {Function} The shortcut function.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t\t\t         */\n\t\t\t        _createHelper: function (hasher) {\n\t\t\t            return function (message, cfg) {\n\t\t\t                return new hasher.init(cfg).finalize(message);\n\t\t\t            };\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Creates a shortcut function to the HMAC's object interface.\n\t\t\t         *\n\t\t\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t\t\t         *\n\t\t\t         * @return {Function} The shortcut function.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t\t\t         */\n\t\t\t        _createHmacHelper: function (hasher) {\n\t\t\t            return function (message, key) {\n\t\t\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t\t\t            };\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Algorithm namespace.\n\t\t\t     */\n\t\t\t    var C_algo = C.algo = {};\n\n\t\t\t    return C;\n\t\t\t}(Math));\n\n\n\t\t\treturn CryptoJS;\n\n\t\t}));\n} (coreModule, core));\n\treturn core;\n}\n\nexport { requireCore as __require };","start":1670465469035,"end":1670465469038,"order":"normal"},{"name":"polyfill-node","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as coreModule, exports as core } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/core.js?commonjs-module\"\n\nvar hasRequiredCore;\n\nfunction requireCore () {\n\tif (hasRequiredCore) return core;\n\thasRequiredCore = 1;\n\t(function (module, exports) {\n\t\t;(function (root, factory) {\n\t\t\tif ('object' === \"object\") {\n\t\t\t\t// CommonJS\n\t\t\t\tmodule.exports = exports = factory();\n\t\t\t}\n\t\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t\t// AMD\n\t\t\t\tundefined([], factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Global (browser)\n\t\t\t\troot.CryptoJS = factory();\n\t\t\t}\n\t\t}(commonjsHelpers.commonjsGlobal, function () {\n\n\t\t\t/**\n\t\t\t * CryptoJS core components.\n\t\t\t */\n\t\t\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\t\t\t    /*\n\t\t\t     * Local polyfil of Object.create\n\t\t\t     */\n\t\t\t    var create = Object.create || (function () {\n\t\t\t        function F() {};\n\n\t\t\t        return function (obj) {\n\t\t\t            var subtype;\n\n\t\t\t            F.prototype = obj;\n\n\t\t\t            subtype = new F();\n\n\t\t\t            F.prototype = null;\n\n\t\t\t            return subtype;\n\t\t\t        };\n\t\t\t    }())\n\n\t\t\t    /**\n\t\t\t     * CryptoJS namespace.\n\t\t\t     */\n\t\t\t    var C = {};\n\n\t\t\t    /**\n\t\t\t     * Library namespace.\n\t\t\t     */\n\t\t\t    var C_lib = C.lib = {};\n\n\t\t\t    /**\n\t\t\t     * Base object for prototypal inheritance.\n\t\t\t     */\n\t\t\t    var Base = C_lib.Base = (function () {\n\n\n\t\t\t        return {\n\t\t\t            /**\n\t\t\t             * Creates a new object that inherits from this object.\n\t\t\t             *\n\t\t\t             * @param {Object} overrides Properties to copy into the new object.\n\t\t\t             *\n\t\t\t             * @return {Object} The new object.\n\t\t\t             *\n\t\t\t             * @static\n\t\t\t             *\n\t\t\t             * @example\n\t\t\t             *\n\t\t\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t\t\t             *         field: 'value',\n\t\t\t             *\n\t\t\t             *         method: function () {\n\t\t\t             *         }\n\t\t\t             *     });\n\t\t\t             */\n\t\t\t            extend: function (overrides) {\n\t\t\t                // Spawn\n\t\t\t                var subtype = create(this);\n\n\t\t\t                // Augment\n\t\t\t                if (overrides) {\n\t\t\t                    subtype.mixIn(overrides);\n\t\t\t                }\n\n\t\t\t                // Create default initializer\n\t\t\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t\t\t                    subtype.init = function () {\n\t\t\t                        subtype.$super.init.apply(this, arguments);\n\t\t\t                    };\n\t\t\t                }\n\n\t\t\t                // Initializer's prototype is the subtype object\n\t\t\t                subtype.init.prototype = subtype;\n\n\t\t\t                // Reference supertype\n\t\t\t                subtype.$super = this;\n\n\t\t\t                return subtype;\n\t\t\t            },\n\n\t\t\t            /**\n\t\t\t             * Extends this object and runs the init method.\n\t\t\t             * Arguments to create() will be passed to init().\n\t\t\t             *\n\t\t\t             * @return {Object} The new object.\n\t\t\t             *\n\t\t\t             * @static\n\t\t\t             *\n\t\t\t             * @example\n\t\t\t             *\n\t\t\t             *     var instance = MyType.create();\n\t\t\t             */\n\t\t\t            create: function () {\n\t\t\t                var instance = this.extend();\n\t\t\t                instance.init.apply(instance, arguments);\n\n\t\t\t                return instance;\n\t\t\t            },\n\n\t\t\t            /**\n\t\t\t             * Initializes a newly created object.\n\t\t\t             * Override this method to add some logic when your objects are created.\n\t\t\t             *\n\t\t\t             * @example\n\t\t\t             *\n\t\t\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t\t\t             *         init: function () {\n\t\t\t             *             // ...\n\t\t\t             *         }\n\t\t\t             *     });\n\t\t\t             */\n\t\t\t            init: function () {\n\t\t\t            },\n\n\t\t\t            /**\n\t\t\t             * Copies properties into this object.\n\t\t\t             *\n\t\t\t             * @param {Object} properties The properties to mix in.\n\t\t\t             *\n\t\t\t             * @example\n\t\t\t             *\n\t\t\t             *     MyType.mixIn({\n\t\t\t             *         field: 'value'\n\t\t\t             *     });\n\t\t\t             */\n\t\t\t            mixIn: function (properties) {\n\t\t\t                for (var propertyName in properties) {\n\t\t\t                    if (properties.hasOwnProperty(propertyName)) {\n\t\t\t                        this[propertyName] = properties[propertyName];\n\t\t\t                    }\n\t\t\t                }\n\n\t\t\t                // IE won't copy toString using the loop above\n\t\t\t                if (properties.hasOwnProperty('toString')) {\n\t\t\t                    this.toString = properties.toString;\n\t\t\t                }\n\t\t\t            },\n\n\t\t\t            /**\n\t\t\t             * Creates a copy of this object.\n\t\t\t             *\n\t\t\t             * @return {Object} The clone.\n\t\t\t             *\n\t\t\t             * @example\n\t\t\t             *\n\t\t\t             *     var clone = instance.clone();\n\t\t\t             */\n\t\t\t            clone: function () {\n\t\t\t                return this.init.prototype.extend(this);\n\t\t\t            }\n\t\t\t        };\n\t\t\t    }());\n\n\t\t\t    /**\n\t\t\t     * An array of 32-bit words.\n\t\t\t     *\n\t\t\t     * @property {Array} words The array of 32-bit words.\n\t\t\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t\t\t     */\n\t\t\t    var WordArray = C_lib.WordArray = Base.extend({\n\t\t\t        /**\n\t\t\t         * Initializes a newly created word array.\n\t\t\t         *\n\t\t\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t\t\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t\t\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t\t\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t\t\t         */\n\t\t\t        init: function (words, sigBytes) {\n\t\t\t            words = this.words = words || [];\n\n\t\t\t            if (sigBytes != undefined) {\n\t\t\t                this.sigBytes = sigBytes;\n\t\t\t            } else {\n\t\t\t                this.sigBytes = words.length * 4;\n\t\t\t            }\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Converts this word array to a string.\n\t\t\t         *\n\t\t\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t\t\t         *\n\t\t\t         * @return {string} The stringified word array.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var string = wordArray + '';\n\t\t\t         *     var string = wordArray.toString();\n\t\t\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t\t\t         */\n\t\t\t        toString: function (encoder) {\n\t\t\t            return (encoder || Hex).stringify(this);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Concatenates a word array to this word array.\n\t\t\t         *\n\t\t\t         * @param {WordArray} wordArray The word array to append.\n\t\t\t         *\n\t\t\t         * @return {WordArray} This word array.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     wordArray1.concat(wordArray2);\n\t\t\t         */\n\t\t\t        concat: function (wordArray) {\n\t\t\t            // Shortcuts\n\t\t\t            var thisWords = this.words;\n\t\t\t            var thatWords = wordArray.words;\n\t\t\t            var thisSigBytes = this.sigBytes;\n\t\t\t            var thatSigBytes = wordArray.sigBytes;\n\n\t\t\t            // Clamp excess bits\n\t\t\t            this.clamp();\n\n\t\t\t            // Concat\n\t\t\t            if (thisSigBytes % 4) {\n\t\t\t                // Copy one byte at a time\n\t\t\t                for (var i = 0; i < thatSigBytes; i++) {\n\t\t\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t\t\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t\t\t                }\n\t\t\t            } else {\n\t\t\t                // Copy one word at a time\n\t\t\t                for (var i = 0; i < thatSigBytes; i += 4) {\n\t\t\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n\t\t\t                }\n\t\t\t            }\n\t\t\t            this.sigBytes += thatSigBytes;\n\n\t\t\t            // Chainable\n\t\t\t            return this;\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Removes insignificant bits.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     wordArray.clamp();\n\t\t\t         */\n\t\t\t        clamp: function () {\n\t\t\t            // Shortcuts\n\t\t\t            var words = this.words;\n\t\t\t            var sigBytes = this.sigBytes;\n\n\t\t\t            // Clamp\n\t\t\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t\t\t            words.length = Math.ceil(sigBytes / 4);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Creates a copy of this word array.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The clone.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var clone = wordArray.clone();\n\t\t\t         */\n\t\t\t        clone: function () {\n\t\t\t            var clone = Base.clone.call(this);\n\t\t\t            clone.words = this.words.slice(0);\n\n\t\t\t            return clone;\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Creates a word array filled with random bytes.\n\t\t\t         *\n\t\t\t         * @param {number} nBytes The number of random bytes to generate.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The random word array.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t\t\t         */\n\t\t\t        random: function (nBytes) {\n\t\t\t            var words = [];\n\n\t\t\t            var r = (function (m_w) {\n\t\t\t                var m_w = m_w;\n\t\t\t                var m_z = 0x3ade68b1;\n\t\t\t                var mask = 0xffffffff;\n\n\t\t\t                return function () {\n\t\t\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\n\t\t\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\n\t\t\t                    var result = ((m_z << 0x10) + m_w) & mask;\n\t\t\t                    result /= 0x100000000;\n\t\t\t                    result += 0.5;\n\t\t\t                    return result * (Math.random() > .5 ? 1 : -1);\n\t\t\t                }\n\t\t\t            });\n\n\t\t\t            for (var i = 0, rcache; i < nBytes; i += 4) {\n\t\t\t                var _r = r((rcache || Math.random()) * 0x100000000);\n\n\t\t\t                rcache = _r() * 0x3ade67b7;\n\t\t\t                words.push((_r() * 0x100000000) | 0);\n\t\t\t            }\n\n\t\t\t            return new WordArray.init(words, nBytes);\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Encoder namespace.\n\t\t\t     */\n\t\t\t    var C_enc = C.enc = {};\n\n\t\t\t    /**\n\t\t\t     * Hex encoding strategy.\n\t\t\t     */\n\t\t\t    var Hex = C_enc.Hex = {\n\t\t\t        /**\n\t\t\t         * Converts a word array to a hex string.\n\t\t\t         *\n\t\t\t         * @param {WordArray} wordArray The word array.\n\t\t\t         *\n\t\t\t         * @return {string} The hex string.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t\t\t         */\n\t\t\t        stringify: function (wordArray) {\n\t\t\t            // Shortcuts\n\t\t\t            var words = wordArray.words;\n\t\t\t            var sigBytes = wordArray.sigBytes;\n\n\t\t\t            // Convert\n\t\t\t            var hexChars = [];\n\t\t\t            for (var i = 0; i < sigBytes; i++) {\n\t\t\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t\t\t                hexChars.push((bite >>> 4).toString(16));\n\t\t\t                hexChars.push((bite & 0x0f).toString(16));\n\t\t\t            }\n\n\t\t\t            return hexChars.join('');\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Converts a hex string to a word array.\n\t\t\t         *\n\t\t\t         * @param {string} hexStr The hex string.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The word array.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t\t\t         */\n\t\t\t        parse: function (hexStr) {\n\t\t\t            // Shortcut\n\t\t\t            var hexStrLength = hexStr.length;\n\n\t\t\t            // Convert\n\t\t\t            var words = [];\n\t\t\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t\t\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t\t\t            }\n\n\t\t\t            return new WordArray.init(words, hexStrLength / 2);\n\t\t\t        }\n\t\t\t    };\n\n\t\t\t    /**\n\t\t\t     * Latin1 encoding strategy.\n\t\t\t     */\n\t\t\t    var Latin1 = C_enc.Latin1 = {\n\t\t\t        /**\n\t\t\t         * Converts a word array to a Latin1 string.\n\t\t\t         *\n\t\t\t         * @param {WordArray} wordArray The word array.\n\t\t\t         *\n\t\t\t         * @return {string} The Latin1 string.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t\t\t         */\n\t\t\t        stringify: function (wordArray) {\n\t\t\t            // Shortcuts\n\t\t\t            var words = wordArray.words;\n\t\t\t            var sigBytes = wordArray.sigBytes;\n\n\t\t\t            // Convert\n\t\t\t            var latin1Chars = [];\n\t\t\t            for (var i = 0; i < sigBytes; i++) {\n\t\t\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t\t\t                latin1Chars.push(String.fromCharCode(bite));\n\t\t\t            }\n\n\t\t\t            return latin1Chars.join('');\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Converts a Latin1 string to a word array.\n\t\t\t         *\n\t\t\t         * @param {string} latin1Str The Latin1 string.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The word array.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t\t\t         */\n\t\t\t        parse: function (latin1Str) {\n\t\t\t            // Shortcut\n\t\t\t            var latin1StrLength = latin1Str.length;\n\n\t\t\t            // Convert\n\t\t\t            var words = [];\n\t\t\t            for (var i = 0; i < latin1StrLength; i++) {\n\t\t\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t\t\t            }\n\n\t\t\t            return new WordArray.init(words, latin1StrLength);\n\t\t\t        }\n\t\t\t    };\n\n\t\t\t    /**\n\t\t\t     * UTF-8 encoding strategy.\n\t\t\t     */\n\t\t\t    var Utf8 = C_enc.Utf8 = {\n\t\t\t        /**\n\t\t\t         * Converts a word array to a UTF-8 string.\n\t\t\t         *\n\t\t\t         * @param {WordArray} wordArray The word array.\n\t\t\t         *\n\t\t\t         * @return {string} The UTF-8 string.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t\t\t         */\n\t\t\t        stringify: function (wordArray) {\n\t\t\t            try {\n\t\t\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t\t\t            } catch (e) {\n\t\t\t                throw new Error('Malformed UTF-8 data');\n\t\t\t            }\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Converts a UTF-8 string to a word array.\n\t\t\t         *\n\t\t\t         * @param {string} utf8Str The UTF-8 string.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The word array.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t\t\t         */\n\t\t\t        parse: function (utf8Str) {\n\t\t\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t\t\t        }\n\t\t\t    };\n\n\t\t\t    /**\n\t\t\t     * Abstract buffered block algorithm template.\n\t\t\t     *\n\t\t\t     * The property blockSize must be implemented in a concrete subtype.\n\t\t\t     *\n\t\t\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t\t\t     */\n\t\t\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t\t\t        /**\n\t\t\t         * Resets this block algorithm's data buffer to its initial state.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     bufferedBlockAlgorithm.reset();\n\t\t\t         */\n\t\t\t        reset: function () {\n\t\t\t            // Initial values\n\t\t\t            this._data = new WordArray.init();\n\t\t\t            this._nDataBytes = 0;\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Adds new data to this block algorithm's buffer.\n\t\t\t         *\n\t\t\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     bufferedBlockAlgorithm._append('data');\n\t\t\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t\t\t         */\n\t\t\t        _append: function (data) {\n\t\t\t            // Convert string to WordArray, else assume WordArray already\n\t\t\t            if (typeof data == 'string') {\n\t\t\t                data = Utf8.parse(data);\n\t\t\t            }\n\n\t\t\t            // Append\n\t\t\t            this._data.concat(data);\n\t\t\t            this._nDataBytes += data.sigBytes;\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Processes available data blocks.\n\t\t\t         *\n\t\t\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t\t\t         *\n\t\t\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The processed data.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t\t\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t\t\t         */\n\t\t\t        _process: function (doFlush) {\n\t\t\t            // Shortcuts\n\t\t\t            var data = this._data;\n\t\t\t            var dataWords = data.words;\n\t\t\t            var dataSigBytes = data.sigBytes;\n\t\t\t            var blockSize = this.blockSize;\n\t\t\t            var blockSizeBytes = blockSize * 4;\n\n\t\t\t            // Count blocks ready\n\t\t\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t\t\t            if (doFlush) {\n\t\t\t                // Round up to include partial blocks\n\t\t\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t\t\t            } else {\n\t\t\t                // Round down to include only full blocks,\n\t\t\t                // less the number of blocks that must remain in the buffer\n\t\t\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t\t\t            }\n\n\t\t\t            // Count words ready\n\t\t\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t\t\t            // Count bytes ready\n\t\t\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t\t\t            // Process blocks\n\t\t\t            if (nWordsReady) {\n\t\t\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t\t\t                    // Perform concrete-algorithm logic\n\t\t\t                    this._doProcessBlock(dataWords, offset);\n\t\t\t                }\n\n\t\t\t                // Remove processed words\n\t\t\t                var processedWords = dataWords.splice(0, nWordsReady);\n\t\t\t                data.sigBytes -= nBytesReady;\n\t\t\t            }\n\n\t\t\t            // Return processed words\n\t\t\t            return new WordArray.init(processedWords, nBytesReady);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Creates a copy of this object.\n\t\t\t         *\n\t\t\t         * @return {Object} The clone.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t\t\t         */\n\t\t\t        clone: function () {\n\t\t\t            var clone = Base.clone.call(this);\n\t\t\t            clone._data = this._data.clone();\n\n\t\t\t            return clone;\n\t\t\t        },\n\n\t\t\t        _minBufferSize: 0\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Abstract hasher template.\n\t\t\t     *\n\t\t\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t\t\t     */\n\t\t\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t\t\t        /**\n\t\t\t         * Configuration options.\n\t\t\t         */\n\t\t\t        cfg: Base.extend(),\n\n\t\t\t        /**\n\t\t\t         * Initializes a newly created hasher.\n\t\t\t         *\n\t\t\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t\t\t         */\n\t\t\t        init: function (cfg) {\n\t\t\t            // Apply config defaults\n\t\t\t            this.cfg = this.cfg.extend(cfg);\n\n\t\t\t            // Set initial values\n\t\t\t            this.reset();\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Resets this hasher to its initial state.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     hasher.reset();\n\t\t\t         */\n\t\t\t        reset: function () {\n\t\t\t            // Reset data buffer\n\t\t\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t\t\t            // Perform concrete-hasher logic\n\t\t\t            this._doReset();\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Updates this hasher with a message.\n\t\t\t         *\n\t\t\t         * @param {WordArray|string} messageUpdate The message to append.\n\t\t\t         *\n\t\t\t         * @return {Hasher} This hasher.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     hasher.update('message');\n\t\t\t         *     hasher.update(wordArray);\n\t\t\t         */\n\t\t\t        update: function (messageUpdate) {\n\t\t\t            // Append\n\t\t\t            this._append(messageUpdate);\n\n\t\t\t            // Update the hash\n\t\t\t            this._process();\n\n\t\t\t            // Chainable\n\t\t\t            return this;\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Finalizes the hash computation.\n\t\t\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t\t\t         *\n\t\t\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The hash.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var hash = hasher.finalize();\n\t\t\t         *     var hash = hasher.finalize('message');\n\t\t\t         *     var hash = hasher.finalize(wordArray);\n\t\t\t         */\n\t\t\t        finalize: function (messageUpdate) {\n\t\t\t            // Final message update\n\t\t\t            if (messageUpdate) {\n\t\t\t                this._append(messageUpdate);\n\t\t\t            }\n\n\t\t\t            // Perform concrete-hasher logic\n\t\t\t            var hash = this._doFinalize();\n\n\t\t\t            return hash;\n\t\t\t        },\n\n\t\t\t        blockSize: 512/32,\n\n\t\t\t        /**\n\t\t\t         * Creates a shortcut function to a hasher's object interface.\n\t\t\t         *\n\t\t\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t\t\t         *\n\t\t\t         * @return {Function} The shortcut function.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t\t\t         */\n\t\t\t        _createHelper: function (hasher) {\n\t\t\t            return function (message, cfg) {\n\t\t\t                return new hasher.init(cfg).finalize(message);\n\t\t\t            };\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Creates a shortcut function to the HMAC's object interface.\n\t\t\t         *\n\t\t\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t\t\t         *\n\t\t\t         * @return {Function} The shortcut function.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t\t\t         */\n\t\t\t        _createHmacHelper: function (hasher) {\n\t\t\t            return function (message, key) {\n\t\t\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t\t\t            };\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Algorithm namespace.\n\t\t\t     */\n\t\t\t    var C_algo = C.algo = {};\n\n\t\t\t    return C;\n\t\t\t}(Math));\n\n\n\t\t\treturn CryptoJS;\n\n\t\t}));\n} (coreModule, core));\n\treturn core;\n}\n\nexport { requireCore as __require };","start":1670465469039,"end":1670465469056,"order":"normal"}]}
