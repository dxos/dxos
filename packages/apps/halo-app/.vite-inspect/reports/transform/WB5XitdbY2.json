{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_hash.js","transforms":[{"name":"vite:load-fallback","result":"/* eslint-disable camelcase */\nconst sha512 = require('sha512-universal')\nconst assert = require('nanoassert')\n\nif (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')\n\nconst crypto_hash_sha512_BYTES = 64\nconst crypto_hash_BYTES = crypto_hash_sha512_BYTES\n\nfunction crypto_hash_sha512 (out, m, n) {\n  assert(out.byteLength === crypto_hash_sha512_BYTES, \"out must be 'crypto_hash_sha512_BYTES' bytes long\")\n\n  sha512().update(m.subarray(0, n)).digest(out)\n  return 0\n}\n\nfunction crypto_hash (out, m, n) {\n  return crypto_hash_sha512(out, m, n)\n}\n\nmodule.exports = {\n  crypto_hash,\n  crypto_hash_sha512,\n  crypto_hash_sha512_BYTES,\n  crypto_hash_BYTES\n}\n","start":1670465470683,"end":1670465470847},{"name":"vite:react-babel","result":"/* eslint-disable camelcase */\nconst sha512 = require('sha512-universal')\nconst assert = require('nanoassert')\n\nif (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')\n\nconst crypto_hash_sha512_BYTES = 64\nconst crypto_hash_BYTES = crypto_hash_sha512_BYTES\n\nfunction crypto_hash_sha512 (out, m, n) {\n  assert(out.byteLength === crypto_hash_sha512_BYTES, \"out must be 'crypto_hash_sha512_BYTES' bytes long\")\n\n  sha512().update(m.subarray(0, n)).digest(out)\n  return 0\n}\n\nfunction crypto_hash (out, m, n) {\n  return crypto_hash_sha512(out, m, n)\n}\n\nmodule.exports = {\n  crypto_hash,\n  crypto_hash_sha512,\n  crypto_hash_sha512_BYTES,\n  crypto_hash_BYTES\n}\n","start":1670465470847,"end":1670465470847,"order":"pre"},{"name":"commonjs","result":"/* eslint-disable camelcase */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sha512-universal@1.2.1/node_modules/sha512-universal/index.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoassert@2.0.0/node_modules/nanoassert/index.js?commonjs-proxy\";\n\nconst sha512 = require$$0\nconst assert = require$$1\n\nif (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')\n\nconst crypto_hash_sha512_BYTES = 64\nconst crypto_hash_BYTES = crypto_hash_sha512_BYTES\n\nfunction crypto_hash_sha512 (out, m, n) {\n  assert(out.byteLength === crypto_hash_sha512_BYTES, \"out must be 'crypto_hash_sha512_BYTES' bytes long\")\n\n  sha512().update(m.subarray(0, n)).digest(out)\n  return 0\n}\n\nfunction crypto_hash (out, m, n) {\n  return crypto_hash_sha512(out, m, n)\n}\n\nvar crypto_hash_1 = {\n  crypto_hash,\n  crypto_hash_sha512,\n  crypto_hash_sha512_BYTES,\n  crypto_hash_BYTES\n}\n\nexport default crypto_hash_1;\nexport { crypto_hash_1 as __moduleExports };","start":1670465470847,"end":1670465471682,"order":"normal"}]}
