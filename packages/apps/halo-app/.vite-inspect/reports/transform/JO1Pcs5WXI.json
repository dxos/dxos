{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/tailwind-merge@1.8.0/node_modules/tailwind-merge/dist/lib/validators.mjs","transforms":[{"name":"vite:load-fallback","result":"var arbitraryValueRegex = /^\\[(.+)\\]$/;\nvar fractionRegex = /^\\d+\\/\\d+$/;\nvar stringLengths = /*#__PURE__*/new Set(['px', 'full', 'screen']);\nvar tshirtUnitRegex = /^(\\d+)?(xs|sm|md|lg|xl)$/;\nvar lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh)/; // Shadow always begins with x and y offset separated by underscore\n\nvar shadowRegex = /^-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\nfunction isLength(classPart) {\n  return !Number.isNaN(Number(classPart)) || stringLengths.has(classPart) || fractionRegex.test(classPart) || isArbitraryLength(classPart);\n}\nfunction isArbitraryLength(classPart) {\n  var _arbitraryValueRegex$;\n\n  var arbitraryValue = (_arbitraryValueRegex$ = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$[1];\n\n  if (arbitraryValue) {\n    return arbitraryValue.startsWith('length:') || lengthUnitRegex.test(arbitraryValue);\n  }\n\n  return false;\n}\nfunction isArbitrarySize(classPart) {\n  var _arbitraryValueRegex$2;\n\n  var arbitraryValue = (_arbitraryValueRegex$2 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$2[1];\n  return arbitraryValue ? arbitraryValue.startsWith('size:') : false;\n}\nfunction isArbitraryPosition(classPart) {\n  var _arbitraryValueRegex$3;\n\n  var arbitraryValue = (_arbitraryValueRegex$3 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$3[1];\n  return arbitraryValue ? arbitraryValue.startsWith('position:') : false;\n}\nfunction isArbitraryUrl(classPart) {\n  var _arbitraryValueRegex$4;\n\n  var arbitraryValue = (_arbitraryValueRegex$4 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$4[1];\n  return arbitraryValue ? arbitraryValue.startsWith('url(') || arbitraryValue.startsWith('url:') : false;\n}\nfunction isArbitraryNumber(classPart) {\n  var _arbitraryValueRegex$5;\n\n  var arbitraryValue = (_arbitraryValueRegex$5 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$5[1];\n  return arbitraryValue ? !Number.isNaN(Number(arbitraryValue)) || arbitraryValue.startsWith('number:') : false;\n}\n/**\r\n * @deprecated Will be removed in next major version. Use `isArbitraryNumber` instead.\r\n */\n\nvar isArbitraryWeight = isArbitraryNumber;\nfunction isInteger(classPart) {\n  var _arbitraryValueRegex$6;\n\n  var arbitraryValue = (_arbitraryValueRegex$6 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$6[1];\n\n  if (arbitraryValue) {\n    return Number.isInteger(Number(arbitraryValue));\n  }\n\n  return Number.isInteger(Number(classPart));\n}\nfunction isArbitraryValue(classPart) {\n  return arbitraryValueRegex.test(classPart);\n}\nfunction isAny() {\n  return true;\n}\nfunction isTshirtSize(classPart) {\n  return tshirtUnitRegex.test(classPart);\n}\nfunction isArbitraryShadow(classPart) {\n  var _arbitraryValueRegex$7;\n\n  var arbitraryValue = (_arbitraryValueRegex$7 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$7[1];\n\n  if (arbitraryValue) {\n    return shadowRegex.test(arbitraryValue);\n  }\n\n  return false;\n}\n\nexport { isAny, isArbitraryLength, isArbitraryNumber, isArbitraryPosition, isArbitraryShadow, isArbitrarySize, isArbitraryUrl, isArbitraryValue, isArbitraryWeight, isInteger, isLength, isTshirtSize };\n//# sourceMappingURL=validators.mjs.map\n","start":1670465468026,"end":1670465468127},{"name":"vite:react-babel","result":"var arbitraryValueRegex = /^\\[(.+)\\]$/;\nvar fractionRegex = /^\\d+\\/\\d+$/;\nvar stringLengths = /*#__PURE__*/new Set(['px', 'full', 'screen']);\nvar tshirtUnitRegex = /^(\\d+)?(xs|sm|md|lg|xl)$/;\nvar lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh)/; // Shadow always begins with x and y offset separated by underscore\n\nvar shadowRegex = /^-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\nfunction isLength(classPart) {\n  return !Number.isNaN(Number(classPart)) || stringLengths.has(classPart) || fractionRegex.test(classPart) || isArbitraryLength(classPart);\n}\nfunction isArbitraryLength(classPart) {\n  var _arbitraryValueRegex$;\n\n  var arbitraryValue = (_arbitraryValueRegex$ = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$[1];\n\n  if (arbitraryValue) {\n    return arbitraryValue.startsWith('length:') || lengthUnitRegex.test(arbitraryValue);\n  }\n\n  return false;\n}\nfunction isArbitrarySize(classPart) {\n  var _arbitraryValueRegex$2;\n\n  var arbitraryValue = (_arbitraryValueRegex$2 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$2[1];\n  return arbitraryValue ? arbitraryValue.startsWith('size:') : false;\n}\nfunction isArbitraryPosition(classPart) {\n  var _arbitraryValueRegex$3;\n\n  var arbitraryValue = (_arbitraryValueRegex$3 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$3[1];\n  return arbitraryValue ? arbitraryValue.startsWith('position:') : false;\n}\nfunction isArbitraryUrl(classPart) {\n  var _arbitraryValueRegex$4;\n\n  var arbitraryValue = (_arbitraryValueRegex$4 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$4[1];\n  return arbitraryValue ? arbitraryValue.startsWith('url(') || arbitraryValue.startsWith('url:') : false;\n}\nfunction isArbitraryNumber(classPart) {\n  var _arbitraryValueRegex$5;\n\n  var arbitraryValue = (_arbitraryValueRegex$5 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$5[1];\n  return arbitraryValue ? !Number.isNaN(Number(arbitraryValue)) || arbitraryValue.startsWith('number:') : false;\n}\n/**\r\n * @deprecated Will be removed in next major version. Use `isArbitraryNumber` instead.\r\n */\n\nvar isArbitraryWeight = isArbitraryNumber;\nfunction isInteger(classPart) {\n  var _arbitraryValueRegex$6;\n\n  var arbitraryValue = (_arbitraryValueRegex$6 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$6[1];\n\n  if (arbitraryValue) {\n    return Number.isInteger(Number(arbitraryValue));\n  }\n\n  return Number.isInteger(Number(classPart));\n}\nfunction isArbitraryValue(classPart) {\n  return arbitraryValueRegex.test(classPart);\n}\nfunction isAny() {\n  return true;\n}\nfunction isTshirtSize(classPart) {\n  return tshirtUnitRegex.test(classPart);\n}\nfunction isArbitraryShadow(classPart) {\n  var _arbitraryValueRegex$7;\n\n  var arbitraryValue = (_arbitraryValueRegex$7 = arbitraryValueRegex.exec(classPart)) == null ? void 0 : _arbitraryValueRegex$7[1];\n\n  if (arbitraryValue) {\n    return shadowRegex.test(arbitraryValue);\n  }\n\n  return false;\n}\n\nexport { isAny, isArbitraryLength, isArbitraryNumber, isArbitraryPosition, isArbitraryShadow, isArbitrarySize, isArbitraryUrl, isArbitraryValue, isArbitraryWeight, isInteger, isLength, isTshirtSize };\n//# sourceMappingURL=validators.mjs.map\n","start":1670465468127,"end":1670465468127,"order":"pre"}]}
