{"resolvedId":"/home/jdw/Code/dxos/dxos/packages/apps/halo-app/src/experimental/useMetagraph.ts","transforms":[{"name":"vite:load-fallback","result":"//\n// Copyright 2020 DXOS.org\n//\n\nimport { useEffect, useState } from 'react';\n\nimport { log } from '@dxos/log';\nimport { Metagraph } from '@dxos/metagraph';\nimport { Module } from '@dxos/protocols/proto/dxos/config';\nimport { useConfig } from '@dxos/react-client';\n\n/**\n * Retrieve a configured metagraph object.\n */\nexport const useMetagraph = () => {\n  const config = useConfig();\n  const [metagraph, setMetagraph] = useState<Metagraph>();\n  useEffect(() => {\n    const metagraph = new Metagraph(config);\n    setMetagraph(metagraph);\n  }, [config]);\n\n  return metagraph;\n};\n\nexport type ModulesResult = {\n  modules: Module[];\n  isLoading: boolean;\n};\n\n/**\n * Query modules.\n */\nexport const useModules = (tags: string[], pollingMs = -1): ModulesResult => {\n  const metagraph = useMetagraph();\n  const [isLoading, setLoading] = useState(true);\n  const [modules, setModules] = useState<Module[]>([]);\n\n  useEffect(() => {\n    if (!metagraph) {\n      return;\n    }\n\n    let interval: NodeJS.Timeout;\n    let unsubscribe: () => void | undefined;\n    setTimeout(async () => {\n      const observable = await metagraph.modules.query({ tags });\n      setModules(observable.results);\n      setLoading(false);\n      unsubscribe = observable.subscribe({\n        onUpdate: (modules) => {\n          // TODO(burdon): Check still mounted.\n          log('modules query', { modules });\n          setModules(modules);\n        }\n      });\n\n      const minPollingInterval = 1_000;\n      if (pollingMs > minPollingInterval) {\n        // TODO(wittjosiah): More detailed status which takes into account subsequent loading states.\n        interval = setInterval(() => observable.fetch());\n      }\n    });\n\n    return () => {\n      interval && clearInterval(interval);\n      unsubscribe?.();\n    };\n  }, [metagraph]);\n\n  return { modules, isLoading };\n};\n","start":1670465466246,"end":1670465466488},{"name":"vite:react-babel","result":"//\n// Copyright 2020 DXOS.org\n//\n\nimport { useEffect, useState } from 'react';\n\nimport { log } from '@dxos/log';\nimport { Metagraph } from '@dxos/metagraph';\nimport { Module } from '@dxos/protocols/proto/dxos/config';\nimport { useConfig } from '@dxos/react-client';\n\n/**\n * Retrieve a configured metagraph object.\n */\nexport const useMetagraph = () => {\n  const config = useConfig();\n  const [metagraph, setMetagraph] = useState<Metagraph>();\n  useEffect(() => {\n    const metagraph = new Metagraph(config);\n    setMetagraph(metagraph);\n  }, [config]);\n\n  return metagraph;\n};\n\nexport type ModulesResult = {\n  modules: Module[];\n  isLoading: boolean;\n};\n\n/**\n * Query modules.\n */\nexport const useModules = (tags: string[], pollingMs = -1): ModulesResult => {\n  const metagraph = useMetagraph();\n  const [isLoading, setLoading] = useState(true);\n  const [modules, setModules] = useState<Module[]>([]);\n\n  useEffect(() => {\n    if (!metagraph) {\n      return;\n    }\n\n    let interval: NodeJS.Timeout;\n    let unsubscribe: () => void | undefined;\n    setTimeout(async () => {\n      const observable = await metagraph.modules.query({ tags });\n      setModules(observable.results);\n      setLoading(false);\n      unsubscribe = observable.subscribe({\n        onUpdate: (modules) => {\n          // TODO(burdon): Check still mounted.\n          log('modules query', { modules });\n          setModules(modules);\n        }\n      });\n\n      const minPollingInterval = 1_000;\n      if (pollingMs > minPollingInterval) {\n        // TODO(wittjosiah): More detailed status which takes into account subsequent loading states.\n        interval = setInterval(() => observable.fetch());\n      }\n    });\n\n    return () => {\n      interval && clearInterval(interval);\n      unsubscribe?.();\n    };\n  }, [metagraph]);\n\n  return { modules, isLoading };\n};\n","start":1670465466488,"end":1670465466488,"order":"pre"},{"name":"vite:esbuild","result":"import { useEffect, useState } from \"react\";\nimport { log } from \"@dxos/log\";\nimport { Metagraph } from \"@dxos/metagraph\";\nimport { useConfig } from \"@dxos/react-client\";\nexport const useMetagraph = () => {\n  const config = useConfig();\n  const [metagraph, setMetagraph] = useState();\n  useEffect(() => {\n    const metagraph2 = new Metagraph(config);\n    setMetagraph(metagraph2);\n  }, [config]);\n  return metagraph;\n};\nexport const useModules = (tags, pollingMs = -1) => {\n  const metagraph = useMetagraph();\n  const [isLoading, setLoading] = useState(true);\n  const [modules, setModules] = useState([]);\n  useEffect(() => {\n    if (!metagraph) {\n      return;\n    }\n    let interval;\n    let unsubscribe;\n    setTimeout(async () => {\n      const observable = await metagraph.modules.query({ tags });\n      setModules(observable.results);\n      setLoading(false);\n      unsubscribe = observable.subscribe({\n        onUpdate: (modules2) => {\n          log(\"modules query\", { modules: modules2 });\n          setModules(modules2);\n        }\n      });\n      const minPollingInterval = 1e3;\n      if (pollingMs > minPollingInterval) {\n        interval = setInterval(() => observable.fetch());\n      }\n    });\n    return () => {\n      interval && clearInterval(interval);\n      unsubscribe?.();\n    };\n  }, [metagraph]);\n  return { modules, isLoading };\n};\n","start":1670465466488,"end":1670465466561,"order":"normal"}]}
