{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/random-access-idb-mutable-file@0.3.0/node_modules/random-access-idb-mutable-file/lib/random-access-idb-mutable-file.js","transforms":[{"name":"vite:load-fallback","result":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _randomAccessStorage = require(\"random-access-storage\");\n\nvar _randomAccessStorage2 = _interopRequireDefault(_randomAccessStorage);\n\nvar _IndexedDB = require(\"./IndexedDB\");\n\nvar _buffer = require(\"buffer\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst promise = (request) => new Promise((resolve, reject) => {\n  request.onsuccess = () => resolve(request.result);\n  request.onerror = () => reject(request.error);\n});\n\nclass RandomAccessIDBFileVolume {\n  constructor(db, name, version, storeName, options) {\n    this.db = db;\n    this.name = name;\n    this.version = version;\n    this.storeName = storeName;\n    this.options = options;\n  }\n  store() {\n    const { db, storeName } = this;\n    const transaction = db.transaction([storeName], \"readwrite\");\n    return transaction.objectStore(storeName);\n  }\n  async delete(url) {\n    return await promise(this.store().delete(url));\n  }\n  async save(url, file) {\n    return await promise(this.store().put(file, url));\n  }\n  async open(url, mode) {\n    const file = await promise(this.store().get(url));\n    if (file) {\n      return file;\n    } else if (mode === \"readwrite\") {\n      const file = await promise(this.db.createMutableFile(url, \"binary/random\"));\n      await this.save(url, file);\n      return file;\n    } else {\n      throw new RangeError(`File ${url} does not exist`);\n    }\n  }\n\n  mount(file, options) {\n    return new RandomAccessProvider(this, `/${file}`, options);\n  }\n}\n\nclass RandomAccessProvider extends _randomAccessStorage2.default {\n\n  static async mount(options = {}) {\n    if (!self.IDBMutableFile) {\n      throw Error(`Runtime does not supports IDBMutableFile https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile`);\n    } else {\n      const name = options.name || `RandomAccess`;\n      const version = options.version || 1.0;\n      const storeName = options.storeName || `IDBMutableFile`;\n\n      const request = _IndexedDB.indexedDB.open(name, version);\n      request.onupgradeneeded = () => {\n        const db = request.result;\n        if (!db.objectStoreNames.contains(storeName)) {\n          db.createObjectStore(storeName);\n        }\n      };\n      const db = await promise(request);\n      const volume = new RandomAccessIDBFileVolume(db, name, version, storeName, options);\n      return (path, options) => volume.mount(path, options);\n    }\n  }\n  static async open(self, request) {\n    const { options } = self;\n    const mode = request.preferReadonly ? \"readonly\" : \"readwrite\";\n    self.debug && console.log(`>> open ${self.url} ${mode}`);\n\n    if (!self.file || self.mode !== mode && mode === \"readwrite\") {\n      self.mode = mode;\n      self.file = await self.volume.open(self.url, mode);\n    }\n\n    if (!(mode === \"readonly\" || !options.truncate)) {\n      const file = self.activate();\n      await promise(file.truncate(options.size || 0));\n    }\n\n    self.debug && console.log(`<< open ${self.url} ${mode}`);\n  }\n  static async read(self, { data, offset, size }) {\n    self.debug && console.log(`>> read ${self.url} <${offset}, ${size}>`);\n    const buffer = data || _buffer.Buffer.allocUnsafe(size);\n    if (size === 0) {\n      return buffer;\n    }\n\n    const file = self.activate();\n    file.location = offset;\n    const chunk = await promise(file.readAsArrayBuffer(size));\n    if (chunk.byteLength !== size) {\n      throw new Error(\"Could not satisfy length\");\n    }\n\n    _buffer.Buffer.from(chunk).copy(buffer);\n    self.debug && console.log(`<< read ${self.url} <${offset}, ${size}>`, buffer);\n    return buffer;\n  }\n  static async write(self, { data, offset, size }) {\n    self.debug && console.log(`>> write ${self.url} <${offset}, ${size}>`, data);\n    const { byteLength, byteOffset } = data;\n    const chunk = byteLength === size ? data : data.slice(0, size);\n\n    const file = self.activate();\n    file.location = offset;\n    const wrote = await promise(file.write(chunk));\n\n    self.debug && console.log(`<< write ${self.url} <${offset}, ${size}>`);\n\n    return wrote;\n  }\n  static async delete(self, { offset, size }) {\n    self.debug && console.log(`>> delete ${self.url} <${offset}, ${size}>`);\n    const stat = await this.stat(self);\n    if (offset + size >= stat.size) {\n      const file = self.activate();\n      await promise(file.truncate(offset));\n    }\n\n    self.debug && console.log(`<< delete ${self.url} <${offset}, ${size}>`);\n  }\n  static async stat(self) {\n    self.debug && console.log(`>> stat ${self.url}`);\n    const file = self.activate();\n    const stat = await promise(file.getMetadata());\n    self.debug && console.log(`<< stat {size:${stat.size}} ${self.url} `);\n\n    return stat;\n  }\n  static async close(self) {\n    self.debug && console.log(`>> close ${self.url}`);\n    const { lockedFile } = self;\n    if (lockedFile && lockedFile.active) {\n      await promise(lockedFile.flush());\n    }\n    self.lockedFile = null;\n    self.file = null;\n    self.debug && console.log(`<< close ${self.url}`);\n  }\n  static async destroy(self) {\n    self.debug && console.log(`>> destroy ${self.url}`);\n    await self.volume.delete(self.url);\n    self.debug && console.log(`<< destroy ${self.url}`);\n  }\n\n  static async awake(self) {\n    const { workQueue } = self;\n    self.isIdle = false;\n    let index = 0;\n    while (index < workQueue.length) {\n      const request = workQueue[index++];\n      await this.perform(self, request);\n    }\n    workQueue.length = 0;\n    self.isIdle = true;\n  }\n  static schedule(self, request) {\n    self.workQueue.push(request);\n    if (self.isIdle) {\n      this.awake(self);\n    }\n  }\n  static async perform(self, request) {\n    try {\n      switch (request.type) {\n        case RequestType.open:\n          {\n            return request.callback(null, (await this.open(self, request)));\n          }\n        case RequestType.read:\n          {\n            return request.callback(null, (await this.read(self, request)));\n          }\n        case RequestType.write:\n          {\n            return request.callback(null, (await this.write(self, request)));\n          }\n        case RequestType.delete:\n          {\n            return request.callback(null, (await this.delete(self, request)));\n          }\n        case RequestType.stat:\n          {\n            return request.callback(null, (await this.stat(self)));\n          }\n        case RequestType.close:\n          {\n            return request.callback(null, (await this.close(self)));\n          }\n        case RequestType.destroy:\n          {\n            return request.callback(null, (await this.destroy(self)));\n          }\n      }\n    } catch (error) {\n      request.callback(error);\n    }\n  }\n  _open(request) {\n    RandomAccessProvider.schedule(this, request);\n  }\n  _openReadonly(request) {\n    RandomAccessProvider.schedule(this, request);\n  }\n  _write(request) {\n    RandomAccessProvider.schedule(this, request);\n  }\n  _read(request) {\n    RandomAccessProvider.schedule(this, request);\n  }\n  _del(request) {\n    RandomAccessProvider.schedule(this, request);\n  }\n  _stat(request) {\n    RandomAccessProvider.perform(this, request);\n  }\n  _close(request) {\n    RandomAccessProvider.schedule(this, request);\n  }\n  _destroy(request) {\n    RandomAccessProvider.schedule(this, request);\n  }\n  constructor(volume, url, options = {}) {\n    super();\n    this.volume = volume;\n    this.url = url;\n    this.options = options;\n    this.mode = \"readonly\";\n    this.file = null;\n    this.lockedFile = null;\n\n    this.workQueue = [];\n    this.isIdle = true;\n    this.debug = !!volume.options.debug;\n  }\n  activate() {\n    const { lockedFile, file, mode } = this;\n    if (lockedFile && lockedFile.active) {\n      return lockedFile;\n    } else if (file) {\n      const lockedFile = file.open(mode);\n      this.lockedFile = lockedFile;\n      return lockedFile;\n    } else {\n      throw new RangeError(`Unable to activate file, likely provider was destroyed`);\n    }\n  }\n}\n\nconst RequestType = {\n  open: 0,\n  read: 1,\n  write: 2,\n  delete: 3,\n  stat: 4,\n  close: 5,\n  destroy: 6\n};\n\nexports.default = RandomAccessProvider;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","start":1670465469540,"end":1670465469825},{"name":"vite:react-babel","result":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _randomAccessStorage = require(\"random-access-storage\");\n\nvar _randomAccessStorage2 = _interopRequireDefault(_randomAccessStorage);\n\nvar _IndexedDB = require(\"./IndexedDB\");\n\nvar _buffer = require(\"buffer\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst promise = (request) => new Promise((resolve, reject) => {\n  request.onsuccess = () => resolve(request.result);\n  request.onerror = () => reject(request.error);\n});\n\nclass RandomAccessIDBFileVolume {\n  constructor(db, name, version, storeName, options) {\n    this.db = db;\n    this.name = name;\n    this.version = version;\n    this.storeName = storeName;\n    this.options = options;\n  }\n  store() {\n    const { db, storeName } = this;\n    const transaction = db.transaction([storeName], \"readwrite\");\n    return transaction.objectStore(storeName);\n  }\n  async delete(url) {\n    return await promise(this.store().delete(url));\n  }\n  async save(url, file) {\n    return await promise(this.store().put(file, url));\n  }\n  async open(url, mode) {\n    const file = await promise(this.store().get(url));\n    if (file) {\n      return file;\n    } else if (mode === \"readwrite\") {\n      const file = await promise(this.db.createMutableFile(url, \"binary/random\"));\n      await this.save(url, file);\n      return file;\n    } else {\n      throw new RangeError(`File ${url} does not exist`);\n    }\n  }\n\n  mount(file, options) {\n    return new RandomAccessProvider(this, `/${file}`, options);\n  }\n}\n\nclass RandomAccessProvider extends _randomAccessStorage2.default {\n\n  static async mount(options = {}) {\n    if (!self.IDBMutableFile) {\n      throw Error(`Runtime does not supports IDBMutableFile https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile`);\n    } else {\n      const name = options.name || `RandomAccess`;\n      const version = options.version || 1.0;\n      const storeName = options.storeName || `IDBMutableFile`;\n\n      const request = _IndexedDB.indexedDB.open(name, version);\n      request.onupgradeneeded = () => {\n        const db = request.result;\n        if (!db.objectStoreNames.contains(storeName)) {\n          db.createObjectStore(storeName);\n        }\n      };\n      const db = await promise(request);\n      const volume = new RandomAccessIDBFileVolume(db, name, version, storeName, options);\n      return (path, options) => volume.mount(path, options);\n    }\n  }\n  static async open(self, request) {\n    const { options } = self;\n    const mode = request.preferReadonly ? \"readonly\" : \"readwrite\";\n    self.debug && console.log(`>> open ${self.url} ${mode}`);\n\n    if (!self.file || self.mode !== mode && mode === \"readwrite\") {\n      self.mode = mode;\n      self.file = await self.volume.open(self.url, mode);\n    }\n\n    if (!(mode === \"readonly\" || !options.truncate)) {\n      const file = self.activate();\n      await promise(file.truncate(options.size || 0));\n    }\n\n    self.debug && console.log(`<< open ${self.url} ${mode}`);\n  }\n  static async read(self, { data, offset, size }) {\n    self.debug && console.log(`>> read ${self.url} <${offset}, ${size}>`);\n    const buffer = data || _buffer.Buffer.allocUnsafe(size);\n    if (size === 0) {\n      return buffer;\n    }\n\n    const file = self.activate();\n    file.location = offset;\n    const chunk = await promise(file.readAsArrayBuffer(size));\n    if (chunk.byteLength !== size) {\n      throw new Error(\"Could not satisfy length\");\n    }\n\n    _buffer.Buffer.from(chunk).copy(buffer);\n    self.debug && console.log(`<< read ${self.url} <${offset}, ${size}>`, buffer);\n    return buffer;\n  }\n  static async write(self, { data, offset, size }) {\n    self.debug && console.log(`>> write ${self.url} <${offset}, ${size}>`, data);\n    const { byteLength, byteOffset } = data;\n    const chunk = byteLength === size ? data : data.slice(0, size);\n\n    const file = self.activate();\n    file.location = offset;\n    const wrote = await promise(file.write(chunk));\n\n    self.debug && console.log(`<< write ${self.url} <${offset}, ${size}>`);\n\n    return wrote;\n  }\n  static async delete(self, { offset, size }) {\n    self.debug && console.log(`>> delete ${self.url} <${offset}, ${size}>`);\n    const stat = await this.stat(self);\n    if (offset + size >= stat.size) {\n      const file = self.activate();\n      await promise(file.truncate(offset));\n    }\n\n    self.debug && console.log(`<< delete ${self.url} <${offset}, ${size}>`);\n  }\n  static async stat(self) {\n    self.debug && console.log(`>> stat ${self.url}`);\n    const file = self.activate();\n    const stat = await promise(file.getMetadata());\n    self.debug && console.log(`<< stat {size:${stat.size}} ${self.url} `);\n\n    return stat;\n  }\n  static async close(self) {\n    self.debug && console.log(`>> close ${self.url}`);\n    const { lockedFile } = self;\n    if (lockedFile && lockedFile.active) {\n      await promise(lockedFile.flush());\n    }\n    self.lockedFile = null;\n    self.file = null;\n    self.debug && console.log(`<< close ${self.url}`);\n  }\n  static async destroy(self) {\n    self.debug && console.log(`>> destroy ${self.url}`);\n    await self.volume.delete(self.url);\n    self.debug && console.log(`<< destroy ${self.url}`);\n  }\n\n  static async awake(self) {\n    const { workQueue } = self;\n    self.isIdle = false;\n    let index = 0;\n    while (index < workQueue.length) {\n      const request = workQueue[index++];\n      await this.perform(self, request);\n    }\n    workQueue.length = 0;\n    self.isIdle = true;\n  }\n  static schedule(self, request) {\n    self.workQueue.push(request);\n    if (self.isIdle) {\n      this.awake(self);\n    }\n  }\n  static async perform(self, request) {\n    try {\n      switch (request.type) {\n        case RequestType.open:\n          {\n            return request.callback(null, (await this.open(self, request)));\n          }\n        case RequestType.read:\n          {\n            return request.callback(null, (await this.read(self, request)));\n          }\n        case RequestType.write:\n          {\n            return request.callback(null, (await this.write(self, request)));\n          }\n        case RequestType.delete:\n          {\n            return request.callback(null, (await this.delete(self, request)));\n          }\n        case RequestType.stat:\n          {\n            return request.callback(null, (await this.stat(self)));\n          }\n        case RequestType.close:\n          {\n            return request.callback(null, (await this.close(self)));\n          }\n        case RequestType.destroy:\n          {\n            return request.callback(null, (await this.destroy(self)));\n          }\n      }\n    } catch (error) {\n      request.callback(error);\n    }\n  }\n  _open(request) {\n    RandomAccessProvider.schedule(this, request);\n  }\n  _openReadonly(request) {\n    RandomAccessProvider.schedule(this, request);\n  }\n  _write(request) {\n    RandomAccessProvider.schedule(this, request);\n  }\n  _read(request) {\n    RandomAccessProvider.schedule(this, request);\n  }\n  _del(request) {\n    RandomAccessProvider.schedule(this, request);\n  }\n  _stat(request) {\n    RandomAccessProvider.perform(this, request);\n  }\n  _close(request) {\n    RandomAccessProvider.schedule(this, request);\n  }\n  _destroy(request) {\n    RandomAccessProvider.schedule(this, request);\n  }\n  constructor(volume, url, options = {}) {\n    super();\n    this.volume = volume;\n    this.url = url;\n    this.options = options;\n    this.mode = \"readonly\";\n    this.file = null;\n    this.lockedFile = null;\n\n    this.workQueue = [];\n    this.isIdle = true;\n    this.debug = !!volume.options.debug;\n  }\n  activate() {\n    const { lockedFile, file, mode } = this;\n    if (lockedFile && lockedFile.active) {\n      return lockedFile;\n    } else if (file) {\n      const lockedFile = file.open(mode);\n      this.lockedFile = lockedFile;\n      return lockedFile;\n    } else {\n      throw new RangeError(`Unable to activate file, likely provider was destroyed`);\n    }\n  }\n}\n\nconst RequestType = {\n  open: 0,\n  read: 1,\n  write: 2,\n  delete: 3,\n  stat: 4,\n  close: 5,\n  destroy: 6\n};\n\nexports.default = RandomAccessProvider;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yYW5kb20tYWNjZXNzLWlkYi1tdXRhYmxlLWZpbGUuanMiXSwibmFtZXMiOlsicHJvbWlzZSIsInJlcXVlc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uc3VjY2VzcyIsInJlc3VsdCIsIm9uZXJyb3IiLCJlcnJvciIsIlJhbmRvbUFjY2Vzc0lEQkZpbGVWb2x1bWUiLCJjb25zdHJ1Y3RvciIsImRiIiwibmFtZSIsInZlcnNpb24iLCJzdG9yZU5hbWUiLCJvcHRpb25zIiwic3RvcmUiLCJ0cmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlIiwiZGVsZXRlIiwidXJsIiwic2F2ZSIsImZpbGUiLCJwdXQiLCJvcGVuIiwibW9kZSIsImdldCIsImNyZWF0ZU11dGFibGVGaWxlIiwiUmFuZ2VFcnJvciIsIm1vdW50IiwiUmFuZG9tQWNjZXNzUHJvdmlkZXIiLCJSYW5kb21BY2Nlc3MiLCJzZWxmIiwiSURCTXV0YWJsZUZpbGUiLCJFcnJvciIsImluZGV4ZWREQiIsIm9udXBncmFkZW5lZWRlZCIsIm9iamVjdFN0b3JlTmFtZXMiLCJjb250YWlucyIsImNyZWF0ZU9iamVjdFN0b3JlIiwidm9sdW1lIiwicGF0aCIsInByZWZlclJlYWRvbmx5IiwiZGVidWciLCJjb25zb2xlIiwibG9nIiwidHJ1bmNhdGUiLCJhY3RpdmF0ZSIsInNpemUiLCJyZWFkIiwiZGF0YSIsIm9mZnNldCIsImJ1ZmZlciIsIkJ1ZmZlciIsImFsbG9jVW5zYWZlIiwibG9jYXRpb24iLCJjaHVuayIsInJlYWRBc0FycmF5QnVmZmVyIiwiYnl0ZUxlbmd0aCIsImZyb20iLCJjb3B5Iiwid3JpdGUiLCJieXRlT2Zmc2V0Iiwic2xpY2UiLCJ3cm90ZSIsInN0YXQiLCJnZXRNZXRhZGF0YSIsImNsb3NlIiwibG9ja2VkRmlsZSIsImFjdGl2ZSIsImZsdXNoIiwiZGVzdHJveSIsImF3YWtlIiwid29ya1F1ZXVlIiwiaXNJZGxlIiwiaW5kZXgiLCJsZW5ndGgiLCJwZXJmb3JtIiwic2NoZWR1bGUiLCJwdXNoIiwidHlwZSIsIlJlcXVlc3RUeXBlIiwiY2FsbGJhY2siLCJfb3BlbiIsIl9vcGVuUmVhZG9ubHkiLCJfd3JpdGUiLCJfcmVhZCIsIl9kZWwiLCJfc3RhdCIsIl9jbG9zZSIsIl9kZXN0cm95Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQTs7OztBQVlBOztBQVFBOzs7O0FBRUEsTUFBTUEsVUFBdUIsQ0FBQ0MsT0FBRCxLQUMzQixJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQy9CSCxVQUFRSSxTQUFSLEdBQW9CLE1BQU1GLFFBQVFGLFFBQVFLLE1BQWhCLENBQTFCO0FBQ0FMLFVBQVFNLE9BQVIsR0FBa0IsTUFBTUgsT0FBT0gsUUFBUU8sS0FBZixDQUF4QjtBQUNELENBSEQsQ0FERjs7QUFNQSxNQUFNQyx5QkFBTixDQUFnQztBQU05QkMsY0FDRUMsRUFERixFQUVFQyxJQUZGLEVBR0VDLE9BSEYsRUFJRUMsU0FKRixFQUtFQyxPQUxGLEVBTUU7QUFDQSxTQUFLSixFQUFMLEdBQVVBLEVBQVY7QUFDQSxTQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFDQSxTQUFLQyxTQUFMLEdBQWlCQSxTQUFqQjtBQUNBLFNBQUtDLE9BQUwsR0FBZUEsT0FBZjtBQUNEO0FBQ0RDLFVBQWdEO0FBQzlDLFVBQU0sRUFBRUwsRUFBRixFQUFNRyxTQUFOLEtBQW9CLElBQTFCO0FBQ0EsVUFBTUcsY0FBY04sR0FBR00sV0FBSCxDQUFlLENBQUNILFNBQUQsQ0FBZixFQUE0QixXQUE1QixDQUFwQjtBQUNBLFdBQU9HLFlBQVlDLFdBQVosQ0FBd0JKLFNBQXhCLENBQVA7QUFDRDtBQUNELFFBQU1LLE1BQU4sQ0FBYUMsR0FBYixFQUFrQjtBQUNoQixXQUFPLE1BQU1wQixRQUFRLEtBQUtnQixLQUFMLEdBQWFHLE1BQWIsQ0FBb0JDLEdBQXBCLENBQVIsQ0FBYjtBQUNEO0FBQ0QsUUFBTUMsSUFBTixDQUFXRCxH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QUFjOUMsSUFBZCxFQUFvQkcsSUFBcEIsS0FBNkIsSUFBbkM7QUFDQSxRQUFJMkMsY0FBY0EsV0FBV0MsTUFBN0IsRUFBcUM7QUFDbkMsYUFBT0QsVUFBUDtBQUNELEtBRkQsTUFFTyxJQUFJOUMsSUFBSixFQUFVO0FBQ2YsWUFBTThDLGFBQWE5QyxLQUFLRSxJQUFMLENBQVVDLElBQVYsQ0FBbkI7QUFDQSxXQUFLMkMsVUFBTCxHQUFrQkEsVUFBbEI7QUFDQSxhQUFPQSxVQUFQO0FBQ0QsS0FKTSxNQUlBO0FBQ0wsWUFBTSxJQUFJeEMsVUFBSixDQUNILHdEQURHLENBQU47QUFHRDtBQUNGO0FBM082Qzs7QUE4T2hELE1BQU1xRCxjQUFjO0FBQ2xCekQsUUFBTSxDQURZO0FBRWxCeUIsUUFBTSxDQUZZO0FBR2xCWSxTQUFPLENBSFc7QUFJbEIxQyxVQUFRLENBSlU7QUFLbEI4QyxRQUFNLENBTFk7QUFNbEJFLFNBQU8sQ0FOVztBQU9sQkksV0FBUztBQVBTLENBQXBCOztrQkFVZXpDLG9CIiwiZmlsZSI6InJhbmRvbS1hY2Nlc3MtaWRiLW11dGFibGUtZmlsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93IHN0cmljdFxuXG5pbXBvcnQgUmFuZG9tQWNjZXNzIGZyb20gXCJyYW5kb20tYWNjZXNzLXN0b3JhZ2VcIlxuaW1wb3J0IHR5cGUge1xuICBTdGF0LFxuICBSZXF1ZXN0LFxuICBPcGVuUmVxdWVzdCxcbiAgUmVhZFJlcXVlc3QsXG4gIFdyaXRlUmVxdWVzdCxcbiAgRGVsZXRlUmVxdWVzdCxcbiAgU3RhdFJlcXVlc3QsXG4gIENsb3NlUmVxdWVzdCxcbiAgRGVzdHJveVJlcXVlc3Rcbn0gZnJvbSBcInJhbmRvbS1hY2Nlc3Mtc3RvcmFnZVwiXG5pbXBvcnQgeyBpbmRleGVkREIgfSBmcm9tIFwiLi9JbmRleGVkREJcIlxuaW1wb3J0IHR5cGUge1xuICBJREJSZXF1ZXN0LFxuICBJREJEYXRhYmFzZSxcbiAgSURCT2JqZWN0U3RvcmUsXG4gIElEQk11dGFibGVGaWxlLFxuICBJREJGaWxlSGFuZGxlXG59IGZyb20gXCIuL0luZGV4ZWREQlwiXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tIFwiYnVmZmVyXCJcblxuY29uc3QgcHJvbWlzZSA9IC8qOjo8eCwgYT4qLyAocmVxdWVzdCAvKjpJREJSZXF1ZXN0PHgsIGE+Ki8pIC8qOlByb21pc2U8YT4qLyA9PlxuICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiByZXNvbHZlKHJlcXVlc3QucmVzdWx0KVxuICAgIHJlcXVlc3Qub25lcnJvciA9ICgpID0+IHJlamVjdChyZXF1ZXN0LmVycm9yKVxuICB9KVxuXG5jbGFzcyBSYW5kb21BY2Nlc3NJREJGaWxlVm9sdW1lIHtcbiAgZGI6IElEQkRhdGFiYXNlXG4gIG5hbWU6IHN0cmluZ1xuICB2ZXJzaW9uOiBudW1iZXJcbiAgc3RvcmVOYW1lOiBzdHJpbmdcbiAgb3B0aW9uczogVm9sdW1lT3B0aW9uc1xuICBjb25zdHJ1Y3RvcihcbiAgICBkYjogSURCRGF0YWJhc2UsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHZlcnNpb246IG51bWJlcixcbiAgICBzdG9yZU5hbWU6IHN0cmluZyxcbiAgICBvcHRpb25zOiBWb2x1bWVPcHRpb25zXG4gICkge1xuICAgIHRoaXMuZGIgPSBkYlxuICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uXG4gICAgdGhpcy5zdG9yZU5hbWUgPSBzdG9yZU5hbWVcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zXG4gIH1cbiAgc3RvcmUoKTogSURCT2JqZWN0U3RvcmU8c3RyaW5nLCBJREJNdXRhYmxlRmlsZT4ge1xuICAgIGNvbnN0IHsgZGIsIHN0b3JlTmFtZSB9ID0gdGhpc1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oW3N0b3JlTmFtZV0sIFwicmVhZHdyaXRlXCIpXG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHN0b3JlTmFtZSlcbiAgfVxuICBhc3luYyBkZWxldGUodXJsKSB7XG4gICAgcmV0dXJuIGF3YWl0IHByb21pc2UodGhpcy5zdG9yZSgpLmRlbGV0ZSh1cmwpKVxuICB9XG4gIGFzeW5jIHNhdmUodXJsLCBmaWxlKSB7XG4gICAgcmV0dXJuIGF3YWl0IHByb21pc2UodGhpcy5zdG9yZSgpLnB1dChmaWxlLCB1cmwpKVxuICB9XG4gIGFzeW5jIG9wZW4odXJsLCBtb2RlKSB7XG4gICAgY29uc3QgZmlsZSA9IGF3YWl0IHByb21pc2UodGhpcy5zdG9yZSgpLmdldCh1cmwpKVxuICAgIGlmIChmaWxlKSB7XG4gICAgICByZXR1cm4gZmlsZVxuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gXCJyZWFkd3JpdGVcIikge1xuICAgICAgY29uc3QgZmlsZSA9IGF3YWl0IHByb21pc2UoXG4gICAgICAgIHRoaXMuZGIuY3JlYXRlTXV0YWJsZUZpbGUodXJsLCBcImJpbmFyeS9yYW5kb21cIilcbiAgICAgIClcbiAgICAgIGF3YWl0IHRoaXMuc2F2ZSh1cmwsIGZpbGUpXG4gICAgICByZXR1cm4gZmlsZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgRmlsZSAke3VybH0gZG9lcyBub3QgZXhpc3RgKVxuICAgIH1cbiAgfVxuXG4gIG1vdW50KGZpbGU6IHN0cmluZywgb3B0aW9ucz86IEZpbGVPcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBSYW5kb21BY2Nlc3NQcm92aWRlcih0aGlzLCBgLyR7ZmlsZX1gLCBvcHRpb25zKVxuICB9XG59XG5cbmludGVyZmFjZSBWb2x1bWVPcHRpb25zIHtcbiAgZGVidWc/OiBib29sZWFuO1xuICBuYW1lPzogc3RyaW5nO1xuICB2ZXJzaW9uPzogbnVtYmVyO1xuICBzdG9yZU5hbWU/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBGaWxlT3B0aW9ucyB7XG4gIHRydW5jYXRlPzogYm9vbGVhbjtcbiAgc2l6ZT86IG51bWJlcjtcbiAgcmVhZGFibGU/OiBib29sZWFuO1xuICB3cml0YWJsZT86IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBTaXplIHtcbiAgc2l6ZTogbnVtYmVyO1xufVxuXG5jbGFzcyBSYW5kb21BY2Nlc3NQcm92aWRlciBleHRlbmRzIFJhbmRvbUFjY2VzcyB7XG4gIHVybDogc3RyaW5nXG4gIHZvbHVtZTogUmFuZG9tQWNjZXNzSURCRmlsZVZvbHVtZVxuICBkZWJ1ZzogYm9vbGVhblxuICBmaWxlOiA/SURCTXV0YWJsZUZpbGVcbiAgbG9ja2VkRmlsZTogP0lEQkZpbGVIYW5kbGVcbiAgbW9kZTogXCJyZWFkb25seVwiIHwgXCJyZWFkd3JpdGVcIlxuICB3b3JrUXVldWU6IFJlcXVlc3RbXVxuICBpc0lkbGU6IGJvb2xlYW5cbiAgb3B0aW9uczogRmlsZU9wdGlvbnNcblxuICBzdGF0aWMgYXN5bmMgbW91bnQob3B0aW9ucz86IFZvbHVtZU9wdGlvbnMgPSB7fSkge1xuICAgIGlmICghc2VsZi5JREJNdXRhYmxlRmlsZSkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIGBSdW50aW1lIGRvZXMgbm90IHN1cHBvcnRzIElEQk11dGFibGVGaWxlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9JREJNdXRhYmxlRmlsZWBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbmFtZSA9IG9wdGlvbnMubmFtZSB8fCBgUmFuZG9tQWNjZXNzYFxuICAgICAgY29uc3QgdmVyc2lvbiA9IG9wdGlvbnMudmVyc2lvbiB8fCAxLjBcbiAgICAgIGNvbnN0IHN0b3JlTmFtZSA9IG9wdGlvbnMuc3RvcmVOYW1lIHx8IGBJREJNdXRhYmxlRmlsZWBcblxuICAgICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKG5hbWUsIHZlcnNpb24pXG4gICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgZGIgPSByZXF1ZXN0LnJlc3VsdFxuICAgICAgICBpZiAoIWRiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoc3RvcmVOYW1lKSkge1xuICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKHN0b3JlTmFtZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgZGIgPSBhd2FpdCBwcm9taXNlKHJlcXVlc3QpXG4gICAgICBjb25zdCB2b2x1bWUgPSBuZXcgUmFuZG9tQWNjZXNzSURCRmlsZVZvbHVtZShcbiAgICAgICAgZGIsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIHZlcnNpb24sXG4gICAgICAgIHN0b3JlTmFtZSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKVxuICAgICAgcmV0dXJuIChwYXRoOiBzdHJpbmcsIG9wdGlvbnM/OiBGaWxlT3B0aW9ucykgPT5cbiAgICAgICAgdm9sdW1lLm1vdW50KHBhdGgsIG9wdGlvbnMpXG4gICAgfVxuICB9XG4gIHN0YXRpYyBhc3luYyBvcGVuKFxuICAgIHNlbGY6IFJhbmRvbUFjY2Vzc1Byb3ZpZGVyLFxuICAgIHJlcXVlc3Q6IE9wZW5SZXF1ZXN0XG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gc2VsZlxuICAgIGNvbnN0IG1vZGUgPSByZXF1ZXN0LnByZWZlclJlYWRvbmx5ID8gXCJyZWFkb25seVwiIDogXCJyZWFkd3JpdGVcIlxuICAgIHNlbGYuZGVidWcgJiYgY29uc29sZS5sb2coYD4+IG9wZW4gJHtzZWxmLnVybH0gJHttb2RlfWApXG5cbiAgICBpZiAoIXNlbGYuZmlsZSB8fCAoc2VsZi5tb2RlICE9PSBtb2RlICYmIG1vZGUgPT09IFwicmVhZHdyaXRlXCIpKSB7XG4gICAgICBzZWxmLm1vZGUgPSBtb2RlXG4gICAgICBzZWxmLmZpbGUgPSBhd2FpdCBzZWxmLnZvbHVtZS5vcGVuKHNlbGYudXJsLCBtb2RlKVxuICAgIH1cblxuICAgIGlmICghKG1vZGUgPT09IFwicmVhZG9ubHlcIiB8fCAhb3B0aW9ucy50cnVuY2F0ZSkpIHtcbiAgICAgIGNvbnN0IGZpbGUgPSBzZWxmLmFjdGl2YXRlKClcbiAgICAgIGF3YWl0IHByb21pc2UoZmlsZS50cnVuY2F0ZShvcHRpb25zLnNpemUgfHwgMCkpXG4gICAgfVxuXG4gICAgc2VsZi5kZWJ1ZyAmJiBjb25zb2xlLmxvZyhgPDwgb3BlbiAke3NlbGYudXJsfSAke21vZGV9YClcbiAgfVxuICBzdGF0aWMgYXN5bmMgcmVhZChcbiAgICBzZWxmOiBSYW5kb21BY2Nlc3NQcm92aWRlcixcbiAgICB7IGRhdGEsIG9mZnNldCwgc2l6ZSB9OiBSZWFkUmVxdWVzdFxuICApOiBQcm9taXNlPEJ1ZmZlcj4ge1xuICAgIHNlbGYuZGVidWcgJiYgY29uc29sZS5sb2coYD4+IHJlYWQgJHtzZWxmLnVybH0gPCR7b2Zmc2V0fSwgJHtzaXplfT5gKVxuICAgIGNvbnN0IGJ1ZmZlcjogQnVmZmVyID0gZGF0YSB8fCBCdWZmZXIuYWxsb2NVbnNhZmUoc2l6ZSlcbiAgICBpZiAoc2l6ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGJ1ZmZlclxuICAgIH1cblxuICAgIGNvbnN0IGZpbGUgPSBzZWxmLmFjdGl2YXRlKClcbiAgICBmaWxlLmxvY2F0aW9uID0gb2Zmc2V0XG4gICAgY29uc3QgY2h1bmsgPSBhd2FpdCBwcm9taXNlKGZpbGUucmVhZEFzQXJyYXlCdWZmZXIoc2l6ZSkpXG4gICAgaWYgKGNodW5rLmJ5dGVMZW5ndGggIT09IHNpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBzYXRpc2Z5IGxlbmd0aFwiKVxuICAgIH1cblxuICAgIEJ1ZmZlci5mcm9tKGNodW5rKS5jb3B5KGJ1ZmZlcilcbiAgICBzZWxmLmRlYnVnICYmXG4gICAgICBjb25zb2xlLmxvZyhgPDwgcmVhZCAke3NlbGYudXJsfSA8JHtvZmZzZXR9LCAke3NpemV9PmAsIGJ1ZmZlcilcbiAgICByZXR1cm4gYnVmZmVyXG4gIH1cbiAgc3RhdGljIGFzeW5jIHdyaXRlKFxuICAgIHNlbGY6IFJhbmRvbUFjY2Vzc1Byb3ZpZGVyLFxuICAgIHsgZGF0YSwgb2Zmc2V0LCBzaXplIH06IFdyaXRlUmVxdWVzdFxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBzZWxmLmRlYnVnICYmIGNvbnNvbGUubG9nKGA+PiB3cml0ZSAke3NlbGYudXJsfSA8JHtvZmZzZXR9LCAke3NpemV9PmAsIGRhdGEpXG4gICAgY29uc3QgeyBieXRlTGVuZ3RoLCBieXRlT2Zmc2V0IH0gPSBkYXRhXG4gICAgY29uc3QgY2h1bmsgPSBieXRlTGVuZ3RoID09PSBzaXplID8gZGF0YSA6IGRhdGEuc2xpY2UoMCwgc2l6ZSlcblxuICAgIGNvbnN0IGZpbGUgPSBzZWxmLmFjdGl2YXRlKClcbiAgICBmaWxlLmxvY2F0aW9uID0gb2Zmc2V0XG4gICAgY29uc3Qgd3JvdGUgPSBhd2FpdCBwcm9taXNlKGZpbGUud3JpdGUoY2h1bmspKVxuXG4gICAgc2VsZi5kZWJ1ZyAmJiBjb25zb2xlLmxvZyhgPDwgd3JpdGUgJHtzZWxmLnVybH0gPCR7b2Zmc2V0fSwgJHtzaXplfT5gKVxuXG4gICAgcmV0dXJuIHdyb3RlXG4gIH1cbiAgc3RhdGljIGFzeW5jIGRlbGV0ZShcbiAgICBzZWxmOiBSYW5kb21BY2Nlc3NQcm92aWRlcixcbiAgICB7IG9mZnNldCwgc2l6ZSB9OiBEZWxldGVSZXF1ZXN0XG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIHNlbGYuZGVidWcgJiYgY29uc29sZS5sb2coYD4+IGRlbGV0ZSAke3NlbGYudXJsfSA8JHtvZmZzZXR9LCAke3NpemV9PmApXG4gICAgY29uc3Qgc3RhdCA9IGF3YWl0IHRoaXMuc3RhdChzZWxmKVxuICAgIGlmIChvZmZzZXQgKyBzaXplID49IHN0YXQuc2l6ZSkge1xuICAgICAgY29uc3QgZmlsZSA9IHNlbGYuYWN0aXZhdGUoKVxuICAgICAgYXdhaXQgcHJvbWlzZShmaWxlLnRydW5jYXRlKG9mZnNldCkpXG4gICAgfVxuXG4gICAgc2VsZi5kZWJ1ZyAmJiBjb25zb2xlLmxvZyhgPDwgZGVsZXRlICR7c2VsZi51cmx9IDwke29mZnNldH0sICR7c2l6ZX0+YClcbiAgfVxuICBzdGF0aWMgYXN5bmMgc3RhdChzZWxmOiBSYW5kb21BY2Nlc3NQcm92aWRlcik6IFByb21pc2U8U3RhdD4ge1xuICAgIHNlbGYuZGVidWcgJiYgY29uc29sZS5sb2coYD4+IHN0YXQgJHtzZWxmLnVybH1gKVxuICAgIGNvbnN0IGZpbGUgPSBzZWxmLmFjdGl2YXRlKClcbiAgICBjb25zdCBzdGF0ID0gYXdhaXQgcHJvbWlzZShmaWxlLmdldE1ldGFkYXRhKCkpXG4gICAgc2VsZi5kZWJ1ZyAmJiBjb25zb2xlLmxvZyhgPDwgc3RhdCB7c2l6ZToke3N0YXQuc2l6ZX19ICR7c2VsZi51cmx9IGApXG5cbiAgICByZXR1cm4gc3RhdFxuICB9XG4gIHN0YXRpYyBhc3luYyBjbG9zZShzZWxmOiBSYW5kb21BY2Nlc3NQcm92aWRlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIHNlbGYuZGVidWcgJiYgY29uc29sZS5sb2coYD4+IGNsb3NlICR7c2VsZi51cmx9YClcbiAgICBjb25zdCB7IGxvY2tlZEZpbGUgfSA9IHNlbGZcbiAgICBpZiAobG9ja2VkRmlsZSAmJiBsb2NrZWRGaWxlLmFjdGl2ZSkge1xuICAgICAgYXdhaXQgcHJvbWlzZShsb2NrZWRGaWxlLmZsdXNoKCkpXG4gICAgfVxuICAgIHNlbGYubG9ja2VkRmlsZSA9IG51bGxcbiAgICBzZWxmLmZpbGUgPSBudWxsXG4gICAgc2VsZi5kZWJ1ZyAmJiBjb25zb2xlLmxvZyhgPDwgY2xvc2UgJHtzZWxmLnVybH1gKVxuICB9XG4gIHN0YXRpYyBhc3luYyBkZXN0cm95KHNlbGY6IFJhbmRvbUFjY2Vzc1Byb3ZpZGVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgc2VsZi5kZWJ1ZyAmJiBjb25zb2xlLmxvZyhgPj4gZGVzdHJveSAke3NlbGYudXJsfWApXG4gICAgYXdhaXQgc2VsZi52b2x1bWUuZGVsZXRlKHNlbGYudXJsKVxuICAgIHNlbGYuZGVidWcgJiYgY29uc29sZS5sb2coYDw8IGRlc3Ryb3kgJHtzZWxmLnVybH1gKVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGF3YWtlKHNlbGY6IFJhbmRvbUFjY2Vzc1Byb3ZpZGVyKSB7XG4gICAgY29uc3QgeyB3b3JrUXVldWUgfSA9IHNlbGZcbiAgICBzZWxmLmlzSWRsZSA9IGZhbHNlXG4gICAgbGV0IGluZGV4ID0gMFxuICAgIHdoaWxlIChpbmRleCA8IHdvcmtRdWV1ZS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSB3b3JrUXVldWVbaW5kZXgrK11cbiAgICAgIGF3YWl0IHRoaXMucGVyZm9ybShzZWxmLCByZXF1ZXN0KVxuICAgIH1cbiAgICB3b3JrUXVldWUubGVuZ3RoID0gMFxuICAgIHNlbGYuaXNJZGxlID0gdHJ1ZVxuICB9XG4gIHN0YXRpYyBzY2hlZHVsZShzZWxmOiBSYW5kb21BY2Nlc3NQcm92aWRlciwgcmVxdWVzdDogUmVxdWVzdCkge1xuICAgIHNlbGYud29ya1F1ZXVlLnB1c2gocmVxdWVzdClcbiAgICBpZiAoc2VsZi5pc0lkbGUpIHtcbiAgICAgIHRoaXMuYXdha2Uoc2VsZilcbiAgICB9XG4gIH1cbiAgc3RhdGljIGFzeW5jIHBlcmZvcm0oc2VsZjogUmFuZG9tQWNjZXNzUHJvdmlkZXIsIHJlcXVlc3Q6IFJlcXVlc3QpIHtcbiAgICB0cnkge1xuICAgICAgc3dpdGNoIChyZXF1ZXN0LnR5cGUpIHtcbiAgICAgICAgY2FzZSBSZXF1ZXN0VHlwZS5vcGVuOiB7XG4gICAgICAgICAgcmV0dXJuIHJlcXVlc3QuY2FsbGJhY2sobnVsbCwgYXdhaXQgdGhpcy5vcGVuKHNlbGYsIHJlcXVlc3QpKVxuICAgICAgICB9XG4gICAgICAgIGNhc2UgUmVxdWVzdFR5cGUucmVhZDoge1xuICAgICAgICAgIHJldHVybiByZXF1ZXN0LmNhbGxiYWNrKG51bGwsIGF3YWl0IHRoaXMucmVhZChzZWxmLCByZXF1ZXN0KSlcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFJlcXVlc3RUeXBlLndyaXRlOiB7XG4gICAgICAgICAgcmV0dXJuIHJlcXVlc3QuY2FsbGJhY2sobnVsbCwgYXdhaXQgdGhpcy53cml0ZShzZWxmLCByZXF1ZXN0KSlcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFJlcXVlc3RUeXBlLmRlbGV0ZToge1xuICAgICAgICAgIHJldHVybiByZXF1ZXN0LmNhbGxiYWNrKG51bGwsIGF3YWl0IHRoaXMuZGVsZXRlKHNlbGYsIHJlcXVlc3QpKVxuICAgICAgICB9XG4gICAgICAgIGNhc2UgUmVxdWVzdFR5cGUuc3RhdDoge1xuICAgICAgICAgIHJldHVybiByZXF1ZXN0LmNhbGxiYWNrKG51bGwsIGF3YWl0IHRoaXMuc3RhdChzZWxmKSlcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFJlcXVlc3RUeXBlLmNsb3NlOiB7XG4gICAgICAgICAgcmV0dXJuIHJlcXVlc3QuY2FsbGJhY2sobnVsbCwgYXdhaXQgdGhpcy5jbG9zZShzZWxmKSlcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFJlcXVlc3RUeXBlLmRlc3Ryb3k6IHtcbiAgICAgICAgICByZXR1cm4gcmVxdWVzdC5jYWxsYmFjayhudWxsLCBhd2FpdCB0aGlzLmRlc3Ryb3koc2VsZikpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVxdWVzdC5jYWxsYmFjayhlcnJvcilcbiAgICB9XG4gIH1cbiAgX29wZW4ocmVxdWVzdDogT3BlblJlcXVlc3QpIHtcbiAgICBSYW5kb21BY2Nlc3NQcm92aWRlci5zY2hlZHVsZSh0aGlzLCByZXF1ZXN0KVxuICB9XG4gIF9vcGVuUmVhZG9ubHkocmVxdWVzdDogT3BlblJlcXVlc3QpIHtcbiAgICBSYW5kb21BY2Nlc3NQcm92aWRlci5zY2hlZHVsZSh0aGlzLCByZXF1ZXN0KVxuICB9XG4gIF93cml0ZShyZXF1ZXN0OiBXcml0ZVJlcXVlc3QpIHtcbiAgICBSYW5kb21BY2Nlc3NQcm92aWRlci5zY2hlZHVsZSh0aGlzLCByZXF1ZXN0KVxuICB9XG4gIF9yZWFkKHJlcXVlc3Q6IFJlYWRSZXF1ZXN0KSB7XG4gICAgUmFuZG9tQWNjZXNzUHJvdmlkZXIuc2NoZWR1bGUodGhpcywgcmVxdWVzdClcbiAgfVxuICBfZGVsKHJlcXVlc3Q6IERlbGV0ZVJlcXVlc3QpIHtcbiAgICBSYW5kb21BY2Nlc3NQcm92aWRlci5zY2hlZHVsZSh0aGlzLCByZXF1ZXN0KVxuICB9XG4gIF9zdGF0KHJlcXVlc3Q6IFN0YXRSZXF1ZXN0KSB7XG4gICAgUmFuZG9tQWNjZXNzUHJvdmlkZXIucGVyZm9ybSh0aGlzLCByZXF1ZXN0KVxuICB9XG4gIF9jbG9zZShyZXF1ZXN0OiBDbG9zZVJlcXVlc3QpIHtcbiAgICBSYW5kb21BY2Nlc3NQcm92aWRlci5zY2hlZHVsZSh0aGlzLCByZXF1ZXN0KVxuICB9XG4gIF9kZXN0cm95KHJlcXVlc3Q6IERlc3Ryb3lSZXF1ZXN0KSB7XG4gICAgUmFuZG9tQWNjZXNzUHJvdmlkZXIuc2NoZWR1bGUodGhpcywgcmVxdWVzdClcbiAgfVxuICBjb25zdHJ1Y3RvcihcbiAgICB2b2x1bWU6IFJhbmRvbUFjY2Vzc0lEQkZpbGVWb2x1bWUsXG4gICAgdXJsOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IEZpbGVPcHRpb25zID0ge31cbiAgKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMudm9sdW1lID0gdm9sdW1lXG4gICAgdGhpcy51cmwgPSB1cmxcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zXG4gICAgdGhpcy5tb2RlID0gXCJyZWFkb25seVwiXG4gICAgdGhpcy5maWxlID0gbnVsbFxuICAgIHRoaXMubG9ja2VkRmlsZSA9IG51bGxcblxuICAgIHRoaXMud29ya1F1ZXVlID0gW11cbiAgICB0aGlzLmlzSWRsZSA9IHRydWVcbiAgICB0aGlzLmRlYnVnID0gISF2b2x1bWUub3B0aW9ucy5kZWJ1Z1xuICB9XG4gIGFjdGl2YXRlKCk6IElEQkZpbGVIYW5kbGUge1xuICAgIGNvbnN0IHsgbG9ja2VkRmlsZSwgZmlsZSwgbW9kZSB9ID0gdGhpc1xuICAgIGlmIChsb2NrZWRGaWxlICYmIGxvY2tlZEZpbGUuYWN0aXZlKSB7XG4gICAgICByZXR1cm4gbG9ja2VkRmlsZVxuICAgIH0gZWxzZSBpZiAoZmlsZSkge1xuICAgICAgY29uc3QgbG9ja2VkRmlsZSA9IGZpbGUub3Blbihtb2RlKVxuICAgICAgdGhpcy5sb2NrZWRGaWxlID0gbG9ja2VkRmlsZVxuICAgICAgcmV0dXJuIGxvY2tlZEZpbGVcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICAgIGBVbmFibGUgdG8gYWN0aXZhdGUgZmlsZSwgbGlrZWx5IHByb3ZpZGVyIHdhcyBkZXN0cm95ZWRgXG4gICAgICApXG4gICAgfVxuICB9XG59XG5cbmNvbnN0IFJlcXVlc3RUeXBlID0ge1xuICBvcGVuOiAwLFxuICByZWFkOiAxLFxuICB3cml0ZTogMixcbiAgZGVsZXRlOiAzLFxuICBzdGF0OiA0LFxuICBjbG9zZTogNSxcbiAgZGVzdHJveTogNlxufVxuXG5leHBvcnQgZGVmYXVsdCBSYW5kb21BY2Nlc3NQcm92aWRlclxuIl19","start":1670465469825,"end":1670465469825,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as randomAccessIdbMutableFileModule, exports as randomAccessIdbMutableFile } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/random-access-idb-mutable-file@0.3.0/node_modules/random-access-idb-mutable-file/lib/random-access-idb-mutable-file.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/random-access-storage@1.3.0/node_modules/random-access-storage/index.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/random-access-idb-mutable-file@0.3.0/node_modules/random-access-idb-mutable-file/lib/IndexedDB.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/buffer@5.1.0/node_modules/buffer/index.js?commonjs-wrapped\";\n\nvar hasRequiredRandomAccessIdbMutableFile;\n\nfunction requireRandomAccessIdbMutableFile () {\n\tif (hasRequiredRandomAccessIdbMutableFile) return randomAccessIdbMutableFile;\n\thasRequiredRandomAccessIdbMutableFile = 1;\n\t(function (module, exports) {\n\t\t\"use strict\";\n\n\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t  value: true\n\t\t});\n\n\t\tvar _randomAccessStorage = require$$0();\n\n\t\tvar _randomAccessStorage2 = _interopRequireDefault(_randomAccessStorage);\n\n\t\tvar _IndexedDB = require$$1();\n\n\t\tvar _buffer = require$$2();\n\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t\tconst promise = (request) => new Promise((resolve, reject) => {\n\t\t  request.onsuccess = () => resolve(request.result);\n\t\t  request.onerror = () => reject(request.error);\n\t\t});\n\n\t\tclass RandomAccessIDBFileVolume {\n\t\t  constructor(db, name, version, storeName, options) {\n\t\t    this.db = db;\n\t\t    this.name = name;\n\t\t    this.version = version;\n\t\t    this.storeName = storeName;\n\t\t    this.options = options;\n\t\t  }\n\t\t  store() {\n\t\t    const { db, storeName } = this;\n\t\t    const transaction = db.transaction([storeName], \"readwrite\");\n\t\t    return transaction.objectStore(storeName);\n\t\t  }\n\t\t  async delete(url) {\n\t\t    return await promise(this.store().delete(url));\n\t\t  }\n\t\t  async save(url, file) {\n\t\t    return await promise(this.store().put(file, url));\n\t\t  }\n\t\t  async open(url, mode) {\n\t\t    const file = await promise(this.store().get(url));\n\t\t    if (file) {\n\t\t      return file;\n\t\t    } else if (mode === \"readwrite\") {\n\t\t      const file = await promise(this.db.createMutableFile(url, \"binary/random\"));\n\t\t      await this.save(url, file);\n\t\t      return file;\n\t\t    } else {\n\t\t      throw new RangeError(`File ${url} does not exist`);\n\t\t    }\n\t\t  }\n\n\t\t  mount(file, options) {\n\t\t    return new RandomAccessProvider(this, `/${file}`, options);\n\t\t  }\n\t\t}\n\n\t\tclass RandomAccessProvider extends _randomAccessStorage2.default {\n\n\t\t  static async mount(options = {}) {\n\t\t    if (!self.IDBMutableFile) {\n\t\t      throw Error(`Runtime does not supports IDBMutableFile https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile`);\n\t\t    } else {\n\t\t      const name = options.name || `RandomAccess`;\n\t\t      const version = options.version || 1.0;\n\t\t      const storeName = options.storeName || `IDBMutableFile`;\n\n\t\t      const request = _IndexedDB.indexedDB.open(name, version);\n\t\t      request.onupgradeneeded = () => {\n\t\t        const db = request.result;\n\t\t        if (!db.objectStoreNames.contains(storeName)) {\n\t\t          db.createObjectStore(storeName);\n\t\t        }\n\t\t      };\n\t\t      const db = await promise(request);\n\t\t      const volume = new RandomAccessIDBFileVolume(db, name, version, storeName, options);\n\t\t      return (path, options) => volume.mount(path, options);\n\t\t    }\n\t\t  }\n\t\t  static async open(self, request) {\n\t\t    const { options } = self;\n\t\t    const mode = request.preferReadonly ? \"readonly\" : \"readwrite\";\n\t\t    self.debug && console.log(`>> open ${self.url} ${mode}`);\n\n\t\t    if (!self.file || self.mode !== mode && mode === \"readwrite\") {\n\t\t      self.mode = mode;\n\t\t      self.file = await self.volume.open(self.url, mode);\n\t\t    }\n\n\t\t    if (!(mode === \"readonly\" || !options.truncate)) {\n\t\t      const file = self.activate();\n\t\t      await promise(file.truncate(options.size || 0));\n\t\t    }\n\n\t\t    self.debug && console.log(`<< open ${self.url} ${mode}`);\n\t\t  }\n\t\t  static async read(self, { data, offset, size }) {\n\t\t    self.debug && console.log(`>> read ${self.url} <${offset}, ${size}>`);\n\t\t    const buffer = data || _buffer.Buffer.allocUnsafe(size);\n\t\t    if (size === 0) {\n\t\t      return buffer;\n\t\t    }\n\n\t\t    const file = self.activate();\n\t\t    file.location = offset;\n\t\t    const chunk = await promise(file.readAsArrayBuffer(size));\n\t\t    if (chunk.byteLength !== size) {\n\t\t      throw new Error(\"Could not satisfy length\");\n\t\t    }\n\n\t\t    _buffer.Buffer.from(chunk).copy(buffer);\n\t\t    self.debug && console.log(`<< read ${self.url} <${offset}, ${size}>`, buffer);\n\t\t    return buffer;\n\t\t  }\n\t\t  static async write(self, { data, offset, size }) {\n\t\t    self.debug && console.log(`>> write ${self.url} <${offset}, ${size}>`, data);\n\t\t    const { byteLength, byteOffset } = data;\n\t\t    const chunk = byteLength === size ? data : data.slice(0, size);\n\n\t\t    const file = self.activate();\n\t\t    file.location = offset;\n\t\t    const wrote = await promise(file.write(chunk));\n\n\t\t    self.debug && console.log(`<< write ${self.url} <${offset}, ${size}>`);\n\n\t\t    return wrote;\n\t\t  }\n\t\t  static async delete(self, { offset, size }) {\n\t\t    self.debug && console.log(`>> delete ${self.url} <${offset}, ${size}>`);\n\t\t    const stat = await this.stat(self);\n\t\t    if (offset + size >= stat.size) {\n\t\t      const file = self.activate();\n\t\t      await promise(file.truncate(offset));\n\t\t    }\n\n\t\t    self.debug && console.log(`<< delete ${self.url} <${offset}, ${size}>`);\n\t\t  }\n\t\t  static async stat(self) {\n\t\t    self.debug && console.log(`>> stat ${self.url}`);\n\t\t    const file = self.activate();\n\t\t    const stat = await promise(file.getMetadata());\n\t\t    self.debug && console.log(`<< stat {size:${stat.size}} ${self.url} `);\n\n\t\t    return stat;\n\t\t  }\n\t\t  static async close(self) {\n\t\t    self.debug && console.log(`>> close ${self.url}`);\n\t\t    const { lockedFile } = self;\n\t\t    if (lockedFile && lockedFile.active) {\n\t\t      await promise(lockedFile.flush());\n\t\t    }\n\t\t    self.lockedFile = null;\n\t\t    self.file = null;\n\t\t    self.debug && console.log(`<< close ${self.url}`);\n\t\t  }\n\t\t  static async destroy(self) {\n\t\t    self.debug && console.log(`>> destroy ${self.url}`);\n\t\t    await self.volume.delete(self.url);\n\t\t    self.debug && console.log(`<< destroy ${self.url}`);\n\t\t  }\n\n\t\t  static async awake(self) {\n\t\t    const { workQueue } = self;\n\t\t    self.isIdle = false;\n\t\t    let index = 0;\n\t\t    while (index < workQueue.length) {\n\t\t      const request = workQueue[index++];\n\t\t      await this.perform(self, request);\n\t\t    }\n\t\t    workQueue.length = 0;\n\t\t    self.isIdle = true;\n\t\t  }\n\t\t  static schedule(self, request) {\n\t\t    self.workQueue.push(request);\n\t\t    if (self.isIdle) {\n\t\t      this.awake(self);\n\t\t    }\n\t\t  }\n\t\t  static async perform(self, request) {\n\t\t    try {\n\t\t      switch (request.type) {\n\t\t        case RequestType.open:\n\t\t          {\n\t\t            return request.callback(null, (await this.open(self, request)));\n\t\t          }\n\t\t        case RequestType.read:\n\t\t          {\n\t\t            return request.callback(null, (await this.read(self, request)));\n\t\t          }\n\t\t        case RequestType.write:\n\t\t          {\n\t\t            return request.callback(null, (await this.write(self, request)));\n\t\t          }\n\t\t        case RequestType.delete:\n\t\t          {\n\t\t            return request.callback(null, (await this.delete(self, request)));\n\t\t          }\n\t\t        case RequestType.stat:\n\t\t          {\n\t\t            return request.callback(null, (await this.stat(self)));\n\t\t          }\n\t\t        case RequestType.close:\n\t\t          {\n\t\t            return request.callback(null, (await this.close(self)));\n\t\t          }\n\t\t        case RequestType.destroy:\n\t\t          {\n\t\t            return request.callback(null, (await this.destroy(self)));\n\t\t          }\n\t\t      }\n\t\t    } catch (error) {\n\t\t      request.callback(error);\n\t\t    }\n\t\t  }\n\t\t  _open(request) {\n\t\t    RandomAccessProvider.schedule(this, request);\n\t\t  }\n\t\t  _openReadonly(request) {\n\t\t    RandomAccessProvider.schedule(this, request);\n\t\t  }\n\t\t  _write(request) {\n\t\t    RandomAccessProvider.schedule(this, request);\n\t\t  }\n\t\t  _read(request) {\n\t\t    RandomAccessProvider.schedule(this, request);\n\t\t  }\n\t\t  _del(request) {\n\t\t    RandomAccessProvider.schedule(this, request);\n\t\t  }\n\t\t  _stat(request) {\n\t\t    RandomAccessProvider.perform(this, request);\n\t\t  }\n\t\t  _close(request) {\n\t\t    RandomAccessProvider.schedule(this, request);\n\t\t  }\n\t\t  _destroy(request) {\n\t\t    RandomAccessProvider.schedule(this, request);\n\t\t  }\n\t\t  constructor(volume, url, options = {}) {\n\t\t    super();\n\t\t    this.volume = volume;\n\t\t    this.url = url;\n\t\t    this.options = options;\n\t\t    this.mode = \"readonly\";\n\t\t    this.file = null;\n\t\t    this.lockedFile = null;\n\n\t\t    this.workQueue = [];\n\t\t    this.isIdle = true;\n\t\t    this.debug = !!volume.options.debug;\n\t\t  }\n\t\t  activate() {\n\t\t    const { lockedFile, file, mode } = this;\n\t\t    if (lockedFile && lockedFile.active) {\n\t\t      return lockedFile;\n\t\t    } else if (file) {\n\t\t      const lockedFile = file.open(mode);\n\t\t      this.lockedFile = lockedFile;\n\t\t      return lockedFile;\n\t\t    } else {\n\t\t      throw new RangeError(`Unable to activate file, likely provider was destroyed`);\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tconst RequestType = {\n\t\t  open: 0,\n\t\t  read: 1,\n\t\t  write: 2,\n\t\t  delete: 3,\n\t\t  stat: 4,\n\t\t  close: 5,\n\t\t  destroy: 6\n\t\t};\n\n\t\texports.default = RandomAccessProvider;\n\t\tmodule.exports = exports[\"default\"];\n\t\t//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n} (randomAccessIdbMutableFileModule, randomAccessIdbMutableFile));\n\treturn randomAccessIdbMutableFile;\n}\n\nexport { requireRandomAccessIdbMutableFile as __require };","start":1670465469825,"end":1670465470471,"order":"normal"},{"name":"polyfill-node","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as randomAccessIdbMutableFileModule, exports as randomAccessIdbMutableFile } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/random-access-idb-mutable-file@0.3.0/node_modules/random-access-idb-mutable-file/lib/random-access-idb-mutable-file.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/random-access-storage@1.3.0/node_modules/random-access-storage/index.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/random-access-idb-mutable-file@0.3.0/node_modules/random-access-idb-mutable-file/lib/IndexedDB.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/buffer@5.1.0/node_modules/buffer/index.js?commonjs-wrapped\";\n\nvar hasRequiredRandomAccessIdbMutableFile;\n\nfunction requireRandomAccessIdbMutableFile () {\n\tif (hasRequiredRandomAccessIdbMutableFile) return randomAccessIdbMutableFile;\n\thasRequiredRandomAccessIdbMutableFile = 1;\n\t(function (module, exports) {\n\t\t\"use strict\";\n\n\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t  value: true\n\t\t});\n\n\t\tvar _randomAccessStorage = require$$0();\n\n\t\tvar _randomAccessStorage2 = _interopRequireDefault(_randomAccessStorage);\n\n\t\tvar _IndexedDB = require$$1();\n\n\t\tvar _buffer = require$$2();\n\n\t\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\t\tconst promise = (request) => new Promise((resolve, reject) => {\n\t\t  request.onsuccess = () => resolve(request.result);\n\t\t  request.onerror = () => reject(request.error);\n\t\t});\n\n\t\tclass RandomAccessIDBFileVolume {\n\t\t  constructor(db, name, version, storeName, options) {\n\t\t    this.db = db;\n\t\t    this.name = name;\n\t\t    this.version = version;\n\t\t    this.storeName = storeName;\n\t\t    this.options = options;\n\t\t  }\n\t\t  store() {\n\t\t    const { db, storeName } = this;\n\t\t    const transaction = db.transaction([storeName], \"readwrite\");\n\t\t    return transaction.objectStore(storeName);\n\t\t  }\n\t\t  async delete(url) {\n\t\t    return await promise(this.store().delete(url));\n\t\t  }\n\t\t  async save(url, file) {\n\t\t    return await promise(this.store().put(file, url));\n\t\t  }\n\t\t  async open(url, mode) {\n\t\t    const file = await promise(this.store().get(url));\n\t\t    if (file) {\n\t\t      return file;\n\t\t    } else if (mode === \"readwrite\") {\n\t\t      const file = await promise(this.db.createMutableFile(url, \"binary/random\"));\n\t\t      await this.save(url, file);\n\t\t      return file;\n\t\t    } else {\n\t\t      throw new RangeError(`File ${url} does not exist`);\n\t\t    }\n\t\t  }\n\n\t\t  mount(file, options) {\n\t\t    return new RandomAccessProvider(this, `/${file}`, options);\n\t\t  }\n\t\t}\n\n\t\tclass RandomAccessProvider extends _randomAccessStorage2.default {\n\n\t\t  static async mount(options = {}) {\n\t\t    if (!self.IDBMutableFile) {\n\t\t      throw Error(`Runtime does not supports IDBMutableFile https://developer.mozilla.org/en-US/docs/Web/API/IDBMutableFile`);\n\t\t    } else {\n\t\t      const name = options.name || `RandomAccess`;\n\t\t      const version = options.version || 1.0;\n\t\t      const storeName = options.storeName || `IDBMutableFile`;\n\n\t\t      const request = _IndexedDB.indexedDB.open(name, version);\n\t\t      request.onupgradeneeded = () => {\n\t\t        const db = request.result;\n\t\t        if (!db.objectStoreNames.contains(storeName)) {\n\t\t          db.createObjectStore(storeName);\n\t\t        }\n\t\t      };\n\t\t      const db = await promise(request);\n\t\t      const volume = new RandomAccessIDBFileVolume(db, name, version, storeName, options);\n\t\t      return (path, options) => volume.mount(path, options);\n\t\t    }\n\t\t  }\n\t\t  static async open(self, request) {\n\t\t    const { options } = self;\n\t\t    const mode = request.preferReadonly ? \"readonly\" : \"readwrite\";\n\t\t    self.debug && console.log(`>> open ${self.url} ${mode}`);\n\n\t\t    if (!self.file || self.mode !== mode && mode === \"readwrite\") {\n\t\t      self.mode = mode;\n\t\t      self.file = await self.volume.open(self.url, mode);\n\t\t    }\n\n\t\t    if (!(mode === \"readonly\" || !options.truncate)) {\n\t\t      const file = self.activate();\n\t\t      await promise(file.truncate(options.size || 0));\n\t\t    }\n\n\t\t    self.debug && console.log(`<< open ${self.url} ${mode}`);\n\t\t  }\n\t\t  static async read(self, { data, offset, size }) {\n\t\t    self.debug && console.log(`>> read ${self.url} <${offset}, ${size}>`);\n\t\t    const buffer = data || _buffer.Buffer.allocUnsafe(size);\n\t\t    if (size === 0) {\n\t\t      return buffer;\n\t\t    }\n\n\t\t    const file = self.activate();\n\t\t    file.location = offset;\n\t\t    const chunk = await promise(file.readAsArrayBuffer(size));\n\t\t    if (chunk.byteLength !== size) {\n\t\t      throw new Error(\"Could not satisfy length\");\n\t\t    }\n\n\t\t    _buffer.Buffer.from(chunk).copy(buffer);\n\t\t    self.debug && console.log(`<< read ${self.url} <${offset}, ${size}>`, buffer);\n\t\t    return buffer;\n\t\t  }\n\t\t  static async write(self, { data, offset, size }) {\n\t\t    self.debug && console.log(`>> write ${self.url} <${offset}, ${size}>`, data);\n\t\t    const { byteLength, byteOffset } = data;\n\t\t    const chunk = byteLength === size ? data : data.slice(0, size);\n\n\t\t    const file = self.activate();\n\t\t    file.location = offset;\n\t\t    const wrote = await promise(file.write(chunk));\n\n\t\t    self.debug && console.log(`<< write ${self.url} <${offset}, ${size}>`);\n\n\t\t    return wrote;\n\t\t  }\n\t\t  static async delete(self, { offset, size }) {\n\t\t    self.debug && console.log(`>> delete ${self.url} <${offset}, ${size}>`);\n\t\t    const stat = await this.stat(self);\n\t\t    if (offset + size >= stat.size) {\n\t\t      const file = self.activate();\n\t\t      await promise(file.truncate(offset));\n\t\t    }\n\n\t\t    self.debug && console.log(`<< delete ${self.url} <${offset}, ${size}>`);\n\t\t  }\n\t\t  static async stat(self) {\n\t\t    self.debug && console.log(`>> stat ${self.url}`);\n\t\t    const file = self.activate();\n\t\t    const stat = await promise(file.getMetadata());\n\t\t    self.debug && console.log(`<< stat {size:${stat.size}} ${self.url} `);\n\n\t\t    return stat;\n\t\t  }\n\t\t  static async close(self) {\n\t\t    self.debug && console.log(`>> close ${self.url}`);\n\t\t    const { lockedFile } = self;\n\t\t    if (lockedFile && lockedFile.active) {\n\t\t      await promise(lockedFile.flush());\n\t\t    }\n\t\t    self.lockedFile = null;\n\t\t    self.file = null;\n\t\t    self.debug && console.log(`<< close ${self.url}`);\n\t\t  }\n\t\t  static async destroy(self) {\n\t\t    self.debug && console.log(`>> destroy ${self.url}`);\n\t\t    await self.volume.delete(self.url);\n\t\t    self.debug && console.log(`<< destroy ${self.url}`);\n\t\t  }\n\n\t\t  static async awake(self) {\n\t\t    const { workQueue } = self;\n\t\t    self.isIdle = false;\n\t\t    let index = 0;\n\t\t    while (index < workQueue.length) {\n\t\t      const request = workQueue[index++];\n\t\t      await this.perform(self, request);\n\t\t    }\n\t\t    workQueue.length = 0;\n\t\t    self.isIdle = true;\n\t\t  }\n\t\t  static schedule(self, request) {\n\t\t    self.workQueue.push(request);\n\t\t    if (self.isIdle) {\n\t\t      this.awake(self);\n\t\t    }\n\t\t  }\n\t\t  static async perform(self, request) {\n\t\t    try {\n\t\t      switch (request.type) {\n\t\t        case RequestType.open:\n\t\t          {\n\t\t            return request.callback(null, (await this.open(self, request)));\n\t\t          }\n\t\t        case RequestType.read:\n\t\t          {\n\t\t            return request.callback(null, (await this.read(self, request)));\n\t\t          }\n\t\t        case RequestType.write:\n\t\t          {\n\t\t            return request.callback(null, (await this.write(self, request)));\n\t\t          }\n\t\t        case RequestType.delete:\n\t\t          {\n\t\t            return request.callback(null, (await this.delete(self, request)));\n\t\t          }\n\t\t        case RequestType.stat:\n\t\t          {\n\t\t            return request.callback(null, (await this.stat(self)));\n\t\t          }\n\t\t        case RequestType.close:\n\t\t          {\n\t\t            return request.callback(null, (await this.close(self)));\n\t\t          }\n\t\t        case RequestType.destroy:\n\t\t          {\n\t\t            return request.callback(null, (await this.destroy(self)));\n\t\t          }\n\t\t      }\n\t\t    } catch (error) {\n\t\t      request.callback(error);\n\t\t    }\n\t\t  }\n\t\t  _open(request) {\n\t\t    RandomAccessProvider.schedule(this, request);\n\t\t  }\n\t\t  _openReadonly(request) {\n\t\t    RandomAccessProvider.schedule(this, request);\n\t\t  }\n\t\t  _write(request) {\n\t\t    RandomAccessProvider.schedule(this, request);\n\t\t  }\n\t\t  _read(request) {\n\t\t    RandomAccessProvider.schedule(this, request);\n\t\t  }\n\t\t  _del(request) {\n\t\t    RandomAccessProvider.schedule(this, request);\n\t\t  }\n\t\t  _stat(request) {\n\t\t    RandomAccessProvider.perform(this, request);\n\t\t  }\n\t\t  _close(request) {\n\t\t    RandomAccessProvider.schedule(this, request);\n\t\t  }\n\t\t  _destroy(request) {\n\t\t    RandomAccessProvider.schedule(this, request);\n\t\t  }\n\t\t  constructor(volume, url, options = {}) {\n\t\t    super();\n\t\t    this.volume = volume;\n\t\t    this.url = url;\n\t\t    this.options = options;\n\t\t    this.mode = \"readonly\";\n\t\t    this.file = null;\n\t\t    this.lockedFile = null;\n\n\t\t    this.workQueue = [];\n\t\t    this.isIdle = true;\n\t\t    this.debug = !!volume.options.debug;\n\t\t  }\n\t\t  activate() {\n\t\t    const { lockedFile, file, mode } = this;\n\t\t    if (lockedFile && lockedFile.active) {\n\t\t      return lockedFile;\n\t\t    } else if (file) {\n\t\t      const lockedFile = file.open(mode);\n\t\t      this.lockedFile = lockedFile;\n\t\t      return lockedFile;\n\t\t    } else {\n\t\t      throw new RangeError(`Unable to activate file, likely provider was destroyed`);\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tconst RequestType = {\n\t\t  open: 0,\n\t\t  read: 1,\n\t\t  write: 2,\n\t\t  delete: 3,\n\t\t  stat: 4,\n\t\t  close: 5,\n\t\t  destroy: 6\n\t\t};\n\n\t\texports.default = RandomAccessProvider;\n\t\tmodule.exports = exports[\"default\"];\n\t\t//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n} (randomAccessIdbMutableFileModule, randomAccessIdbMutableFile));\n\treturn randomAccessIdbMutableFile;\n}\n\nexport { requireRandomAccessIdbMutableFile as __require };","start":1670465470472,"end":1670465470483,"order":"normal"}]}
