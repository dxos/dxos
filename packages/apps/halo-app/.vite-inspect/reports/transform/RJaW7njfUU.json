{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanomessage@8.4.0/node_modules/nanomessage/src/request.js","transforms":[{"name":"vite:load-fallback","result":"const { NMSG_ERR_CANCEL, NMSG_ERR_TIMEOUT } = require('./errors')\n\nclass Request {\n  static info (obj = {}) {\n    return {\n      id: obj.id,\n      data: obj.data,\n      response: obj.response || false,\n      ephemeral: obj.id === 0\n    }\n  }\n\n  constructor (info) {\n    const { id, data, response = false, timeout, signal } = info\n\n    this.id = id\n    this.data = data\n    this.response = response\n    this.finished = false\n    this.timeout = timeout\n    this.timer = null\n\n    let _resolve, _reject\n    this.promise = new Promise((resolve, reject) => {\n      _resolve = resolve\n      _reject = reject\n    })\n\n    this.promise.cancel = this.cancel.bind(this)\n\n    const onAbort = () => this.cancel()\n    if (signal) {\n      if (signal.aborted) {\n        process.nextTick(onAbort)\n      } else {\n        signal.addEventListener('abort', onAbort)\n      }\n    }\n\n    this.resolve = (data) => {\n      if (!this.finished) {\n        this.timer && clearTimeout(this.timer)\n        signal && signal.removeEventListener('abort', onAbort)\n        this.finished = true\n        this._onFinish()\n        _resolve(data)\n      }\n    }\n\n    this.reject = (err) => {\n      if (!this.finished) {\n        this.timer && clearTimeout(this.timer)\n        signal && signal.removeEventListener('abort', onAbort)\n        this.finished = true\n        this._onFinish(err)\n        _reject(err)\n      }\n    }\n  }\n\n  start () {\n    if (this.timeout) {\n      this.timer = setTimeout(() => {\n        this.reject(new NMSG_ERR_TIMEOUT(this.id))\n      }, this.timeout)\n    }\n  }\n\n  onFinish (cb) {\n    this._onFinish = cb\n  }\n\n  cancel (err) {\n    if (!err) {\n      err = new NMSG_ERR_CANCEL(this.id)\n    } else if (typeof err === 'string') {\n      err = new NMSG_ERR_CANCEL(this.id, err)\n    }\n\n    this.reject(err)\n  }\n\n  info () {\n    return Request.info(this)\n  }\n}\n\nmodule.exports = Request\n","start":1670465470120,"end":1670465470313},{"name":"vite:react-babel","result":"const { NMSG_ERR_CANCEL, NMSG_ERR_TIMEOUT } = require('./errors')\n\nclass Request {\n  static info (obj = {}) {\n    return {\n      id: obj.id,\n      data: obj.data,\n      response: obj.response || false,\n      ephemeral: obj.id === 0\n    }\n  }\n\n  constructor (info) {\n    const { id, data, response = false, timeout, signal } = info\n\n    this.id = id\n    this.data = data\n    this.response = response\n    this.finished = false\n    this.timeout = timeout\n    this.timer = null\n\n    let _resolve, _reject\n    this.promise = new Promise((resolve, reject) => {\n      _resolve = resolve\n      _reject = reject\n    })\n\n    this.promise.cancel = this.cancel.bind(this)\n\n    const onAbort = () => this.cancel()\n    if (signal) {\n      if (signal.aborted) {\n        process.nextTick(onAbort)\n      } else {\n        signal.addEventListener('abort', onAbort)\n      }\n    }\n\n    this.resolve = (data) => {\n      if (!this.finished) {\n        this.timer && clearTimeout(this.timer)\n        signal && signal.removeEventListener('abort', onAbort)\n        this.finished = true\n        this._onFinish()\n        _resolve(data)\n      }\n    }\n\n    this.reject = (err) => {\n      if (!this.finished) {\n        this.timer && clearTimeout(this.timer)\n        signal && signal.removeEventListener('abort', onAbort)\n        this.finished = true\n        this._onFinish(err)\n        _reject(err)\n      }\n    }\n  }\n\n  start () {\n    if (this.timeout) {\n      this.timer = setTimeout(() => {\n        this.reject(new NMSG_ERR_TIMEOUT(this.id))\n      }, this.timeout)\n    }\n  }\n\n  onFinish (cb) {\n    this._onFinish = cb\n  }\n\n  cancel (err) {\n    if (!err) {\n      err = new NMSG_ERR_CANCEL(this.id)\n    } else if (typeof err === 'string') {\n      err = new NMSG_ERR_CANCEL(this.id, err)\n    }\n\n    this.reject(err)\n  }\n\n  info () {\n    return Request.info(this)\n  }\n}\n\nmodule.exports = Request\n","start":1670465470313,"end":1670465470313,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanomessage@8.4.0/node_modules/nanomessage/src/errors.js?commonjs-proxy\";\n\nconst { NMSG_ERR_CANCEL, NMSG_ERR_TIMEOUT } = require$$0\n\nclass Request {\n  static info (obj = {}) {\n    return {\n      id: obj.id,\n      data: obj.data,\n      response: obj.response || false,\n      ephemeral: obj.id === 0\n    }\n  }\n\n  constructor (info) {\n    const { id, data, response = false, timeout, signal } = info\n\n    this.id = id\n    this.data = data\n    this.response = response\n    this.finished = false\n    this.timeout = timeout\n    this.timer = null\n\n    let _resolve, _reject\n    this.promise = new Promise((resolve, reject) => {\n      _resolve = resolve\n      _reject = reject\n    })\n\n    this.promise.cancel = this.cancel.bind(this)\n\n    const onAbort = () => this.cancel()\n    if (signal) {\n      if (signal.aborted) {\n        process.nextTick(onAbort)\n      } else {\n        signal.addEventListener('abort', onAbort)\n      }\n    }\n\n    this.resolve = (data) => {\n      if (!this.finished) {\n        this.timer && clearTimeout(this.timer)\n        signal && signal.removeEventListener('abort', onAbort)\n        this.finished = true\n        this._onFinish()\n        _resolve(data)\n      }\n    }\n\n    this.reject = (err) => {\n      if (!this.finished) {\n        this.timer && clearTimeout(this.timer)\n        signal && signal.removeEventListener('abort', onAbort)\n        this.finished = true\n        this._onFinish(err)\n        _reject(err)\n      }\n    }\n  }\n\n  start () {\n    if (this.timeout) {\n      this.timer = setTimeout(() => {\n        this.reject(new NMSG_ERR_TIMEOUT(this.id))\n      }, this.timeout)\n    }\n  }\n\n  onFinish (cb) {\n    this._onFinish = cb\n  }\n\n  cancel (err) {\n    if (!err) {\n      err = new NMSG_ERR_CANCEL(this.id)\n    } else if (typeof err === 'string') {\n      err = new NMSG_ERR_CANCEL(this.id, err)\n    }\n\n    this.reject(err)\n  }\n\n  info () {\n    return Request.info(this)\n  }\n}\n\nvar request = Request\n\nexport default request;\nexport { request as __moduleExports };","start":1670465470313,"end":1670465470315,"order":"normal"},{"name":"polyfill-node","result":"import { default as process } from '\u0000polyfill-node.process';\n\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanomessage@8.4.0/node_modules/nanomessage/src/errors.js?commonjs-proxy\";\n\nconst { NMSG_ERR_CANCEL, NMSG_ERR_TIMEOUT } = require$$0\n\nclass Request {\n  static info (obj = {}) {\n    return {\n      id: obj.id,\n      data: obj.data,\n      response: obj.response || false,\n      ephemeral: obj.id === 0\n    }\n  }\n\n  constructor (info) {\n    const { id, data, response = false, timeout, signal } = info\n\n    this.id = id\n    this.data = data\n    this.response = response\n    this.finished = false\n    this.timeout = timeout\n    this.timer = null\n\n    let _resolve, _reject\n    this.promise = new Promise((resolve, reject) => {\n      _resolve = resolve\n      _reject = reject\n    })\n\n    this.promise.cancel = this.cancel.bind(this)\n\n    const onAbort = () => this.cancel()\n    if (signal) {\n      if (signal.aborted) {\n        process.nextTick(onAbort)\n      } else {\n        signal.addEventListener('abort', onAbort)\n      }\n    }\n\n    this.resolve = (data) => {\n      if (!this.finished) {\n        this.timer && clearTimeout(this.timer)\n        signal && signal.removeEventListener('abort', onAbort)\n        this.finished = true\n        this._onFinish()\n        _resolve(data)\n      }\n    }\n\n    this.reject = (err) => {\n      if (!this.finished) {\n        this.timer && clearTimeout(this.timer)\n        signal && signal.removeEventListener('abort', onAbort)\n        this.finished = true\n        this._onFinish(err)\n        _reject(err)\n      }\n    }\n  }\n\n  start () {\n    if (this.timeout) {\n      this.timer = setTimeout(() => {\n        this.reject(new NMSG_ERR_TIMEOUT(this.id))\n      }, this.timeout)\n    }\n  }\n\n  onFinish (cb) {\n    this._onFinish = cb\n  }\n\n  cancel (err) {\n    if (!err) {\n      err = new NMSG_ERR_CANCEL(this.id)\n    } else if (typeof err === 'string') {\n      err = new NMSG_ERR_CANCEL(this.id, err)\n    }\n\n    this.reject(err)\n  }\n\n  info () {\n    return Request.info(this)\n  }\n}\n\nvar request = Request\n\nexport default request;\nexport { request as __moduleExports };","start":1670465470315,"end":1670465470316,"order":"normal"}]}
