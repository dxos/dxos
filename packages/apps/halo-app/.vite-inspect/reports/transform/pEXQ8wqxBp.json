{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/enc-utf16.js","transforms":[{"name":"vite:load-fallback","result":";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * UTF-16 BE encoding strategy.\n\t     */\n\t    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 BE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 BE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 BE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 BE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-16 LE encoding strategy.\n\t     */\n\t    C_enc.Utf16LE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 LE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 LE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 LE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 LE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    function swapEndian(word) {\n\t        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Utf16;\n\n}));","start":1670465468898,"end":1670465469065},{"name":"vite:react-babel","result":";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * UTF-16 BE encoding strategy.\n\t     */\n\t    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 BE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 BE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 BE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 BE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-16 LE encoding strategy.\n\t     */\n\t    C_enc.Utf16LE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 LE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 LE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 LE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 LE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    function swapEndian(word) {\n\t        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Utf16;\n\n}));","start":1670465469065,"end":1670465469065,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as encUtf16Module, exports as encUtf16 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/enc-utf16.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/core.js?commonjs-wrapped\";\n\nvar hasRequiredEncUtf16;\n\nfunction requireEncUtf16 () {\n\tif (hasRequiredEncUtf16) return encUtf16;\n\thasRequiredEncUtf16 = 1;\n\t(function (module, exports) {\n\t\t;(function (root, factory) {\n\t\t\tif ('object' === \"object\") {\n\t\t\t\t// CommonJS\n\t\t\t\tmodule.exports = exports = factory(require$$0());\n\t\t\t}\n\t\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t\t// AMD\n\t\t\t\tundefined([\"./core\"], factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Global (browser)\n\t\t\t\tfactory(root.CryptoJS);\n\t\t\t}\n\t\t}(commonjsHelpers.commonjsGlobal, function (CryptoJS) {\n\n\t\t\t(function () {\n\t\t\t    // Shortcuts\n\t\t\t    var C = CryptoJS;\n\t\t\t    var C_lib = C.lib;\n\t\t\t    var WordArray = C_lib.WordArray;\n\t\t\t    var C_enc = C.enc;\n\n\t\t\t    /**\n\t\t\t     * UTF-16 BE encoding strategy.\n\t\t\t     */\n\t\t\t    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {\n\t\t\t        /**\n\t\t\t         * Converts a word array to a UTF-16 BE string.\n\t\t\t         *\n\t\t\t         * @param {WordArray} wordArray The word array.\n\t\t\t         *\n\t\t\t         * @return {string} The UTF-16 BE string.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n\t\t\t         */\n\t\t\t        stringify: function (wordArray) {\n\t\t\t            // Shortcuts\n\t\t\t            var words = wordArray.words;\n\t\t\t            var sigBytes = wordArray.sigBytes;\n\n\t\t\t            // Convert\n\t\t\t            var utf16Chars = [];\n\t\t\t            for (var i = 0; i < sigBytes; i += 2) {\n\t\t\t                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;\n\t\t\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t\t\t            }\n\n\t\t\t            return utf16Chars.join('');\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Converts a UTF-16 BE string to a word array.\n\t\t\t         *\n\t\t\t         * @param {string} utf16Str The UTF-16 BE string.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The word array.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n\t\t\t         */\n\t\t\t        parse: function (utf16Str) {\n\t\t\t            // Shortcut\n\t\t\t            var utf16StrLength = utf16Str.length;\n\n\t\t\t            // Convert\n\t\t\t            var words = [];\n\t\t\t            for (var i = 0; i < utf16StrLength; i++) {\n\t\t\t                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);\n\t\t\t            }\n\n\t\t\t            return WordArray.create(words, utf16StrLength * 2);\n\t\t\t        }\n\t\t\t    };\n\n\t\t\t    /**\n\t\t\t     * UTF-16 LE encoding strategy.\n\t\t\t     */\n\t\t\t    C_enc.Utf16LE = {\n\t\t\t        /**\n\t\t\t         * Converts a word array to a UTF-16 LE string.\n\t\t\t         *\n\t\t\t         * @param {WordArray} wordArray The word array.\n\t\t\t         *\n\t\t\t         * @return {string} The UTF-16 LE string.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n\t\t\t         */\n\t\t\t        stringify: function (wordArray) {\n\t\t\t            // Shortcuts\n\t\t\t            var words = wordArray.words;\n\t\t\t            var sigBytes = wordArray.sigBytes;\n\n\t\t\t            // Convert\n\t\t\t            var utf16Chars = [];\n\t\t\t            for (var i = 0; i < sigBytes; i += 2) {\n\t\t\t                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);\n\t\t\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t\t\t            }\n\n\t\t\t            return utf16Chars.join('');\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Converts a UTF-16 LE string to a word array.\n\t\t\t         *\n\t\t\t         * @param {string} utf16Str The UTF-16 LE string.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The word array.\n\t\t\t         *\n\t\t\t         * @static\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n\t\t\t         */\n\t\t\t        parse: function (utf16Str) {\n\t\t\t            // Shortcut\n\t\t\t            var utf16StrLength = utf16Str.length;\n\n\t\t\t            // Convert\n\t\t\t            var words = [];\n\t\t\t            for (var i = 0; i < utf16StrLength; i++) {\n\t\t\t                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));\n\t\t\t            }\n\n\t\t\t            return WordArray.create(words, utf16StrLength * 2);\n\t\t\t        }\n\t\t\t    };\n\n\t\t\t    function swapEndian(word) {\n\t\t\t        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);\n\t\t\t    }\n\t\t\t}());\n\n\n\t\t\treturn CryptoJS.enc.Utf16;\n\n\t\t}));\n} (encUtf16Module, encUtf16));\n\treturn encUtf16;\n}\n\nexport { requireEncUtf16 as __require };","start":1670465469065,"end":1670465469066,"order":"normal"}]}
