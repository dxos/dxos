{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/buffer-json@2.0.0/node_modules/buffer-json/index.js","transforms":[{"name":"vite:load-fallback","result":"function stringify (value, space) {\n  return JSON.stringify(value, replacer, space)\n}\n\nfunction parse (text) {\n  return JSON.parse(text, reviver)\n}\n\nfunction replacer (key, value) {\n  if (isBufferLike(value)) {\n    if (isArray(value.data)) {\n      if (value.data.length > 0) {\n        value.data = 'base64:' + Buffer.from(value.data).toString('base64')\n      } else {\n        value.data = ''\n      }\n    }\n  }\n  return value\n}\n\nfunction reviver (key, value) {\n  if (isBufferLike(value)) {\n    if (isArray(value.data)) {\n      return Buffer.from(value.data)\n    } else if (isString(value.data)) {\n      if (value.data.startsWith('base64:')) {\n        return Buffer.from(value.data.slice('base64:'.length), 'base64')\n      }\n      // Assume that the string is UTF-8 encoded (or empty).\n      return Buffer.from(value.data)\n    }\n  }\n  return value\n}\n\nfunction isBufferLike (x) {\n  return (\n    isObject(x) && x.type === 'Buffer' && (isArray(x.data) || isString(x.data))\n  )\n}\n\nfunction isArray (x) {\n  return Array.isArray(x)\n}\n\nfunction isString (x) {\n  return typeof x === 'string'\n}\n\nfunction isObject (x) {\n  return typeof x === 'object' && x !== null\n}\n\nmodule.exports = {\n  stringify,\n  parse,\n  replacer,\n  reviver\n}\n","start":1670465469383,"end":1670465469646},{"name":"vite:react-babel","result":"function stringify (value, space) {\n  return JSON.stringify(value, replacer, space)\n}\n\nfunction parse (text) {\n  return JSON.parse(text, reviver)\n}\n\nfunction replacer (key, value) {\n  if (isBufferLike(value)) {\n    if (isArray(value.data)) {\n      if (value.data.length > 0) {\n        value.data = 'base64:' + Buffer.from(value.data).toString('base64')\n      } else {\n        value.data = ''\n      }\n    }\n  }\n  return value\n}\n\nfunction reviver (key, value) {\n  if (isBufferLike(value)) {\n    if (isArray(value.data)) {\n      return Buffer.from(value.data)\n    } else if (isString(value.data)) {\n      if (value.data.startsWith('base64:')) {\n        return Buffer.from(value.data.slice('base64:'.length), 'base64')\n      }\n      // Assume that the string is UTF-8 encoded (or empty).\n      return Buffer.from(value.data)\n    }\n  }\n  return value\n}\n\nfunction isBufferLike (x) {\n  return (\n    isObject(x) && x.type === 'Buffer' && (isArray(x.data) || isString(x.data))\n  )\n}\n\nfunction isArray (x) {\n  return Array.isArray(x)\n}\n\nfunction isString (x) {\n  return typeof x === 'string'\n}\n\nfunction isObject (x) {\n  return typeof x === 'object' && x !== null\n}\n\nmodule.exports = {\n  stringify,\n  parse,\n  replacer,\n  reviver\n}\n","start":1670465469646,"end":1670465469646,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nfunction stringify (value, space) {\n  return JSON.stringify(value, replacer, space)\n}\n\nfunction parse (text) {\n  return JSON.parse(text, reviver)\n}\n\nfunction replacer (key, value) {\n  if (isBufferLike(value)) {\n    if (isArray(value.data)) {\n      if (value.data.length > 0) {\n        value.data = 'base64:' + Buffer.from(value.data).toString('base64')\n      } else {\n        value.data = ''\n      }\n    }\n  }\n  return value\n}\n\nfunction reviver (key, value) {\n  if (isBufferLike(value)) {\n    if (isArray(value.data)) {\n      return Buffer.from(value.data)\n    } else if (isString(value.data)) {\n      if (value.data.startsWith('base64:')) {\n        return Buffer.from(value.data.slice('base64:'.length), 'base64')\n      }\n      // Assume that the string is UTF-8 encoded (or empty).\n      return Buffer.from(value.data)\n    }\n  }\n  return value\n}\n\nfunction isBufferLike (x) {\n  return (\n    isObject(x) && x.type === 'Buffer' && (isArray(x.data) || isString(x.data))\n  )\n}\n\nfunction isArray (x) {\n  return Array.isArray(x)\n}\n\nfunction isString (x) {\n  return typeof x === 'string'\n}\n\nfunction isObject (x) {\n  return typeof x === 'object' && x !== null\n}\n\nvar bufferJson = {\n  stringify,\n  parse,\n  replacer,\n  reviver\n}\n\nexport default bufferJson;\nexport { bufferJson as __moduleExports };","start":1670465469646,"end":1670465469648,"order":"normal"},{"name":"polyfill-node","result":"import { Buffer as Buffer } from '\u0000polyfill-node.buffer';\n\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nfunction stringify (value, space) {\n  return JSON.stringify(value, replacer, space)\n}\n\nfunction parse (text) {\n  return JSON.parse(text, reviver)\n}\n\nfunction replacer (key, value) {\n  if (isBufferLike(value)) {\n    if (isArray(value.data)) {\n      if (value.data.length > 0) {\n        value.data = 'base64:' + Buffer.from(value.data).toString('base64')\n      } else {\n        value.data = ''\n      }\n    }\n  }\n  return value\n}\n\nfunction reviver (key, value) {\n  if (isBufferLike(value)) {\n    if (isArray(value.data)) {\n      return Buffer.from(value.data)\n    } else if (isString(value.data)) {\n      if (value.data.startsWith('base64:')) {\n        return Buffer.from(value.data.slice('base64:'.length), 'base64')\n      }\n      // Assume that the string is UTF-8 encoded (or empty).\n      return Buffer.from(value.data)\n    }\n  }\n  return value\n}\n\nfunction isBufferLike (x) {\n  return (\n    isObject(x) && x.type === 'Buffer' && (isArray(x.data) || isString(x.data))\n  )\n}\n\nfunction isArray (x) {\n  return Array.isArray(x)\n}\n\nfunction isString (x) {\n  return typeof x === 'string'\n}\n\nfunction isObject (x) {\n  return typeof x === 'object' && x !== null\n}\n\nvar bufferJson = {\n  stringify,\n  parse,\n  replacer,\n  reviver\n}\n\nexport default bufferJson;\nexport { bufferJson as __moduleExports };","start":1670465469648,"end":1670465469649,"order":"normal"}]}
