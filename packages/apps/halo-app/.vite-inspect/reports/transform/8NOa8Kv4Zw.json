{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+path@1.1.2/node_modules/@protobufjs/path/index.js","transforms":[{"name":"vite:load-fallback","result":"\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","start":1670465470929,"end":1670465470981},{"name":"vite:react-babel","result":"\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","start":1670465470981,"end":1670465470981,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as path_1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+path@1.1.2/node_modules/@protobufjs/path/index.js?commonjs-exports\"\n\n(function (exports) {\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n\t * @memberof util\r\n\t * @namespace\r\n\t */\r\n\tvar path = exports;\r\n\r\n\tvar isAbsolute =\r\n\t/**\r\n\t * Tests if the specified path is absolute.\r\n\t * @param {string} path Path to test\r\n\t * @returns {boolean} `true` if path is absolute\r\n\t */\r\n\tpath.isAbsolute = function isAbsolute(path) {\r\n\t    return /^(?:\\/|\\w+:)/.test(path);\r\n\t};\r\n\r\n\tvar normalize =\r\n\t/**\r\n\t * Normalizes the specified path.\r\n\t * @param {string} path Path to normalize\r\n\t * @returns {string} Normalized path\r\n\t */\r\n\tpath.normalize = function normalize(path) {\r\n\t    path = path.replace(/\\\\/g, \"/\")\r\n\t               .replace(/\\/{2,}/g, \"/\");\r\n\t    var parts    = path.split(\"/\"),\r\n\t        absolute = isAbsolute(path),\r\n\t        prefix   = \"\";\r\n\t    if (absolute)\r\n\t        prefix = parts.shift() + \"/\";\r\n\t    for (var i = 0; i < parts.length;) {\r\n\t        if (parts[i] === \"..\") {\r\n\t            if (i > 0 && parts[i - 1] !== \"..\")\r\n\t                parts.splice(--i, 2);\r\n\t            else if (absolute)\r\n\t                parts.splice(i, 1);\r\n\t            else\r\n\t                ++i;\r\n\t        } else if (parts[i] === \".\")\r\n\t            parts.splice(i, 1);\r\n\t        else\r\n\t            ++i;\r\n\t    }\r\n\t    return prefix + parts.join(\"/\");\r\n\t};\r\n\r\n\t/**\r\n\t * Resolves the specified include path against the specified origin path.\r\n\t * @param {string} originPath Path to the origin file\r\n\t * @param {string} includePath Include path relative to origin path\r\n\t * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n\t * @returns {string} Path to the include file\r\n\t */\r\n\tpath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n\t    if (!alreadyNormalized)\r\n\t        includePath = normalize(includePath);\r\n\t    if (isAbsolute(includePath))\r\n\t        return includePath;\r\n\t    if (!alreadyNormalized)\r\n\t        originPath = normalize(originPath);\r\n\t    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n\t};\n} (path_1));\n\nexport default path_1;\nexport { path_1 as __moduleExports };","start":1670465470981,"end":1670465470982,"order":"normal"}]}
