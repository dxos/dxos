{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/wrappers.js","transforms":[{"name":"vite:load-fallback","result":"\"use strict\";\n\n/**\n * Wrappers for common types.\n * @type {Object.<string,IWrapper>}\n * @const\n */\nvar wrappers = exports;\n\nvar Message = require(\"./message\");\n\n/**\n * From object converter part of an {@link IWrapper}.\n * @typedef WrapperFromObjectConverter\n * @type {function}\n * @param {Object.<string,*>} object Plain object\n * @returns {Message<{}>} Message instance\n * @this Type\n */\n\n/**\n * To object converter part of an {@link IWrapper}.\n * @typedef WrapperToObjectConverter\n * @type {function}\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @this Type\n */\n\n/**\n * Common type wrapper part of {@link wrappers}.\n * @interface IWrapper\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\n * @property {WrapperToObjectConverter} [toObject] To object converter\n */\n\n// Custom wrapper for Any\nwrappers[\".google.protobuf.Any\"] = {\n\n    fromObject: function(object) {\n\n        // unwrap value type if mapped\n        if (object && object[\"@type\"]) {\n             // Only use fully qualified type name after the last '/'\n            var name = object[\"@type\"].substring(object[\"@type\"].lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */\n            if (type) {\n                // type_url does not accept leading \".\"\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\n                    object[\"@type\"].substr(1) : object[\"@type\"];\n                // type_url prefix is optional, but path seperator is required\n                if (type_url.indexOf(\"/\") === -1) {\n                    type_url = \"/\" + type_url;\n                }\n                return this.create({\n                    type_url: type_url,\n                    value: type.encode(type.fromObject(object)).finish()\n                });\n            }\n        }\n\n        return this.fromObject(object);\n    },\n\n    toObject: function(message, options) {\n\n        // Default prefix\n        var googleApi = \"type.googleapis.com/\";\n        var prefix = \"\";\n        var name = \"\";\n\n        // decode value if requested and unmapped\n        if (options && options.json && message.type_url && message.value) {\n            // Only use fully qualified type name after the last '/'\n            name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\n            // Separate the prefix used\n            prefix = message.type_url.substring(0, message.type_url.lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */\n            if (type)\n                message = type.decode(message.value);\n        }\n\n        // wrap value if unmapped\n        if (!(message instanceof this.ctor) && message instanceof Message) {\n            var object = message.$type.toObject(message, options);\n            var messageName = message.$type.fullName[0] === \".\" ?\n                message.$type.fullName.substr(1) : message.$type.fullName;\n            // Default to type.googleapis.com prefix if no prefix is used\n            if (prefix === \"\") {\n                prefix = googleApi;\n            }\n            name = prefix + messageName;\n            object[\"@type\"] = name;\n            return object;\n        }\n\n        return this.toObject(message, options);\n    }\n};\n","start":1670465470611,"end":1670465470684},{"name":"vite:react-babel","result":"\"use strict\";\n\n/**\n * Wrappers for common types.\n * @type {Object.<string,IWrapper>}\n * @const\n */\nvar wrappers = exports;\n\nvar Message = require(\"./message\");\n\n/**\n * From object converter part of an {@link IWrapper}.\n * @typedef WrapperFromObjectConverter\n * @type {function}\n * @param {Object.<string,*>} object Plain object\n * @returns {Message<{}>} Message instance\n * @this Type\n */\n\n/**\n * To object converter part of an {@link IWrapper}.\n * @typedef WrapperToObjectConverter\n * @type {function}\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @this Type\n */\n\n/**\n * Common type wrapper part of {@link wrappers}.\n * @interface IWrapper\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\n * @property {WrapperToObjectConverter} [toObject] To object converter\n */\n\n// Custom wrapper for Any\nwrappers[\".google.protobuf.Any\"] = {\n\n    fromObject: function(object) {\n\n        // unwrap value type if mapped\n        if (object && object[\"@type\"]) {\n             // Only use fully qualified type name after the last '/'\n            var name = object[\"@type\"].substring(object[\"@type\"].lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */\n            if (type) {\n                // type_url does not accept leading \".\"\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\n                    object[\"@type\"].substr(1) : object[\"@type\"];\n                // type_url prefix is optional, but path seperator is required\n                if (type_url.indexOf(\"/\") === -1) {\n                    type_url = \"/\" + type_url;\n                }\n                return this.create({\n                    type_url: type_url,\n                    value: type.encode(type.fromObject(object)).finish()\n                });\n            }\n        }\n\n        return this.fromObject(object);\n    },\n\n    toObject: function(message, options) {\n\n        // Default prefix\n        var googleApi = \"type.googleapis.com/\";\n        var prefix = \"\";\n        var name = \"\";\n\n        // decode value if requested and unmapped\n        if (options && options.json && message.type_url && message.value) {\n            // Only use fully qualified type name after the last '/'\n            name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\n            // Separate the prefix used\n            prefix = message.type_url.substring(0, message.type_url.lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */\n            if (type)\n                message = type.decode(message.value);\n        }\n\n        // wrap value if unmapped\n        if (!(message instanceof this.ctor) && message instanceof Message) {\n            var object = message.$type.toObject(message, options);\n            var messageName = message.$type.fullName[0] === \".\" ?\n                message.$type.fullName.substr(1) : message.$type.fullName;\n            // Default to type.googleapis.com prefix if no prefix is used\n            if (prefix === \"\") {\n                prefix = googleApi;\n            }\n            name = prefix + messageName;\n            object[\"@type\"] = name;\n            return object;\n        }\n\n        return this.toObject(message, options);\n    }\n};\n","start":1670465470684,"end":1670465470684,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as wrappers_1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/wrappers.js?commonjs-exports\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/message.js?commonjs-proxy\";\n\n(function (exports) {\n\t\"use strict\";\n\n\t/**\n\t * Wrappers for common types.\n\t * @type {Object.<string,IWrapper>}\n\t * @const\n\t */\n\tvar wrappers = exports;\n\n\tvar Message = require$$0;\n\n\t/**\n\t * From object converter part of an {@link IWrapper}.\n\t * @typedef WrapperFromObjectConverter\n\t * @type {function}\n\t * @param {Object.<string,*>} object Plain object\n\t * @returns {Message<{}>} Message instance\n\t * @this Type\n\t */\n\n\t/**\n\t * To object converter part of an {@link IWrapper}.\n\t * @typedef WrapperToObjectConverter\n\t * @type {function}\n\t * @param {Message<{}>} message Message instance\n\t * @param {IConversionOptions} [options] Conversion options\n\t * @returns {Object.<string,*>} Plain object\n\t * @this Type\n\t */\n\n\t/**\n\t * Common type wrapper part of {@link wrappers}.\n\t * @interface IWrapper\n\t * @property {WrapperFromObjectConverter} [fromObject] From object converter\n\t * @property {WrapperToObjectConverter} [toObject] To object converter\n\t */\n\n\t// Custom wrapper for Any\n\twrappers[\".google.protobuf.Any\"] = {\n\n\t    fromObject: function(object) {\n\n\t        // unwrap value type if mapped\n\t        if (object && object[\"@type\"]) {\n\t             // Only use fully qualified type name after the last '/'\n\t            var name = object[\"@type\"].substring(object[\"@type\"].lastIndexOf(\"/\") + 1);\n\t            var type = this.lookup(name);\n\t            /* istanbul ignore else */\n\t            if (type) {\n\t                // type_url does not accept leading \".\"\n\t                var type_url = object[\"@type\"].charAt(0) === \".\" ?\n\t                    object[\"@type\"].substr(1) : object[\"@type\"];\n\t                // type_url prefix is optional, but path seperator is required\n\t                if (type_url.indexOf(\"/\") === -1) {\n\t                    type_url = \"/\" + type_url;\n\t                }\n\t                return this.create({\n\t                    type_url: type_url,\n\t                    value: type.encode(type.fromObject(object)).finish()\n\t                });\n\t            }\n\t        }\n\n\t        return this.fromObject(object);\n\t    },\n\n\t    toObject: function(message, options) {\n\n\t        // Default prefix\n\t        var googleApi = \"type.googleapis.com/\";\n\t        var prefix = \"\";\n\t        var name = \"\";\n\n\t        // decode value if requested and unmapped\n\t        if (options && options.json && message.type_url && message.value) {\n\t            // Only use fully qualified type name after the last '/'\n\t            name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\n\t            // Separate the prefix used\n\t            prefix = message.type_url.substring(0, message.type_url.lastIndexOf(\"/\") + 1);\n\t            var type = this.lookup(name);\n\t            /* istanbul ignore else */\n\t            if (type)\n\t                message = type.decode(message.value);\n\t        }\n\n\t        // wrap value if unmapped\n\t        if (!(message instanceof this.ctor) && message instanceof Message) {\n\t            var object = message.$type.toObject(message, options);\n\t            var messageName = message.$type.fullName[0] === \".\" ?\n\t                message.$type.fullName.substr(1) : message.$type.fullName;\n\t            // Default to type.googleapis.com prefix if no prefix is used\n\t            if (prefix === \"\") {\n\t                prefix = googleApi;\n\t            }\n\t            name = prefix + messageName;\n\t            object[\"@type\"] = name;\n\t            return object;\n\t        }\n\n\t        return this.toObject(message, options);\n\t    }\n\t};\n} (wrappers_1));\n\nexport default wrappers_1;\nexport { wrappers_1 as __moduleExports };","start":1670465470685,"end":1670465471364,"order":"normal"}]}
