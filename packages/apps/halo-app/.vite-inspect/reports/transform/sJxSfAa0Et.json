{"resolvedId":"/home/jdw/Code/dxos/dxos/packages/common/node-std/dist/lib/browser/stream.cjs","transforms":[{"name":"vite:load-fallback","result":"\"use strict\";\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\n\n// node_modules/.pnpm/events@3.3.0/node_modules/events/events.js\nvar require_events = __commonJS({\n  \"node_modules/.pnpm/events@3.3.0/node_modules/events/events.js\"(exports2, module2) {\n    \"use strict\";\n    var R = typeof Reflect === \"object\" ? Reflect : null;\n    var ReflectApply = R && typeof R.apply === \"function\" ? R.apply : function ReflectApply2(target, receiver, args) {\n      return Function.prototype.apply.call(target, receiver, args);\n    };\n    var ReflectOwnKeys;\n    if (R && typeof R.ownKeys === \"function\") {\n      ReflectOwnKeys = R.ownKeys;\n    } else if (Object.getOwnPropertySymbols) {\n      ReflectOwnKeys = function ReflectOwnKeys2(target) {\n        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));\n      };\n    } else {\n      ReflectOwnKeys = function ReflectOwnKeys2(target) {\n        return Object.getOwnPropertyNames(target);\n      };\n    }\n    function ProcessEmitWarning(warning) {\n      if (console && console.warn)\n        console.warn(warning);\n    }\n    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {\n      return value !== value;\n    };\n    function EventEmitter() {\n      EventEmitter.init.call(this);\n    }\n    module2.exports = EventEmitter;\n    module2.exports.once = once;\n    EventEmitter.EventEmitter = EventEmitter;\n    EventEmitter.prototype._events = void 0;\n    EventEmitter.prototype._eventsCount = 0;\n    EventEmitter.prototype._maxListeners = void 0;\n    var defaultMaxListeners = 10;\n    function checkListener(listener) {\n      if (typeof listener !== \"function\") {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n    }\n    Object.defineProperty(EventEmitter, \"defaultMaxListeners\", {\n      enumerable: true,\n      get: function() {\n        return defaultMaxListeners;\n      },\n      set: function(arg) {\n        if (typeof arg !== \"number\" || arg < 0 || NumberIsNaN(arg)) {\n          throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + \".\");\n        }\n        defaultMaxListeners = arg;\n      }\n    });\n    EventEmitter.init = function() {\n      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {\n        this._events = /* @__PURE__ */ Object.create(null);\n        this._eventsCount = 0;\n      }\n      this._maxListeners = this._maxListeners || void 0;\n    };\n    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n      if (typeof n !== \"number\" || n < 0 || NumberIsNaN(n)) {\n        throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + \".\");\n      }\n      this._maxListeners = n;\n      return this;\n    };\n    function _getMaxListeners(that) {\n      if (that._maxListeners === void 0)\n        return EventEmitter.defaultMaxListeners;\n      return that._maxListeners;\n    }\n    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n      return _getMaxListeners(this);\n    };\n    EventEmitter.prototype.emit = function emit(type) {\n      var args = [];\n      for (var i = 1; i < arguments.length; i++)\n        args.push(arguments[i]);\n      var doError = type === \"error\";\n      var events = this._events;\n      if (events !== void 0)\n        doError = doError && events.error === void 0;\n      else if (!doError)\n        return false;\n      if (doError) {\n        var er;\n        if (args.length > 0)\n          er = args[0];\n        if (er instanceof Error) {\n          throw er;\n        }\n        var err = new Error(\"Unhandled error.\" + (er ? \" (\" + er.message + \")\" : \"\"));\n        err.context = er;\n        throw err;\n      }\n      var handler = events[type];\n      if (handler === void 0)\n        return false;\n      if (typeof handler === \"function\") {\n        ReflectApply(handler, this, args);\n      } else {\n        var len = handler.length;\n        var listeners = arrayClone(handler, len);\n        for (var i = 0; i < len; ++i)\n          ReflectApply(listeners[i], this, args);\n      }\n      return true;\n    };\n    function _addListener(target, type, listener, prepend) {\n      var m;\n      var events;\n      var existing;\n      checkListener(listener);\n      events = target._events;\n      if (events === void 0) {\n        events = target._events = /* @__PURE__ */ Object.create(null);\n        target._eventsCount = 0;\n      } else {\n        if (events.newListener !== void 0) {\n          target.emit(\n            \"newListener\",\n            type,\n            listener.listener ? listener.listener : listener\n          );\n          events = target._events;\n        }\n        existing = events[type];\n      }\n      if (existing === void 0) {\n        existing = events[type] = listener;\n        ++target._eventsCount;\n      } else {\n        if (typeof existing === \"function\") {\n          existing = events[type] = prepend ? [listener, existing] : [existing, listener];\n        } else if (prepend) {\n          existing.unshift(listener);\n        } else {\n          existing.push(listener);\n        }\n        m = _getMaxListeners(target);\n        if (m > 0 && existing.length > m && !existing.warned) {\n          existing.warned = true;\n          var w = new Error(\"Possible EventEmitter memory leak detected. \" + existing.length + \" \" + String(type) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n          w.name = \"MaxListenersExceededWarning\";\n          w.emitter = target;\n          w.type = type;\n          w.count = existing.length;\n          ProcessEmitWarning(w);\n        }\n      }\n      return target;\n    }\n    EventEmitter.prototype.addListener = function addListener(type, listener) {\n      return _addListener(this, type, listener, false);\n    };\n    EventEmitter.prototype.on = EventEmitter.prototype.addListener;\n    EventEmitter.prototype.prependListener = function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n    function onceWrapper() {\n      if (!this.fired) {\n        this.target.removeListener(this.type, this.wrapFn);\n        this.fired = true;\n        if (arguments.length === 0)\n          return this.listener.call(this.target);\n        return this.listener.apply(this.target, arguments);\n      }\n    }\n    function _onceWrap(target, type, listener) {\n      var state = { fired: false, wrapFn: void 0, target, type, listener };\n      var wrapped = onceWrapper.bind(state);\n      wrapped.listener = listener;\n      state.wrapFn = wrapped;\n      return wrapped;\n    }\n    EventEmitter.prototype.once = function once2(type, listener) {\n      checkListener(listener);\n      this.on(type, _onceWrap(this, type, listener));\n      return this;\n    };\n    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n    EventEmitter.prototype.removeListener = function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n      checkListener(listener);\n      events = this._events;\n      if (events === void 0)\n        return this;\n      list = events[type];\n      if (list === void 0)\n        return this;\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = /* @__PURE__ */ Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit(\"removeListener\", type, list.listener || listener);\n        }\n      } else if (typeof list !== \"function\") {\n        position = -1;\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n        if (position < 0)\n          return this;\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n        if (list.length === 1)\n          events[type] = list[0];\n        if (events.removeListener !== void 0)\n          this.emit(\"removeListener\", type, originalListener || listener);\n      }\n      return this;\n    };\n    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {\n      var listeners, events, i;\n      events = this._events;\n      if (events === void 0)\n        return this;\n      if (events.removeListener === void 0) {\n        if (arguments.length === 0) {\n          this._events = /* @__PURE__ */ Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== void 0) {\n          if (--this._eventsCount === 0)\n            this._events = /* @__PURE__ */ Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === \"removeListener\")\n            continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners(\"removeListener\");\n        this._events = /* @__PURE__ */ Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n      listeners = events[type];\n      if (typeof listeners === \"function\") {\n        this.removeListener(type, listeners);\n      } else if (listeners !== void 0) {\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n      return this;\n    };\n    function _listeners(target, type, unwrap) {\n      var events = target._events;\n      if (events === void 0)\n        return [];\n      var evlistener = events[type];\n      if (evlistener === void 0)\n        return [];\n      if (typeof evlistener === \"function\")\n        return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n    }\n    EventEmitter.prototype.listeners = function listeners(type) {\n      return _listeners(this, type, true);\n    };\n    EventEmitter.prototype.rawListeners = function rawListeners(type) {\n      return _listeners(this, type, false);\n    };\n    EventEmitter.listenerCount = function(emitter, type) {\n      if (typeof emitter.listenerCount === \"function\") {\n        return emitter.listenerCount(type);\n      } else {\n        return listenerCount.call(emitter, type);\n      }\n    };\n    EventEmitter.prototype.listenerCount = listenerCount;\n    function listenerCount(type) {\n      var events = this._events;\n      if (events !== void 0) {\n        var evlistener = events[type];\n        if (typeof evlistener === \"function\") {\n          return 1;\n        } else if (evlistener !== void 0) {\n          return evlistener.length;\n        }\n      }\n      return 0;\n    }\n    EventEmitter.prototype.eventNames = function eventNames() {\n      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n    };\n    function arrayClone(arr, n) {\n      var copy = new Array(n);\n      for (var i = 0; i < n; ++i)\n        copy[i] = arr[i];\n      return copy;\n    }\n    function spliceOne(list, index) {\n      for (; index + 1 < list.length; index++)\n        list[index] = list[index + 1];\n      list.pop();\n    }\n    function unwrapListeners(arr) {\n      var ret = new Array(arr.length);\n      for (var i = 0; i < ret.length; ++i) {\n        ret[i] = arr[i].listener || arr[i];\n      }\n      return ret;\n    }\n    function once(emitter, name) {\n      return new Promise(function(resolve, reject) {\n        function errorListener(err) {\n          emitter.removeListener(name, resolver);\n          reject(err);\n        }\n        function resolver() {\n          if (typeof emitter.removeListener === \"function\") {\n            emitter.removeListener(\"error\", errorListener);\n          }\n          resolve([].slice.call(arguments));\n        }\n        ;\n        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n        if (name !== \"error\") {\n          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n        }\n      });\n    }\n    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n      if (typeof emitter.on === \"function\") {\n        eventTargetAgnosticAddListener(emitter, \"error\", handler, flags);\n      }\n    }\n    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n      if (typeof emitter.on === \"function\") {\n        if (flags.once) {\n          emitter.once(name, listener);\n        } else {\n          emitter.on(name, listener);\n        }\n      } else if (typeof emitter.addEventListener === \"function\") {\n        emitter.addEventListener(name, function wrapListener(arg) {\n          if (flags.once) {\n            emitter.removeEventListener(name, wrapListener);\n          }\n          listener(arg);\n        });\n      } else {\n        throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n      }\n    }\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/stream-browser.js\nvar require_stream_browser = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/stream-browser.js\"(exports2, module2) {\n    module2.exports = require_events().EventEmitter;\n  }\n});\n\n// node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\nvar require_base64_js = __commonJS({\n  \"node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\"(exports2) {\n    \"use strict\";\n    exports2.byteLength = byteLength;\n    exports2.toByteArray = toByteArray;\n    exports2.fromByteArray = fromByteArray;\n    var lookup = [];\n    var revLookup = [];\n    var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n    var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for (i = 0, len = code.length; i < len; ++i) {\n      lookup[i] = code[i];\n      revLookup[code.charCodeAt(i)] = i;\n    }\n    var i;\n    var len;\n    revLookup[\"-\".charCodeAt(0)] = 62;\n    revLookup[\"_\".charCodeAt(0)] = 63;\n    function getLens(b64) {\n      var len2 = b64.length;\n      if (len2 % 4 > 0) {\n        throw new Error(\"Invalid string. Length must be a multiple of 4\");\n      }\n      var validLen = b64.indexOf(\"=\");\n      if (validLen === -1)\n        validLen = len2;\n      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;\n      return [validLen, placeHoldersLen];\n    }\n    function byteLength(b64) {\n      var lens = getLens(b64);\n      var validLen = lens[0];\n      var placeHoldersLen = lens[1];\n      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n    }\n    function _byteLength(b64, validLen, placeHoldersLen) {\n      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n    }\n    function toByteArray(b64) {\n      var tmp;\n      var lens = getLens(b64);\n      var validLen = lens[0];\n      var placeHoldersLen = lens[1];\n      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n      var curByte = 0;\n      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;\n      var i2;\n      for (i2 = 0; i2 < len2; i2 += 4) {\n        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n        arr[curByte++] = tmp >> 16 & 255;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n      }\n      if (placeHoldersLen === 2) {\n        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n        arr[curByte++] = tmp & 255;\n      }\n      if (placeHoldersLen === 1) {\n        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n      }\n      return arr;\n    }\n    function tripletToBase64(num) {\n      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n    }\n    function encodeChunk(uint8, start, end) {\n      var tmp;\n      var output = [];\n      for (var i2 = start; i2 < end; i2 += 3) {\n        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);\n        output.push(tripletToBase64(tmp));\n      }\n      return output.join(\"\");\n    }\n    function fromByteArray(uint8) {\n      var tmp;\n      var len2 = uint8.length;\n      var extraBytes = len2 % 3;\n      var parts = [];\n      var maxChunkLength = 16383;\n      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {\n        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));\n      }\n      if (extraBytes === 1) {\n        tmp = uint8[len2 - 1];\n        parts.push(\n          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\"\n        );\n      } else if (extraBytes === 2) {\n        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];\n        parts.push(\n          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\"\n        );\n      }\n      return parts.join(\"\");\n    }\n  }\n});\n\n// node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\nvar require_ieee754 = __commonJS({\n  \"node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\"(exports2) {\n    exports2.read = function(buffer, offset, isLE, mLen, nBytes) {\n      var e, m;\n      var eLen = nBytes * 8 - mLen - 1;\n      var eMax = (1 << eLen) - 1;\n      var eBias = eMax >> 1;\n      var nBits = -7;\n      var i = isLE ? nBytes - 1 : 0;\n      var d = isLE ? -1 : 1;\n      var s = buffer[offset + i];\n      i += d;\n      e = s & (1 << -nBits) - 1;\n      s >>= -nBits;\n      nBits += eLen;\n      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {\n      }\n      m = e & (1 << -nBits) - 1;\n      e >>= -nBits;\n      nBits += mLen;\n      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {\n      }\n      if (e === 0) {\n        e = 1 - eBias;\n      } else if (e === eMax) {\n        return m ? NaN : (s ? -1 : 1) * Infinity;\n      } else {\n        m = m + Math.pow(2, mLen);\n        e = e - eBias;\n      }\n      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n    };\n    exports2.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n      var e, m, c;\n      var eLen = nBytes * 8 - mLen - 1;\n      var eMax = (1 << eLen) - 1;\n      var eBias = eMax >> 1;\n      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n      var i = isLE ? 0 : nBytes - 1;\n      var d = isLE ? 1 : -1;\n      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n      value = Math.abs(value);\n      if (isNaN(value) || value === Infinity) {\n        m = isNaN(value) ? 1 : 0;\n        e = eMax;\n      } else {\n        e = Math.floor(Math.log(value) / Math.LN2);\n        if (value * (c = Math.pow(2, -e)) < 1) {\n          e--;\n          c *= 2;\n        }\n        if (e + eBias >= 1) {\n          value += rt / c;\n        } else {\n          value += rt * Math.pow(2, 1 - eBias);\n        }\n        if (value * c >= 2) {\n          e++;\n          c /= 2;\n        }\n        if (e + eBias >= eMax) {\n          m = 0;\n          e = eMax;\n        } else if (e + eBias >= 1) {\n          m = (value * c - 1) * Math.pow(2, mLen);\n          e = e + eBias;\n        } else {\n          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n          e = 0;\n        }\n      }\n      for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {\n      }\n      e = e << mLen | m;\n      eLen += mLen;\n      for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {\n      }\n      buffer[offset + i - d] |= s * 128;\n    };\n  }\n});\n\n// node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js\nvar require_buffer = __commonJS({\n  \"node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js\"(exports2) {\n    \"use strict\";\n    var base64 = require_base64_js();\n    var ieee754 = require_ieee754();\n    var customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") : null;\n    exports2.Buffer = Buffer2;\n    exports2.SlowBuffer = SlowBuffer;\n    exports2.INSPECT_MAX_BYTES = 50;\n    var K_MAX_LENGTH = 2147483647;\n    exports2.kMaxLength = K_MAX_LENGTH;\n    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();\n    if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n      console.error(\n        \"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\"\n      );\n    }\n    function typedArraySupport() {\n      try {\n        const arr = new Uint8Array(1);\n        const proto = { foo: function() {\n          return 42;\n        } };\n        Object.setPrototypeOf(proto, Uint8Array.prototype);\n        Object.setPrototypeOf(arr, proto);\n        return arr.foo() === 42;\n      } catch (e) {\n        return false;\n      }\n    }\n    Object.defineProperty(Buffer2.prototype, \"parent\", {\n      enumerable: true,\n      get: function() {\n        if (!Buffer2.isBuffer(this))\n          return void 0;\n        return this.buffer;\n      }\n    });\n    Object.defineProperty(Buffer2.prototype, \"offset\", {\n      enumerable: true,\n      get: function() {\n        if (!Buffer2.isBuffer(this))\n          return void 0;\n        return this.byteOffset;\n      }\n    });\n    function createBuffer(length) {\n      if (length > K_MAX_LENGTH) {\n        throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n      }\n      const buf = new Uint8Array(length);\n      Object.setPrototypeOf(buf, Buffer2.prototype);\n      return buf;\n    }\n    function Buffer2(arg, encodingOrOffset, length) {\n      if (typeof arg === \"number\") {\n        if (typeof encodingOrOffset === \"string\") {\n          throw new TypeError(\n            'The \"string\" argument must be of type string. Received type number'\n          );\n        }\n        return allocUnsafe(arg);\n      }\n      return from(arg, encodingOrOffset, length);\n    }\n    Buffer2.poolSize = 8192;\n    function from(value, encodingOrOffset, length) {\n      if (typeof value === \"string\") {\n        return fromString(value, encodingOrOffset);\n      }\n      if (ArrayBuffer.isView(value)) {\n        return fromArrayView(value);\n      }\n      if (value == null) {\n        throw new TypeError(\n          \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n        );\n      }\n      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n      }\n      if (typeof SharedArrayBuffer !== \"undefined\" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n      }\n      if (typeof value === \"number\") {\n        throw new TypeError(\n          'The \"value\" argument must not be of type number. Received type number'\n        );\n      }\n      const valueOf = value.valueOf && value.valueOf();\n      if (valueOf != null && valueOf !== value) {\n        return Buffer2.from(valueOf, encodingOrOffset, length);\n      }\n      const b = fromObject(value);\n      if (b)\n        return b;\n      if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n        return Buffer2.from(value[Symbol.toPrimitive](\"string\"), encodingOrOffset, length);\n      }\n      throw new TypeError(\n        \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n      );\n    }\n    Buffer2.from = function(value, encodingOrOffset, length) {\n      return from(value, encodingOrOffset, length);\n    };\n    Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);\n    Object.setPrototypeOf(Buffer2, Uint8Array);\n    function assertSize(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError('\"size\" argument must be of type number');\n      } else if (size < 0) {\n        throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n      }\n    }\n    function alloc(size, fill, encoding) {\n      assertSize(size);\n      if (size <= 0) {\n        return createBuffer(size);\n      }\n      if (fill !== void 0) {\n        return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n      }\n      return createBuffer(size);\n    }\n    Buffer2.alloc = function(size, fill, encoding) {\n      return alloc(size, fill, encoding);\n    };\n    function allocUnsafe(size) {\n      assertSize(size);\n      return createBuffer(size < 0 ? 0 : checked(size) | 0);\n    }\n    Buffer2.allocUnsafe = function(size) {\n      return allocUnsafe(size);\n    };\n    Buffer2.allocUnsafeSlow = function(size) {\n      return allocUnsafe(size);\n    };\n    function fromString(string, encoding) {\n      if (typeof encoding !== \"string\" || encoding === \"\") {\n        encoding = \"utf8\";\n      }\n      if (!Buffer2.isEncoding(encoding)) {\n        throw new TypeError(\"Unknown encoding: \" + encoding);\n      }\n      const length = byteLength(string, encoding) | 0;\n      let buf = createBuffer(length);\n      const actual = buf.write(string, encoding);\n      if (actual !== length) {\n        buf = buf.slice(0, actual);\n      }\n      return buf;\n    }\n    function fromArrayLike(array) {\n      const length = array.length < 0 ? 0 : checked(array.length) | 0;\n      const buf = createBuffer(length);\n      for (let i = 0; i < length; i += 1) {\n        buf[i] = array[i] & 255;\n      }\n      return buf;\n    }\n    function fromArrayView(arrayView) {\n      if (isInstance(arrayView, Uint8Array)) {\n        const copy = new Uint8Array(arrayView);\n        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n      }\n      return fromArrayLike(arrayView);\n    }\n    function fromArrayBuffer(array, byteOffset, length) {\n      if (byteOffset < 0 || array.byteLength < byteOffset) {\n        throw new RangeError('\"offset\" is outside of buffer bounds');\n      }\n      if (array.byteLength < byteOffset + (length || 0)) {\n        throw new RangeError('\"length\" is outside of buffer bounds');\n      }\n      let buf;\n      if (byteOffset === void 0 && length === void 0) {\n        buf = new Uint8Array(array);\n      } else if (length === void 0) {\n        buf = new Uint8Array(array, byteOffset);\n      } else {\n        buf = new Uint8Array(array, byteOffset, length);\n      }\n      Object.setPrototypeOf(buf, Buffer2.prototype);\n      return buf;\n    }\n    function fromObject(obj) {\n      if (Buffer2.isBuffer(obj)) {\n        const len = checked(obj.length) | 0;\n        const buf = createBuffer(len);\n        if (buf.length === 0) {\n          return buf;\n        }\n        obj.copy(buf, 0, 0, len);\n        return buf;\n      }\n      if (obj.length !== void 0) {\n        if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) {\n          return createBuffer(0);\n        }\n        return fromArrayLike(obj);\n      }\n      if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n        return fromArrayLike(obj.data);\n      }\n    }\n    function checked(length) {\n      if (length >= K_MAX_LENGTH) {\n        throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n      }\n      return length | 0;\n    }\n    function SlowBuffer(length) {\n      if (+length != length) {\n        length = 0;\n      }\n      return Buffer2.alloc(+length);\n    }\n    Buffer2.isBuffer = function isBuffer(b) {\n      return b != null && b._isBuffer === true && b !== Buffer2.prototype;\n    };\n    Buffer2.compare = function compare(a, b) {\n      if (isInstance(a, Uint8Array))\n        a = Buffer2.from(a, a.offset, a.byteLength);\n      if (isInstance(b, Uint8Array))\n        b = Buffer2.from(b, b.offset, b.byteLength);\n      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {\n        throw new TypeError(\n          'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n        );\n      }\n      if (a === b)\n        return 0;\n      let x = a.length;\n      let y = b.length;\n      for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n        if (a[i] !== b[i]) {\n          x = a[i];\n          y = b[i];\n          break;\n        }\n      }\n      if (x < y)\n        return -1;\n      if (y < x)\n        return 1;\n      return 0;\n    };\n    Buffer2.isEncoding = function isEncoding(encoding) {\n      switch (String(encoding).toLowerCase()) {\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n          return true;\n        default:\n          return false;\n      }\n    };\n    Buffer2.concat = function concat(list, length) {\n      if (!Array.isArray(list)) {\n        throw new TypeError('\"list\" argument must be an Array of Buffers');\n      }\n      if (list.length === 0) {\n        return Buffer2.alloc(0);\n      }\n      let i;\n      if (length === void 0) {\n        length = 0;\n        for (i = 0; i < list.length; ++i) {\n          length += list[i].length;\n        }\n      }\n      const buffer = Buffer2.allocUnsafe(length);\n      let pos = 0;\n      for (i = 0; i < list.length; ++i) {\n        let buf = list[i];\n        if (isInstance(buf, Uint8Array)) {\n          if (pos + buf.length > buffer.length) {\n            if (!Buffer2.isBuffer(buf))\n              buf = Buffer2.from(buf);\n            buf.copy(buffer, pos);\n          } else {\n            Uint8Array.prototype.set.call(\n              buffer,\n              buf,\n              pos\n            );\n          }\n        } else if (!Buffer2.isBuffer(buf)) {\n          throw new TypeError('\"list\" argument must be an Array of Buffers');\n        } else {\n          buf.copy(buffer, pos);\n        }\n        pos += buf.length;\n      }\n      return buffer;\n    };\n    function byteLength(string, encoding) {\n      if (Buffer2.isBuffer(string)) {\n        return string.length;\n      }\n      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n        return string.byteLength;\n      }\n      if (typeof string !== \"string\") {\n        throw new TypeError(\n          'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string\n        );\n      }\n      const len = string.length;\n      const mustMatch = arguments.length > 2 && arguments[2] === true;\n      if (!mustMatch && len === 0)\n        return 0;\n      let loweredCase = false;\n      for (; ; ) {\n        switch (encoding) {\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n            return len;\n          case \"utf8\":\n          case \"utf-8\":\n            return utf8ToBytes(string).length;\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return len * 2;\n          case \"hex\":\n            return len >>> 1;\n          case \"base64\":\n            return base64ToBytes(string).length;\n          default:\n            if (loweredCase) {\n              return mustMatch ? -1 : utf8ToBytes(string).length;\n            }\n            encoding = (\"\" + encoding).toLowerCase();\n            loweredCase = true;\n        }\n      }\n    }\n    Buffer2.byteLength = byteLength;\n    function slowToString(encoding, start, end) {\n      let loweredCase = false;\n      if (start === void 0 || start < 0) {\n        start = 0;\n      }\n      if (start > this.length) {\n        return \"\";\n      }\n      if (end === void 0 || end > this.length) {\n        end = this.length;\n      }\n      if (end <= 0) {\n        return \"\";\n      }\n      end >>>= 0;\n      start >>>= 0;\n      if (end <= start) {\n        return \"\";\n      }\n      if (!encoding)\n        encoding = \"utf8\";\n      while (true) {\n        switch (encoding) {\n          case \"hex\":\n            return hexSlice(this, start, end);\n          case \"utf8\":\n          case \"utf-8\":\n            return utf8Slice(this, start, end);\n          case \"ascii\":\n            return asciiSlice(this, start, end);\n          case \"latin1\":\n          case \"binary\":\n            return latin1Slice(this, start, end);\n          case \"base64\":\n            return base64Slice(this, start, end);\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return utf16leSlice(this, start, end);\n          default:\n            if (loweredCase)\n              throw new TypeError(\"Unknown encoding: \" + encoding);\n            encoding = (encoding + \"\").toLowerCase();\n            loweredCase = true;\n        }\n      }\n    }\n    Buffer2.prototype._isBuffer = true;\n    function swap(b, n, m) {\n      const i = b[n];\n      b[n] = b[m];\n      b[m] = i;\n    }\n    Buffer2.prototype.swap16 = function swap16() {\n      const len = this.length;\n      if (len % 2 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n      }\n      for (let i = 0; i < len; i += 2) {\n        swap(this, i, i + 1);\n      }\n      return this;\n    };\n    Buffer2.prototype.swap32 = function swap32() {\n      const len = this.length;\n      if (len % 4 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n      }\n      for (let i = 0; i < len; i += 4) {\n        swap(this, i, i + 3);\n        swap(this, i + 1, i + 2);\n      }\n      return this;\n    };\n    Buffer2.prototype.swap64 = function swap64() {\n      const len = this.length;\n      if (len % 8 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n      }\n      for (let i = 0; i < len; i += 8) {\n        swap(this, i, i + 7);\n        swap(this, i + 1, i + 6);\n        swap(this, i + 2, i + 5);\n        swap(this, i + 3, i + 4);\n      }\n      return this;\n    };\n    Buffer2.prototype.toString = function toString() {\n      const length = this.length;\n      if (length === 0)\n        return \"\";\n      if (arguments.length === 0)\n        return utf8Slice(this, 0, length);\n      return slowToString.apply(this, arguments);\n    };\n    Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;\n    Buffer2.prototype.equals = function equals(b) {\n      if (!Buffer2.isBuffer(b))\n        throw new TypeError(\"Argument must be a Buffer\");\n      if (this === b)\n        return true;\n      return Buffer2.compare(this, b) === 0;\n    };\n    Buffer2.prototype.inspect = function inspect() {\n      let str = \"\";\n      const max = exports2.INSPECT_MAX_BYTES;\n      str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n      if (this.length > max)\n        str += \" ... \";\n      return \"<Buffer \" + str + \">\";\n    };\n    if (customInspectSymbol) {\n      Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;\n    }\n    Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n      if (isInstance(target, Uint8Array)) {\n        target = Buffer2.from(target, target.offset, target.byteLength);\n      }\n      if (!Buffer2.isBuffer(target)) {\n        throw new TypeError(\n          'The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target\n        );\n      }\n      if (start === void 0) {\n        start = 0;\n      }\n      if (end === void 0) {\n        end = target ? target.length : 0;\n      }\n      if (thisStart === void 0) {\n        thisStart = 0;\n      }\n      if (thisEnd === void 0) {\n        thisEnd = this.length;\n      }\n      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n        throw new RangeError(\"out of range index\");\n      }\n      if (thisStart >= thisEnd && start >= end) {\n        return 0;\n      }\n      if (thisStart >= thisEnd) {\n        return -1;\n      }\n      if (start >= end) {\n        return 1;\n      }\n      start >>>= 0;\n      end >>>= 0;\n      thisStart >>>= 0;\n      thisEnd >>>= 0;\n      if (this === target)\n        return 0;\n      let x = thisEnd - thisStart;\n      let y = end - start;\n      const len = Math.min(x, y);\n      const thisCopy = this.slice(thisStart, thisEnd);\n      const targetCopy = target.slice(start, end);\n      for (let i = 0; i < len; ++i) {\n        if (thisCopy[i] !== targetCopy[i]) {\n          x = thisCopy[i];\n          y = targetCopy[i];\n          break;\n        }\n      }\n      if (x < y)\n        return -1;\n      if (y < x)\n        return 1;\n      return 0;\n    };\n    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n      if (buffer.length === 0)\n        return -1;\n      if (typeof byteOffset === \"string\") {\n        encoding = byteOffset;\n        byteOffset = 0;\n      } else if (byteOffset > 2147483647) {\n        byteOffset = 2147483647;\n      } else if (byteOffset < -2147483648) {\n        byteOffset = -2147483648;\n      }\n      byteOffset = +byteOffset;\n      if (numberIsNaN(byteOffset)) {\n        byteOffset = dir ? 0 : buffer.length - 1;\n      }\n      if (byteOffset < 0)\n        byteOffset = buffer.length + byteOffset;\n      if (byteOffset >= buffer.length) {\n        if (dir)\n          return -1;\n        else\n          byteOffset = buffer.length - 1;\n      } else if (byteOffset < 0) {\n        if (dir)\n          byteOffset = 0;\n        else\n          return -1;\n      }\n      if (typeof val === \"string\") {\n        val = Buffer2.from(val, encoding);\n      }\n      if (Buffer2.isBuffer(val)) {\n        if (val.length === 0) {\n          return -1;\n        }\n        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n      } else if (typeof val === \"number\") {\n        val = val & 255;\n        if (typeof Uint8Array.prototype.indexOf === \"function\") {\n          if (dir) {\n            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n          } else {\n            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n          }\n        }\n        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n      }\n      throw new TypeError(\"val must be string, number or Buffer\");\n    }\n    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n      let indexSize = 1;\n      let arrLength = arr.length;\n      let valLength = val.length;\n      if (encoding !== void 0) {\n        encoding = String(encoding).toLowerCase();\n        if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n          if (arr.length < 2 || val.length < 2) {\n            return -1;\n          }\n          indexSize = 2;\n          arrLength /= 2;\n          valLength /= 2;\n          byteOffset /= 2;\n        }\n      }\n      function read(buf, i2) {\n        if (indexSize === 1) {\n          return buf[i2];\n        } else {\n          return buf.readUInt16BE(i2 * indexSize);\n        }\n      }\n      let i;\n      if (dir) {\n        let foundIndex = -1;\n        for (i = byteOffset; i < arrLength; i++) {\n          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n            if (foundIndex === -1)\n              foundIndex = i;\n            if (i - foundIndex + 1 === valLength)\n              return foundIndex * indexSize;\n          } else {\n            if (foundIndex !== -1)\n              i -= i - foundIndex;\n            foundIndex = -1;\n          }\n        }\n      } else {\n        if (byteOffset + valLength > arrLength)\n          byteOffset = arrLength - valLength;\n        for (i = byteOffset; i >= 0; i--) {\n          let found = true;\n          for (let j = 0; j < valLength; j++) {\n            if (read(arr, i + j) !== read(val, j)) {\n              found = false;\n              break;\n            }\n          }\n          if (found)\n            return i;\n        }\n      }\n      return -1;\n    }\n    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {\n      return this.indexOf(val, byteOffset, encoding) !== -1;\n    };\n    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n    };\n    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n    };\n    function hexWrite(buf, string, offset, length) {\n      offset = Number(offset) || 0;\n      const remaining = buf.length - offset;\n      if (!length) {\n        length = remaining;\n      } else {\n        length = Number(length);\n        if (length > remaining) {\n          length = remaining;\n        }\n      }\n      const strLen = string.length;\n      if (length > strLen / 2) {\n        length = strLen / 2;\n      }\n      let i;\n      for (i = 0; i < length; ++i) {\n        const parsed = parseInt(string.substr(i * 2, 2), 16);\n        if (numberIsNaN(parsed))\n          return i;\n        buf[offset + i] = parsed;\n      }\n      return i;\n    }\n    function utf8Write(buf, string, offset, length) {\n      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n    }\n    function asciiWrite(buf, string, offset, length) {\n      return blitBuffer(asciiToBytes(string), buf, offset, length);\n    }\n    function base64Write(buf, string, offset, length) {\n      return blitBuffer(base64ToBytes(string), buf, offset, length);\n    }\n    function ucs2Write(buf, string, offset, length) {\n      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n    }\n    Buffer2.prototype.write = function write(string, offset, length, encoding) {\n      if (offset === void 0) {\n        encoding = \"utf8\";\n        length = this.length;\n        offset = 0;\n      } else if (length === void 0 && typeof offset === \"string\") {\n        encoding = offset;\n        length = this.length;\n        offset = 0;\n      } else if (isFinite(offset)) {\n        offset = offset >>> 0;\n        if (isFinite(length)) {\n          length = length >>> 0;\n          if (encoding === void 0)\n            encoding = \"utf8\";\n        } else {\n          encoding = length;\n          length = void 0;\n        }\n      } else {\n        throw new Error(\n          \"Buffer.write(string, encoding, offset[, length]) is no longer supported\"\n        );\n      }\n      const remaining = this.length - offset;\n      if (length === void 0 || length > remaining)\n        length = remaining;\n      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n        throw new RangeError(\"Attempt to write outside buffer bounds\");\n      }\n      if (!encoding)\n        encoding = \"utf8\";\n      let loweredCase = false;\n      for (; ; ) {\n        switch (encoding) {\n          case \"hex\":\n            return hexWrite(this, string, offset, length);\n          case \"utf8\":\n          case \"utf-8\":\n            return utf8Write(this, string, offset, length);\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n            return asciiWrite(this, string, offset, length);\n          case \"base64\":\n            return base64Write(this, string, offset, length);\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return ucs2Write(this, string, offset, length);\n          default:\n            if (loweredCase)\n              throw new TypeError(\"Unknown encoding: \" + encoding);\n            encoding = (\"\" + encoding).toLowerCase();\n            loweredCase = true;\n        }\n      }\n    };\n    Buffer2.prototype.toJSON = function toJSON() {\n      return {\n        type: \"Buffer\",\n        data: Array.prototype.slice.call(this._arr || this, 0)\n      };\n    };\n    function base64Slice(buf, start, end) {\n      if (start === 0 && end === buf.length) {\n        return base64.fromByteArray(buf);\n      } else {\n        return base64.fromByteArray(buf.slice(start, end));\n      }\n    }\n    function utf8Slice(buf, start, end) {\n      end = Math.min(buf.length, end);\n      const res = [];\n      let i = start;\n      while (i < end) {\n        const firstByte = buf[i];\n        let codePoint = null;\n        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n        if (i + bytesPerSequence <= end) {\n          let secondByte, thirdByte, fourthByte, tempCodePoint;\n          switch (bytesPerSequence) {\n            case 1:\n              if (firstByte < 128) {\n                codePoint = firstByte;\n              }\n              break;\n            case 2:\n              secondByte = buf[i + 1];\n              if ((secondByte & 192) === 128) {\n                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n                if (tempCodePoint > 127) {\n                  codePoint = tempCodePoint;\n                }\n              }\n              break;\n            case 3:\n              secondByte = buf[i + 1];\n              thirdByte = buf[i + 2];\n              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n                  codePoint = tempCodePoint;\n                }\n              }\n              break;\n            case 4:\n              secondByte = buf[i + 1];\n              thirdByte = buf[i + 2];\n              fourthByte = buf[i + 3];\n              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n                  codePoint = tempCodePoint;\n                }\n              }\n          }\n        }\n        if (codePoint === null) {\n          codePoint = 65533;\n          bytesPerSequence = 1;\n        } else if (codePoint > 65535) {\n          codePoint -= 65536;\n          res.push(codePoint >>> 10 & 1023 | 55296);\n          codePoint = 56320 | codePoint & 1023;\n        }\n        res.push(codePoint);\n        i += bytesPerSequence;\n      }\n      return decodeCodePointsArray(res);\n    }\n    var MAX_ARGUMENTS_LENGTH = 4096;\n    function decodeCodePointsArray(codePoints) {\n      const len = codePoints.length;\n      if (len <= MAX_ARGUMENTS_LENGTH) {\n        return String.fromCharCode.apply(String, codePoints);\n      }\n      let res = \"\";\n      let i = 0;\n      while (i < len) {\n        res += String.fromCharCode.apply(\n          String,\n          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n        );\n      }\n      return res;\n    }\n    function asciiSlice(buf, start, end) {\n      let ret = \"\";\n      end = Math.min(buf.length, end);\n      for (let i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i] & 127);\n      }\n      return ret;\n    }\n    function latin1Slice(buf, start, end) {\n      let ret = \"\";\n      end = Math.min(buf.length, end);\n      for (let i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i]);\n      }\n      return ret;\n    }\n    function hexSlice(buf, start, end) {\n      const len = buf.length;\n      if (!start || start < 0)\n        start = 0;\n      if (!end || end < 0 || end > len)\n        end = len;\n      let out = \"\";\n      for (let i = start; i < end; ++i) {\n        out += hexSliceLookupTable[buf[i]];\n      }\n      return out;\n    }\n    function utf16leSlice(buf, start, end) {\n      const bytes = buf.slice(start, end);\n      let res = \"\";\n      for (let i = 0; i < bytes.length - 1; i += 2) {\n        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n      }\n      return res;\n    }\n    Buffer2.prototype.slice = function slice(start, end) {\n      const len = this.length;\n      start = ~~start;\n      end = end === void 0 ? len : ~~end;\n      if (start < 0) {\n        start += len;\n        if (start < 0)\n          start = 0;\n      } else if (start > len) {\n        start = len;\n      }\n      if (end < 0) {\n        end += len;\n        if (end < 0)\n          end = 0;\n      } else if (end > len) {\n        end = len;\n      }\n      if (end < start)\n        end = start;\n      const newBuf = this.subarray(start, end);\n      Object.setPrototypeOf(newBuf, Buffer2.prototype);\n      return newBuf;\n    };\n    function checkOffset(offset, ext, length) {\n      if (offset % 1 !== 0 || offset < 0)\n        throw new RangeError(\"offset is not uint\");\n      if (offset + ext > length)\n        throw new RangeError(\"Trying to access beyond buffer length\");\n    }\n    Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert)\n        checkOffset(offset, byteLength2, this.length);\n      let val = this[offset];\n      let mul = 1;\n      let i = 0;\n      while (++i < byteLength2 && (mul *= 256)) {\n        val += this[offset + i] * mul;\n      }\n      return val;\n    };\n    Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        checkOffset(offset, byteLength2, this.length);\n      }\n      let val = this[offset + --byteLength2];\n      let mul = 1;\n      while (byteLength2 > 0 && (mul *= 256)) {\n        val += this[offset + --byteLength2] * mul;\n      }\n      return val;\n    };\n    Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 1, this.length);\n      return this[offset];\n    };\n    Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      return this[offset] | this[offset + 1] << 8;\n    };\n    Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      return this[offset] << 8 | this[offset + 1];\n    };\n    Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;\n    };\n    Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n    };\n    Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, \"offset\");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;\n      const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;\n      return BigInt(lo) + (BigInt(hi) << BigInt(32));\n    });\n    Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, \"offset\");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n      const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;\n      return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n    });\n    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert)\n        checkOffset(offset, byteLength2, this.length);\n      let val = this[offset];\n      let mul = 1;\n      let i = 0;\n      while (++i < byteLength2 && (mul *= 256)) {\n        val += this[offset + i] * mul;\n      }\n      mul *= 128;\n      if (val >= mul)\n        val -= Math.pow(2, 8 * byteLength2);\n      return val;\n    };\n    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert)\n        checkOffset(offset, byteLength2, this.length);\n      let i = byteLength2;\n      let mul = 1;\n      let val = this[offset + --i];\n      while (i > 0 && (mul *= 256)) {\n        val += this[offset + --i] * mul;\n      }\n      mul *= 128;\n      if (val >= mul)\n        val -= Math.pow(2, 8 * byteLength2);\n      return val;\n    };\n    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 1, this.length);\n      if (!(this[offset] & 128))\n        return this[offset];\n      return (255 - this[offset] + 1) * -1;\n    };\n    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      const val = this[offset] | this[offset + 1] << 8;\n      return val & 32768 ? val | 4294901760 : val;\n    };\n    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      const val = this[offset + 1] | this[offset] << 8;\n      return val & 32768 ? val | 4294901760 : val;\n    };\n    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n    };\n    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n    };\n    Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, \"offset\");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);\n      return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);\n    });\n    Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, \"offset\");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const val = (first << 24) + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);\n    });\n    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return ieee754.read(this, offset, true, 23, 4);\n    };\n    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return ieee754.read(this, offset, false, 23, 4);\n    };\n    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 8, this.length);\n      return ieee754.read(this, offset, true, 52, 8);\n    };\n    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 8, this.length);\n      return ieee754.read(this, offset, false, 52, 8);\n    };\n    function checkInt(buf, value, offset, ext, max, min) {\n      if (!Buffer2.isBuffer(buf))\n        throw new TypeError('\"buffer\" argument must be a Buffer instance');\n      if (value > max || value < min)\n        throw new RangeError('\"value\" argument is out of bounds');\n      if (offset + ext > buf.length)\n        throw new RangeError(\"Index out of range\");\n    }\n    Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n        checkInt(this, value, offset, byteLength2, maxBytes, 0);\n      }\n      let mul = 1;\n      let i = 0;\n      this[offset] = value & 255;\n      while (++i < byteLength2 && (mul *= 256)) {\n        this[offset + i] = value / mul & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n        checkInt(this, value, offset, byteLength2, maxBytes, 0);\n      }\n      let i = byteLength2 - 1;\n      let mul = 1;\n      this[offset + i] = value & 255;\n      while (--i >= 0 && (mul *= 256)) {\n        this[offset + i] = value / mul & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 1, 255, 0);\n      this[offset] = value & 255;\n      return offset + 1;\n    };\n    Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 65535, 0);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 65535, 0);\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 255;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 4294967295, 0);\n      this[offset + 3] = value >>> 24;\n      this[offset + 2] = value >>> 16;\n      this[offset + 1] = value >>> 8;\n      this[offset] = value & 255;\n      return offset + 4;\n    };\n    Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 4294967295, 0);\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 255;\n      return offset + 4;\n    };\n    function wrtBigUInt64LE(buf, value, offset, min, max) {\n      checkIntBI(value, min, max, buf, offset, 7);\n      let lo = Number(value & BigInt(4294967295));\n      buf[offset++] = lo;\n      lo = lo >> 8;\n      buf[offset++] = lo;\n      lo = lo >> 8;\n      buf[offset++] = lo;\n      lo = lo >> 8;\n      buf[offset++] = lo;\n      let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n      buf[offset++] = hi;\n      hi = hi >> 8;\n      buf[offset++] = hi;\n      hi = hi >> 8;\n      buf[offset++] = hi;\n      hi = hi >> 8;\n      buf[offset++] = hi;\n      return offset;\n    }\n    function wrtBigUInt64BE(buf, value, offset, min, max) {\n      checkIntBI(value, min, max, buf, offset, 7);\n      let lo = Number(value & BigInt(4294967295));\n      buf[offset + 7] = lo;\n      lo = lo >> 8;\n      buf[offset + 6] = lo;\n      lo = lo >> 8;\n      buf[offset + 5] = lo;\n      lo = lo >> 8;\n      buf[offset + 4] = lo;\n      let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n      buf[offset + 3] = hi;\n      hi = hi >> 8;\n      buf[offset + 2] = hi;\n      hi = hi >> 8;\n      buf[offset + 1] = hi;\n      hi = hi >> 8;\n      buf[offset] = hi;\n      return offset + 8;\n    }\n    Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {\n      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    });\n    Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {\n      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    });\n    Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        const limit = Math.pow(2, 8 * byteLength2 - 1);\n        checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n      }\n      let i = 0;\n      let mul = 1;\n      let sub = 0;\n      this[offset] = value & 255;\n      while (++i < byteLength2 && (mul *= 256)) {\n        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n          sub = 1;\n        }\n        this[offset + i] = (value / mul >> 0) - sub & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        const limit = Math.pow(2, 8 * byteLength2 - 1);\n        checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n      }\n      let i = byteLength2 - 1;\n      let mul = 1;\n      let sub = 0;\n      this[offset + i] = value & 255;\n      while (--i >= 0 && (mul *= 256)) {\n        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n          sub = 1;\n        }\n        this[offset + i] = (value / mul >> 0) - sub & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 1, 127, -128);\n      if (value < 0)\n        value = 255 + value + 1;\n      this[offset] = value & 255;\n      return offset + 1;\n    };\n    Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 32767, -32768);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 32767, -32768);\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 255;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 2147483647, -2147483648);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      this[offset + 2] = value >>> 16;\n      this[offset + 3] = value >>> 24;\n      return offset + 4;\n    };\n    Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 2147483647, -2147483648);\n      if (value < 0)\n        value = 4294967295 + value + 1;\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 255;\n      return offset + 4;\n    };\n    Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {\n      return wrtBigUInt64LE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    });\n    Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {\n      return wrtBigUInt64BE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    });\n    function checkIEEE754(buf, value, offset, ext, max, min) {\n      if (offset + ext > buf.length)\n        throw new RangeError(\"Index out of range\");\n      if (offset < 0)\n        throw new RangeError(\"Index out of range\");\n    }\n    function writeFloat(buf, value, offset, littleEndian, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);\n      }\n      ieee754.write(buf, value, offset, littleEndian, 23, 4);\n      return offset + 4;\n    }\n    Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n      return writeFloat(this, value, offset, true, noAssert);\n    };\n    Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n      return writeFloat(this, value, offset, false, noAssert);\n    };\n    function writeDouble(buf, value, offset, littleEndian, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);\n      }\n      ieee754.write(buf, value, offset, littleEndian, 52, 8);\n      return offset + 8;\n    }\n    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n      return writeDouble(this, value, offset, true, noAssert);\n    };\n    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n      return writeDouble(this, value, offset, false, noAssert);\n    };\n    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {\n      if (!Buffer2.isBuffer(target))\n        throw new TypeError(\"argument should be a Buffer\");\n      if (!start)\n        start = 0;\n      if (!end && end !== 0)\n        end = this.length;\n      if (targetStart >= target.length)\n        targetStart = target.length;\n      if (!targetStart)\n        targetStart = 0;\n      if (end > 0 && end < start)\n        end = start;\n      if (end === start)\n        return 0;\n      if (target.length === 0 || this.length === 0)\n        return 0;\n      if (targetStart < 0) {\n        throw new RangeError(\"targetStart out of bounds\");\n      }\n      if (start < 0 || start >= this.length)\n        throw new RangeError(\"Index out of range\");\n      if (end < 0)\n        throw new RangeError(\"sourceEnd out of bounds\");\n      if (end > this.length)\n        end = this.length;\n      if (target.length - targetStart < end - start) {\n        end = target.length - targetStart + start;\n      }\n      const len = end - start;\n      if (this === target && typeof Uint8Array.prototype.copyWithin === \"function\") {\n        this.copyWithin(targetStart, start, end);\n      } else {\n        Uint8Array.prototype.set.call(\n          target,\n          this.subarray(start, end),\n          targetStart\n        );\n      }\n      return len;\n    };\n    Buffer2.prototype.fill = function fill(val, start, end, encoding) {\n      if (typeof val === \"string\") {\n        if (typeof start === \"string\") {\n          encoding = start;\n          start = 0;\n          end = this.length;\n        } else if (typeof end === \"string\") {\n          encoding = end;\n          end = this.length;\n        }\n        if (encoding !== void 0 && typeof encoding !== \"string\") {\n          throw new TypeError(\"encoding must be a string\");\n        }\n        if (typeof encoding === \"string\" && !Buffer2.isEncoding(encoding)) {\n          throw new TypeError(\"Unknown encoding: \" + encoding);\n        }\n        if (val.length === 1) {\n          const code = val.charCodeAt(0);\n          if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n            val = code;\n          }\n        }\n      } else if (typeof val === \"number\") {\n        val = val & 255;\n      } else if (typeof val === \"boolean\") {\n        val = Number(val);\n      }\n      if (start < 0 || this.length < start || this.length < end) {\n        throw new RangeError(\"Out of range index\");\n      }\n      if (end <= start) {\n        return this;\n      }\n      start = start >>> 0;\n      end = end === void 0 ? this.length : end >>> 0;\n      if (!val)\n        val = 0;\n      let i;\n      if (typeof val === \"number\") {\n        for (i = start; i < end; ++i) {\n          this[i] = val;\n        }\n      } else {\n        const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);\n        const len = bytes.length;\n        if (len === 0) {\n          throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n        }\n        for (i = 0; i < end - start; ++i) {\n          this[i + start] = bytes[i % len];\n        }\n      }\n      return this;\n    };\n    var errors = {};\n    function E(sym, getMessage, Base) {\n      errors[sym] = class NodeError extends Base {\n        constructor() {\n          super();\n          Object.defineProperty(this, \"message\", {\n            value: getMessage.apply(this, arguments),\n            writable: true,\n            configurable: true\n          });\n          this.name = `${this.name} [${sym}]`;\n          this.stack;\n          delete this.name;\n        }\n        get code() {\n          return sym;\n        }\n        set code(value) {\n          Object.defineProperty(this, \"code\", {\n            configurable: true,\n            enumerable: true,\n            value,\n            writable: true\n          });\n        }\n        toString() {\n          return `${this.name} [${sym}]: ${this.message}`;\n        }\n      };\n    }\n    E(\n      \"ERR_BUFFER_OUT_OF_BOUNDS\",\n      function(name) {\n        if (name) {\n          return `${name} is outside of buffer bounds`;\n        }\n        return \"Attempt to access memory outside buffer bounds\";\n      },\n      RangeError\n    );\n    E(\n      \"ERR_INVALID_ARG_TYPE\",\n      function(name, actual) {\n        return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`;\n      },\n      TypeError\n    );\n    E(\n      \"ERR_OUT_OF_RANGE\",\n      function(str, range, input) {\n        let msg = `The value of \"${str}\" is out of range.`;\n        let received = input;\n        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n          received = addNumericalSeparator(String(input));\n        } else if (typeof input === \"bigint\") {\n          received = String(input);\n          if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n            received = addNumericalSeparator(received);\n          }\n          received += \"n\";\n        }\n        msg += ` It must be ${range}. Received ${received}`;\n        return msg;\n      },\n      RangeError\n    );\n    function addNumericalSeparator(val) {\n      let res = \"\";\n      let i = val.length;\n      const start = val[0] === \"-\" ? 1 : 0;\n      for (; i >= start + 4; i -= 3) {\n        res = `_${val.slice(i - 3, i)}${res}`;\n      }\n      return `${val.slice(0, i)}${res}`;\n    }\n    function checkBounds(buf, offset, byteLength2) {\n      validateNumber(offset, \"offset\");\n      if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {\n        boundsError(offset, buf.length - (byteLength2 + 1));\n      }\n    }\n    function checkIntBI(value, min, max, buf, offset, byteLength2) {\n      if (value > max || value < min) {\n        const n = typeof min === \"bigint\" ? \"n\" : \"\";\n        let range;\n        if (byteLength2 > 3) {\n          if (min === 0 || min === BigInt(0)) {\n            range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;\n          } else {\n            range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;\n          }\n        } else {\n          range = `>= ${min}${n} and <= ${max}${n}`;\n        }\n        throw new errors.ERR_OUT_OF_RANGE(\"value\", range, value);\n      }\n      checkBounds(buf, offset, byteLength2);\n    }\n    function validateNumber(value, name) {\n      if (typeof value !== \"number\") {\n        throw new errors.ERR_INVALID_ARG_TYPE(name, \"number\", value);\n      }\n    }\n    function boundsError(value, length, type) {\n      if (Math.floor(value) !== value) {\n        validateNumber(value, type);\n        throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", \"an integer\", value);\n      }\n      if (length < 0) {\n        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\n      }\n      throw new errors.ERR_OUT_OF_RANGE(\n        type || \"offset\",\n        `>= ${type ? 1 : 0} and <= ${length}`,\n        value\n      );\n    }\n    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n    function base64clean(str) {\n      str = str.split(\"=\")[0];\n      str = str.trim().replace(INVALID_BASE64_RE, \"\");\n      if (str.length < 2)\n        return \"\";\n      while (str.length % 4 !== 0) {\n        str = str + \"=\";\n      }\n      return str;\n    }\n    function utf8ToBytes(string, units) {\n      units = units || Infinity;\n      let codePoint;\n      const length = string.length;\n      let leadSurrogate = null;\n      const bytes = [];\n      for (let i = 0; i < length; ++i) {\n        codePoint = string.charCodeAt(i);\n        if (codePoint > 55295 && codePoint < 57344) {\n          if (!leadSurrogate) {\n            if (codePoint > 56319) {\n              if ((units -= 3) > -1)\n                bytes.push(239, 191, 189);\n              continue;\n            } else if (i + 1 === length) {\n              if ((units -= 3) > -1)\n                bytes.push(239, 191, 189);\n              continue;\n            }\n            leadSurrogate = codePoint;\n            continue;\n          }\n          if (codePoint < 56320) {\n            if ((units -= 3) > -1)\n              bytes.push(239, 191, 189);\n            leadSurrogate = codePoint;\n            continue;\n          }\n          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n        } else if (leadSurrogate) {\n          if ((units -= 3) > -1)\n            bytes.push(239, 191, 189);\n        }\n        leadSurrogate = null;\n        if (codePoint < 128) {\n          if ((units -= 1) < 0)\n            break;\n          bytes.push(codePoint);\n        } else if (codePoint < 2048) {\n          if ((units -= 2) < 0)\n            break;\n          bytes.push(\n            codePoint >> 6 | 192,\n            codePoint & 63 | 128\n          );\n        } else if (codePoint < 65536) {\n          if ((units -= 3) < 0)\n            break;\n          bytes.push(\n            codePoint >> 12 | 224,\n            codePoint >> 6 & 63 | 128,\n            codePoint & 63 | 128\n          );\n        } else if (codePoint < 1114112) {\n          if ((units -= 4) < 0)\n            break;\n          bytes.push(\n            codePoint >> 18 | 240,\n            codePoint >> 12 & 63 | 128,\n            codePoint >> 6 & 63 | 128,\n            codePoint & 63 | 128\n          );\n        } else {\n          throw new Error(\"Invalid code point\");\n        }\n      }\n      return bytes;\n    }\n    function asciiToBytes(str) {\n      const byteArray = [];\n      for (let i = 0; i < str.length; ++i) {\n        byteArray.push(str.charCodeAt(i) & 255);\n      }\n      return byteArray;\n    }\n    function utf16leToBytes(str, units) {\n      let c, hi, lo;\n      const byteArray = [];\n      for (let i = 0; i < str.length; ++i) {\n        if ((units -= 2) < 0)\n          break;\n        c = str.charCodeAt(i);\n        hi = c >> 8;\n        lo = c % 256;\n        byteArray.push(lo);\n        byteArray.push(hi);\n      }\n      return byteArray;\n    }\n    function base64ToBytes(str) {\n      return base64.toByteArray(base64clean(str));\n    }\n    function blitBuffer(src, dst, offset, length) {\n      let i;\n      for (i = 0; i < length; ++i) {\n        if (i + offset >= dst.length || i >= src.length)\n          break;\n        dst[i + offset] = src[i];\n      }\n      return i;\n    }\n    function isInstance(obj, type) {\n      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n    }\n    function numberIsNaN(obj) {\n      return obj !== obj;\n    }\n    var hexSliceLookupTable = function() {\n      const alphabet = \"0123456789abcdef\";\n      const table = new Array(256);\n      for (let i = 0; i < 16; ++i) {\n        const i16 = i * 16;\n        for (let j = 0; j < 16; ++j) {\n          table[i16 + j] = alphabet[i] + alphabet[j];\n        }\n      }\n      return table;\n    }();\n    function defineBigIntMethod(fn) {\n      return typeof BigInt === \"undefined\" ? BufferBigIntNotDefined : fn;\n    }\n    function BufferBigIntNotDefined() {\n      throw new Error(\"BigInt not supported\");\n    }\n  }\n});\n\n// (disabled):node_modules/.pnpm/util@0.12.5/node_modules/util/util.js\nvar require_util = __commonJS({\n  \"(disabled):node_modules/.pnpm/util@0.12.5/node_modules/util/util.js\"() {\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/buffer_list.js\nvar require_buffer_list = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/buffer_list.js\"(exports2, module2) {\n    \"use strict\";\n    function ownKeys(object, enumerableOnly) {\n      var keys = Object.keys(object);\n      if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly)\n          symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n          });\n        keys.push.apply(keys, symbols);\n      }\n      return keys;\n    }\n    function _objectSpread(target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n          ownKeys(Object(source), true).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n          });\n        } else if (Object.getOwnPropertyDescriptors) {\n          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n          ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n          });\n        }\n      }\n      return target;\n    }\n    function _defineProperty(obj, key, value) {\n      if (key in obj) {\n        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });\n      } else {\n        obj[key] = value;\n      }\n      return obj;\n    }\n    function _classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    }\n    function _defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor)\n          descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n    function _createClass(Constructor, protoProps, staticProps) {\n      if (protoProps)\n        _defineProperties(Constructor.prototype, protoProps);\n      if (staticProps)\n        _defineProperties(Constructor, staticProps);\n      return Constructor;\n    }\n    var _require = require_buffer();\n    var Buffer2 = _require.Buffer;\n    var _require2 = require_util();\n    var inspect = _require2.inspect;\n    var custom = inspect && inspect.custom || \"inspect\";\n    function copyBuffer(src, target, offset) {\n      Buffer2.prototype.copy.call(src, target, offset);\n    }\n    module2.exports = /* @__PURE__ */ function() {\n      function BufferList() {\n        _classCallCheck(this, BufferList);\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n      }\n      _createClass(BufferList, [{\n        key: \"push\",\n        value: function push(v) {\n          var entry = {\n            data: v,\n            next: null\n          };\n          if (this.length > 0)\n            this.tail.next = entry;\n          else\n            this.head = entry;\n          this.tail = entry;\n          ++this.length;\n        }\n      }, {\n        key: \"unshift\",\n        value: function unshift(v) {\n          var entry = {\n            data: v,\n            next: this.head\n          };\n          if (this.length === 0)\n            this.tail = entry;\n          this.head = entry;\n          ++this.length;\n        }\n      }, {\n        key: \"shift\",\n        value: function shift() {\n          if (this.length === 0)\n            return;\n          var ret = this.head.data;\n          if (this.length === 1)\n            this.head = this.tail = null;\n          else\n            this.head = this.head.next;\n          --this.length;\n          return ret;\n        }\n      }, {\n        key: \"clear\",\n        value: function clear() {\n          this.head = this.tail = null;\n          this.length = 0;\n        }\n      }, {\n        key: \"join\",\n        value: function join(s) {\n          if (this.length === 0)\n            return \"\";\n          var p = this.head;\n          var ret = \"\" + p.data;\n          while (p = p.next) {\n            ret += s + p.data;\n          }\n          return ret;\n        }\n      }, {\n        key: \"concat\",\n        value: function concat(n) {\n          if (this.length === 0)\n            return Buffer2.alloc(0);\n          var ret = Buffer2.allocUnsafe(n >>> 0);\n          var p = this.head;\n          var i = 0;\n          while (p) {\n            copyBuffer(p.data, ret, i);\n            i += p.data.length;\n            p = p.next;\n          }\n          return ret;\n        }\n      }, {\n        key: \"consume\",\n        value: function consume(n, hasStrings) {\n          var ret;\n          if (n < this.head.data.length) {\n            ret = this.head.data.slice(0, n);\n            this.head.data = this.head.data.slice(n);\n          } else if (n === this.head.data.length) {\n            ret = this.shift();\n          } else {\n            ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n          }\n          return ret;\n        }\n      }, {\n        key: \"first\",\n        value: function first() {\n          return this.head.data;\n        }\n      }, {\n        key: \"_getString\",\n        value: function _getString(n) {\n          var p = this.head;\n          var c = 1;\n          var ret = p.data;\n          n -= ret.length;\n          while (p = p.next) {\n            var str = p.data;\n            var nb = n > str.length ? str.length : n;\n            if (nb === str.length)\n              ret += str;\n            else\n              ret += str.slice(0, n);\n            n -= nb;\n            if (n === 0) {\n              if (nb === str.length) {\n                ++c;\n                if (p.next)\n                  this.head = p.next;\n                else\n                  this.head = this.tail = null;\n              } else {\n                this.head = p;\n                p.data = str.slice(nb);\n              }\n              break;\n            }\n            ++c;\n          }\n          this.length -= c;\n          return ret;\n        }\n      }, {\n        key: \"_getBuffer\",\n        value: function _getBuffer(n) {\n          var ret = Buffer2.allocUnsafe(n);\n          var p = this.head;\n          var c = 1;\n          p.data.copy(ret);\n          n -= p.data.length;\n          while (p = p.next) {\n            var buf = p.data;\n            var nb = n > buf.length ? buf.length : n;\n            buf.copy(ret, ret.length - n, 0, nb);\n            n -= nb;\n            if (n === 0) {\n              if (nb === buf.length) {\n                ++c;\n                if (p.next)\n                  this.head = p.next;\n                else\n                  this.head = this.tail = null;\n              } else {\n                this.head = p;\n                p.data = buf.slice(nb);\n              }\n              break;\n            }\n            ++c;\n          }\n          this.length -= c;\n          return ret;\n        }\n      }, {\n        key: custom,\n        value: function value(_, options) {\n          return inspect(this, _objectSpread({}, options, {\n            depth: 0,\n            customInspect: false\n          }));\n        }\n      }]);\n      return BufferList;\n    }();\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/destroy.js\nvar require_destroy = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/destroy.js\"(exports2, module2) {\n    \"use strict\";\n    function destroy(err, cb) {\n      var _this = this;\n      var readableDestroyed = this._readableState && this._readableState.destroyed;\n      var writableDestroyed = this._writableState && this._writableState.destroyed;\n      if (readableDestroyed || writableDestroyed) {\n        if (cb) {\n          cb(err);\n        } else if (err) {\n          if (!this._writableState) {\n            process.nextTick(emitErrorNT, this, err);\n          } else if (!this._writableState.errorEmitted) {\n            this._writableState.errorEmitted = true;\n            process.nextTick(emitErrorNT, this, err);\n          }\n        }\n        return this;\n      }\n      if (this._readableState) {\n        this._readableState.destroyed = true;\n      }\n      if (this._writableState) {\n        this._writableState.destroyed = true;\n      }\n      this._destroy(err || null, function(err2) {\n        if (!cb && err2) {\n          if (!_this._writableState) {\n            process.nextTick(emitErrorAndCloseNT, _this, err2);\n          } else if (!_this._writableState.errorEmitted) {\n            _this._writableState.errorEmitted = true;\n            process.nextTick(emitErrorAndCloseNT, _this, err2);\n          } else {\n            process.nextTick(emitCloseNT, _this);\n          }\n        } else if (cb) {\n          process.nextTick(emitCloseNT, _this);\n          cb(err2);\n        } else {\n          process.nextTick(emitCloseNT, _this);\n        }\n      });\n      return this;\n    }\n    function emitErrorAndCloseNT(self, err) {\n      emitErrorNT(self, err);\n      emitCloseNT(self);\n    }\n    function emitCloseNT(self) {\n      if (self._writableState && !self._writableState.emitClose)\n        return;\n      if (self._readableState && !self._readableState.emitClose)\n        return;\n      self.emit(\"close\");\n    }\n    function undestroy() {\n      if (this._readableState) {\n        this._readableState.destroyed = false;\n        this._readableState.reading = false;\n        this._readableState.ended = false;\n        this._readableState.endEmitted = false;\n      }\n      if (this._writableState) {\n        this._writableState.destroyed = false;\n        this._writableState.ended = false;\n        this._writableState.ending = false;\n        this._writableState.finalCalled = false;\n        this._writableState.prefinished = false;\n        this._writableState.finished = false;\n        this._writableState.errorEmitted = false;\n      }\n    }\n    function emitErrorNT(self, err) {\n      self.emit(\"error\", err);\n    }\n    function errorOrDestroy(stream, err) {\n      var rState = stream._readableState;\n      var wState = stream._writableState;\n      if (rState && rState.autoDestroy || wState && wState.autoDestroy)\n        stream.destroy(err);\n      else\n        stream.emit(\"error\", err);\n    }\n    module2.exports = {\n      destroy,\n      undestroy,\n      errorOrDestroy\n    };\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/errors-browser.js\nvar require_errors_browser = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/errors-browser.js\"(exports2, module2) {\n    \"use strict\";\n    function _inheritsLoose(subClass, superClass) {\n      subClass.prototype = Object.create(superClass.prototype);\n      subClass.prototype.constructor = subClass;\n      subClass.__proto__ = superClass;\n    }\n    var codes = {};\n    function createErrorType(code, message, Base) {\n      if (!Base) {\n        Base = Error;\n      }\n      function getMessage(arg1, arg2, arg3) {\n        if (typeof message === \"string\") {\n          return message;\n        } else {\n          return message(arg1, arg2, arg3);\n        }\n      }\n      var NodeError = /* @__PURE__ */ function(_Base) {\n        _inheritsLoose(NodeError2, _Base);\n        function NodeError2(arg1, arg2, arg3) {\n          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;\n        }\n        return NodeError2;\n      }(Base);\n      NodeError.prototype.name = Base.name;\n      NodeError.prototype.code = code;\n      codes[code] = NodeError;\n    }\n    function oneOf(expected, thing) {\n      if (Array.isArray(expected)) {\n        var len = expected.length;\n        expected = expected.map(function(i) {\n          return String(i);\n        });\n        if (len > 2) {\n          return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(\", \"), \", or \") + expected[len - 1];\n        } else if (len === 2) {\n          return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n        } else {\n          return \"of \".concat(thing, \" \").concat(expected[0]);\n        }\n      } else {\n        return \"of \".concat(thing, \" \").concat(String(expected));\n      }\n    }\n    function startsWith(str, search, pos) {\n      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n    }\n    function endsWith(str, search, this_len) {\n      if (this_len === void 0 || this_len > str.length) {\n        this_len = str.length;\n      }\n      return str.substring(this_len - search.length, this_len) === search;\n    }\n    function includes(str, search, start) {\n      if (typeof start !== \"number\") {\n        start = 0;\n      }\n      if (start + search.length > str.length) {\n        return false;\n      } else {\n        return str.indexOf(search, start) !== -1;\n      }\n    }\n    createErrorType(\"ERR_INVALID_OPT_VALUE\", function(name, value) {\n      return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n    }, TypeError);\n    createErrorType(\"ERR_INVALID_ARG_TYPE\", function(name, expected, actual) {\n      var determiner;\n      if (typeof expected === \"string\" && startsWith(expected, \"not \")) {\n        determiner = \"must not be\";\n        expected = expected.replace(/^not /, \"\");\n      } else {\n        determiner = \"must be\";\n      }\n      var msg;\n      if (endsWith(name, \" argument\")) {\n        msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, \"type\"));\n      } else {\n        var type = includes(name, \".\") ? \"property\" : \"argument\";\n        msg = 'The \"'.concat(name, '\" ').concat(type, \" \").concat(determiner, \" \").concat(oneOf(expected, \"type\"));\n      }\n      msg += \". Received type \".concat(typeof actual);\n      return msg;\n    }, TypeError);\n    createErrorType(\"ERR_STREAM_PUSH_AFTER_EOF\", \"stream.push() after EOF\");\n    createErrorType(\"ERR_METHOD_NOT_IMPLEMENTED\", function(name) {\n      return \"The \" + name + \" method is not implemented\";\n    });\n    createErrorType(\"ERR_STREAM_PREMATURE_CLOSE\", \"Premature close\");\n    createErrorType(\"ERR_STREAM_DESTROYED\", function(name) {\n      return \"Cannot call \" + name + \" after a stream was destroyed\";\n    });\n    createErrorType(\"ERR_MULTIPLE_CALLBACK\", \"Callback called multiple times\");\n    createErrorType(\"ERR_STREAM_CANNOT_PIPE\", \"Cannot pipe, not readable\");\n    createErrorType(\"ERR_STREAM_WRITE_AFTER_END\", \"write after end\");\n    createErrorType(\"ERR_STREAM_NULL_VALUES\", \"May not write null values to stream\", TypeError);\n    createErrorType(\"ERR_UNKNOWN_ENCODING\", function(arg) {\n      return \"Unknown encoding: \" + arg;\n    }, TypeError);\n    createErrorType(\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\", \"stream.unshift() after end event\");\n    module2.exports.codes = codes;\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/state.js\nvar require_state = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/state.js\"(exports2, module2) {\n    \"use strict\";\n    var ERR_INVALID_OPT_VALUE = require_errors_browser().codes.ERR_INVALID_OPT_VALUE;\n    function highWaterMarkFrom(options, isDuplex, duplexKey) {\n      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n    }\n    function getHighWaterMark(state, options, duplexKey, isDuplex) {\n      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n      if (hwm != null) {\n        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n          var name = isDuplex ? duplexKey : \"highWaterMark\";\n          throw new ERR_INVALID_OPT_VALUE(name, hwm);\n        }\n        return Math.floor(hwm);\n      }\n      return state.objectMode ? 16 : 16 * 1024;\n    }\n    module2.exports = {\n      getHighWaterMark\n    };\n  }\n});\n\n// node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js\nvar require_inherits_browser = __commonJS({\n  \"node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js\"(exports2, module2) {\n    if (typeof Object.create === \"function\") {\n      module2.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n          ctor.super_ = superCtor;\n          ctor.prototype = Object.create(superCtor.prototype, {\n            constructor: {\n              value: ctor,\n              enumerable: false,\n              writable: true,\n              configurable: true\n            }\n          });\n        }\n      };\n    } else {\n      module2.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n          ctor.super_ = superCtor;\n          var TempCtor = function() {\n          };\n          TempCtor.prototype = superCtor.prototype;\n          ctor.prototype = new TempCtor();\n          ctor.prototype.constructor = ctor;\n        }\n      };\n    }\n  }\n});\n\n// node_modules/.pnpm/util-deprecate@1.0.2/node_modules/util-deprecate/browser.js\nvar require_browser = __commonJS({\n  \"node_modules/.pnpm/util-deprecate@1.0.2/node_modules/util-deprecate/browser.js\"(exports2, module2) {\n    module2.exports = deprecate;\n    function deprecate(fn, msg) {\n      if (config(\"noDeprecation\")) {\n        return fn;\n      }\n      var warned = false;\n      function deprecated() {\n        if (!warned) {\n          if (config(\"throwDeprecation\")) {\n            throw new Error(msg);\n          } else if (config(\"traceDeprecation\")) {\n            console.trace(msg);\n          } else {\n            console.warn(msg);\n          }\n          warned = true;\n        }\n        return fn.apply(this, arguments);\n      }\n      return deprecated;\n    }\n    function config(name) {\n      try {\n        if (!global.localStorage)\n          return false;\n      } catch (_) {\n        return false;\n      }\n      var val = global.localStorage[name];\n      if (null == val)\n        return false;\n      return String(val).toLowerCase() === \"true\";\n    }\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_writable.js\nvar require_stream_writable = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_writable.js\"(exports2, module2) {\n    \"use strict\";\n    module2.exports = Writable;\n    function CorkedRequest(state) {\n      var _this = this;\n      this.next = null;\n      this.entry = null;\n      this.finish = function() {\n        onCorkedFinish(_this, state);\n      };\n    }\n    var Duplex;\n    Writable.WritableState = WritableState;\n    var internalUtil = {\n      deprecate: require_browser()\n    };\n    var Stream = require_stream_browser();\n    var Buffer2 = require_buffer().Buffer;\n    var OurUint8Array = global.Uint8Array || function() {\n    };\n    function _uint8ArrayToBuffer(chunk) {\n      return Buffer2.from(chunk);\n    }\n    function _isUint8Array(obj) {\n      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;\n    }\n    var destroyImpl = require_destroy();\n    var _require = require_state();\n    var getHighWaterMark = _require.getHighWaterMark;\n    var _require$codes = require_errors_browser().codes;\n    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;\n    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;\n    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;\n    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;\n    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;\n    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;\n    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n    var errorOrDestroy = destroyImpl.errorOrDestroy;\n    require_inherits_browser()(Writable, Stream);\n    function nop() {\n    }\n    function WritableState(options, stream, isDuplex) {\n      Duplex = Duplex || require_stream_duplex();\n      options = options || {};\n      if (typeof isDuplex !== \"boolean\")\n        isDuplex = stream instanceof Duplex;\n      this.objectMode = !!options.objectMode;\n      if (isDuplex)\n        this.objectMode = this.objectMode || !!options.writableObjectMode;\n      this.highWaterMark = getHighWaterMark(this, options, \"writableHighWaterMark\", isDuplex);\n      this.finalCalled = false;\n      this.needDrain = false;\n      this.ending = false;\n      this.ended = false;\n      this.finished = false;\n      this.destroyed = false;\n      var noDecode = options.decodeStrings === false;\n      this.decodeStrings = !noDecode;\n      this.defaultEncoding = options.defaultEncoding || \"utf8\";\n      this.length = 0;\n      this.writing = false;\n      this.corked = 0;\n      this.sync = true;\n      this.bufferProcessing = false;\n      this.onwrite = function(er) {\n        onwrite(stream, er);\n      };\n      this.writecb = null;\n      this.writelen = 0;\n      this.bufferedRequest = null;\n      this.lastBufferedRequest = null;\n      this.pendingcb = 0;\n      this.prefinished = false;\n      this.errorEmitted = false;\n      this.emitClose = options.emitClose !== false;\n      this.autoDestroy = !!options.autoDestroy;\n      this.bufferedRequestCount = 0;\n      this.corkedRequestsFree = new CorkedRequest(this);\n    }\n    WritableState.prototype.getBuffer = function getBuffer() {\n      var current = this.bufferedRequest;\n      var out = [];\n      while (current) {\n        out.push(current);\n        current = current.next;\n      }\n      return out;\n    };\n    (function() {\n      try {\n        Object.defineProperty(WritableState.prototype, \"buffer\", {\n          get: internalUtil.deprecate(function writableStateBufferGetter() {\n            return this.getBuffer();\n          }, \"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.\", \"DEP0003\")\n        });\n      } catch (_) {\n      }\n    })();\n    var realHasInstance;\n    if (typeof Symbol === \"function\" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === \"function\") {\n      realHasInstance = Function.prototype[Symbol.hasInstance];\n      Object.defineProperty(Writable, Symbol.hasInstance, {\n        value: function value(object) {\n          if (realHasInstance.call(this, object))\n            return true;\n          if (this !== Writable)\n            return false;\n          return object && object._writableState instanceof WritableState;\n        }\n      });\n    } else {\n      realHasInstance = function realHasInstance2(object) {\n        return object instanceof this;\n      };\n    }\n    function Writable(options) {\n      Duplex = Duplex || require_stream_duplex();\n      var isDuplex = this instanceof Duplex;\n      if (!isDuplex && !realHasInstance.call(Writable, this))\n        return new Writable(options);\n      this._writableState = new WritableState(options, this, isDuplex);\n      this.writable = true;\n      if (options) {\n        if (typeof options.write === \"function\")\n          this._write = options.write;\n        if (typeof options.writev === \"function\")\n          this._writev = options.writev;\n        if (typeof options.destroy === \"function\")\n          this._destroy = options.destroy;\n        if (typeof options.final === \"function\")\n          this._final = options.final;\n      }\n      Stream.call(this);\n    }\n    Writable.prototype.pipe = function() {\n      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n    };\n    function writeAfterEnd(stream, cb) {\n      var er = new ERR_STREAM_WRITE_AFTER_END();\n      errorOrDestroy(stream, er);\n      process.nextTick(cb, er);\n    }\n    function validChunk(stream, state, chunk, cb) {\n      var er;\n      if (chunk === null) {\n        er = new ERR_STREAM_NULL_VALUES();\n      } else if (typeof chunk !== \"string\" && !state.objectMode) {\n        er = new ERR_INVALID_ARG_TYPE(\"chunk\", [\"string\", \"Buffer\"], chunk);\n      }\n      if (er) {\n        errorOrDestroy(stream, er);\n        process.nextTick(cb, er);\n        return false;\n      }\n      return true;\n    }\n    Writable.prototype.write = function(chunk, encoding, cb) {\n      var state = this._writableState;\n      var ret = false;\n      var isBuf = !state.objectMode && _isUint8Array(chunk);\n      if (isBuf && !Buffer2.isBuffer(chunk)) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n      if (typeof encoding === \"function\") {\n        cb = encoding;\n        encoding = null;\n      }\n      if (isBuf)\n        encoding = \"buffer\";\n      else if (!encoding)\n        encoding = state.defaultEncoding;\n      if (typeof cb !== \"function\")\n        cb = nop;\n      if (state.ending)\n        writeAfterEnd(this, cb);\n      else if (isBuf || validChunk(this, state, chunk, cb)) {\n        state.pendingcb++;\n        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n      }\n      return ret;\n    };\n    Writable.prototype.cork = function() {\n      this._writableState.corked++;\n    };\n    Writable.prototype.uncork = function() {\n      var state = this._writableState;\n      if (state.corked) {\n        state.corked--;\n        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)\n          clearBuffer(this, state);\n      }\n    };\n    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n      if (typeof encoding === \"string\")\n        encoding = encoding.toLowerCase();\n      if (!([\"hex\", \"utf8\", \"utf-8\", \"ascii\", \"binary\", \"base64\", \"ucs2\", \"ucs-2\", \"utf16le\", \"utf-16le\", \"raw\"].indexOf((encoding + \"\").toLowerCase()) > -1))\n        throw new ERR_UNKNOWN_ENCODING(encoding);\n      this._writableState.defaultEncoding = encoding;\n      return this;\n    };\n    Object.defineProperty(Writable.prototype, \"writableBuffer\", {\n      enumerable: false,\n      get: function get() {\n        return this._writableState && this._writableState.getBuffer();\n      }\n    });\n    function decodeChunk(state, chunk, encoding) {\n      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === \"string\") {\n        chunk = Buffer2.from(chunk, encoding);\n      }\n      return chunk;\n    }\n    Object.defineProperty(Writable.prototype, \"writableHighWaterMark\", {\n      enumerable: false,\n      get: function get() {\n        return this._writableState.highWaterMark;\n      }\n    });\n    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n      if (!isBuf) {\n        var newChunk = decodeChunk(state, chunk, encoding);\n        if (chunk !== newChunk) {\n          isBuf = true;\n          encoding = \"buffer\";\n          chunk = newChunk;\n        }\n      }\n      var len = state.objectMode ? 1 : chunk.length;\n      state.length += len;\n      var ret = state.length < state.highWaterMark;\n      if (!ret)\n        state.needDrain = true;\n      if (state.writing || state.corked) {\n        var last = state.lastBufferedRequest;\n        state.lastBufferedRequest = {\n          chunk,\n          encoding,\n          isBuf,\n          callback: cb,\n          next: null\n        };\n        if (last) {\n          last.next = state.lastBufferedRequest;\n        } else {\n          state.bufferedRequest = state.lastBufferedRequest;\n        }\n        state.bufferedRequestCount += 1;\n      } else {\n        doWrite(stream, state, false, len, chunk, encoding, cb);\n      }\n      return ret;\n    }\n    function doWrite(stream, state, writev, len, chunk, encoding, cb) {\n      state.writelen = len;\n      state.writecb = cb;\n      state.writing = true;\n      state.sync = true;\n      if (state.destroyed)\n        state.onwrite(new ERR_STREAM_DESTROYED(\"write\"));\n      else if (writev)\n        stream._writev(chunk, state.onwrite);\n      else\n        stream._write(chunk, encoding, state.onwrite);\n      state.sync = false;\n    }\n    function onwriteError(stream, state, sync, er, cb) {\n      --state.pendingcb;\n      if (sync) {\n        process.nextTick(cb, er);\n        process.nextTick(finishMaybe, stream, state);\n        stream._writableState.errorEmitted = true;\n        errorOrDestroy(stream, er);\n      } else {\n        cb(er);\n        stream._writableState.errorEmitted = true;\n        errorOrDestroy(stream, er);\n        finishMaybe(stream, state);\n      }\n    }\n    function onwriteStateUpdate(state) {\n      state.writing = false;\n      state.writecb = null;\n      state.length -= state.writelen;\n      state.writelen = 0;\n    }\n    function onwrite(stream, er) {\n      var state = stream._writableState;\n      var sync = state.sync;\n      var cb = state.writecb;\n      if (typeof cb !== \"function\")\n        throw new ERR_MULTIPLE_CALLBACK();\n      onwriteStateUpdate(state);\n      if (er)\n        onwriteError(stream, state, sync, er, cb);\n      else {\n        var finished = needFinish(state) || stream.destroyed;\n        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n          clearBuffer(stream, state);\n        }\n        if (sync) {\n          process.nextTick(afterWrite, stream, state, finished, cb);\n        } else {\n          afterWrite(stream, state, finished, cb);\n        }\n      }\n    }\n    function afterWrite(stream, state, finished, cb) {\n      if (!finished)\n        onwriteDrain(stream, state);\n      state.pendingcb--;\n      cb();\n      finishMaybe(stream, state);\n    }\n    function onwriteDrain(stream, state) {\n      if (state.length === 0 && state.needDrain) {\n        state.needDrain = false;\n        stream.emit(\"drain\");\n      }\n    }\n    function clearBuffer(stream, state) {\n      state.bufferProcessing = true;\n      var entry = state.bufferedRequest;\n      if (stream._writev && entry && entry.next) {\n        var l = state.bufferedRequestCount;\n        var buffer = new Array(l);\n        var holder = state.corkedRequestsFree;\n        holder.entry = entry;\n        var count = 0;\n        var allBuffers = true;\n        while (entry) {\n          buffer[count] = entry;\n          if (!entry.isBuf)\n            allBuffers = false;\n          entry = entry.next;\n          count += 1;\n        }\n        buffer.allBuffers = allBuffers;\n        doWrite(stream, state, true, state.length, buffer, \"\", holder.finish);\n        state.pendingcb++;\n        state.lastBufferedRequest = null;\n        if (holder.next) {\n          state.corkedRequestsFree = holder.next;\n          holder.next = null;\n        } else {\n          state.corkedRequestsFree = new CorkedRequest(state);\n        }\n        state.bufferedRequestCount = 0;\n      } else {\n        while (entry) {\n          var chunk = entry.chunk;\n          var encoding = entry.encoding;\n          var cb = entry.callback;\n          var len = state.objectMode ? 1 : chunk.length;\n          doWrite(stream, state, false, len, chunk, encoding, cb);\n          entry = entry.next;\n          state.bufferedRequestCount--;\n          if (state.writing) {\n            break;\n          }\n        }\n        if (entry === null)\n          state.lastBufferedRequest = null;\n      }\n      state.bufferedRequest = entry;\n      state.bufferProcessing = false;\n    }\n    Writable.prototype._write = function(chunk, encoding, cb) {\n      cb(new ERR_METHOD_NOT_IMPLEMENTED(\"_write()\"));\n    };\n    Writable.prototype._writev = null;\n    Writable.prototype.end = function(chunk, encoding, cb) {\n      var state = this._writableState;\n      if (typeof chunk === \"function\") {\n        cb = chunk;\n        chunk = null;\n        encoding = null;\n      } else if (typeof encoding === \"function\") {\n        cb = encoding;\n        encoding = null;\n      }\n      if (chunk !== null && chunk !== void 0)\n        this.write(chunk, encoding);\n      if (state.corked) {\n        state.corked = 1;\n        this.uncork();\n      }\n      if (!state.ending)\n        endWritable(this, state, cb);\n      return this;\n    };\n    Object.defineProperty(Writable.prototype, \"writableLength\", {\n      enumerable: false,\n      get: function get() {\n        return this._writableState.length;\n      }\n    });\n    function needFinish(state) {\n      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n    }\n    function callFinal(stream, state) {\n      stream._final(function(err) {\n        state.pendingcb--;\n        if (err) {\n          errorOrDestroy(stream, err);\n        }\n        state.prefinished = true;\n        stream.emit(\"prefinish\");\n        finishMaybe(stream, state);\n      });\n    }\n    function prefinish(stream, state) {\n      if (!state.prefinished && !state.finalCalled) {\n        if (typeof stream._final === \"function\" && !state.destroyed) {\n          state.pendingcb++;\n          state.finalCalled = true;\n          process.nextTick(callFinal, stream, state);\n        } else {\n          state.prefinished = true;\n          stream.emit(\"prefinish\");\n        }\n      }\n    }\n    function finishMaybe(stream, state) {\n      var need = needFinish(state);\n      if (need) {\n        prefinish(stream, state);\n        if (state.pendingcb === 0) {\n          state.finished = true;\n          stream.emit(\"finish\");\n          if (state.autoDestroy) {\n            var rState = stream._readableState;\n            if (!rState || rState.autoDestroy && rState.endEmitted) {\n              stream.destroy();\n            }\n          }\n        }\n      }\n      return need;\n    }\n    function endWritable(stream, state, cb) {\n      state.ending = true;\n      finishMaybe(stream, state);\n      if (cb) {\n        if (state.finished)\n          process.nextTick(cb);\n        else\n          stream.once(\"finish\", cb);\n      }\n      state.ended = true;\n      stream.writable = false;\n    }\n    function onCorkedFinish(corkReq, state, err) {\n      var entry = corkReq.entry;\n      corkReq.entry = null;\n      while (entry) {\n        var cb = entry.callback;\n        state.pendingcb--;\n        cb(err);\n        entry = entry.next;\n      }\n      state.corkedRequestsFree.next = corkReq;\n    }\n    Object.defineProperty(Writable.prototype, \"destroyed\", {\n      enumerable: false,\n      get: function get() {\n        if (this._writableState === void 0) {\n          return false;\n        }\n        return this._writableState.destroyed;\n      },\n      set: function set(value) {\n        if (!this._writableState) {\n          return;\n        }\n        this._writableState.destroyed = value;\n      }\n    });\n    Writable.prototype.destroy = destroyImpl.destroy;\n    Writable.prototype._undestroy = destroyImpl.undestroy;\n    Writable.prototype._destroy = function(err, cb) {\n      cb(err);\n    };\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_duplex.js\nvar require_stream_duplex = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_duplex.js\"(exports2, module2) {\n    \"use strict\";\n    var objectKeys = Object.keys || function(obj) {\n      var keys2 = [];\n      for (var key in obj) {\n        keys2.push(key);\n      }\n      return keys2;\n    };\n    module2.exports = Duplex;\n    var Readable = require_stream_readable();\n    var Writable = require_stream_writable();\n    require_inherits_browser()(Duplex, Readable);\n    {\n      keys = objectKeys(Writable.prototype);\n      for (v = 0; v < keys.length; v++) {\n        method = keys[v];\n        if (!Duplex.prototype[method])\n          Duplex.prototype[method] = Writable.prototype[method];\n      }\n    }\n    var keys;\n    var method;\n    var v;\n    function Duplex(options) {\n      if (!(this instanceof Duplex))\n        return new Duplex(options);\n      Readable.call(this, options);\n      Writable.call(this, options);\n      this.allowHalfOpen = true;\n      if (options) {\n        if (options.readable === false)\n          this.readable = false;\n        if (options.writable === false)\n          this.writable = false;\n        if (options.allowHalfOpen === false) {\n          this.allowHalfOpen = false;\n          this.once(\"end\", onend);\n        }\n      }\n    }\n    Object.defineProperty(Duplex.prototype, \"writableHighWaterMark\", {\n      enumerable: false,\n      get: function get() {\n        return this._writableState.highWaterMark;\n      }\n    });\n    Object.defineProperty(Duplex.prototype, \"writableBuffer\", {\n      enumerable: false,\n      get: function get() {\n        return this._writableState && this._writableState.getBuffer();\n      }\n    });\n    Object.defineProperty(Duplex.prototype, \"writableLength\", {\n      enumerable: false,\n      get: function get() {\n        return this._writableState.length;\n      }\n    });\n    function onend() {\n      if (this._writableState.ended)\n        return;\n      process.nextTick(onEndNT, this);\n    }\n    function onEndNT(self) {\n      self.end();\n    }\n    Object.defineProperty(Duplex.prototype, \"destroyed\", {\n      enumerable: false,\n      get: function get() {\n        if (this._readableState === void 0 || this._writableState === void 0) {\n          return false;\n        }\n        return this._readableState.destroyed && this._writableState.destroyed;\n      },\n      set: function set(value) {\n        if (this._readableState === void 0 || this._writableState === void 0) {\n          return;\n        }\n        this._readableState.destroyed = value;\n        this._writableState.destroyed = value;\n      }\n    });\n  }\n});\n\n// node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js\nvar require_safe_buffer = __commonJS({\n  \"node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js\"(exports2, module2) {\n    var buffer = require_buffer();\n    var Buffer2 = buffer.Buffer;\n    function copyProps(src, dst) {\n      for (var key in src) {\n        dst[key] = src[key];\n      }\n    }\n    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {\n      module2.exports = buffer;\n    } else {\n      copyProps(buffer, exports2);\n      exports2.Buffer = SafeBuffer;\n    }\n    function SafeBuffer(arg, encodingOrOffset, length) {\n      return Buffer2(arg, encodingOrOffset, length);\n    }\n    SafeBuffer.prototype = Object.create(Buffer2.prototype);\n    copyProps(Buffer2, SafeBuffer);\n    SafeBuffer.from = function(arg, encodingOrOffset, length) {\n      if (typeof arg === \"number\") {\n        throw new TypeError(\"Argument must not be a number\");\n      }\n      return Buffer2(arg, encodingOrOffset, length);\n    };\n    SafeBuffer.alloc = function(size, fill, encoding) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      var buf = Buffer2(size);\n      if (fill !== void 0) {\n        if (typeof encoding === \"string\") {\n          buf.fill(fill, encoding);\n        } else {\n          buf.fill(fill);\n        }\n      } else {\n        buf.fill(0);\n      }\n      return buf;\n    };\n    SafeBuffer.allocUnsafe = function(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      return Buffer2(size);\n    };\n    SafeBuffer.allocUnsafeSlow = function(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      return buffer.SlowBuffer(size);\n    };\n  }\n});\n\n// node_modules/.pnpm/string_decoder@1.3.0/node_modules/string_decoder/lib/string_decoder.js\nvar require_string_decoder = __commonJS({\n  \"node_modules/.pnpm/string_decoder@1.3.0/node_modules/string_decoder/lib/string_decoder.js\"(exports2) {\n    \"use strict\";\n    var Buffer2 = require_safe_buffer().Buffer;\n    var isEncoding = Buffer2.isEncoding || function(encoding) {\n      encoding = \"\" + encoding;\n      switch (encoding && encoding.toLowerCase()) {\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n        case \"raw\":\n          return true;\n        default:\n          return false;\n      }\n    };\n    function _normalizeEncoding(enc) {\n      if (!enc)\n        return \"utf8\";\n      var retried;\n      while (true) {\n        switch (enc) {\n          case \"utf8\":\n          case \"utf-8\":\n            return \"utf8\";\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return \"utf16le\";\n          case \"latin1\":\n          case \"binary\":\n            return \"latin1\";\n          case \"base64\":\n          case \"ascii\":\n          case \"hex\":\n            return enc;\n          default:\n            if (retried)\n              return;\n            enc = (\"\" + enc).toLowerCase();\n            retried = true;\n        }\n      }\n    }\n    function normalizeEncoding(enc) {\n      var nenc = _normalizeEncoding(enc);\n      if (typeof nenc !== \"string\" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))\n        throw new Error(\"Unknown encoding: \" + enc);\n      return nenc || enc;\n    }\n    exports2.StringDecoder = StringDecoder;\n    function StringDecoder(encoding) {\n      this.encoding = normalizeEncoding(encoding);\n      var nb;\n      switch (this.encoding) {\n        case \"utf16le\":\n          this.text = utf16Text;\n          this.end = utf16End;\n          nb = 4;\n          break;\n        case \"utf8\":\n          this.fillLast = utf8FillLast;\n          nb = 4;\n          break;\n        case \"base64\":\n          this.text = base64Text;\n          this.end = base64End;\n          nb = 3;\n          break;\n        default:\n          this.write = simpleWrite;\n          this.end = simpleEnd;\n          return;\n      }\n      this.lastNeed = 0;\n      this.lastTotal = 0;\n      this.lastChar = Buffer2.allocUnsafe(nb);\n    }\n    StringDecoder.prototype.write = function(buf) {\n      if (buf.length === 0)\n        return \"\";\n      var r;\n      var i;\n      if (this.lastNeed) {\n        r = this.fillLast(buf);\n        if (r === void 0)\n          return \"\";\n        i = this.lastNeed;\n        this.lastNeed = 0;\n      } else {\n        i = 0;\n      }\n      if (i < buf.length)\n        return r ? r + this.text(buf, i) : this.text(buf, i);\n      return r || \"\";\n    };\n    StringDecoder.prototype.end = utf8End;\n    StringDecoder.prototype.text = utf8Text;\n    StringDecoder.prototype.fillLast = function(buf) {\n      if (this.lastNeed <= buf.length) {\n        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n        return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n      }\n      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n      this.lastNeed -= buf.length;\n    };\n    function utf8CheckByte(byte) {\n      if (byte <= 127)\n        return 0;\n      else if (byte >> 5 === 6)\n        return 2;\n      else if (byte >> 4 === 14)\n        return 3;\n      else if (byte >> 3 === 30)\n        return 4;\n      return byte >> 6 === 2 ? -1 : -2;\n    }\n    function utf8CheckIncomplete(self, buf, i) {\n      var j = buf.length - 1;\n      if (j < i)\n        return 0;\n      var nb = utf8CheckByte(buf[j]);\n      if (nb >= 0) {\n        if (nb > 0)\n          self.lastNeed = nb - 1;\n        return nb;\n      }\n      if (--j < i || nb === -2)\n        return 0;\n      nb = utf8CheckByte(buf[j]);\n      if (nb >= 0) {\n        if (nb > 0)\n          self.lastNeed = nb - 2;\n        return nb;\n      }\n      if (--j < i || nb === -2)\n        return 0;\n      nb = utf8CheckByte(buf[j]);\n      if (nb >= 0) {\n        if (nb > 0) {\n          if (nb === 2)\n            nb = 0;\n          else\n            self.lastNeed = nb - 3;\n        }\n        return nb;\n      }\n      return 0;\n    }\n    function utf8CheckExtraBytes(self, buf, p) {\n      if ((buf[0] & 192) !== 128) {\n        self.lastNeed = 0;\n        return \"\\uFFFD\";\n      }\n      if (self.lastNeed > 1 && buf.length > 1) {\n        if ((buf[1] & 192) !== 128) {\n          self.lastNeed = 1;\n          return \"\\uFFFD\";\n        }\n        if (self.lastNeed > 2 && buf.length > 2) {\n          if ((buf[2] & 192) !== 128) {\n            self.lastNeed = 2;\n            return \"\\uFFFD\";\n          }\n        }\n      }\n    }\n    function utf8FillLast(buf) {\n      var p = this.lastTotal - this.lastNeed;\n      var r = utf8CheckExtraBytes(this, buf, p);\n      if (r !== void 0)\n        return r;\n      if (this.lastNeed <= buf.length) {\n        buf.copy(this.lastChar, p, 0, this.lastNeed);\n        return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n      }\n      buf.copy(this.lastChar, p, 0, buf.length);\n      this.lastNeed -= buf.length;\n    }\n    function utf8Text(buf, i) {\n      var total = utf8CheckIncomplete(this, buf, i);\n      if (!this.lastNeed)\n        return buf.toString(\"utf8\", i);\n      this.lastTotal = total;\n      var end = buf.length - (total - this.lastNeed);\n      buf.copy(this.lastChar, 0, end);\n      return buf.toString(\"utf8\", i, end);\n    }\n    function utf8End(buf) {\n      var r = buf && buf.length ? this.write(buf) : \"\";\n      if (this.lastNeed)\n        return r + \"\\uFFFD\";\n      return r;\n    }\n    function utf16Text(buf, i) {\n      if ((buf.length - i) % 2 === 0) {\n        var r = buf.toString(\"utf16le\", i);\n        if (r) {\n          var c = r.charCodeAt(r.length - 1);\n          if (c >= 55296 && c <= 56319) {\n            this.lastNeed = 2;\n            this.lastTotal = 4;\n            this.lastChar[0] = buf[buf.length - 2];\n            this.lastChar[1] = buf[buf.length - 1];\n            return r.slice(0, -1);\n          }\n        }\n        return r;\n      }\n      this.lastNeed = 1;\n      this.lastTotal = 2;\n      this.lastChar[0] = buf[buf.length - 1];\n      return buf.toString(\"utf16le\", i, buf.length - 1);\n    }\n    function utf16End(buf) {\n      var r = buf && buf.length ? this.write(buf) : \"\";\n      if (this.lastNeed) {\n        var end = this.lastTotal - this.lastNeed;\n        return r + this.lastChar.toString(\"utf16le\", 0, end);\n      }\n      return r;\n    }\n    function base64Text(buf, i) {\n      var n = (buf.length - i) % 3;\n      if (n === 0)\n        return buf.toString(\"base64\", i);\n      this.lastNeed = 3 - n;\n      this.lastTotal = 3;\n      if (n === 1) {\n        this.lastChar[0] = buf[buf.length - 1];\n      } else {\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n      }\n      return buf.toString(\"base64\", i, buf.length - n);\n    }\n    function base64End(buf) {\n      var r = buf && buf.length ? this.write(buf) : \"\";\n      if (this.lastNeed)\n        return r + this.lastChar.toString(\"base64\", 0, 3 - this.lastNeed);\n      return r;\n    }\n    function simpleWrite(buf) {\n      return buf.toString(this.encoding);\n    }\n    function simpleEnd(buf) {\n      return buf && buf.length ? this.write(buf) : \"\";\n    }\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\nvar require_end_of_stream = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\"(exports2, module2) {\n    \"use strict\";\n    var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser().codes.ERR_STREAM_PREMATURE_CLOSE;\n    function once(callback) {\n      var called = false;\n      return function() {\n        if (called)\n          return;\n        called = true;\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        callback.apply(this, args);\n      };\n    }\n    function noop() {\n    }\n    function isRequest(stream) {\n      return stream.setHeader && typeof stream.abort === \"function\";\n    }\n    function eos(stream, opts, callback) {\n      if (typeof opts === \"function\")\n        return eos(stream, null, opts);\n      if (!opts)\n        opts = {};\n      callback = once(callback || noop);\n      var readable = opts.readable || opts.readable !== false && stream.readable;\n      var writable = opts.writable || opts.writable !== false && stream.writable;\n      var onlegacyfinish = function onlegacyfinish2() {\n        if (!stream.writable)\n          onfinish();\n      };\n      var writableEnded = stream._writableState && stream._writableState.finished;\n      var onfinish = function onfinish2() {\n        writable = false;\n        writableEnded = true;\n        if (!readable)\n          callback.call(stream);\n      };\n      var readableEnded = stream._readableState && stream._readableState.endEmitted;\n      var onend = function onend2() {\n        readable = false;\n        readableEnded = true;\n        if (!writable)\n          callback.call(stream);\n      };\n      var onerror = function onerror2(err) {\n        callback.call(stream, err);\n      };\n      var onclose = function onclose2() {\n        var err;\n        if (readable && !readableEnded) {\n          if (!stream._readableState || !stream._readableState.ended)\n            err = new ERR_STREAM_PREMATURE_CLOSE();\n          return callback.call(stream, err);\n        }\n        if (writable && !writableEnded) {\n          if (!stream._writableState || !stream._writableState.ended)\n            err = new ERR_STREAM_PREMATURE_CLOSE();\n          return callback.call(stream, err);\n        }\n      };\n      var onrequest = function onrequest2() {\n        stream.req.on(\"finish\", onfinish);\n      };\n      if (isRequest(stream)) {\n        stream.on(\"complete\", onfinish);\n        stream.on(\"abort\", onclose);\n        if (stream.req)\n          onrequest();\n        else\n          stream.on(\"request\", onrequest);\n      } else if (writable && !stream._writableState) {\n        stream.on(\"end\", onlegacyfinish);\n        stream.on(\"close\", onlegacyfinish);\n      }\n      stream.on(\"end\", onend);\n      stream.on(\"finish\", onfinish);\n      if (opts.error !== false)\n        stream.on(\"error\", onerror);\n      stream.on(\"close\", onclose);\n      return function() {\n        stream.removeListener(\"complete\", onfinish);\n        stream.removeListener(\"abort\", onclose);\n        stream.removeListener(\"request\", onrequest);\n        if (stream.req)\n          stream.req.removeListener(\"finish\", onfinish);\n        stream.removeListener(\"end\", onlegacyfinish);\n        stream.removeListener(\"close\", onlegacyfinish);\n        stream.removeListener(\"finish\", onfinish);\n        stream.removeListener(\"end\", onend);\n        stream.removeListener(\"error\", onerror);\n        stream.removeListener(\"close\", onclose);\n      };\n    }\n    module2.exports = eos;\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/async_iterator.js\nvar require_async_iterator = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/async_iterator.js\"(exports2, module2) {\n    \"use strict\";\n    var _Object$setPrototypeO;\n    function _defineProperty(obj, key, value) {\n      if (key in obj) {\n        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });\n      } else {\n        obj[key] = value;\n      }\n      return obj;\n    }\n    var finished = require_end_of_stream();\n    var kLastResolve = Symbol(\"lastResolve\");\n    var kLastReject = Symbol(\"lastReject\");\n    var kError = Symbol(\"error\");\n    var kEnded = Symbol(\"ended\");\n    var kLastPromise = Symbol(\"lastPromise\");\n    var kHandlePromise = Symbol(\"handlePromise\");\n    var kStream = Symbol(\"stream\");\n    function createIterResult(value, done) {\n      return {\n        value,\n        done\n      };\n    }\n    function readAndResolve(iter) {\n      var resolve = iter[kLastResolve];\n      if (resolve !== null) {\n        var data = iter[kStream].read();\n        if (data !== null) {\n          iter[kLastPromise] = null;\n          iter[kLastResolve] = null;\n          iter[kLastReject] = null;\n          resolve(createIterResult(data, false));\n        }\n      }\n    }\n    function onReadable(iter) {\n      process.nextTick(readAndResolve, iter);\n    }\n    function wrapForNext(lastPromise, iter) {\n      return function(resolve, reject) {\n        lastPromise.then(function() {\n          if (iter[kEnded]) {\n            resolve(createIterResult(void 0, true));\n            return;\n          }\n          iter[kHandlePromise](resolve, reject);\n        }, reject);\n      };\n    }\n    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {\n    });\n    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n      get stream() {\n        return this[kStream];\n      },\n      next: function next() {\n        var _this = this;\n        var error = this[kError];\n        if (error !== null) {\n          return Promise.reject(error);\n        }\n        if (this[kEnded]) {\n          return Promise.resolve(createIterResult(void 0, true));\n        }\n        if (this[kStream].destroyed) {\n          return new Promise(function(resolve, reject) {\n            process.nextTick(function() {\n              if (_this[kError]) {\n                reject(_this[kError]);\n              } else {\n                resolve(createIterResult(void 0, true));\n              }\n            });\n          });\n        }\n        var lastPromise = this[kLastPromise];\n        var promise;\n        if (lastPromise) {\n          promise = new Promise(wrapForNext(lastPromise, this));\n        } else {\n          var data = this[kStream].read();\n          if (data !== null) {\n            return Promise.resolve(createIterResult(data, false));\n          }\n          promise = new Promise(this[kHandlePromise]);\n        }\n        this[kLastPromise] = promise;\n        return promise;\n      }\n    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {\n      return this;\n    }), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n      var _this2 = this;\n      return new Promise(function(resolve, reject) {\n        _this2[kStream].destroy(null, function(err) {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(createIterResult(void 0, true));\n        });\n      });\n    }), _Object$setPrototypeO), AsyncIteratorPrototype);\n    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {\n      var _Object$create;\n      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n        value: stream,\n        writable: true\n      }), _defineProperty(_Object$create, kLastResolve, {\n        value: null,\n        writable: true\n      }), _defineProperty(_Object$create, kLastReject, {\n        value: null,\n        writable: true\n      }), _defineProperty(_Object$create, kError, {\n        value: null,\n        writable: true\n      }), _defineProperty(_Object$create, kEnded, {\n        value: stream._readableState.endEmitted,\n        writable: true\n      }), _defineProperty(_Object$create, kHandlePromise, {\n        value: function value(resolve, reject) {\n          var data = iterator[kStream].read();\n          if (data) {\n            iterator[kLastPromise] = null;\n            iterator[kLastResolve] = null;\n            iterator[kLastReject] = null;\n            resolve(createIterResult(data, false));\n          } else {\n            iterator[kLastResolve] = resolve;\n            iterator[kLastReject] = reject;\n          }\n        },\n        writable: true\n      }), _Object$create));\n      iterator[kLastPromise] = null;\n      finished(stream, function(err) {\n        if (err && err.code !== \"ERR_STREAM_PREMATURE_CLOSE\") {\n          var reject = iterator[kLastReject];\n          if (reject !== null) {\n            iterator[kLastPromise] = null;\n            iterator[kLastResolve] = null;\n            iterator[kLastReject] = null;\n            reject(err);\n          }\n          iterator[kError] = err;\n          return;\n        }\n        var resolve = iterator[kLastResolve];\n        if (resolve !== null) {\n          iterator[kLastPromise] = null;\n          iterator[kLastResolve] = null;\n          iterator[kLastReject] = null;\n          resolve(createIterResult(void 0, true));\n        }\n        iterator[kEnded] = true;\n      });\n      stream.on(\"readable\", onReadable.bind(null, iterator));\n      return iterator;\n    };\n    module2.exports = createReadableStreamAsyncIterator;\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/from-browser.js\nvar require_from_browser = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/from-browser.js\"(exports2, module2) {\n    module2.exports = function() {\n      throw new Error(\"Readable.from is not available in the browser\");\n    };\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_readable.js\nvar require_stream_readable = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_readable.js\"(exports2, module2) {\n    \"use strict\";\n    module2.exports = Readable;\n    var Duplex;\n    Readable.ReadableState = ReadableState;\n    var EE = require_events().EventEmitter;\n    var EElistenerCount = function EElistenerCount2(emitter, type) {\n      return emitter.listeners(type).length;\n    };\n    var Stream = require_stream_browser();\n    var Buffer2 = require_buffer().Buffer;\n    var OurUint8Array = global.Uint8Array || function() {\n    };\n    function _uint8ArrayToBuffer(chunk) {\n      return Buffer2.from(chunk);\n    }\n    function _isUint8Array(obj) {\n      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;\n    }\n    var debugUtil = require_util();\n    var debug;\n    if (debugUtil && debugUtil.debuglog) {\n      debug = debugUtil.debuglog(\"stream\");\n    } else {\n      debug = function debug2() {\n      };\n    }\n    var BufferList = require_buffer_list();\n    var destroyImpl = require_destroy();\n    var _require = require_state();\n    var getHighWaterMark = _require.getHighWaterMark;\n    var _require$codes = require_errors_browser().codes;\n    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;\n    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;\n    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;\n    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;\n    var StringDecoder;\n    var createReadableStreamAsyncIterator;\n    var from;\n    require_inherits_browser()(Readable, Stream);\n    var errorOrDestroy = destroyImpl.errorOrDestroy;\n    var kProxyEvents = [\"error\", \"close\", \"destroy\", \"pause\", \"resume\"];\n    function prependListener(emitter, event, fn) {\n      if (typeof emitter.prependListener === \"function\")\n        return emitter.prependListener(event, fn);\n      if (!emitter._events || !emitter._events[event])\n        emitter.on(event, fn);\n      else if (Array.isArray(emitter._events[event]))\n        emitter._events[event].unshift(fn);\n      else\n        emitter._events[event] = [fn, emitter._events[event]];\n    }\n    function ReadableState(options, stream, isDuplex) {\n      Duplex = Duplex || require_stream_duplex();\n      options = options || {};\n      if (typeof isDuplex !== \"boolean\")\n        isDuplex = stream instanceof Duplex;\n      this.objectMode = !!options.objectMode;\n      if (isDuplex)\n        this.objectMode = this.objectMode || !!options.readableObjectMode;\n      this.highWaterMark = getHighWaterMark(this, options, \"readableHighWaterMark\", isDuplex);\n      this.buffer = new BufferList();\n      this.length = 0;\n      this.pipes = null;\n      this.pipesCount = 0;\n      this.flowing = null;\n      this.ended = false;\n      this.endEmitted = false;\n      this.reading = false;\n      this.sync = true;\n      this.needReadable = false;\n      this.emittedReadable = false;\n      this.readableListening = false;\n      this.resumeScheduled = false;\n      this.paused = true;\n      this.emitClose = options.emitClose !== false;\n      this.autoDestroy = !!options.autoDestroy;\n      this.destroyed = false;\n      this.defaultEncoding = options.defaultEncoding || \"utf8\";\n      this.awaitDrain = 0;\n      this.readingMore = false;\n      this.decoder = null;\n      this.encoding = null;\n      if (options.encoding) {\n        if (!StringDecoder)\n          StringDecoder = require_string_decoder().StringDecoder;\n        this.decoder = new StringDecoder(options.encoding);\n        this.encoding = options.encoding;\n      }\n    }\n    function Readable(options) {\n      Duplex = Duplex || require_stream_duplex();\n      if (!(this instanceof Readable))\n        return new Readable(options);\n      var isDuplex = this instanceof Duplex;\n      this._readableState = new ReadableState(options, this, isDuplex);\n      this.readable = true;\n      if (options) {\n        if (typeof options.read === \"function\")\n          this._read = options.read;\n        if (typeof options.destroy === \"function\")\n          this._destroy = options.destroy;\n      }\n      Stream.call(this);\n    }\n    Object.defineProperty(Readable.prototype, \"destroyed\", {\n      enumerable: false,\n      get: function get() {\n        if (this._readableState === void 0) {\n          return false;\n        }\n        return this._readableState.destroyed;\n      },\n      set: function set(value) {\n        if (!this._readableState) {\n          return;\n        }\n        this._readableState.destroyed = value;\n      }\n    });\n    Readable.prototype.destroy = destroyImpl.destroy;\n    Readable.prototype._undestroy = destroyImpl.undestroy;\n    Readable.prototype._destroy = function(err, cb) {\n      cb(err);\n    };\n    Readable.prototype.push = function(chunk, encoding) {\n      var state = this._readableState;\n      var skipChunkCheck;\n      if (!state.objectMode) {\n        if (typeof chunk === \"string\") {\n          encoding = encoding || state.defaultEncoding;\n          if (encoding !== state.encoding) {\n            chunk = Buffer2.from(chunk, encoding);\n            encoding = \"\";\n          }\n          skipChunkCheck = true;\n        }\n      } else {\n        skipChunkCheck = true;\n      }\n      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n    };\n    Readable.prototype.unshift = function(chunk) {\n      return readableAddChunk(this, chunk, null, true, false);\n    };\n    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n      debug(\"readableAddChunk\", chunk);\n      var state = stream._readableState;\n      if (chunk === null) {\n        state.reading = false;\n        onEofChunk(stream, state);\n      } else {\n        var er;\n        if (!skipChunkCheck)\n          er = chunkInvalid(state, chunk);\n        if (er) {\n          errorOrDestroy(stream, er);\n        } else if (state.objectMode || chunk && chunk.length > 0) {\n          if (typeof chunk !== \"string\" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {\n            chunk = _uint8ArrayToBuffer(chunk);\n          }\n          if (addToFront) {\n            if (state.endEmitted)\n              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());\n            else\n              addChunk(stream, state, chunk, true);\n          } else if (state.ended) {\n            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n          } else if (state.destroyed) {\n            return false;\n          } else {\n            state.reading = false;\n            if (state.decoder && !encoding) {\n              chunk = state.decoder.write(chunk);\n              if (state.objectMode || chunk.length !== 0)\n                addChunk(stream, state, chunk, false);\n              else\n                maybeReadMore(stream, state);\n            } else {\n              addChunk(stream, state, chunk, false);\n            }\n          }\n        } else if (!addToFront) {\n          state.reading = false;\n          maybeReadMore(stream, state);\n        }\n      }\n      return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n    }\n    function addChunk(stream, state, chunk, addToFront) {\n      if (state.flowing && state.length === 0 && !state.sync) {\n        state.awaitDrain = 0;\n        stream.emit(\"data\", chunk);\n      } else {\n        state.length += state.objectMode ? 1 : chunk.length;\n        if (addToFront)\n          state.buffer.unshift(chunk);\n        else\n          state.buffer.push(chunk);\n        if (state.needReadable)\n          emitReadable(stream);\n      }\n      maybeReadMore(stream, state);\n    }\n    function chunkInvalid(state, chunk) {\n      var er;\n      if (!_isUint8Array(chunk) && typeof chunk !== \"string\" && chunk !== void 0 && !state.objectMode) {\n        er = new ERR_INVALID_ARG_TYPE(\"chunk\", [\"string\", \"Buffer\", \"Uint8Array\"], chunk);\n      }\n      return er;\n    }\n    Readable.prototype.isPaused = function() {\n      return this._readableState.flowing === false;\n    };\n    Readable.prototype.setEncoding = function(enc) {\n      if (!StringDecoder)\n        StringDecoder = require_string_decoder().StringDecoder;\n      var decoder = new StringDecoder(enc);\n      this._readableState.decoder = decoder;\n      this._readableState.encoding = this._readableState.decoder.encoding;\n      var p = this._readableState.buffer.head;\n      var content = \"\";\n      while (p !== null) {\n        content += decoder.write(p.data);\n        p = p.next;\n      }\n      this._readableState.buffer.clear();\n      if (content !== \"\")\n        this._readableState.buffer.push(content);\n      this._readableState.length = content.length;\n      return this;\n    };\n    var MAX_HWM = 1073741824;\n    function computeNewHighWaterMark(n) {\n      if (n >= MAX_HWM) {\n        n = MAX_HWM;\n      } else {\n        n--;\n        n |= n >>> 1;\n        n |= n >>> 2;\n        n |= n >>> 4;\n        n |= n >>> 8;\n        n |= n >>> 16;\n        n++;\n      }\n      return n;\n    }\n    function howMuchToRead(n, state) {\n      if (n <= 0 || state.length === 0 && state.ended)\n        return 0;\n      if (state.objectMode)\n        return 1;\n      if (n !== n) {\n        if (state.flowing && state.length)\n          return state.buffer.head.data.length;\n        else\n          return state.length;\n      }\n      if (n > state.highWaterMark)\n        state.highWaterMark = computeNewHighWaterMark(n);\n      if (n <= state.length)\n        return n;\n      if (!state.ended) {\n        state.needReadable = true;\n        return 0;\n      }\n      return state.length;\n    }\n    Readable.prototype.read = function(n) {\n      debug(\"read\", n);\n      n = parseInt(n, 10);\n      var state = this._readableState;\n      var nOrig = n;\n      if (n !== 0)\n        state.emittedReadable = false;\n      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n        debug(\"read: emitReadable\", state.length, state.ended);\n        if (state.length === 0 && state.ended)\n          endReadable(this);\n        else\n          emitReadable(this);\n        return null;\n      }\n      n = howMuchToRead(n, state);\n      if (n === 0 && state.ended) {\n        if (state.length === 0)\n          endReadable(this);\n        return null;\n      }\n      var doRead = state.needReadable;\n      debug(\"need readable\", doRead);\n      if (state.length === 0 || state.length - n < state.highWaterMark) {\n        doRead = true;\n        debug(\"length less than watermark\", doRead);\n      }\n      if (state.ended || state.reading) {\n        doRead = false;\n        debug(\"reading or ended\", doRead);\n      } else if (doRead) {\n        debug(\"do read\");\n        state.reading = true;\n        state.sync = true;\n        if (state.length === 0)\n          state.needReadable = true;\n        this._read(state.highWaterMark);\n        state.sync = false;\n        if (!state.reading)\n          n = howMuchToRead(nOrig, state);\n      }\n      var ret;\n      if (n > 0)\n        ret = fromList(n, state);\n      else\n        ret = null;\n      if (ret === null) {\n        state.needReadable = state.length <= state.highWaterMark;\n        n = 0;\n      } else {\n        state.length -= n;\n        state.awaitDrain = 0;\n      }\n      if (state.length === 0) {\n        if (!state.ended)\n          state.needReadable = true;\n        if (nOrig !== n && state.ended)\n          endReadable(this);\n      }\n      if (ret !== null)\n        this.emit(\"data\", ret);\n      return ret;\n    };\n    function onEofChunk(stream, state) {\n      debug(\"onEofChunk\");\n      if (state.ended)\n        return;\n      if (state.decoder) {\n        var chunk = state.decoder.end();\n        if (chunk && chunk.length) {\n          state.buffer.push(chunk);\n          state.length += state.objectMode ? 1 : chunk.length;\n        }\n      }\n      state.ended = true;\n      if (state.sync) {\n        emitReadable(stream);\n      } else {\n        state.needReadable = false;\n        if (!state.emittedReadable) {\n          state.emittedReadable = true;\n          emitReadable_(stream);\n        }\n      }\n    }\n    function emitReadable(stream) {\n      var state = stream._readableState;\n      debug(\"emitReadable\", state.needReadable, state.emittedReadable);\n      state.needReadable = false;\n      if (!state.emittedReadable) {\n        debug(\"emitReadable\", state.flowing);\n        state.emittedReadable = true;\n        process.nextTick(emitReadable_, stream);\n      }\n    }\n    function emitReadable_(stream) {\n      var state = stream._readableState;\n      debug(\"emitReadable_\", state.destroyed, state.length, state.ended);\n      if (!state.destroyed && (state.length || state.ended)) {\n        stream.emit(\"readable\");\n        state.emittedReadable = false;\n      }\n      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n      flow(stream);\n    }\n    function maybeReadMore(stream, state) {\n      if (!state.readingMore) {\n        state.readingMore = true;\n        process.nextTick(maybeReadMore_, stream, state);\n      }\n    }\n    function maybeReadMore_(stream, state) {\n      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n        var len = state.length;\n        debug(\"maybeReadMore read 0\");\n        stream.read(0);\n        if (len === state.length)\n          break;\n      }\n      state.readingMore = false;\n    }\n    Readable.prototype._read = function(n) {\n      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED(\"_read()\"));\n    };\n    Readable.prototype.pipe = function(dest, pipeOpts) {\n      var src = this;\n      var state = this._readableState;\n      switch (state.pipesCount) {\n        case 0:\n          state.pipes = dest;\n          break;\n        case 1:\n          state.pipes = [state.pipes, dest];\n          break;\n        default:\n          state.pipes.push(dest);\n          break;\n      }\n      state.pipesCount += 1;\n      debug(\"pipe count=%d opts=%j\", state.pipesCount, pipeOpts);\n      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n      var endFn = doEnd ? onend : unpipe;\n      if (state.endEmitted)\n        process.nextTick(endFn);\n      else\n        src.once(\"end\", endFn);\n      dest.on(\"unpipe\", onunpipe);\n      function onunpipe(readable, unpipeInfo) {\n        debug(\"onunpipe\");\n        if (readable === src) {\n          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n            unpipeInfo.hasUnpiped = true;\n            cleanup();\n          }\n        }\n      }\n      function onend() {\n        debug(\"onend\");\n        dest.end();\n      }\n      var ondrain = pipeOnDrain(src);\n      dest.on(\"drain\", ondrain);\n      var cleanedUp = false;\n      function cleanup() {\n        debug(\"cleanup\");\n        dest.removeListener(\"close\", onclose);\n        dest.removeListener(\"finish\", onfinish);\n        dest.removeListener(\"drain\", ondrain);\n        dest.removeListener(\"error\", onerror);\n        dest.removeListener(\"unpipe\", onunpipe);\n        src.removeListener(\"end\", onend);\n        src.removeListener(\"end\", unpipe);\n        src.removeListener(\"data\", ondata);\n        cleanedUp = true;\n        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))\n          ondrain();\n      }\n      src.on(\"data\", ondata);\n      function ondata(chunk) {\n        debug(\"ondata\");\n        var ret = dest.write(chunk);\n        debug(\"dest.write\", ret);\n        if (ret === false) {\n          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n            debug(\"false write response, pause\", state.awaitDrain);\n            state.awaitDrain++;\n          }\n          src.pause();\n        }\n      }\n      function onerror(er) {\n        debug(\"onerror\", er);\n        unpipe();\n        dest.removeListener(\"error\", onerror);\n        if (EElistenerCount(dest, \"error\") === 0)\n          errorOrDestroy(dest, er);\n      }\n      prependListener(dest, \"error\", onerror);\n      function onclose() {\n        dest.removeListener(\"finish\", onfinish);\n        unpipe();\n      }\n      dest.once(\"close\", onclose);\n      function onfinish() {\n        debug(\"onfinish\");\n        dest.removeListener(\"close\", onclose);\n        unpipe();\n      }\n      dest.once(\"finish\", onfinish);\n      function unpipe() {\n        debug(\"unpipe\");\n        src.unpipe(dest);\n      }\n      dest.emit(\"pipe\", src);\n      if (!state.flowing) {\n        debug(\"pipe resume\");\n        src.resume();\n      }\n      return dest;\n    };\n    function pipeOnDrain(src) {\n      return function pipeOnDrainFunctionResult() {\n        var state = src._readableState;\n        debug(\"pipeOnDrain\", state.awaitDrain);\n        if (state.awaitDrain)\n          state.awaitDrain--;\n        if (state.awaitDrain === 0 && EElistenerCount(src, \"data\")) {\n          state.flowing = true;\n          flow(src);\n        }\n      };\n    }\n    Readable.prototype.unpipe = function(dest) {\n      var state = this._readableState;\n      var unpipeInfo = {\n        hasUnpiped: false\n      };\n      if (state.pipesCount === 0)\n        return this;\n      if (state.pipesCount === 1) {\n        if (dest && dest !== state.pipes)\n          return this;\n        if (!dest)\n          dest = state.pipes;\n        state.pipes = null;\n        state.pipesCount = 0;\n        state.flowing = false;\n        if (dest)\n          dest.emit(\"unpipe\", this, unpipeInfo);\n        return this;\n      }\n      if (!dest) {\n        var dests = state.pipes;\n        var len = state.pipesCount;\n        state.pipes = null;\n        state.pipesCount = 0;\n        state.flowing = false;\n        for (var i = 0; i < len; i++) {\n          dests[i].emit(\"unpipe\", this, {\n            hasUnpiped: false\n          });\n        }\n        return this;\n      }\n      var index = indexOf(state.pipes, dest);\n      if (index === -1)\n        return this;\n      state.pipes.splice(index, 1);\n      state.pipesCount -= 1;\n      if (state.pipesCount === 1)\n        state.pipes = state.pipes[0];\n      dest.emit(\"unpipe\", this, unpipeInfo);\n      return this;\n    };\n    Readable.prototype.on = function(ev, fn) {\n      var res = Stream.prototype.on.call(this, ev, fn);\n      var state = this._readableState;\n      if (ev === \"data\") {\n        state.readableListening = this.listenerCount(\"readable\") > 0;\n        if (state.flowing !== false)\n          this.resume();\n      } else if (ev === \"readable\") {\n        if (!state.endEmitted && !state.readableListening) {\n          state.readableListening = state.needReadable = true;\n          state.flowing = false;\n          state.emittedReadable = false;\n          debug(\"on readable\", state.length, state.reading);\n          if (state.length) {\n            emitReadable(this);\n          } else if (!state.reading) {\n            process.nextTick(nReadingNextTick, this);\n          }\n        }\n      }\n      return res;\n    };\n    Readable.prototype.addListener = Readable.prototype.on;\n    Readable.prototype.removeListener = function(ev, fn) {\n      var res = Stream.prototype.removeListener.call(this, ev, fn);\n      if (ev === \"readable\") {\n        process.nextTick(updateReadableListening, this);\n      }\n      return res;\n    };\n    Readable.prototype.removeAllListeners = function(ev) {\n      var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n      if (ev === \"readable\" || ev === void 0) {\n        process.nextTick(updateReadableListening, this);\n      }\n      return res;\n    };\n    function updateReadableListening(self) {\n      var state = self._readableState;\n      state.readableListening = self.listenerCount(\"readable\") > 0;\n      if (state.resumeScheduled && !state.paused) {\n        state.flowing = true;\n      } else if (self.listenerCount(\"data\") > 0) {\n        self.resume();\n      }\n    }\n    function nReadingNextTick(self) {\n      debug(\"readable nexttick read 0\");\n      self.read(0);\n    }\n    Readable.prototype.resume = function() {\n      var state = this._readableState;\n      if (!state.flowing) {\n        debug(\"resume\");\n        state.flowing = !state.readableListening;\n        resume(this, state);\n      }\n      state.paused = false;\n      return this;\n    };\n    function resume(stream, state) {\n      if (!state.resumeScheduled) {\n        state.resumeScheduled = true;\n        process.nextTick(resume_, stream, state);\n      }\n    }\n    function resume_(stream, state) {\n      debug(\"resume\", state.reading);\n      if (!state.reading) {\n        stream.read(0);\n      }\n      state.resumeScheduled = false;\n      stream.emit(\"resume\");\n      flow(stream);\n      if (state.flowing && !state.reading)\n        stream.read(0);\n    }\n    Readable.prototype.pause = function() {\n      debug(\"call pause flowing=%j\", this._readableState.flowing);\n      if (this._readableState.flowing !== false) {\n        debug(\"pause\");\n        this._readableState.flowing = false;\n        this.emit(\"pause\");\n      }\n      this._readableState.paused = true;\n      return this;\n    };\n    function flow(stream) {\n      var state = stream._readableState;\n      debug(\"flow\", state.flowing);\n      while (state.flowing && stream.read() !== null) {\n        ;\n      }\n    }\n    Readable.prototype.wrap = function(stream) {\n      var _this = this;\n      var state = this._readableState;\n      var paused = false;\n      stream.on(\"end\", function() {\n        debug(\"wrapped end\");\n        if (state.decoder && !state.ended) {\n          var chunk = state.decoder.end();\n          if (chunk && chunk.length)\n            _this.push(chunk);\n        }\n        _this.push(null);\n      });\n      stream.on(\"data\", function(chunk) {\n        debug(\"wrapped data\");\n        if (state.decoder)\n          chunk = state.decoder.write(chunk);\n        if (state.objectMode && (chunk === null || chunk === void 0))\n          return;\n        else if (!state.objectMode && (!chunk || !chunk.length))\n          return;\n        var ret = _this.push(chunk);\n        if (!ret) {\n          paused = true;\n          stream.pause();\n        }\n      });\n      for (var i in stream) {\n        if (this[i] === void 0 && typeof stream[i] === \"function\") {\n          this[i] = function methodWrap(method) {\n            return function methodWrapReturnFunction() {\n              return stream[method].apply(stream, arguments);\n            };\n          }(i);\n        }\n      }\n      for (var n = 0; n < kProxyEvents.length; n++) {\n        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n      }\n      this._read = function(n2) {\n        debug(\"wrapped _read\", n2);\n        if (paused) {\n          paused = false;\n          stream.resume();\n        }\n      };\n      return this;\n    };\n    if (typeof Symbol === \"function\") {\n      Readable.prototype[Symbol.asyncIterator] = function() {\n        if (createReadableStreamAsyncIterator === void 0) {\n          createReadableStreamAsyncIterator = require_async_iterator();\n        }\n        return createReadableStreamAsyncIterator(this);\n      };\n    }\n    Object.defineProperty(Readable.prototype, \"readableHighWaterMark\", {\n      enumerable: false,\n      get: function get() {\n        return this._readableState.highWaterMark;\n      }\n    });\n    Object.defineProperty(Readable.prototype, \"readableBuffer\", {\n      enumerable: false,\n      get: function get() {\n        return this._readableState && this._readableState.buffer;\n      }\n    });\n    Object.defineProperty(Readable.prototype, \"readableFlowing\", {\n      enumerable: false,\n      get: function get() {\n        return this._readableState.flowing;\n      },\n      set: function set(state) {\n        if (this._readableState) {\n          this._readableState.flowing = state;\n        }\n      }\n    });\n    Readable._fromList = fromList;\n    Object.defineProperty(Readable.prototype, \"readableLength\", {\n      enumerable: false,\n      get: function get() {\n        return this._readableState.length;\n      }\n    });\n    function fromList(n, state) {\n      if (state.length === 0)\n        return null;\n      var ret;\n      if (state.objectMode)\n        ret = state.buffer.shift();\n      else if (!n || n >= state.length) {\n        if (state.decoder)\n          ret = state.buffer.join(\"\");\n        else if (state.buffer.length === 1)\n          ret = state.buffer.first();\n        else\n          ret = state.buffer.concat(state.length);\n        state.buffer.clear();\n      } else {\n        ret = state.buffer.consume(n, state.decoder);\n      }\n      return ret;\n    }\n    function endReadable(stream) {\n      var state = stream._readableState;\n      debug(\"endReadable\", state.endEmitted);\n      if (!state.endEmitted) {\n        state.ended = true;\n        process.nextTick(endReadableNT, state, stream);\n      }\n    }\n    function endReadableNT(state, stream) {\n      debug(\"endReadableNT\", state.endEmitted, state.length);\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit(\"end\");\n        if (state.autoDestroy) {\n          var wState = stream._writableState;\n          if (!wState || wState.autoDestroy && wState.finished) {\n            stream.destroy();\n          }\n        }\n      }\n    }\n    if (typeof Symbol === \"function\") {\n      Readable.from = function(iterable, opts) {\n        if (from === void 0) {\n          from = require_from_browser();\n        }\n        return from(Readable, iterable, opts);\n      };\n    }\n    function indexOf(xs, x) {\n      for (var i = 0, l = xs.length; i < l; i++) {\n        if (xs[i] === x)\n          return i;\n      }\n      return -1;\n    }\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_transform.js\nvar require_stream_transform = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_transform.js\"(exports2, module2) {\n    \"use strict\";\n    module2.exports = Transform;\n    var _require$codes = require_errors_browser().codes;\n    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;\n    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;\n    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;\n    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n    var Duplex = require_stream_duplex();\n    require_inherits_browser()(Transform, Duplex);\n    function afterTransform(er, data) {\n      var ts = this._transformState;\n      ts.transforming = false;\n      var cb = ts.writecb;\n      if (cb === null) {\n        return this.emit(\"error\", new ERR_MULTIPLE_CALLBACK());\n      }\n      ts.writechunk = null;\n      ts.writecb = null;\n      if (data != null)\n        this.push(data);\n      cb(er);\n      var rs = this._readableState;\n      rs.reading = false;\n      if (rs.needReadable || rs.length < rs.highWaterMark) {\n        this._read(rs.highWaterMark);\n      }\n    }\n    function Transform(options) {\n      if (!(this instanceof Transform))\n        return new Transform(options);\n      Duplex.call(this, options);\n      this._transformState = {\n        afterTransform: afterTransform.bind(this),\n        needTransform: false,\n        transforming: false,\n        writecb: null,\n        writechunk: null,\n        writeencoding: null\n      };\n      this._readableState.needReadable = true;\n      this._readableState.sync = false;\n      if (options) {\n        if (typeof options.transform === \"function\")\n          this._transform = options.transform;\n        if (typeof options.flush === \"function\")\n          this._flush = options.flush;\n      }\n      this.on(\"prefinish\", prefinish);\n    }\n    function prefinish() {\n      var _this = this;\n      if (typeof this._flush === \"function\" && !this._readableState.destroyed) {\n        this._flush(function(er, data) {\n          done(_this, er, data);\n        });\n      } else {\n        done(this, null, null);\n      }\n    }\n    Transform.prototype.push = function(chunk, encoding) {\n      this._transformState.needTransform = false;\n      return Duplex.prototype.push.call(this, chunk, encoding);\n    };\n    Transform.prototype._transform = function(chunk, encoding, cb) {\n      cb(new ERR_METHOD_NOT_IMPLEMENTED(\"_transform()\"));\n    };\n    Transform.prototype._write = function(chunk, encoding, cb) {\n      var ts = this._transformState;\n      ts.writecb = cb;\n      ts.writechunk = chunk;\n      ts.writeencoding = encoding;\n      if (!ts.transforming) {\n        var rs = this._readableState;\n        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)\n          this._read(rs.highWaterMark);\n      }\n    };\n    Transform.prototype._read = function(n) {\n      var ts = this._transformState;\n      if (ts.writechunk !== null && !ts.transforming) {\n        ts.transforming = true;\n        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n      } else {\n        ts.needTransform = true;\n      }\n    };\n    Transform.prototype._destroy = function(err, cb) {\n      Duplex.prototype._destroy.call(this, err, function(err2) {\n        cb(err2);\n      });\n    };\n    function done(stream, er, data) {\n      if (er)\n        return stream.emit(\"error\", er);\n      if (data != null)\n        stream.push(data);\n      if (stream._writableState.length)\n        throw new ERR_TRANSFORM_WITH_LENGTH_0();\n      if (stream._transformState.transforming)\n        throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n      return stream.push(null);\n    }\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_passthrough.js\nvar require_stream_passthrough = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_passthrough.js\"(exports2, module2) {\n    \"use strict\";\n    module2.exports = PassThrough;\n    var Transform = require_stream_transform();\n    require_inherits_browser()(PassThrough, Transform);\n    function PassThrough(options) {\n      if (!(this instanceof PassThrough))\n        return new PassThrough(options);\n      Transform.call(this, options);\n    }\n    PassThrough.prototype._transform = function(chunk, encoding, cb) {\n      cb(null, chunk);\n    };\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/pipeline.js\nvar require_pipeline = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/pipeline.js\"(exports2, module2) {\n    \"use strict\";\n    var eos;\n    function once(callback) {\n      var called = false;\n      return function() {\n        if (called)\n          return;\n        called = true;\n        callback.apply(void 0, arguments);\n      };\n    }\n    var _require$codes = require_errors_browser().codes;\n    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;\n    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n    function noop(err) {\n      if (err)\n        throw err;\n    }\n    function isRequest(stream) {\n      return stream.setHeader && typeof stream.abort === \"function\";\n    }\n    function destroyer(stream, reading, writing, callback) {\n      callback = once(callback);\n      var closed = false;\n      stream.on(\"close\", function() {\n        closed = true;\n      });\n      if (eos === void 0)\n        eos = require_end_of_stream();\n      eos(stream, {\n        readable: reading,\n        writable: writing\n      }, function(err) {\n        if (err)\n          return callback(err);\n        closed = true;\n        callback();\n      });\n      var destroyed = false;\n      return function(err) {\n        if (closed)\n          return;\n        if (destroyed)\n          return;\n        destroyed = true;\n        if (isRequest(stream))\n          return stream.abort();\n        if (typeof stream.destroy === \"function\")\n          return stream.destroy();\n        callback(err || new ERR_STREAM_DESTROYED(\"pipe\"));\n      };\n    }\n    function call(fn) {\n      fn();\n    }\n    function pipe(from, to) {\n      return from.pipe(to);\n    }\n    function popCallback(streams) {\n      if (!streams.length)\n        return noop;\n      if (typeof streams[streams.length - 1] !== \"function\")\n        return noop;\n      return streams.pop();\n    }\n    function pipeline() {\n      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n        streams[_key] = arguments[_key];\n      }\n      var callback = popCallback(streams);\n      if (Array.isArray(streams[0]))\n        streams = streams[0];\n      if (streams.length < 2) {\n        throw new ERR_MISSING_ARGS(\"streams\");\n      }\n      var error;\n      var destroys = streams.map(function(stream, i) {\n        var reading = i < streams.length - 1;\n        var writing = i > 0;\n        return destroyer(stream, reading, writing, function(err) {\n          if (!error)\n            error = err;\n          if (err)\n            destroys.forEach(call);\n          if (reading)\n            return;\n          destroys.forEach(call);\n          callback(error);\n        });\n      });\n      return streams.reduce(pipe);\n    }\n    module2.exports = pipeline;\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/readable-browser.js\nvar require_readable_browser = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/readable-browser.js\"(exports2, module2) {\n    exports2 = module2.exports = require_stream_readable();\n    exports2.Stream = exports2;\n    exports2.Readable = exports2;\n    exports2.Writable = require_stream_writable();\n    exports2.Duplex = require_stream_duplex();\n    exports2.Transform = require_stream_transform();\n    exports2.PassThrough = require_stream_passthrough();\n    exports2.finished = require_end_of_stream();\n    exports2.pipeline = require_pipeline();\n  }\n});\n\n// packages/common/node-std/src/stream.js\nmodule.exports = require_readable_browser();\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n//# sourceMappingURL=stream.cjs.map\n","start":1670465467038,"end":1670465467213},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\n\"use strict\";\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\n\n// node_modules/.pnpm/events@3.3.0/node_modules/events/events.js\nvar require_events = __commonJS({\n  \"node_modules/.pnpm/events@3.3.0/node_modules/events/events.js\"(exports2, module2) {\n    \"use strict\";\n    var R = typeof Reflect === \"object\" ? Reflect : null;\n    var ReflectApply = R && typeof R.apply === \"function\" ? R.apply : function ReflectApply2(target, receiver, args) {\n      return Function.prototype.apply.call(target, receiver, args);\n    };\n    var ReflectOwnKeys;\n    if (R && typeof R.ownKeys === \"function\") {\n      ReflectOwnKeys = R.ownKeys;\n    } else if (Object.getOwnPropertySymbols) {\n      ReflectOwnKeys = function ReflectOwnKeys2(target) {\n        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));\n      };\n    } else {\n      ReflectOwnKeys = function ReflectOwnKeys2(target) {\n        return Object.getOwnPropertyNames(target);\n      };\n    }\n    function ProcessEmitWarning(warning) {\n      if (console && console.warn)\n        console.warn(warning);\n    }\n    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {\n      return value !== value;\n    };\n    function EventEmitter() {\n      EventEmitter.init.call(this);\n    }\n    module2.exports = EventEmitter;\n    module2.exports.once = once;\n    EventEmitter.EventEmitter = EventEmitter;\n    EventEmitter.prototype._events = void 0;\n    EventEmitter.prototype._eventsCount = 0;\n    EventEmitter.prototype._maxListeners = void 0;\n    var defaultMaxListeners = 10;\n    function checkListener(listener) {\n      if (typeof listener !== \"function\") {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n    }\n    Object.defineProperty(EventEmitter, \"defaultMaxListeners\", {\n      enumerable: true,\n      get: function() {\n        return defaultMaxListeners;\n      },\n      set: function(arg) {\n        if (typeof arg !== \"number\" || arg < 0 || NumberIsNaN(arg)) {\n          throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + \".\");\n        }\n        defaultMaxListeners = arg;\n      }\n    });\n    EventEmitter.init = function() {\n      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {\n        this._events = /* @__PURE__ */ Object.create(null);\n        this._eventsCount = 0;\n      }\n      this._maxListeners = this._maxListeners || void 0;\n    };\n    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n      if (typeof n !== \"number\" || n < 0 || NumberIsNaN(n)) {\n        throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + \".\");\n      }\n      this._maxListeners = n;\n      return this;\n    };\n    function _getMaxListeners(that) {\n      if (that._maxListeners === void 0)\n        return EventEmitter.defaultMaxListeners;\n      return that._maxListeners;\n    }\n    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n      return _getMaxListeners(this);\n    };\n    EventEmitter.prototype.emit = function emit(type) {\n      var args = [];\n      for (var i = 1; i < arguments.length; i++)\n        args.push(arguments[i]);\n      var doError = type === \"error\";\n      var events = this._events;\n      if (events !== void 0)\n        doError = doError && events.error === void 0;\n      else if (!doError)\n        return false;\n      if (doError) {\n        var er;\n        if (args.length > 0)\n          er = args[0];\n        if (er instanceof Error) {\n          throw er;\n        }\n        var err = new Error(\"Unhandled error.\" + (er ? \" (\" + er.message + \")\" : \"\"));\n        err.context = er;\n        throw err;\n      }\n      var handler = events[type];\n      if (handler === void 0)\n        return false;\n      if (typeof handler === \"function\") {\n        ReflectApply(handler, this, args);\n      } else {\n        var len = handler.length;\n        var listeners = arrayClone(handler, len);\n        for (var i = 0; i < len; ++i)\n          ReflectApply(listeners[i], this, args);\n      }\n      return true;\n    };\n    function _addListener(target, type, listener, prepend) {\n      var m;\n      var events;\n      var existing;\n      checkListener(listener);\n      events = target._events;\n      if (events === void 0) {\n        events = target._events = /* @__PURE__ */ Object.create(null);\n        target._eventsCount = 0;\n      } else {\n        if (events.newListener !== void 0) {\n          target.emit(\n            \"newListener\",\n            type,\n            listener.listener ? listener.listener : listener\n          );\n          events = target._events;\n        }\n        existing = events[type];\n      }\n      if (existing === void 0) {\n        existing = events[type] = listener;\n        ++target._eventsCount;\n      } else {\n        if (typeof existing === \"function\") {\n          existing = events[type] = prepend ? [listener, existing] : [existing, listener];\n        } else if (prepend) {\n          existing.unshift(listener);\n        } else {\n          existing.push(listener);\n        }\n        m = _getMaxListeners(target);\n        if (m > 0 && existing.length > m && !existing.warned) {\n          existing.warned = true;\n          var w = new Error(\"Possible EventEmitter memory leak detected. \" + existing.length + \" \" + String(type) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n          w.name = \"MaxListenersExceededWarning\";\n          w.emitter = target;\n          w.type = type;\n          w.count = existing.length;\n          ProcessEmitWarning(w);\n        }\n      }\n      return target;\n    }\n    EventEmitter.prototype.addListener = function addListener(type, listener) {\n      return _addListener(this, type, listener, false);\n    };\n    EventEmitter.prototype.on = EventEmitter.prototype.addListener;\n    EventEmitter.prototype.prependListener = function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n    function onceWrapper() {\n      if (!this.fired) {\n        this.target.removeListener(this.type, this.wrapFn);\n        this.fired = true;\n        if (arguments.length === 0)\n          return this.listener.call(this.target);\n        return this.listener.apply(this.target, arguments);\n      }\n    }\n    function _onceWrap(target, type, listener) {\n      var state = { fired: false, wrapFn: void 0, target, type, listener };\n      var wrapped = onceWrapper.bind(state);\n      wrapped.listener = listener;\n      state.wrapFn = wrapped;\n      return wrapped;\n    }\n    EventEmitter.prototype.once = function once2(type, listener) {\n      checkListener(listener);\n      this.on(type, _onceWrap(this, type, listener));\n      return this;\n    };\n    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n    EventEmitter.prototype.removeListener = function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n      checkListener(listener);\n      events = this._events;\n      if (events === void 0)\n        return this;\n      list = events[type];\n      if (list === void 0)\n        return this;\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = /* @__PURE__ */ Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit(\"removeListener\", type, list.listener || listener);\n        }\n      } else if (typeof list !== \"function\") {\n        position = -1;\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n        if (position < 0)\n          return this;\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n        if (list.length === 1)\n          events[type] = list[0];\n        if (events.removeListener !== void 0)\n          this.emit(\"removeListener\", type, originalListener || listener);\n      }\n      return this;\n    };\n    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {\n      var listeners, events, i;\n      events = this._events;\n      if (events === void 0)\n        return this;\n      if (events.removeListener === void 0) {\n        if (arguments.length === 0) {\n          this._events = /* @__PURE__ */ Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== void 0) {\n          if (--this._eventsCount === 0)\n            this._events = /* @__PURE__ */ Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === \"removeListener\")\n            continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners(\"removeListener\");\n        this._events = /* @__PURE__ */ Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n      listeners = events[type];\n      if (typeof listeners === \"function\") {\n        this.removeListener(type, listeners);\n      } else if (listeners !== void 0) {\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n      return this;\n    };\n    function _listeners(target, type, unwrap) {\n      var events = target._events;\n      if (events === void 0)\n        return [];\n      var evlistener = events[type];\n      if (evlistener === void 0)\n        return [];\n      if (typeof evlistener === \"function\")\n        return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n    }\n    EventEmitter.prototype.listeners = function listeners(type) {\n      return _listeners(this, type, true);\n    };\n    EventEmitter.prototype.rawListeners = function rawListeners(type) {\n      return _listeners(this, type, false);\n    };\n    EventEmitter.listenerCount = function(emitter, type) {\n      if (typeof emitter.listenerCount === \"function\") {\n        return emitter.listenerCount(type);\n      } else {\n        return listenerCount.call(emitter, type);\n      }\n    };\n    EventEmitter.prototype.listenerCount = listenerCount;\n    function listenerCount(type) {\n      var events = this._events;\n      if (events !== void 0) {\n        var evlistener = events[type];\n        if (typeof evlistener === \"function\") {\n          return 1;\n        } else if (evlistener !== void 0) {\n          return evlistener.length;\n        }\n      }\n      return 0;\n    }\n    EventEmitter.prototype.eventNames = function eventNames() {\n      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n    };\n    function arrayClone(arr, n) {\n      var copy = new Array(n);\n      for (var i = 0; i < n; ++i)\n        copy[i] = arr[i];\n      return copy;\n    }\n    function spliceOne(list, index) {\n      for (; index + 1 < list.length; index++)\n        list[index] = list[index + 1];\n      list.pop();\n    }\n    function unwrapListeners(arr) {\n      var ret = new Array(arr.length);\n      for (var i = 0; i < ret.length; ++i) {\n        ret[i] = arr[i].listener || arr[i];\n      }\n      return ret;\n    }\n    function once(emitter, name) {\n      return new Promise(function(resolve, reject) {\n        function errorListener(err) {\n          emitter.removeListener(name, resolver);\n          reject(err);\n        }\n        function resolver() {\n          if (typeof emitter.removeListener === \"function\") {\n            emitter.removeListener(\"error\", errorListener);\n          }\n          resolve([].slice.call(arguments));\n        }\n        ;\n        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n        if (name !== \"error\") {\n          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n        }\n      });\n    }\n    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n      if (typeof emitter.on === \"function\") {\n        eventTargetAgnosticAddListener(emitter, \"error\", handler, flags);\n      }\n    }\n    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n      if (typeof emitter.on === \"function\") {\n        if (flags.once) {\n          emitter.once(name, listener);\n        } else {\n          emitter.on(name, listener);\n        }\n      } else if (typeof emitter.addEventListener === \"function\") {\n        emitter.addEventListener(name, function wrapListener(arg) {\n          if (flags.once) {\n            emitter.removeEventListener(name, wrapListener);\n          }\n          listener(arg);\n        });\n      } else {\n        throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n      }\n    }\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/stream-browser.js\nvar require_stream_browser = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/stream-browser.js\"(exports2, module2) {\n    module2.exports = require_events().EventEmitter;\n  }\n});\n\n// node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\nvar require_base64_js = __commonJS({\n  \"node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\"(exports2) {\n    \"use strict\";\n    exports2.byteLength = byteLength;\n    exports2.toByteArray = toByteArray;\n    exports2.fromByteArray = fromByteArray;\n    var lookup = [];\n    var revLookup = [];\n    var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n    var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for (i = 0, len = code.length; i < len; ++i) {\n      lookup[i] = code[i];\n      revLookup[code.charCodeAt(i)] = i;\n    }\n    var i;\n    var len;\n    revLookup[\"-\".charCodeAt(0)] = 62;\n    revLookup[\"_\".charCodeAt(0)] = 63;\n    function getLens(b64) {\n      var len2 = b64.length;\n      if (len2 % 4 > 0) {\n        throw new Error(\"Invalid string. Length must be a multiple of 4\");\n      }\n      var validLen = b64.indexOf(\"=\");\n      if (validLen === -1)\n        validLen = len2;\n      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;\n      return [validLen, placeHoldersLen];\n    }\n    function byteLength(b64) {\n      var lens = getLens(b64);\n      var validLen = lens[0];\n      var placeHoldersLen = lens[1];\n      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n    }\n    function _byteLength(b64, validLen, placeHoldersLen) {\n      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n    }\n    function toByteArray(b64) {\n      var tmp;\n      var lens = getLens(b64);\n      var validLen = lens[0];\n      var placeHoldersLen = lens[1];\n      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n      var curByte = 0;\n      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;\n      var i2;\n      for (i2 = 0; i2 < len2; i2 += 4) {\n        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n        arr[curByte++] = tmp >> 16 & 255;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n      }\n      if (placeHoldersLen === 2) {\n        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n        arr[curByte++] = tmp & 255;\n      }\n      if (placeHoldersLen === 1) {\n        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n      }\n      return arr;\n    }\n    function tripletToBase64(num) {\n      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n    }\n    function encodeChunk(uint8, start, end) {\n      var tmp;\n      var output = [];\n      for (var i2 = start; i2 < end; i2 += 3) {\n        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);\n        output.push(tripletToBase64(tmp));\n      }\n      return output.join(\"\");\n    }\n    function fromByteArray(uint8) {\n      var tmp;\n      var len2 = uint8.length;\n      var extraBytes = len2 % 3;\n      var parts = [];\n      var maxChunkLength = 16383;\n      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {\n        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));\n      }\n      if (extraBytes === 1) {\n        tmp = uint8[len2 - 1];\n        parts.push(\n          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\"\n        );\n      } else if (extraBytes === 2) {\n        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];\n        parts.push(\n          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\"\n        );\n      }\n      return parts.join(\"\");\n    }\n  }\n});\n\n// node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\nvar require_ieee754 = __commonJS({\n  \"node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\"(exports2) {\n    exports2.read = function(buffer, offset, isLE, mLen, nBytes) {\n      var e, m;\n      var eLen = nBytes * 8 - mLen - 1;\n      var eMax = (1 << eLen) - 1;\n      var eBias = eMax >> 1;\n      var nBits = -7;\n      var i = isLE ? nBytes - 1 : 0;\n      var d = isLE ? -1 : 1;\n      var s = buffer[offset + i];\n      i += d;\n      e = s & (1 << -nBits) - 1;\n      s >>= -nBits;\n      nBits += eLen;\n      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {\n      }\n      m = e & (1 << -nBits) - 1;\n      e >>= -nBits;\n      nBits += mLen;\n      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {\n      }\n      if (e === 0) {\n        e = 1 - eBias;\n      } else if (e === eMax) {\n        return m ? NaN : (s ? -1 : 1) * Infinity;\n      } else {\n        m = m + Math.pow(2, mLen);\n        e = e - eBias;\n      }\n      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n    };\n    exports2.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n      var e, m, c;\n      var eLen = nBytes * 8 - mLen - 1;\n      var eMax = (1 << eLen) - 1;\n      var eBias = eMax >> 1;\n      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n      var i = isLE ? 0 : nBytes - 1;\n      var d = isLE ? 1 : -1;\n      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n      value = Math.abs(value);\n      if (isNaN(value) || value === Infinity) {\n        m = isNaN(value) ? 1 : 0;\n        e = eMax;\n      } else {\n        e = Math.floor(Math.log(value) / Math.LN2);\n        if (value * (c = Math.pow(2, -e)) < 1) {\n          e--;\n          c *= 2;\n        }\n        if (e + eBias >= 1) {\n          value += rt / c;\n        } else {\n          value += rt * Math.pow(2, 1 - eBias);\n        }\n        if (value * c >= 2) {\n          e++;\n          c /= 2;\n        }\n        if (e + eBias >= eMax) {\n          m = 0;\n          e = eMax;\n        } else if (e + eBias >= 1) {\n          m = (value * c - 1) * Math.pow(2, mLen);\n          e = e + eBias;\n        } else {\n          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n          e = 0;\n        }\n      }\n      for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {\n      }\n      e = e << mLen | m;\n      eLen += mLen;\n      for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {\n      }\n      buffer[offset + i - d] |= s * 128;\n    };\n  }\n});\n\n// node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js\nvar require_buffer = __commonJS({\n  \"node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js\"(exports2) {\n    \"use strict\";\n    var base64 = require_base64_js();\n    var ieee754 = require_ieee754();\n    var customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") : null;\n    exports2.Buffer = Buffer2;\n    exports2.SlowBuffer = SlowBuffer;\n    exports2.INSPECT_MAX_BYTES = 50;\n    var K_MAX_LENGTH = 2147483647;\n    exports2.kMaxLength = K_MAX_LENGTH;\n    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();\n    if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n      console.error(\n        \"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\"\n      );\n    }\n    function typedArraySupport() {\n      try {\n        const arr = new Uint8Array(1);\n        const proto = { foo: function() {\n          return 42;\n        } };\n        Object.setPrototypeOf(proto, Uint8Array.prototype);\n        Object.setPrototypeOf(arr, proto);\n        return arr.foo() === 42;\n      } catch (e) {\n        return false;\n      }\n    }\n    Object.defineProperty(Buffer2.prototype, \"parent\", {\n      enumerable: true,\n      get: function() {\n        if (!Buffer2.isBuffer(this))\n          return void 0;\n        return this.buffer;\n      }\n    });\n    Object.defineProperty(Buffer2.prototype, \"offset\", {\n      enumerable: true,\n      get: function() {\n        if (!Buffer2.isBuffer(this))\n          return void 0;\n        return this.byteOffset;\n      }\n    });\n    function createBuffer(length) {\n      if (length > K_MAX_LENGTH) {\n        throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n      }\n      const buf = new Uint8Array(length);\n      Object.setPrototypeOf(buf, Buffer2.prototype);\n      return buf;\n    }\n    function Buffer2(arg, encodingOrOffset, length) {\n      if (typeof arg === \"number\") {\n        if (typeof encodingOrOffset === \"string\") {\n          throw new TypeError(\n            'The \"string\" argument must be of type string. Received type number'\n          );\n        }\n        return allocUnsafe(arg);\n      }\n      return from(arg, encodingOrOffset, length);\n    }\n    Buffer2.poolSize = 8192;\n    function from(value, encodingOrOffset, length) {\n      if (typeof value === \"string\") {\n        return fromString(value, encodingOrOffset);\n      }\n      if (ArrayBuffer.isView(value)) {\n        return fromArrayView(value);\n      }\n      if (value == null) {\n        throw new TypeError(\n          \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n        );\n      }\n      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n      }\n      if (typeof SharedArrayBuffer !== \"undefined\" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n      }\n      if (typeof value === \"number\") {\n        throw new TypeError(\n          'The \"value\" argument must not be of type number. Received type number'\n        );\n      }\n      const valueOf = value.valueOf && value.valueOf();\n      if (valueOf != null && valueOf !== value) {\n        return Buffer2.from(valueOf, encodingOrOffset, length);\n      }\n      const b = fromObject(value);\n      if (b)\n        return b;\n      if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n        return Buffer2.from(value[Symbol.toPrimitive](\"string\"), encodingOrOffset, length);\n      }\n      throw new TypeError(\n        \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n      );\n    }\n    Buffer2.from = function(value, encodingOrOffset, length) {\n      return from(value, encodingOrOffset, length);\n    };\n    Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);\n    Object.setPrototypeOf(Buffer2, Uint8Array);\n    function assertSize(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError('\"size\" argument must be of type number');\n      } else if (size < 0) {\n        throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n      }\n    }\n    function alloc(size, fill, encoding) {\n      assertSize(size);\n      if (size <= 0) {\n        return createBuffer(size);\n      }\n      if (fill !== void 0) {\n        return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n      }\n      return createBuffer(size);\n    }\n    Buffer2.alloc = function(size, fill, encoding) {\n      return alloc(size, fill, encoding);\n    };\n    function allocUnsafe(size) {\n      assertSize(size);\n      return createBuffer(size < 0 ? 0 : checked(size) | 0);\n    }\n    Buffer2.allocUnsafe = function(size) {\n      return allocUnsafe(size);\n    };\n    Buffer2.allocUnsafeSlow = function(size) {\n      return allocUnsafe(size);\n    };\n    function fromString(string, encoding) {\n      if (typeof encoding !== \"string\" || encoding === \"\") {\n        encoding = \"utf8\";\n      }\n      if (!Buffer2.isEncoding(encoding)) {\n        throw new TypeError(\"Unknown encoding: \" + encoding);\n      }\n      const length = byteLength(string, encoding) | 0;\n      let buf = createBuffer(length);\n      const actual = buf.write(string, encoding);\n      if (actual !== length) {\n        buf = buf.slice(0, actual);\n      }\n      return buf;\n    }\n    function fromArrayLike(array) {\n      const length = array.length < 0 ? 0 : checked(array.length) | 0;\n      const buf = createBuffer(length);\n      for (let i = 0; i < length; i += 1) {\n        buf[i] = array[i] & 255;\n      }\n      return buf;\n    }\n    function fromArrayView(arrayView) {\n      if (isInstance(arrayView, Uint8Array)) {\n        const copy = new Uint8Array(arrayView);\n        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n      }\n      return fromArrayLike(arrayView);\n    }\n    function fromArrayBuffer(array, byteOffset, length) {\n      if (byteOffset < 0 || array.byteLength < byteOffset) {\n        throw new RangeError('\"offset\" is outside of buffer bounds');\n      }\n      if (array.byteLength < byteOffset + (length || 0)) {\n        throw new RangeError('\"length\" is outside of buffer bounds');\n      }\n      let buf;\n      if (byteOffset === void 0 && length === void 0) {\n        buf = new Uint8Array(array);\n      } else if (length === void 0) {\n        buf = new Uint8Array(array, byteOffset);\n      } else {\n        buf = new Uint8Array(array, byteOffset, length);\n      }\n      Object.setPrototypeOf(buf, Buffer2.prototype);\n      return buf;\n    }\n    function fromObject(obj) {\n      if (Buffer2.isBuffer(obj)) {\n        const len = checked(obj.length) | 0;\n        const buf = createBuffer(len);\n        if (buf.length === 0) {\n          return buf;\n        }\n        obj.copy(buf, 0, 0, len);\n        return buf;\n      }\n      if (obj.length !== void 0) {\n        if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) {\n          return createBuffer(0);\n        }\n        return fromArrayLike(obj);\n      }\n      if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n        return fromArrayLike(obj.data);\n      }\n    }\n    function checked(length) {\n      if (length >= K_MAX_LENGTH) {\n        throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n      }\n      return length | 0;\n    }\n    function SlowBuffer(length) {\n      if (+length != length) {\n        length = 0;\n      }\n      return Buffer2.alloc(+length);\n    }\n    Buffer2.isBuffer = function isBuffer(b) {\n      return b != null && b._isBuffer === true && b !== Buffer2.prototype;\n    };\n    Buffer2.compare = function compare(a, b) {\n      if (isInstance(a, Uint8Array))\n        a = Buffer2.from(a, a.offset, a.byteLength);\n      if (isInstance(b, Uint8Array))\n        b = Buffer2.from(b, b.offset, b.byteLength);\n      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {\n        throw new TypeError(\n          'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n        );\n      }\n      if (a === b)\n        return 0;\n      let x = a.length;\n      let y = b.length;\n      for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n        if (a[i] !== b[i]) {\n          x = a[i];\n          y = b[i];\n          break;\n        }\n      }\n      if (x < y)\n        return -1;\n      if (y < x)\n        return 1;\n      return 0;\n    };\n    Buffer2.isEncoding = function isEncoding(encoding) {\n      switch (String(encoding).toLowerCase()) {\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n          return true;\n        default:\n          return false;\n      }\n    };\n    Buffer2.concat = function concat(list, length) {\n      if (!Array.isArray(list)) {\n        throw new TypeError('\"list\" argument must be an Array of Buffers');\n      }\n      if (list.length === 0) {\n        return Buffer2.alloc(0);\n      }\n      let i;\n      if (length === void 0) {\n        length = 0;\n        for (i = 0; i < list.length; ++i) {\n          length += list[i].length;\n        }\n      }\n      const buffer = Buffer2.allocUnsafe(length);\n      let pos = 0;\n      for (i = 0; i < list.length; ++i) {\n        let buf = list[i];\n        if (isInstance(buf, Uint8Array)) {\n          if (pos + buf.length > buffer.length) {\n            if (!Buffer2.isBuffer(buf))\n              buf = Buffer2.from(buf);\n            buf.copy(buffer, pos);\n          } else {\n            Uint8Array.prototype.set.call(\n              buffer,\n              buf,\n              pos\n            );\n          }\n        } else if (!Buffer2.isBuffer(buf)) {\n          throw new TypeError('\"list\" argument must be an Array of Buffers');\n        } else {\n          buf.copy(buffer, pos);\n        }\n        pos += buf.length;\n      }\n      return buffer;\n    };\n    function byteLength(string, encoding) {\n      if (Buffer2.isBuffer(string)) {\n        return string.length;\n      }\n      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n        return string.byteLength;\n      }\n      if (typeof string !== \"string\") {\n        throw new TypeError(\n          'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string\n        );\n      }\n      const len = string.length;\n      const mustMatch = arguments.length > 2 && arguments[2] === true;\n      if (!mustMatch && len === 0)\n        return 0;\n      let loweredCase = false;\n      for (; ; ) {\n        switch (encoding) {\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n            return len;\n          case \"utf8\":\n          case \"utf-8\":\n            return utf8ToBytes(string).length;\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return len * 2;\n          case \"hex\":\n            return len >>> 1;\n          case \"base64\":\n            return base64ToBytes(string).length;\n          default:\n            if (loweredCase) {\n              return mustMatch ? -1 : utf8ToBytes(string).length;\n            }\n            encoding = (\"\" + encoding).toLowerCase();\n            loweredCase = true;\n        }\n      }\n    }\n    Buffer2.byteLength = byteLength;\n    function slowToString(encoding, start, end) {\n      let loweredCase = false;\n      if (start === void 0 || start < 0) {\n        start = 0;\n      }\n      if (start > this.length) {\n        return \"\";\n      }\n      if (end === void 0 || end > this.length) {\n        end = this.length;\n      }\n      if (end <= 0) {\n        return \"\";\n      }\n      end >>>= 0;\n      start >>>= 0;\n      if (end <= start) {\n        return \"\";\n      }\n      if (!encoding)\n        encoding = \"utf8\";\n      while (true) {\n        switch (encoding) {\n          case \"hex\":\n            return hexSlice(this, start, end);\n          case \"utf8\":\n          case \"utf-8\":\n            return utf8Slice(this, start, end);\n          case \"ascii\":\n            return asciiSlice(this, start, end);\n          case \"latin1\":\n          case \"binary\":\n            return latin1Slice(this, start, end);\n          case \"base64\":\n            return base64Slice(this, start, end);\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return utf16leSlice(this, start, end);\n          default:\n            if (loweredCase)\n              throw new TypeError(\"Unknown encoding: \" + encoding);\n            encoding = (encoding + \"\").toLowerCase();\n            loweredCase = true;\n        }\n      }\n    }\n    Buffer2.prototype._isBuffer = true;\n    function swap(b, n, m) {\n      const i = b[n];\n      b[n] = b[m];\n      b[m] = i;\n    }\n    Buffer2.prototype.swap16 = function swap16() {\n      const len = this.length;\n      if (len % 2 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n      }\n      for (let i = 0; i < len; i += 2) {\n        swap(this, i, i + 1);\n      }\n      return this;\n    };\n    Buffer2.prototype.swap32 = function swap32() {\n      const len = this.length;\n      if (len % 4 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n      }\n      for (let i = 0; i < len; i += 4) {\n        swap(this, i, i + 3);\n        swap(this, i + 1, i + 2);\n      }\n      return this;\n    };\n    Buffer2.prototype.swap64 = function swap64() {\n      const len = this.length;\n      if (len % 8 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n      }\n      for (let i = 0; i < len; i += 8) {\n        swap(this, i, i + 7);\n        swap(this, i + 1, i + 6);\n        swap(this, i + 2, i + 5);\n        swap(this, i + 3, i + 4);\n      }\n      return this;\n    };\n    Buffer2.prototype.toString = function toString() {\n      const length = this.length;\n      if (length === 0)\n        return \"\";\n      if (arguments.length === 0)\n        return utf8Slice(this, 0, length);\n      return slowToString.apply(this, arguments);\n    };\n    Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;\n    Buffer2.prototype.equals = function equals(b) {\n      if (!Buffer2.isBuffer(b))\n        throw new TypeError(\"Argument must be a Buffer\");\n      if (this === b)\n        return true;\n      return Buffer2.compare(this, b) === 0;\n    };\n    Buffer2.prototype.inspect = function inspect() {\n      let str = \"\";\n      const max = exports2.INSPECT_MAX_BYTES;\n      str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n      if (this.length > max)\n        str += \" ... \";\n      return \"<Buffer \" + str + \">\";\n    };\n    if (customInspectSymbol) {\n      Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;\n    }\n    Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n      if (isInstance(target, Uint8Array)) {\n        target = Buffer2.from(target, target.offset, target.byteLength);\n      }\n      if (!Buffer2.isBuffer(target)) {\n        throw new TypeError(\n          'The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target\n        );\n      }\n      if (start === void 0) {\n        start = 0;\n      }\n      if (end === void 0) {\n        end = target ? target.length : 0;\n      }\n      if (thisStart === void 0) {\n        thisStart = 0;\n      }\n      if (thisEnd === void 0) {\n        thisEnd = this.length;\n      }\n      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n        throw new RangeError(\"out of range index\");\n      }\n      if (thisStart >= thisEnd && start >= end) {\n        return 0;\n      }\n      if (thisStart >= thisEnd) {\n        return -1;\n      }\n      if (start >= end) {\n        return 1;\n      }\n      start >>>= 0;\n      end >>>= 0;\n      thisStart >>>= 0;\n      thisEnd >>>= 0;\n      if (this === target)\n        return 0;\n      let x = thisEnd - thisStart;\n      let y = end - start;\n      const len = Math.min(x, y);\n      const thisCopy = this.slice(thisStart, thisEnd);\n      const targetCopy = target.slice(start, end);\n      for (let i = 0; i < len; ++i) {\n        if (thisCopy[i] !== targetCopy[i]) {\n          x = thisCopy[i];\n          y = targetCopy[i];\n          break;\n        }\n      }\n      if (x < y)\n        return -1;\n      if (y < x)\n        return 1;\n      return 0;\n    };\n    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n      if (buffer.length === 0)\n        return -1;\n      if (typeof byteOffset === \"string\") {\n        encoding = byteOffset;\n        byteOffset = 0;\n      } else if (byteOffset > 2147483647) {\n        byteOffset = 2147483647;\n      } else if (byteOffset < -2147483648) {\n        byteOffset = -2147483648;\n      }\n      byteOffset = +byteOffset;\n      if (numberIsNaN(byteOffset)) {\n        byteOffset = dir ? 0 : buffer.length - 1;\n      }\n      if (byteOffset < 0)\n        byteOffset = buffer.length + byteOffset;\n      if (byteOffset >= buffer.length) {\n        if (dir)\n          return -1;\n        else\n          byteOffset = buffer.length - 1;\n      } else if (byteOffset < 0) {\n        if (dir)\n          byteOffset = 0;\n        else\n          return -1;\n      }\n      if (typeof val === \"string\") {\n        val = Buffer2.from(val, encoding);\n      }\n      if (Buffer2.isBuffer(val)) {\n        if (val.length === 0) {\n          return -1;\n        }\n        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n      } else if (typeof val === \"number\") {\n        val = val & 255;\n        if (typeof Uint8Array.prototype.indexOf === \"function\") {\n          if (dir) {\n            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n          } else {\n            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n          }\n        }\n        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n      }\n      throw new TypeError(\"val must be string, number or Buffer\");\n    }\n    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n      let indexSize = 1;\n      let arrLength = arr.length;\n      let valLength = val.length;\n      if (encoding !== void 0) {\n        encoding = String(encoding).toLowerCase();\n        if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n          if (arr.length < 2 || val.length < 2) {\n            return -1;\n          }\n          indexSize = 2;\n          arrLength /= 2;\n          valLength /= 2;\n          byteOffset /= 2;\n        }\n      }\n      function read(buf, i2) {\n        if (indexSize === 1) {\n          return buf[i2];\n        } else {\n          return buf.readUInt16BE(i2 * indexSize);\n        }\n      }\n      let i;\n      if (dir) {\n        let foundIndex = -1;\n        for (i = byteOffset; i < arrLength; i++) {\n          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n            if (foundIndex === -1)\n              foundIndex = i;\n            if (i - foundIndex + 1 === valLength)\n              return foundIndex * indexSize;\n          } else {\n            if (foundIndex !== -1)\n              i -= i - foundIndex;\n            foundIndex = -1;\n          }\n        }\n      } else {\n        if (byteOffset + valLength > arrLength)\n          byteOffset = arrLength - valLength;\n        for (i = byteOffset; i >= 0; i--) {\n          let found = true;\n          for (let j = 0; j < valLength; j++) {\n            if (read(arr, i + j) !== read(val, j)) {\n              found = false;\n              break;\n            }\n          }\n          if (found)\n            return i;\n        }\n      }\n      return -1;\n    }\n    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {\n      return this.indexOf(val, byteOffset, encoding) !== -1;\n    };\n    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n    };\n    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n    };\n    function hexWrite(buf, string, offset, length) {\n      offset = Number(offset) || 0;\n      const remaining = buf.length - offset;\n      if (!length) {\n        length = remaining;\n      } else {\n        length = Number(length);\n        if (length > remaining) {\n          length = remaining;\n        }\n      }\n      const strLen = string.length;\n      if (length > strLen / 2) {\n        length = strLen / 2;\n      }\n      let i;\n      for (i = 0; i < length; ++i) {\n        const parsed = parseInt(string.substr(i * 2, 2), 16);\n        if (numberIsNaN(parsed))\n          return i;\n        buf[offset + i] = parsed;\n      }\n      return i;\n    }\n    function utf8Write(buf, string, offset, length) {\n      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n    }\n    function asciiWrite(buf, string, offset, length) {\n      return blitBuffer(asciiToBytes(string), buf, offset, length);\n    }\n    function base64Write(buf, string, offset, length) {\n      return blitBuffer(base64ToBytes(string), buf, offset, length);\n    }\n    function ucs2Write(buf, string, offset, length) {\n      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n    }\n    Buffer2.prototype.write = function write(string, offset, length, encoding) {\n      if (offset === void 0) {\n        encoding = \"utf8\";\n        length = this.length;\n        offset = 0;\n      } else if (length === void 0 && typeof offset === \"string\") {\n        encoding = offset;\n        length = this.length;\n        offset = 0;\n      } else if (isFinite(offset)) {\n        offset = offset >>> 0;\n        if (isFinite(length)) {\n          length = length >>> 0;\n          if (encoding === void 0)\n            encoding = \"utf8\";\n        } else {\n          encoding = length;\n          length = void 0;\n        }\n      } else {\n        throw new Error(\n          \"Buffer.write(string, encoding, offset[, length]) is no longer supported\"\n        );\n      }\n      const remaining = this.length - offset;\n      if (length === void 0 || length > remaining)\n        length = remaining;\n      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n        throw new RangeError(\"Attempt to write outside buffer bounds\");\n      }\n      if (!encoding)\n        encoding = \"utf8\";\n      let loweredCase = false;\n      for (; ; ) {\n        switch (encoding) {\n          case \"hex\":\n            return hexWrite(this, string, offset, length);\n          case \"utf8\":\n          case \"utf-8\":\n            return utf8Write(this, string, offset, length);\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n            return asciiWrite(this, string, offset, length);\n          case \"base64\":\n            return base64Write(this, string, offset, length);\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return ucs2Write(this, string, offset, length);\n          default:\n            if (loweredCase)\n              throw new TypeError(\"Unknown encoding: \" + encoding);\n            encoding = (\"\" + encoding).toLowerCase();\n            loweredCase = true;\n        }\n      }\n    };\n    Buffer2.prototype.toJSON = function toJSON() {\n      return {\n        type: \"Buffer\",\n        data: Array.prototype.slice.call(this._arr || this, 0)\n      };\n    };\n    function base64Slice(buf, start, end) {\n      if (start === 0 && end === buf.length) {\n        return base64.fromByteArray(buf);\n      } else {\n        return base64.fromByteArray(buf.slice(start, end));\n      }\n    }\n    function utf8Slice(buf, start, end) {\n      end = Math.min(buf.length, end);\n      const res = [];\n      let i = start;\n      while (i < end) {\n        const firstByte = buf[i];\n        let codePoint = null;\n        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n        if (i + bytesPerSequence <= end) {\n          let secondByte, thirdByte, fourthByte, tempCodePoint;\n          switch (bytesPerSequence) {\n            case 1:\n              if (firstByte < 128) {\n                codePoint = firstByte;\n              }\n              break;\n            case 2:\n              secondByte = buf[i + 1];\n              if ((secondByte & 192) === 128) {\n                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n                if (tempCodePoint > 127) {\n                  codePoint = tempCodePoint;\n                }\n              }\n              break;\n            case 3:\n              secondByte = buf[i + 1];\n              thirdByte = buf[i + 2];\n              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n                  codePoint = tempCodePoint;\n                }\n              }\n              break;\n            case 4:\n              secondByte = buf[i + 1];\n              thirdByte = buf[i + 2];\n              fourthByte = buf[i + 3];\n              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n                  codePoint = tempCodePoint;\n                }\n              }\n          }\n        }\n        if (codePoint === null) {\n          codePoint = 65533;\n          bytesPerSequence = 1;\n        } else if (codePoint > 65535) {\n          codePoint -= 65536;\n          res.push(codePoint >>> 10 & 1023 | 55296);\n          codePoint = 56320 | codePoint & 1023;\n        }\n        res.push(codePoint);\n        i += bytesPerSequence;\n      }\n      return decodeCodePointsArray(res);\n    }\n    var MAX_ARGUMENTS_LENGTH = 4096;\n    function decodeCodePointsArray(codePoints) {\n      const len = codePoints.length;\n      if (len <= MAX_ARGUMENTS_LENGTH) {\n        return String.fromCharCode.apply(String, codePoints);\n      }\n      let res = \"\";\n      let i = 0;\n      while (i < len) {\n        res += String.fromCharCode.apply(\n          String,\n          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n        );\n      }\n      return res;\n    }\n    function asciiSlice(buf, start, end) {\n      let ret = \"\";\n      end = Math.min(buf.length, end);\n      for (let i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i] & 127);\n      }\n      return ret;\n    }\n    function latin1Slice(buf, start, end) {\n      let ret = \"\";\n      end = Math.min(buf.length, end);\n      for (let i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i]);\n      }\n      return ret;\n    }\n    function hexSlice(buf, start, end) {\n      const len = buf.length;\n      if (!start || start < 0)\n        start = 0;\n      if (!end || end < 0 || end > len)\n        end = len;\n      let out = \"\";\n      for (let i = start; i < end; ++i) {\n        out += hexSliceLookupTable[buf[i]];\n      }\n      return out;\n    }\n    function utf16leSlice(buf, start, end) {\n      const bytes = buf.slice(start, end);\n      let res = \"\";\n      for (let i = 0; i < bytes.length - 1; i += 2) {\n        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n      }\n      return res;\n    }\n    Buffer2.prototype.slice = function slice(start, end) {\n      const len = this.length;\n      start = ~~start;\n      end = end === void 0 ? len : ~~end;\n      if (start < 0) {\n        start += len;\n        if (start < 0)\n          start = 0;\n      } else if (start > len) {\n        start = len;\n      }\n      if (end < 0) {\n        end += len;\n        if (end < 0)\n          end = 0;\n      } else if (end > len) {\n        end = len;\n      }\n      if (end < start)\n        end = start;\n      const newBuf = this.subarray(start, end);\n      Object.setPrototypeOf(newBuf, Buffer2.prototype);\n      return newBuf;\n    };\n    function checkOffset(offset, ext, length) {\n      if (offset % 1 !== 0 || offset < 0)\n        throw new RangeError(\"offset is not uint\");\n      if (offset + ext > length)\n        throw new RangeError(\"Trying to access beyond buffer length\");\n    }\n    Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert)\n        checkOffset(offset, byteLength2, this.length);\n      let val = this[offset];\n      let mul = 1;\n      let i = 0;\n      while (++i < byteLength2 && (mul *= 256)) {\n        val += this[offset + i] * mul;\n      }\n      return val;\n    };\n    Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        checkOffset(offset, byteLength2, this.length);\n      }\n      let val = this[offset + --byteLength2];\n      let mul = 1;\n      while (byteLength2 > 0 && (mul *= 256)) {\n        val += this[offset + --byteLength2] * mul;\n      }\n      return val;\n    };\n    Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 1, this.length);\n      return this[offset];\n    };\n    Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      return this[offset] | this[offset + 1] << 8;\n    };\n    Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      return this[offset] << 8 | this[offset + 1];\n    };\n    Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;\n    };\n    Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n    };\n    Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, \"offset\");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;\n      const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;\n      return BigInt(lo) + (BigInt(hi) << BigInt(32));\n    });\n    Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, \"offset\");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n      const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;\n      return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n    });\n    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert)\n        checkOffset(offset, byteLength2, this.length);\n      let val = this[offset];\n      let mul = 1;\n      let i = 0;\n      while (++i < byteLength2 && (mul *= 256)) {\n        val += this[offset + i] * mul;\n      }\n      mul *= 128;\n      if (val >= mul)\n        val -= Math.pow(2, 8 * byteLength2);\n      return val;\n    };\n    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert)\n        checkOffset(offset, byteLength2, this.length);\n      let i = byteLength2;\n      let mul = 1;\n      let val = this[offset + --i];\n      while (i > 0 && (mul *= 256)) {\n        val += this[offset + --i] * mul;\n      }\n      mul *= 128;\n      if (val >= mul)\n        val -= Math.pow(2, 8 * byteLength2);\n      return val;\n    };\n    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 1, this.length);\n      if (!(this[offset] & 128))\n        return this[offset];\n      return (255 - this[offset] + 1) * -1;\n    };\n    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      const val = this[offset] | this[offset + 1] << 8;\n      return val & 32768 ? val | 4294901760 : val;\n    };\n    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      const val = this[offset + 1] | this[offset] << 8;\n      return val & 32768 ? val | 4294901760 : val;\n    };\n    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n    };\n    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n    };\n    Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, \"offset\");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);\n      return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);\n    });\n    Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, \"offset\");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const val = (first << 24) + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);\n    });\n    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return ieee754.read(this, offset, true, 23, 4);\n    };\n    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return ieee754.read(this, offset, false, 23, 4);\n    };\n    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 8, this.length);\n      return ieee754.read(this, offset, true, 52, 8);\n    };\n    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 8, this.length);\n      return ieee754.read(this, offset, false, 52, 8);\n    };\n    function checkInt(buf, value, offset, ext, max, min) {\n      if (!Buffer2.isBuffer(buf))\n        throw new TypeError('\"buffer\" argument must be a Buffer instance');\n      if (value > max || value < min)\n        throw new RangeError('\"value\" argument is out of bounds');\n      if (offset + ext > buf.length)\n        throw new RangeError(\"Index out of range\");\n    }\n    Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n        checkInt(this, value, offset, byteLength2, maxBytes, 0);\n      }\n      let mul = 1;\n      let i = 0;\n      this[offset] = value & 255;\n      while (++i < byteLength2 && (mul *= 256)) {\n        this[offset + i] = value / mul & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n        checkInt(this, value, offset, byteLength2, maxBytes, 0);\n      }\n      let i = byteLength2 - 1;\n      let mul = 1;\n      this[offset + i] = value & 255;\n      while (--i >= 0 && (mul *= 256)) {\n        this[offset + i] = value / mul & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 1, 255, 0);\n      this[offset] = value & 255;\n      return offset + 1;\n    };\n    Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 65535, 0);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 65535, 0);\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 255;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 4294967295, 0);\n      this[offset + 3] = value >>> 24;\n      this[offset + 2] = value >>> 16;\n      this[offset + 1] = value >>> 8;\n      this[offset] = value & 255;\n      return offset + 4;\n    };\n    Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 4294967295, 0);\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 255;\n      return offset + 4;\n    };\n    function wrtBigUInt64LE(buf, value, offset, min, max) {\n      checkIntBI(value, min, max, buf, offset, 7);\n      let lo = Number(value & BigInt(4294967295));\n      buf[offset++] = lo;\n      lo = lo >> 8;\n      buf[offset++] = lo;\n      lo = lo >> 8;\n      buf[offset++] = lo;\n      lo = lo >> 8;\n      buf[offset++] = lo;\n      let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n      buf[offset++] = hi;\n      hi = hi >> 8;\n      buf[offset++] = hi;\n      hi = hi >> 8;\n      buf[offset++] = hi;\n      hi = hi >> 8;\n      buf[offset++] = hi;\n      return offset;\n    }\n    function wrtBigUInt64BE(buf, value, offset, min, max) {\n      checkIntBI(value, min, max, buf, offset, 7);\n      let lo = Number(value & BigInt(4294967295));\n      buf[offset + 7] = lo;\n      lo = lo >> 8;\n      buf[offset + 6] = lo;\n      lo = lo >> 8;\n      buf[offset + 5] = lo;\n      lo = lo >> 8;\n      buf[offset + 4] = lo;\n      let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n      buf[offset + 3] = hi;\n      hi = hi >> 8;\n      buf[offset + 2] = hi;\n      hi = hi >> 8;\n      buf[offset + 1] = hi;\n      hi = hi >> 8;\n      buf[offset] = hi;\n      return offset + 8;\n    }\n    Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {\n      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    });\n    Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {\n      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    });\n    Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        const limit = Math.pow(2, 8 * byteLength2 - 1);\n        checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n      }\n      let i = 0;\n      let mul = 1;\n      let sub = 0;\n      this[offset] = value & 255;\n      while (++i < byteLength2 && (mul *= 256)) {\n        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n          sub = 1;\n        }\n        this[offset + i] = (value / mul >> 0) - sub & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        const limit = Math.pow(2, 8 * byteLength2 - 1);\n        checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n      }\n      let i = byteLength2 - 1;\n      let mul = 1;\n      let sub = 0;\n      this[offset + i] = value & 255;\n      while (--i >= 0 && (mul *= 256)) {\n        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n          sub = 1;\n        }\n        this[offset + i] = (value / mul >> 0) - sub & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 1, 127, -128);\n      if (value < 0)\n        value = 255 + value + 1;\n      this[offset] = value & 255;\n      return offset + 1;\n    };\n    Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 32767, -32768);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 32767, -32768);\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 255;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 2147483647, -2147483648);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      this[offset + 2] = value >>> 16;\n      this[offset + 3] = value >>> 24;\n      return offset + 4;\n    };\n    Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 2147483647, -2147483648);\n      if (value < 0)\n        value = 4294967295 + value + 1;\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 255;\n      return offset + 4;\n    };\n    Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {\n      return wrtBigUInt64LE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    });\n    Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {\n      return wrtBigUInt64BE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    });\n    function checkIEEE754(buf, value, offset, ext, max, min) {\n      if (offset + ext > buf.length)\n        throw new RangeError(\"Index out of range\");\n      if (offset < 0)\n        throw new RangeError(\"Index out of range\");\n    }\n    function writeFloat(buf, value, offset, littleEndian, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);\n      }\n      ieee754.write(buf, value, offset, littleEndian, 23, 4);\n      return offset + 4;\n    }\n    Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n      return writeFloat(this, value, offset, true, noAssert);\n    };\n    Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n      return writeFloat(this, value, offset, false, noAssert);\n    };\n    function writeDouble(buf, value, offset, littleEndian, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);\n      }\n      ieee754.write(buf, value, offset, littleEndian, 52, 8);\n      return offset + 8;\n    }\n    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n      return writeDouble(this, value, offset, true, noAssert);\n    };\n    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n      return writeDouble(this, value, offset, false, noAssert);\n    };\n    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {\n      if (!Buffer2.isBuffer(target))\n        throw new TypeError(\"argument should be a Buffer\");\n      if (!start)\n        start = 0;\n      if (!end && end !== 0)\n        end = this.length;\n      if (targetStart >= target.length)\n        targetStart = target.length;\n      if (!targetStart)\n        targetStart = 0;\n      if (end > 0 && end < start)\n        end = start;\n      if (end === start)\n        return 0;\n      if (target.length === 0 || this.length === 0)\n        return 0;\n      if (targetStart < 0) {\n        throw new RangeError(\"targetStart out of bounds\");\n      }\n      if (start < 0 || start >= this.length)\n        throw new RangeError(\"Index out of range\");\n      if (end < 0)\n        throw new RangeError(\"sourceEnd out of bounds\");\n      if (end > this.length)\n        end = this.length;\n      if (target.length - targetStart < end - start) {\n        end = target.length - targetStart + start;\n      }\n      const len = end - start;\n      if (this === target && typeof Uint8Array.prototype.copyWithin === \"function\") {\n        this.copyWithin(targetStart, start, end);\n      } else {\n        Uint8Array.prototype.set.call(\n          target,\n          this.subarray(start, end),\n          targetStart\n        );\n      }\n      return len;\n    };\n    Buffer2.prototype.fill = function fill(val, start, end, encoding) {\n      if (typeof val === \"string\") {\n        if (typeof start === \"string\") {\n          encoding = start;\n          start = 0;\n          end = this.length;\n        } else if (typeof end === \"string\") {\n          encoding = end;\n          end = this.length;\n        }\n        if (encoding !== void 0 && typeof encoding !== \"string\") {\n          throw new TypeError(\"encoding must be a string\");\n        }\n        if (typeof encoding === \"string\" && !Buffer2.isEncoding(encoding)) {\n          throw new TypeError(\"Unknown encoding: \" + encoding);\n        }\n        if (val.length === 1) {\n          const code = val.charCodeAt(0);\n          if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n            val = code;\n          }\n        }\n      } else if (typeof val === \"number\") {\n        val = val & 255;\n      } else if (typeof val === \"boolean\") {\n        val = Number(val);\n      }\n      if (start < 0 || this.length < start || this.length < end) {\n        throw new RangeError(\"Out of range index\");\n      }\n      if (end <= start) {\n        return this;\n      }\n      start = start >>> 0;\n      end = end === void 0 ? this.length : end >>> 0;\n      if (!val)\n        val = 0;\n      let i;\n      if (typeof val === \"number\") {\n        for (i = start; i < end; ++i) {\n          this[i] = val;\n        }\n      } else {\n        const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);\n        const len = bytes.length;\n        if (len === 0) {\n          throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n        }\n        for (i = 0; i < end - start; ++i) {\n          this[i + start] = bytes[i % len];\n        }\n      }\n      return this;\n    };\n    var errors = {};\n    function E(sym, getMessage, Base) {\n      errors[sym] = class NodeError extends Base {\n        constructor() {\n          super();\n          Object.defineProperty(this, \"message\", {\n            value: getMessage.apply(this, arguments),\n            writable: true,\n            configurable: true\n          });\n          this.name = `${this.name} [${sym}]`;\n          this.stack;\n          delete this.name;\n        }\n        get code() {\n          return sym;\n        }\n        set code(value) {\n          Object.defineProperty(this, \"code\", {\n            configurable: true,\n            enumerable: true,\n            value,\n            writable: true\n          });\n        }\n        toString() {\n          return `${this.name} [${sym}]: ${this.message}`;\n        }\n      };\n    }\n    E(\n      \"ERR_BUFFER_OUT_OF_BOUNDS\",\n      function(name) {\n        if (name) {\n          return `${name} is outside of buffer bounds`;\n        }\n        return \"Attempt to access memory outside buffer bounds\";\n      },\n      RangeError\n    );\n    E(\n      \"ERR_INVALID_ARG_TYPE\",\n      function(name, actual) {\n        return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`;\n      },\n      TypeError\n    );\n    E(\n      \"ERR_OUT_OF_RANGE\",\n      function(str, range, input) {\n        let msg = `The value of \"${str}\" is out of range.`;\n        let received = input;\n        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n          received = addNumericalSeparator(String(input));\n        } else if (typeof input === \"bigint\") {\n          received = String(input);\n          if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n            received = addNumericalSeparator(received);\n          }\n          received += \"n\";\n        }\n        msg += ` It must be ${range}. Received ${received}`;\n        return msg;\n      },\n      RangeError\n    );\n    function addNumericalSeparator(val) {\n      let res = \"\";\n      let i = val.length;\n      const start = val[0] === \"-\" ? 1 : 0;\n      for (; i >= start + 4; i -= 3) {\n        res = `_${val.slice(i - 3, i)}${res}`;\n      }\n      return `${val.slice(0, i)}${res}`;\n    }\n    function checkBounds(buf, offset, byteLength2) {\n      validateNumber(offset, \"offset\");\n      if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {\n        boundsError(offset, buf.length - (byteLength2 + 1));\n      }\n    }\n    function checkIntBI(value, min, max, buf, offset, byteLength2) {\n      if (value > max || value < min) {\n        const n = typeof min === \"bigint\" ? \"n\" : \"\";\n        let range;\n        if (byteLength2 > 3) {\n          if (min === 0 || min === BigInt(0)) {\n            range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;\n          } else {\n            range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;\n          }\n        } else {\n          range = `>= ${min}${n} and <= ${max}${n}`;\n        }\n        throw new errors.ERR_OUT_OF_RANGE(\"value\", range, value);\n      }\n      checkBounds(buf, offset, byteLength2);\n    }\n    function validateNumber(value, name) {\n      if (typeof value !== \"number\") {\n        throw new errors.ERR_INVALID_ARG_TYPE(name, \"number\", value);\n      }\n    }\n    function boundsError(value, length, type) {\n      if (Math.floor(value) !== value) {\n        validateNumber(value, type);\n        throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", \"an integer\", value);\n      }\n      if (length < 0) {\n        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\n      }\n      throw new errors.ERR_OUT_OF_RANGE(\n        type || \"offset\",\n        `>= ${type ? 1 : 0} and <= ${length}`,\n        value\n      );\n    }\n    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n    function base64clean(str) {\n      str = str.split(\"=\")[0];\n      str = str.trim().replace(INVALID_BASE64_RE, \"\");\n      if (str.length < 2)\n        return \"\";\n      while (str.length % 4 !== 0) {\n        str = str + \"=\";\n      }\n      return str;\n    }\n    function utf8ToBytes(string, units) {\n      units = units || Infinity;\n      let codePoint;\n      const length = string.length;\n      let leadSurrogate = null;\n      const bytes = [];\n      for (let i = 0; i < length; ++i) {\n        codePoint = string.charCodeAt(i);\n        if (codePoint > 55295 && codePoint < 57344) {\n          if (!leadSurrogate) {\n            if (codePoint > 56319) {\n              if ((units -= 3) > -1)\n                bytes.push(239, 191, 189);\n              continue;\n            } else if (i + 1 === length) {\n              if ((units -= 3) > -1)\n                bytes.push(239, 191, 189);\n              continue;\n            }\n            leadSurrogate = codePoint;\n            continue;\n          }\n          if (codePoint < 56320) {\n            if ((units -= 3) > -1)\n              bytes.push(239, 191, 189);\n            leadSurrogate = codePoint;\n            continue;\n          }\n          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n        } else if (leadSurrogate) {\n          if ((units -= 3) > -1)\n            bytes.push(239, 191, 189);\n        }\n        leadSurrogate = null;\n        if (codePoint < 128) {\n          if ((units -= 1) < 0)\n            break;\n          bytes.push(codePoint);\n        } else if (codePoint < 2048) {\n          if ((units -= 2) < 0)\n            break;\n          bytes.push(\n            codePoint >> 6 | 192,\n            codePoint & 63 | 128\n          );\n        } else if (codePoint < 65536) {\n          if ((units -= 3) < 0)\n            break;\n          bytes.push(\n            codePoint >> 12 | 224,\n            codePoint >> 6 & 63 | 128,\n            codePoint & 63 | 128\n          );\n        } else if (codePoint < 1114112) {\n          if ((units -= 4) < 0)\n            break;\n          bytes.push(\n            codePoint >> 18 | 240,\n            codePoint >> 12 & 63 | 128,\n            codePoint >> 6 & 63 | 128,\n            codePoint & 63 | 128\n          );\n        } else {\n          throw new Error(\"Invalid code point\");\n        }\n      }\n      return bytes;\n    }\n    function asciiToBytes(str) {\n      const byteArray = [];\n      for (let i = 0; i < str.length; ++i) {\n        byteArray.push(str.charCodeAt(i) & 255);\n      }\n      return byteArray;\n    }\n    function utf16leToBytes(str, units) {\n      let c, hi, lo;\n      const byteArray = [];\n      for (let i = 0; i < str.length; ++i) {\n        if ((units -= 2) < 0)\n          break;\n        c = str.charCodeAt(i);\n        hi = c >> 8;\n        lo = c % 256;\n        byteArray.push(lo);\n        byteArray.push(hi);\n      }\n      return byteArray;\n    }\n    function base64ToBytes(str) {\n      return base64.toByteArray(base64clean(str));\n    }\n    function blitBuffer(src, dst, offset, length) {\n      let i;\n      for (i = 0; i < length; ++i) {\n        if (i + offset >= dst.length || i >= src.length)\n          break;\n        dst[i + offset] = src[i];\n      }\n      return i;\n    }\n    function isInstance(obj, type) {\n      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n    }\n    function numberIsNaN(obj) {\n      return obj !== obj;\n    }\n    var hexSliceLookupTable = function() {\n      const alphabet = \"0123456789abcdef\";\n      const table = new Array(256);\n      for (let i = 0; i < 16; ++i) {\n        const i16 = i * 16;\n        for (let j = 0; j < 16; ++j) {\n          table[i16 + j] = alphabet[i] + alphabet[j];\n        }\n      }\n      return table;\n    }();\n    function defineBigIntMethod(fn) {\n      return typeof BigInt === \"undefined\" ? BufferBigIntNotDefined : fn;\n    }\n    function BufferBigIntNotDefined() {\n      throw new Error(\"BigInt not supported\");\n    }\n  }\n});\n\n// (disabled):node_modules/.pnpm/util@0.12.5/node_modules/util/util.js\nvar require_util = __commonJS({\n  \"(disabled):node_modules/.pnpm/util@0.12.5/node_modules/util/util.js\"() {\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/buffer_list.js\nvar require_buffer_list = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/buffer_list.js\"(exports2, module2) {\n    \"use strict\";\n    function ownKeys(object, enumerableOnly) {\n      var keys = Object.keys(object);\n      if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly)\n          symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n          });\n        keys.push.apply(keys, symbols);\n      }\n      return keys;\n    }\n    function _objectSpread(target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n          ownKeys(Object(source), true).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n          });\n        } else if (Object.getOwnPropertyDescriptors) {\n          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n          ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n          });\n        }\n      }\n      return target;\n    }\n    function _defineProperty(obj, key, value) {\n      if (key in obj) {\n        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });\n      } else {\n        obj[key] = value;\n      }\n      return obj;\n    }\n    function _classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    }\n    function _defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor)\n          descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n    function _createClass(Constructor, protoProps, staticProps) {\n      if (protoProps)\n        _defineProperties(Constructor.prototype, protoProps);\n      if (staticProps)\n        _defineProperties(Constructor, staticProps);\n      return Constructor;\n    }\n    var _require = require_buffer();\n    var Buffer2 = _require.Buffer;\n    var _require2 = require_util();\n    var inspect = _require2.inspect;\n    var custom = inspect && inspect.custom || \"inspect\";\n    function copyBuffer(src, target, offset) {\n      Buffer2.prototype.copy.call(src, target, offset);\n    }\n    module2.exports = /* @__PURE__ */ function() {\n      function BufferList() {\n        _classCallCheck(this, BufferList);\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n      }\n      _createClass(BufferList, [{\n        key: \"push\",\n        value: function push(v) {\n          var entry = {\n            data: v,\n            next: null\n          };\n          if (this.length > 0)\n            this.tail.next = entry;\n          else\n            this.head = entry;\n          this.tail = entry;\n          ++this.length;\n        }\n      }, {\n        key: \"unshift\",\n        value: function unshift(v) {\n          var entry = {\n            data: v,\n            next: this.head\n          };\n          if (this.length === 0)\n            this.tail = entry;\n          this.head = entry;\n          ++this.length;\n        }\n      }, {\n        key: \"shift\",\n        value: function shift() {\n          if (this.length === 0)\n            return;\n          var ret = this.head.data;\n          if (this.length === 1)\n            this.head = this.tail = null;\n          else\n            this.head = this.head.next;\n          --this.length;\n          return ret;\n        }\n      }, {\n        key: \"clear\",\n        value: function clear() {\n          this.head = this.tail = null;\n          this.length = 0;\n        }\n      }, {\n        key: \"join\",\n        value: function join(s) {\n          if (this.length === 0)\n            return \"\";\n          var p = this.head;\n          var ret = \"\" + p.data;\n          while (p = p.next) {\n            ret += s + p.data;\n          }\n          return ret;\n        }\n      }, {\n        key: \"concat\",\n        value: function concat(n) {\n          if (this.length === 0)\n            return Buffer2.alloc(0);\n          var ret = Buffer2.allocUnsafe(n >>> 0);\n          var p = this.head;\n          var i = 0;\n          while (p) {\n            copyBuffer(p.data, ret, i);\n            i += p.data.length;\n            p = p.next;\n          }\n          return ret;\n        }\n      }, {\n        key: \"consume\",\n        value: function consume(n, hasStrings) {\n          var ret;\n          if (n < this.head.data.length) {\n            ret = this.head.data.slice(0, n);\n            this.head.data = this.head.data.slice(n);\n          } else if (n === this.head.data.length) {\n            ret = this.shift();\n          } else {\n            ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n          }\n          return ret;\n        }\n      }, {\n        key: \"first\",\n        value: function first() {\n          return this.head.data;\n        }\n      }, {\n        key: \"_getString\",\n        value: function _getString(n) {\n          var p = this.head;\n          var c = 1;\n          var ret = p.data;\n          n -= ret.length;\n          while (p = p.next) {\n            var str = p.data;\n            var nb = n > str.length ? str.length : n;\n            if (nb === str.length)\n              ret += str;\n            else\n              ret += str.slice(0, n);\n            n -= nb;\n            if (n === 0) {\n              if (nb === str.length) {\n                ++c;\n                if (p.next)\n                  this.head = p.next;\n                else\n                  this.head = this.tail = null;\n              } else {\n                this.head = p;\n                p.data = str.slice(nb);\n              }\n              break;\n            }\n            ++c;\n          }\n          this.length -= c;\n          return ret;\n        }\n      }, {\n        key: \"_getBuffer\",\n        value: function _getBuffer(n) {\n          var ret = Buffer2.allocUnsafe(n);\n          var p = this.head;\n          var c = 1;\n          p.data.copy(ret);\n          n -= p.data.length;\n          while (p = p.next) {\n            var buf = p.data;\n            var nb = n > buf.length ? buf.length : n;\n            buf.copy(ret, ret.length - n, 0, nb);\n            n -= nb;\n            if (n === 0) {\n              if (nb === buf.length) {\n                ++c;\n                if (p.next)\n                  this.head = p.next;\n                else\n                  this.head = this.tail = null;\n              } else {\n                this.head = p;\n                p.data = buf.slice(nb);\n              }\n              break;\n            }\n            ++c;\n          }\n          this.length -= c;\n          return ret;\n        }\n      }, {\n        key: custom,\n        value: function value(_, options) {\n          return inspect(this, _objectSpread({}, options, {\n            depth: 0,\n            customInspect: false\n          }));\n        }\n      }]);\n      return BufferList;\n    }();\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/destroy.js\nvar require_destroy = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/destroy.js\"(exports2, module2) {\n    \"use strict\";\n    function destroy(err, cb) {\n      var _this = this;\n      var readableDestroyed = this._readableState && this._readableState.destroyed;\n      var writableDestroyed = this._writableState && this._writableState.destroyed;\n      if (readableDestroyed || writableDestroyed) {\n        if (cb) {\n          cb(err);\n        } else if (err) {\n          if (!this._writableState) {\n            process.nextTick(emitErrorNT, this, err);\n          } else if (!this._writableState.errorEmitted) {\n            this._writableState.errorEmitted = true;\n            process.nextTick(emitErrorNT, this, err);\n          }\n        }\n        return this;\n      }\n      if (this._readableState) {\n        this._readableState.destroyed = true;\n      }\n      if (this._writableState) {\n        this._writableState.destroyed = true;\n      }\n      this._destroy(err || null, function(err2) {\n        if (!cb && err2) {\n          if (!_this._writableState) {\n            process.nextTick(emitErrorAndCloseNT, _this, err2);\n          } else if (!_this._writableState.errorEmitted) {\n            _this._writableState.errorEmitted = true;\n            process.nextTick(emitErrorAndCloseNT, _this, err2);\n          } else {\n            process.nextTick(emitCloseNT, _this);\n          }\n        } else if (cb) {\n          process.nextTick(emitCloseNT, _this);\n          cb(err2);\n        } else {\n          process.nextTick(emitCloseNT, _this);\n        }\n      });\n      return this;\n    }\n    function emitErrorAndCloseNT(self, err) {\n      emitErrorNT(self, err);\n      emitCloseNT(self);\n    }\n    function emitCloseNT(self) {\n      if (self._writableState && !self._writableState.emitClose)\n        return;\n      if (self._readableState && !self._readableState.emitClose)\n        return;\n      self.emit(\"close\");\n    }\n    function undestroy() {\n      if (this._readableState) {\n        this._readableState.destroyed = false;\n        this._readableState.reading = false;\n        this._readableState.ended = false;\n        this._readableState.endEmitted = false;\n      }\n      if (this._writableState) {\n        this._writableState.destroyed = false;\n        this._writableState.ended = false;\n        this._writableState.ending = false;\n        this._writableState.finalCalled = false;\n        this._writableState.prefinished = false;\n        this._writableState.finished = false;\n        this._writableState.errorEmitted = false;\n      }\n    }\n    function emitErrorNT(self, err) {\n      self.emit(\"error\", err);\n    }\n    function errorOrDestroy(stream, err) {\n      var rState = stream._readableState;\n      var wState = stream._writableState;\n      if (rState && rState.autoDestroy || wState && wState.autoDestroy)\n        stream.destroy(err);\n      else\n        stream.emit(\"error\", err);\n    }\n    module2.exports = {\n      destroy,\n      undestroy,\n      errorOrDestroy\n    };\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/errors-browser.js\nvar require_errors_browser = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/errors-browser.js\"(exports2, module2) {\n    \"use strict\";\n    function _inheritsLoose(subClass, superClass) {\n      subClass.prototype = Object.create(superClass.prototype);\n      subClass.prototype.constructor = subClass;\n      subClass.__proto__ = superClass;\n    }\n    var codes = {};\n    function createErrorType(code, message, Base) {\n      if (!Base) {\n        Base = Error;\n      }\n      function getMessage(arg1, arg2, arg3) {\n        if (typeof message === \"string\") {\n          return message;\n        } else {\n          return message(arg1, arg2, arg3);\n        }\n      }\n      var NodeError = /* @__PURE__ */ function(_Base) {\n        _inheritsLoose(NodeError2, _Base);\n        function NodeError2(arg1, arg2, arg3) {\n          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;\n        }\n        return NodeError2;\n      }(Base);\n      NodeError.prototype.name = Base.name;\n      NodeError.prototype.code = code;\n      codes[code] = NodeError;\n    }\n    function oneOf(expected, thing) {\n      if (Array.isArray(expected)) {\n        var len = expected.length;\n        expected = expected.map(function(i) {\n          return String(i);\n        });\n        if (len > 2) {\n          return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(\", \"), \", or \") + expected[len - 1];\n        } else if (len === 2) {\n          return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n        } else {\n          return \"of \".concat(thing, \" \").concat(expected[0]);\n        }\n      } else {\n        return \"of \".concat(thing, \" \").concat(String(expected));\n      }\n    }\n    function startsWith(str, search, pos) {\n      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n    }\n    function endsWith(str, search, this_len) {\n      if (this_len === void 0 || this_len > str.length) {\n        this_len = str.length;\n      }\n      return str.substring(this_len - search.length, this_len) === search;\n    }\n    function includes(str, search, start) {\n      if (typeof start !== \"number\") {\n        start = 0;\n      }\n      if (start + search.length > str.length) {\n        return false;\n      } else {\n        return str.indexOf(search, start) !== -1;\n      }\n    }\n    createErrorType(\"ERR_INVALID_OPT_VALUE\", function(name, value) {\n      return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n    }, TypeError);\n    createErrorType(\"ERR_INVALID_ARG_TYPE\", function(name, expected, actual) {\n      var determiner;\n      if (typeof expected === \"string\" && startsWith(expected, \"not \")) {\n        determiner = \"must not be\";\n        expected = expected.replace(/^not /, \"\");\n      } else {\n        determiner = \"must be\";\n      }\n      var msg;\n      if (endsWith(name, \" argument\")) {\n        msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, \"type\"));\n      } else {\n        var type = includes(name, \".\") ? \"property\" : \"argument\";\n        msg = 'The \"'.concat(name, '\" ').concat(type, \" \").concat(determiner, \" \").concat(oneOf(expected, \"type\"));\n      }\n      msg += \". Received type \".concat(typeof actual);\n      return msg;\n    }, TypeError);\n    createErrorType(\"ERR_STREAM_PUSH_AFTER_EOF\", \"stream.push() after EOF\");\n    createErrorType(\"ERR_METHOD_NOT_IMPLEMENTED\", function(name) {\n      return \"The \" + name + \" method is not implemented\";\n    });\n    createErrorType(\"ERR_STREAM_PREMATURE_CLOSE\", \"Premature close\");\n    createErrorType(\"ERR_STREAM_DESTROYED\", function(name) {\n      return \"Cannot call \" + name + \" after a stream was destroyed\";\n    });\n    createErrorType(\"ERR_MULTIPLE_CALLBACK\", \"Callback called multiple times\");\n    createErrorType(\"ERR_STREAM_CANNOT_PIPE\", \"Cannot pipe, not readable\");\n    createErrorType(\"ERR_STREAM_WRITE_AFTER_END\", \"write after end\");\n    createErrorType(\"ERR_STREAM_NULL_VALUES\", \"May not write null values to stream\", TypeError);\n    createErrorType(\"ERR_UNKNOWN_ENCODING\", function(arg) {\n      return \"Unknown encoding: \" + arg;\n    }, TypeError);\n    createErrorType(\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\", \"stream.unshift() after end event\");\n    module2.exports.codes = codes;\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/state.js\nvar require_state = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/state.js\"(exports2, module2) {\n    \"use strict\";\n    var ERR_INVALID_OPT_VALUE = require_errors_browser().codes.ERR_INVALID_OPT_VALUE;\n    function highWaterMarkFrom(options, isDuplex, duplexKey) {\n      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n    }\n    function getHighWaterMark(state, options, duplexKey, isDuplex) {\n      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n      if (hwm != null) {\n        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n          var name = isDuplex ? duplexKey : \"highWaterMark\";\n          throw new ERR_INVALID_OPT_VALUE(name, hwm);\n        }\n        return Math.floor(hwm);\n      }\n      return state.objectMode ? 16 : 16 * 1024;\n    }\n    module2.exports = {\n      getHighWaterMark\n    };\n  }\n});\n\n// node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js\nvar require_inherits_browser = __commonJS({\n  \"node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js\"(exports2, module2) {\n    if (typeof Object.create === \"function\") {\n      module2.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n          ctor.super_ = superCtor;\n          ctor.prototype = Object.create(superCtor.prototype, {\n            constructor: {\n              value: ctor,\n              enumerable: false,\n              writable: true,\n              configurable: true\n            }\n          });\n        }\n      };\n    } else {\n      module2.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n          ctor.super_ = superCtor;\n          var TempCtor = function() {\n          };\n          TempCtor.prototype = superCtor.prototype;\n          ctor.prototype = new TempCtor();\n          ctor.prototype.constructor = ctor;\n        }\n      };\n    }\n  }\n});\n\n// node_modules/.pnpm/util-deprecate@1.0.2/node_modules/util-deprecate/browser.js\nvar require_browser = __commonJS({\n  \"node_modules/.pnpm/util-deprecate@1.0.2/node_modules/util-deprecate/browser.js\"(exports2, module2) {\n    module2.exports = deprecate;\n    function deprecate(fn, msg) {\n      if (config(\"noDeprecation\")) {\n        return fn;\n      }\n      var warned = false;\n      function deprecated() {\n        if (!warned) {\n          if (config(\"throwDeprecation\")) {\n            throw new Error(msg);\n          } else if (config(\"traceDeprecation\")) {\n            console.trace(msg);\n          } else {\n            console.warn(msg);\n          }\n          warned = true;\n        }\n        return fn.apply(this, arguments);\n      }\n      return deprecated;\n    }\n    function config(name) {\n      try {\n        if (!commonjsHelpers.commonjsGlobal.localStorage)\n          return false;\n      } catch (_) {\n        return false;\n      }\n      var val = commonjsHelpers.commonjsGlobal.localStorage[name];\n      if (null == val)\n        return false;\n      return String(val).toLowerCase() === \"true\";\n    }\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_writable.js\nvar require_stream_writable = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_writable.js\"(exports2, module2) {\n    \"use strict\";\n    module2.exports = Writable;\n    function CorkedRequest(state) {\n      var _this = this;\n      this.next = null;\n      this.entry = null;\n      this.finish = function() {\n        onCorkedFinish(_this, state);\n      };\n    }\n    var Duplex;\n    Writable.WritableState = WritableState;\n    var internalUtil = {\n      deprecate: require_browser()\n    };\n    var Stream = require_stream_browser();\n    var Buffer2 = require_buffer().Buffer;\n    var OurUint8Array = commonjsHelpers.commonjsGlobal.Uint8Array || function() {\n    };\n    function _uint8ArrayToBuffer(chunk) {\n      return Buffer2.from(chunk);\n    }\n    function _isUint8Array(obj) {\n      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;\n    }\n    var destroyImpl = require_destroy();\n    var _require = require_state();\n    var getHighWaterMark = _require.getHighWaterMark;\n    var _require$codes = require_errors_browser().codes;\n    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;\n    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;\n    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;\n    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;\n    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;\n    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;\n    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n    var errorOrDestroy = destroyImpl.errorOrDestroy;\n    require_inherits_browser()(Writable, Stream);\n    function nop() {\n    }\n    function WritableState(options, stream, isDuplex) {\n      Duplex = Duplex || require_stream_duplex();\n      options = options || {};\n      if (typeof isDuplex !== \"boolean\")\n        isDuplex = stream instanceof Duplex;\n      this.objectMode = !!options.objectMode;\n      if (isDuplex)\n        this.objectMode = this.objectMode || !!options.writableObjectMode;\n      this.highWaterMark = getHighWaterMark(this, options, \"writableHighWaterMark\", isDuplex);\n      this.finalCalled = false;\n      this.needDrain = false;\n      this.ending = false;\n      this.ended = false;\n      this.finished = false;\n      this.destroyed = false;\n      var noDecode = options.decodeStrings === false;\n      this.decodeStrings = !noDecode;\n      this.defaultEncoding = options.defaultEncoding || \"utf8\";\n      this.length = 0;\n      this.writing = false;\n      this.corked = 0;\n      this.sync = true;\n      this.bufferProcessing = false;\n      this.onwrite = function(er) {\n        onwrite(stream, er);\n      };\n      this.writecb = null;\n      this.writelen = 0;\n      this.bufferedRequest = null;\n      this.lastBufferedRequest = null;\n      this.pendingcb = 0;\n      this.prefinished = false;\n      this.errorEmitted = false;\n      this.emitClose = options.emitClose !== false;\n      this.autoDestroy = !!options.autoDestroy;\n      this.bufferedRequestCount = 0;\n      this.corkedRequestsFree = new CorkedRequest(this);\n    }\n    WritableState.prototype.getBuffer = function getBuffer() {\n      var current = this.bufferedRequest;\n      var out = [];\n      while (current) {\n        out.push(current);\n        current = current.next;\n      }\n      return out;\n    };\n    (function() {\n      try {\n        Object.defineProperty(WritableState.prototype, \"buffer\", {\n          get: internalUtil.deprecate(function writableStateBufferGetter() {\n            return this.getBuffer();\n          }, \"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.\", \"DEP0003\")\n        });\n      } catch (_) {\n      }\n    })();\n    var realHasInstance;\n    if (typeof Symbol === \"function\" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === \"function\") {\n      realHasInstance = Function.prototype[Symbol.hasInstance];\n      Object.defineProperty(Writable, Symbol.hasInstance, {\n        value: function value(object) {\n          if (realHasInstance.call(this, object))\n            return true;\n          if (this !== Writable)\n            return false;\n          return object && object._writableState instanceof WritableState;\n        }\n      });\n    } else {\n      realHasInstance = function realHasInstance2(object) {\n        return object instanceof this;\n      };\n    }\n    function Writable(options) {\n      Duplex = Duplex || require_stream_duplex();\n      var isDuplex = this instanceof Duplex;\n      if (!isDuplex && !realHasInstance.call(Writable, this))\n        return new Writable(options);\n      this._writableState = new WritableState(options, this, isDuplex);\n      this.writable = true;\n      if (options) {\n        if (typeof options.write === \"function\")\n          this._write = options.write;\n        if (typeof options.writev === \"function\")\n          this._writev = options.writev;\n        if (typeof options.destroy === \"function\")\n          this._destroy = options.destroy;\n        if (typeof options.final === \"function\")\n          this._final = options.final;\n      }\n      Stream.call(this);\n    }\n    Writable.prototype.pipe = function() {\n      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n    };\n    function writeAfterEnd(stream, cb) {\n      var er = new ERR_STREAM_WRITE_AFTER_END();\n      errorOrDestroy(stream, er);\n      process.nextTick(cb, er);\n    }\n    function validChunk(stream, state, chunk, cb) {\n      var er;\n      if (chunk === null) {\n        er = new ERR_STREAM_NULL_VALUES();\n      } else if (typeof chunk !== \"string\" && !state.objectMode) {\n        er = new ERR_INVALID_ARG_TYPE(\"chunk\", [\"string\", \"Buffer\"], chunk);\n      }\n      if (er) {\n        errorOrDestroy(stream, er);\n        process.nextTick(cb, er);\n        return false;\n      }\n      return true;\n    }\n    Writable.prototype.write = function(chunk, encoding, cb) {\n      var state = this._writableState;\n      var ret = false;\n      var isBuf = !state.objectMode && _isUint8Array(chunk);\n      if (isBuf && !Buffer2.isBuffer(chunk)) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n      if (typeof encoding === \"function\") {\n        cb = encoding;\n        encoding = null;\n      }\n      if (isBuf)\n        encoding = \"buffer\";\n      else if (!encoding)\n        encoding = state.defaultEncoding;\n      if (typeof cb !== \"function\")\n        cb = nop;\n      if (state.ending)\n        writeAfterEnd(this, cb);\n      else if (isBuf || validChunk(this, state, chunk, cb)) {\n        state.pendingcb++;\n        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n      }\n      return ret;\n    };\n    Writable.prototype.cork = function() {\n      this._writableState.corked++;\n    };\n    Writable.prototype.uncork = function() {\n      var state = this._writableState;\n      if (state.corked) {\n        state.corked--;\n        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)\n          clearBuffer(this, state);\n      }\n    };\n    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n      if (typeof encoding === \"string\")\n        encoding = encoding.toLowerCase();\n      if (!([\"hex\", \"utf8\", \"utf-8\", \"ascii\", \"binary\", \"base64\", \"ucs2\", \"ucs-2\", \"utf16le\", \"utf-16le\", \"raw\"].indexOf((encoding + \"\").toLowerCase()) > -1))\n        throw new ERR_UNKNOWN_ENCODING(encoding);\n      this._writableState.defaultEncoding = encoding;\n      return this;\n    };\n    Object.defineProperty(Writable.prototype, \"writableBuffer\", {\n      enumerable: false,\n      get: function get() {\n        return this._writableState && this._writableState.getBuffer();\n      }\n    });\n    function decodeChunk(state, chunk, encoding) {\n      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === \"string\") {\n        chunk = Buffer2.from(chunk, encoding);\n      }\n      return chunk;\n    }\n    Object.defineProperty(Writable.prototype, \"writableHighWaterMark\", {\n      enumerable: false,\n      get: function get() {\n        return this._writableState.highWaterMark;\n      }\n    });\n    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n      if (!isBuf) {\n        var newChunk = decodeChunk(state, chunk, encoding);\n        if (chunk !== newChunk) {\n          isBuf = true;\n          encoding = \"buffer\";\n          chunk = newChunk;\n        }\n      }\n      var len = state.objectMode ? 1 : chunk.length;\n      state.length += len;\n      var ret = state.length < state.highWaterMark;\n      if (!ret)\n        state.needDrain = true;\n      if (state.writing || state.corked) {\n        var last = state.lastBufferedRequest;\n        state.lastBufferedRequest = {\n          chunk,\n          encoding,\n          isBuf,\n          callback: cb,\n          next: null\n        };\n        if (last) {\n          last.next = state.lastBufferedRequest;\n        } else {\n          state.bufferedRequest = state.lastBufferedRequest;\n        }\n        state.bufferedRequestCount += 1;\n      } else {\n        doWrite(stream, state, false, len, chunk, encoding, cb);\n      }\n      return ret;\n    }\n    function doWrite(stream, state, writev, len, chunk, encoding, cb) {\n      state.writelen = len;\n      state.writecb = cb;\n      state.writing = true;\n      state.sync = true;\n      if (state.destroyed)\n        state.onwrite(new ERR_STREAM_DESTROYED(\"write\"));\n      else if (writev)\n        stream._writev(chunk, state.onwrite);\n      else\n        stream._write(chunk, encoding, state.onwrite);\n      state.sync = false;\n    }\n    function onwriteError(stream, state, sync, er, cb) {\n      --state.pendingcb;\n      if (sync) {\n        process.nextTick(cb, er);\n        process.nextTick(finishMaybe, stream, state);\n        stream._writableState.errorEmitted = true;\n        errorOrDestroy(stream, er);\n      } else {\n        cb(er);\n        stream._writableState.errorEmitted = true;\n        errorOrDestroy(stream, er);\n        finishMaybe(stream, state);\n      }\n    }\n    function onwriteStateUpdate(state) {\n      state.writing = false;\n      state.writecb = null;\n      state.length -= state.writelen;\n      state.writelen = 0;\n    }\n    function onwrite(stream, er) {\n      var state = stream._writableState;\n      var sync = state.sync;\n      var cb = state.writecb;\n      if (typeof cb !== \"function\")\n        throw new ERR_MULTIPLE_CALLBACK();\n      onwriteStateUpdate(state);\n      if (er)\n        onwriteError(stream, state, sync, er, cb);\n      else {\n        var finished = needFinish(state) || stream.destroyed;\n        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n          clearBuffer(stream, state);\n        }\n        if (sync) {\n          process.nextTick(afterWrite, stream, state, finished, cb);\n        } else {\n          afterWrite(stream, state, finished, cb);\n        }\n      }\n    }\n    function afterWrite(stream, state, finished, cb) {\n      if (!finished)\n        onwriteDrain(stream, state);\n      state.pendingcb--;\n      cb();\n      finishMaybe(stream, state);\n    }\n    function onwriteDrain(stream, state) {\n      if (state.length === 0 && state.needDrain) {\n        state.needDrain = false;\n        stream.emit(\"drain\");\n      }\n    }\n    function clearBuffer(stream, state) {\n      state.bufferProcessing = true;\n      var entry = state.bufferedRequest;\n      if (stream._writev && entry && entry.next) {\n        var l = state.bufferedRequestCount;\n        var buffer = new Array(l);\n        var holder = state.corkedRequestsFree;\n        holder.entry = entry;\n        var count = 0;\n        var allBuffers = true;\n        while (entry) {\n          buffer[count] = entry;\n          if (!entry.isBuf)\n            allBuffers = false;\n          entry = entry.next;\n          count += 1;\n        }\n        buffer.allBuffers = allBuffers;\n        doWrite(stream, state, true, state.length, buffer, \"\", holder.finish);\n        state.pendingcb++;\n        state.lastBufferedRequest = null;\n        if (holder.next) {\n          state.corkedRequestsFree = holder.next;\n          holder.next = null;\n        } else {\n          state.corkedRequestsFree = new CorkedRequest(state);\n        }\n        state.bufferedRequestCount = 0;\n      } else {\n        while (entry) {\n          var chunk = entry.chunk;\n          var encoding = entry.encoding;\n          var cb = entry.callback;\n          var len = state.objectMode ? 1 : chunk.length;\n          doWrite(stream, state, false, len, chunk, encoding, cb);\n          entry = entry.next;\n          state.bufferedRequestCount--;\n          if (state.writing) {\n            break;\n          }\n        }\n        if (entry === null)\n          state.lastBufferedRequest = null;\n      }\n      state.bufferedRequest = entry;\n      state.bufferProcessing = false;\n    }\n    Writable.prototype._write = function(chunk, encoding, cb) {\n      cb(new ERR_METHOD_NOT_IMPLEMENTED(\"_write()\"));\n    };\n    Writable.prototype._writev = null;\n    Writable.prototype.end = function(chunk, encoding, cb) {\n      var state = this._writableState;\n      if (typeof chunk === \"function\") {\n        cb = chunk;\n        chunk = null;\n        encoding = null;\n      } else if (typeof encoding === \"function\") {\n        cb = encoding;\n        encoding = null;\n      }\n      if (chunk !== null && chunk !== void 0)\n        this.write(chunk, encoding);\n      if (state.corked) {\n        state.corked = 1;\n        this.uncork();\n      }\n      if (!state.ending)\n        endWritable(this, state, cb);\n      return this;\n    };\n    Object.defineProperty(Writable.prototype, \"writableLength\", {\n      enumerable: false,\n      get: function get() {\n        return this._writableState.length;\n      }\n    });\n    function needFinish(state) {\n      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n    }\n    function callFinal(stream, state) {\n      stream._final(function(err) {\n        state.pendingcb--;\n        if (err) {\n          errorOrDestroy(stream, err);\n        }\n        state.prefinished = true;\n        stream.emit(\"prefinish\");\n        finishMaybe(stream, state);\n      });\n    }\n    function prefinish(stream, state) {\n      if (!state.prefinished && !state.finalCalled) {\n        if (typeof stream._final === \"function\" && !state.destroyed) {\n          state.pendingcb++;\n          state.finalCalled = true;\n          process.nextTick(callFinal, stream, state);\n        } else {\n          state.prefinished = true;\n          stream.emit(\"prefinish\");\n        }\n      }\n    }\n    function finishMaybe(stream, state) {\n      var need = needFinish(state);\n      if (need) {\n        prefinish(stream, state);\n        if (state.pendingcb === 0) {\n          state.finished = true;\n          stream.emit(\"finish\");\n          if (state.autoDestroy) {\n            var rState = stream._readableState;\n            if (!rState || rState.autoDestroy && rState.endEmitted) {\n              stream.destroy();\n            }\n          }\n        }\n      }\n      return need;\n    }\n    function endWritable(stream, state, cb) {\n      state.ending = true;\n      finishMaybe(stream, state);\n      if (cb) {\n        if (state.finished)\n          process.nextTick(cb);\n        else\n          stream.once(\"finish\", cb);\n      }\n      state.ended = true;\n      stream.writable = false;\n    }\n    function onCorkedFinish(corkReq, state, err) {\n      var entry = corkReq.entry;\n      corkReq.entry = null;\n      while (entry) {\n        var cb = entry.callback;\n        state.pendingcb--;\n        cb(err);\n        entry = entry.next;\n      }\n      state.corkedRequestsFree.next = corkReq;\n    }\n    Object.defineProperty(Writable.prototype, \"destroyed\", {\n      enumerable: false,\n      get: function get() {\n        if (this._writableState === void 0) {\n          return false;\n        }\n        return this._writableState.destroyed;\n      },\n      set: function set(value) {\n        if (!this._writableState) {\n          return;\n        }\n        this._writableState.destroyed = value;\n      }\n    });\n    Writable.prototype.destroy = destroyImpl.destroy;\n    Writable.prototype._undestroy = destroyImpl.undestroy;\n    Writable.prototype._destroy = function(err, cb) {\n      cb(err);\n    };\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_duplex.js\nvar require_stream_duplex = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_duplex.js\"(exports2, module2) {\n    \"use strict\";\n    var objectKeys = Object.keys || function(obj) {\n      var keys2 = [];\n      for (var key in obj) {\n        keys2.push(key);\n      }\n      return keys2;\n    };\n    module2.exports = Duplex;\n    var Readable = require_stream_readable();\n    var Writable = require_stream_writable();\n    require_inherits_browser()(Duplex, Readable);\n    {\n      keys = objectKeys(Writable.prototype);\n      for (v = 0; v < keys.length; v++) {\n        method = keys[v];\n        if (!Duplex.prototype[method])\n          Duplex.prototype[method] = Writable.prototype[method];\n      }\n    }\n    var keys;\n    var method;\n    var v;\n    function Duplex(options) {\n      if (!(this instanceof Duplex))\n        return new Duplex(options);\n      Readable.call(this, options);\n      Writable.call(this, options);\n      this.allowHalfOpen = true;\n      if (options) {\n        if (options.readable === false)\n          this.readable = false;\n        if (options.writable === false)\n          this.writable = false;\n        if (options.allowHalfOpen === false) {\n          this.allowHalfOpen = false;\n          this.once(\"end\", onend);\n        }\n      }\n    }\n    Object.defineProperty(Duplex.prototype, \"writableHighWaterMark\", {\n      enumerable: false,\n      get: function get() {\n        return this._writableState.highWaterMark;\n      }\n    });\n    Object.defineProperty(Duplex.prototype, \"writableBuffer\", {\n      enumerable: false,\n      get: function get() {\n        return this._writableState && this._writableState.getBuffer();\n      }\n    });\n    Object.defineProperty(Duplex.prototype, \"writableLength\", {\n      enumerable: false,\n      get: function get() {\n        return this._writableState.length;\n      }\n    });\n    function onend() {\n      if (this._writableState.ended)\n        return;\n      process.nextTick(onEndNT, this);\n    }\n    function onEndNT(self) {\n      self.end();\n    }\n    Object.defineProperty(Duplex.prototype, \"destroyed\", {\n      enumerable: false,\n      get: function get() {\n        if (this._readableState === void 0 || this._writableState === void 0) {\n          return false;\n        }\n        return this._readableState.destroyed && this._writableState.destroyed;\n      },\n      set: function set(value) {\n        if (this._readableState === void 0 || this._writableState === void 0) {\n          return;\n        }\n        this._readableState.destroyed = value;\n        this._writableState.destroyed = value;\n      }\n    });\n  }\n});\n\n// node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js\nvar require_safe_buffer = __commonJS({\n  \"node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js\"(exports2, module2) {\n    var buffer = require_buffer();\n    var Buffer2 = buffer.Buffer;\n    function copyProps(src, dst) {\n      for (var key in src) {\n        dst[key] = src[key];\n      }\n    }\n    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {\n      module2.exports = buffer;\n    } else {\n      copyProps(buffer, exports2);\n      exports2.Buffer = SafeBuffer;\n    }\n    function SafeBuffer(arg, encodingOrOffset, length) {\n      return Buffer2(arg, encodingOrOffset, length);\n    }\n    SafeBuffer.prototype = Object.create(Buffer2.prototype);\n    copyProps(Buffer2, SafeBuffer);\n    SafeBuffer.from = function(arg, encodingOrOffset, length) {\n      if (typeof arg === \"number\") {\n        throw new TypeError(\"Argument must not be a number\");\n      }\n      return Buffer2(arg, encodingOrOffset, length);\n    };\n    SafeBuffer.alloc = function(size, fill, encoding) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      var buf = Buffer2(size);\n      if (fill !== void 0) {\n        if (typeof encoding === \"string\") {\n          buf.fill(fill, encoding);\n        } else {\n          buf.fill(fill);\n        }\n      } else {\n        buf.fill(0);\n      }\n      return buf;\n    };\n    SafeBuffer.allocUnsafe = function(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      return Buffer2(size);\n    };\n    SafeBuffer.allocUnsafeSlow = function(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      return buffer.SlowBuffer(size);\n    };\n  }\n});\n\n// node_modules/.pnpm/string_decoder@1.3.0/node_modules/string_decoder/lib/string_decoder.js\nvar require_string_decoder = __commonJS({\n  \"node_modules/.pnpm/string_decoder@1.3.0/node_modules/string_decoder/lib/string_decoder.js\"(exports2) {\n    \"use strict\";\n    var Buffer2 = require_safe_buffer().Buffer;\n    var isEncoding = Buffer2.isEncoding || function(encoding) {\n      encoding = \"\" + encoding;\n      switch (encoding && encoding.toLowerCase()) {\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n        case \"raw\":\n          return true;\n        default:\n          return false;\n      }\n    };\n    function _normalizeEncoding(enc) {\n      if (!enc)\n        return \"utf8\";\n      var retried;\n      while (true) {\n        switch (enc) {\n          case \"utf8\":\n          case \"utf-8\":\n            return \"utf8\";\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return \"utf16le\";\n          case \"latin1\":\n          case \"binary\":\n            return \"latin1\";\n          case \"base64\":\n          case \"ascii\":\n          case \"hex\":\n            return enc;\n          default:\n            if (retried)\n              return;\n            enc = (\"\" + enc).toLowerCase();\n            retried = true;\n        }\n      }\n    }\n    function normalizeEncoding(enc) {\n      var nenc = _normalizeEncoding(enc);\n      if (typeof nenc !== \"string\" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))\n        throw new Error(\"Unknown encoding: \" + enc);\n      return nenc || enc;\n    }\n    exports2.StringDecoder = StringDecoder;\n    function StringDecoder(encoding) {\n      this.encoding = normalizeEncoding(encoding);\n      var nb;\n      switch (this.encoding) {\n        case \"utf16le\":\n          this.text = utf16Text;\n          this.end = utf16End;\n          nb = 4;\n          break;\n        case \"utf8\":\n          this.fillLast = utf8FillLast;\n          nb = 4;\n          break;\n        case \"base64\":\n          this.text = base64Text;\n          this.end = base64End;\n          nb = 3;\n          break;\n        default:\n          this.write = simpleWrite;\n          this.end = simpleEnd;\n          return;\n      }\n      this.lastNeed = 0;\n      this.lastTotal = 0;\n      this.lastChar = Buffer2.allocUnsafe(nb);\n    }\n    StringDecoder.prototype.write = function(buf) {\n      if (buf.length === 0)\n        return \"\";\n      var r;\n      var i;\n      if (this.lastNeed) {\n        r = this.fillLast(buf);\n        if (r === void 0)\n          return \"\";\n        i = this.lastNeed;\n        this.lastNeed = 0;\n      } else {\n        i = 0;\n      }\n      if (i < buf.length)\n        return r ? r + this.text(buf, i) : this.text(buf, i);\n      return r || \"\";\n    };\n    StringDecoder.prototype.end = utf8End;\n    StringDecoder.prototype.text = utf8Text;\n    StringDecoder.prototype.fillLast = function(buf) {\n      if (this.lastNeed <= buf.length) {\n        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n        return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n      }\n      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n      this.lastNeed -= buf.length;\n    };\n    function utf8CheckByte(byte) {\n      if (byte <= 127)\n        return 0;\n      else if (byte >> 5 === 6)\n        return 2;\n      else if (byte >> 4 === 14)\n        return 3;\n      else if (byte >> 3 === 30)\n        return 4;\n      return byte >> 6 === 2 ? -1 : -2;\n    }\n    function utf8CheckIncomplete(self, buf, i) {\n      var j = buf.length - 1;\n      if (j < i)\n        return 0;\n      var nb = utf8CheckByte(buf[j]);\n      if (nb >= 0) {\n        if (nb > 0)\n          self.lastNeed = nb - 1;\n        return nb;\n      }\n      if (--j < i || nb === -2)\n        return 0;\n      nb = utf8CheckByte(buf[j]);\n      if (nb >= 0) {\n        if (nb > 0)\n          self.lastNeed = nb - 2;\n        return nb;\n      }\n      if (--j < i || nb === -2)\n        return 0;\n      nb = utf8CheckByte(buf[j]);\n      if (nb >= 0) {\n        if (nb > 0) {\n          if (nb === 2)\n            nb = 0;\n          else\n            self.lastNeed = nb - 3;\n        }\n        return nb;\n      }\n      return 0;\n    }\n    function utf8CheckExtraBytes(self, buf, p) {\n      if ((buf[0] & 192) !== 128) {\n        self.lastNeed = 0;\n        return \"\\uFFFD\";\n      }\n      if (self.lastNeed > 1 && buf.length > 1) {\n        if ((buf[1] & 192) !== 128) {\n          self.lastNeed = 1;\n          return \"\\uFFFD\";\n        }\n        if (self.lastNeed > 2 && buf.length > 2) {\n          if ((buf[2] & 192) !== 128) {\n            self.lastNeed = 2;\n            return \"\\uFFFD\";\n          }\n        }\n      }\n    }\n    function utf8FillLast(buf) {\n      var p = this.lastTotal - this.lastNeed;\n      var r = utf8CheckExtraBytes(this, buf, p);\n      if (r !== void 0)\n        return r;\n      if (this.lastNeed <= buf.length) {\n        buf.copy(this.lastChar, p, 0, this.lastNeed);\n        return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n      }\n      buf.copy(this.lastChar, p, 0, buf.length);\n      this.lastNeed -= buf.length;\n    }\n    function utf8Text(buf, i) {\n      var total = utf8CheckIncomplete(this, buf, i);\n      if (!this.lastNeed)\n        return buf.toString(\"utf8\", i);\n      this.lastTotal = total;\n      var end = buf.length - (total - this.lastNeed);\n      buf.copy(this.lastChar, 0, end);\n      return buf.toString(\"utf8\", i, end);\n    }\n    function utf8End(buf) {\n      var r = buf && buf.length ? this.write(buf) : \"\";\n      if (this.lastNeed)\n        return r + \"\\uFFFD\";\n      return r;\n    }\n    function utf16Text(buf, i) {\n      if ((buf.length - i) % 2 === 0) {\n        var r = buf.toString(\"utf16le\", i);\n        if (r) {\n          var c = r.charCodeAt(r.length - 1);\n          if (c >= 55296 && c <= 56319) {\n            this.lastNeed = 2;\n            this.lastTotal = 4;\n            this.lastChar[0] = buf[buf.length - 2];\n            this.lastChar[1] = buf[buf.length - 1];\n            return r.slice(0, -1);\n          }\n        }\n        return r;\n      }\n      this.lastNeed = 1;\n      this.lastTotal = 2;\n      this.lastChar[0] = buf[buf.length - 1];\n      return buf.toString(\"utf16le\", i, buf.length - 1);\n    }\n    function utf16End(buf) {\n      var r = buf && buf.length ? this.write(buf) : \"\";\n      if (this.lastNeed) {\n        var end = this.lastTotal - this.lastNeed;\n        return r + this.lastChar.toString(\"utf16le\", 0, end);\n      }\n      return r;\n    }\n    function base64Text(buf, i) {\n      var n = (buf.length - i) % 3;\n      if (n === 0)\n        return buf.toString(\"base64\", i);\n      this.lastNeed = 3 - n;\n      this.lastTotal = 3;\n      if (n === 1) {\n        this.lastChar[0] = buf[buf.length - 1];\n      } else {\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n      }\n      return buf.toString(\"base64\", i, buf.length - n);\n    }\n    function base64End(buf) {\n      var r = buf && buf.length ? this.write(buf) : \"\";\n      if (this.lastNeed)\n        return r + this.lastChar.toString(\"base64\", 0, 3 - this.lastNeed);\n      return r;\n    }\n    function simpleWrite(buf) {\n      return buf.toString(this.encoding);\n    }\n    function simpleEnd(buf) {\n      return buf && buf.length ? this.write(buf) : \"\";\n    }\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\nvar require_end_of_stream = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\"(exports2, module2) {\n    \"use strict\";\n    var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser().codes.ERR_STREAM_PREMATURE_CLOSE;\n    function once(callback) {\n      var called = false;\n      return function() {\n        if (called)\n          return;\n        called = true;\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        callback.apply(this, args);\n      };\n    }\n    function noop() {\n    }\n    function isRequest(stream) {\n      return stream.setHeader && typeof stream.abort === \"function\";\n    }\n    function eos(stream, opts, callback) {\n      if (typeof opts === \"function\")\n        return eos(stream, null, opts);\n      if (!opts)\n        opts = {};\n      callback = once(callback || noop);\n      var readable = opts.readable || opts.readable !== false && stream.readable;\n      var writable = opts.writable || opts.writable !== false && stream.writable;\n      var onlegacyfinish = function onlegacyfinish2() {\n        if (!stream.writable)\n          onfinish();\n      };\n      var writableEnded = stream._writableState && stream._writableState.finished;\n      var onfinish = function onfinish2() {\n        writable = false;\n        writableEnded = true;\n        if (!readable)\n          callback.call(stream);\n      };\n      var readableEnded = stream._readableState && stream._readableState.endEmitted;\n      var onend = function onend2() {\n        readable = false;\n        readableEnded = true;\n        if (!writable)\n          callback.call(stream);\n      };\n      var onerror = function onerror2(err) {\n        callback.call(stream, err);\n      };\n      var onclose = function onclose2() {\n        var err;\n        if (readable && !readableEnded) {\n          if (!stream._readableState || !stream._readableState.ended)\n            err = new ERR_STREAM_PREMATURE_CLOSE();\n          return callback.call(stream, err);\n        }\n        if (writable && !writableEnded) {\n          if (!stream._writableState || !stream._writableState.ended)\n            err = new ERR_STREAM_PREMATURE_CLOSE();\n          return callback.call(stream, err);\n        }\n      };\n      var onrequest = function onrequest2() {\n        stream.req.on(\"finish\", onfinish);\n      };\n      if (isRequest(stream)) {\n        stream.on(\"complete\", onfinish);\n        stream.on(\"abort\", onclose);\n        if (stream.req)\n          onrequest();\n        else\n          stream.on(\"request\", onrequest);\n      } else if (writable && !stream._writableState) {\n        stream.on(\"end\", onlegacyfinish);\n        stream.on(\"close\", onlegacyfinish);\n      }\n      stream.on(\"end\", onend);\n      stream.on(\"finish\", onfinish);\n      if (opts.error !== false)\n        stream.on(\"error\", onerror);\n      stream.on(\"close\", onclose);\n      return function() {\n        stream.removeListener(\"complete\", onfinish);\n        stream.removeListener(\"abort\", onclose);\n        stream.removeListener(\"request\", onrequest);\n        if (stream.req)\n          stream.req.removeListener(\"finish\", onfinish);\n        stream.removeListener(\"end\", onlegacyfinish);\n        stream.removeListener(\"close\", onlegacyfinish);\n        stream.removeListener(\"finish\", onfinish);\n        stream.removeListener(\"end\", onend);\n        stream.removeListener(\"error\", onerror);\n        stream.removeListener(\"close\", onclose);\n      };\n    }\n    module2.exports = eos;\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/async_iterator.js\nvar require_async_iterator = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/async_iterator.js\"(exports2, module2) {\n    \"use strict\";\n    var _Object$setPrototypeO;\n    function _defineProperty(obj, key, value) {\n      if (key in obj) {\n        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });\n      } else {\n        obj[key] = value;\n      }\n      return obj;\n    }\n    var finished = require_end_of_stream();\n    var kLastResolve = Symbol(\"lastResolve\");\n    var kLastReject = Symbol(\"lastReject\");\n    var kError = Symbol(\"error\");\n    var kEnded = Symbol(\"ended\");\n    var kLastPromise = Symbol(\"lastPromise\");\n    var kHandlePromise = Symbol(\"handlePromise\");\n    var kStream = Symbol(\"stream\");\n    function createIterResult(value, done) {\n      return {\n        value,\n        done\n      };\n    }\n    function readAndResolve(iter) {\n      var resolve = iter[kLastResolve];\n      if (resolve !== null) {\n        var data = iter[kStream].read();\n        if (data !== null) {\n          iter[kLastPromise] = null;\n          iter[kLastResolve] = null;\n          iter[kLastReject] = null;\n          resolve(createIterResult(data, false));\n        }\n      }\n    }\n    function onReadable(iter) {\n      process.nextTick(readAndResolve, iter);\n    }\n    function wrapForNext(lastPromise, iter) {\n      return function(resolve, reject) {\n        lastPromise.then(function() {\n          if (iter[kEnded]) {\n            resolve(createIterResult(void 0, true));\n            return;\n          }\n          iter[kHandlePromise](resolve, reject);\n        }, reject);\n      };\n    }\n    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {\n    });\n    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n      get stream() {\n        return this[kStream];\n      },\n      next: function next() {\n        var _this = this;\n        var error = this[kError];\n        if (error !== null) {\n          return Promise.reject(error);\n        }\n        if (this[kEnded]) {\n          return Promise.resolve(createIterResult(void 0, true));\n        }\n        if (this[kStream].destroyed) {\n          return new Promise(function(resolve, reject) {\n            process.nextTick(function() {\n              if (_this[kError]) {\n                reject(_this[kError]);\n              } else {\n                resolve(createIterResult(void 0, true));\n              }\n            });\n          });\n        }\n        var lastPromise = this[kLastPromise];\n        var promise;\n        if (lastPromise) {\n          promise = new Promise(wrapForNext(lastPromise, this));\n        } else {\n          var data = this[kStream].read();\n          if (data !== null) {\n            return Promise.resolve(createIterResult(data, false));\n          }\n          promise = new Promise(this[kHandlePromise]);\n        }\n        this[kLastPromise] = promise;\n        return promise;\n      }\n    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {\n      return this;\n    }), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n      var _this2 = this;\n      return new Promise(function(resolve, reject) {\n        _this2[kStream].destroy(null, function(err) {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(createIterResult(void 0, true));\n        });\n      });\n    }), _Object$setPrototypeO), AsyncIteratorPrototype);\n    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {\n      var _Object$create;\n      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n        value: stream,\n        writable: true\n      }), _defineProperty(_Object$create, kLastResolve, {\n        value: null,\n        writable: true\n      }), _defineProperty(_Object$create, kLastReject, {\n        value: null,\n        writable: true\n      }), _defineProperty(_Object$create, kError, {\n        value: null,\n        writable: true\n      }), _defineProperty(_Object$create, kEnded, {\n        value: stream._readableState.endEmitted,\n        writable: true\n      }), _defineProperty(_Object$create, kHandlePromise, {\n        value: function value(resolve, reject) {\n          var data = iterator[kStream].read();\n          if (data) {\n            iterator[kLastPromise] = null;\n            iterator[kLastResolve] = null;\n            iterator[kLastReject] = null;\n            resolve(createIterResult(data, false));\n          } else {\n            iterator[kLastResolve] = resolve;\n            iterator[kLastReject] = reject;\n          }\n        },\n        writable: true\n      }), _Object$create));\n      iterator[kLastPromise] = null;\n      finished(stream, function(err) {\n        if (err && err.code !== \"ERR_STREAM_PREMATURE_CLOSE\") {\n          var reject = iterator[kLastReject];\n          if (reject !== null) {\n            iterator[kLastPromise] = null;\n            iterator[kLastResolve] = null;\n            iterator[kLastReject] = null;\n            reject(err);\n          }\n          iterator[kError] = err;\n          return;\n        }\n        var resolve = iterator[kLastResolve];\n        if (resolve !== null) {\n          iterator[kLastPromise] = null;\n          iterator[kLastResolve] = null;\n          iterator[kLastReject] = null;\n          resolve(createIterResult(void 0, true));\n        }\n        iterator[kEnded] = true;\n      });\n      stream.on(\"readable\", onReadable.bind(null, iterator));\n      return iterator;\n    };\n    module2.exports = createReadableStreamAsyncIterator;\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/from-browser.js\nvar require_from_browser = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/from-browser.js\"(exports2, module2) {\n    module2.exports = function() {\n      throw new Error(\"Readable.from is not available in the browser\");\n    };\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_readable.js\nvar require_stream_readable = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_readable.js\"(exports2, module2) {\n    \"use strict\";\n    module2.exports = Readable;\n    var Duplex;\n    Readable.ReadableState = ReadableState;\n    var EE = require_events().EventEmitter;\n    var EElistenerCount = function EElistenerCount2(emitter, type) {\n      return emitter.listeners(type).length;\n    };\n    var Stream = require_stream_browser();\n    var Buffer2 = require_buffer().Buffer;\n    var OurUint8Array = commonjsHelpers.commonjsGlobal.Uint8Array || function() {\n    };\n    function _uint8ArrayToBuffer(chunk) {\n      return Buffer2.from(chunk);\n    }\n    function _isUint8Array(obj) {\n      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;\n    }\n    var debugUtil = require_util();\n    var debug;\n    if (debugUtil && debugUtil.debuglog) {\n      debug = debugUtil.debuglog(\"stream\");\n    } else {\n      debug = function debug2() {\n      };\n    }\n    var BufferList = require_buffer_list();\n    var destroyImpl = require_destroy();\n    var _require = require_state();\n    var getHighWaterMark = _require.getHighWaterMark;\n    var _require$codes = require_errors_browser().codes;\n    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;\n    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;\n    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;\n    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;\n    var StringDecoder;\n    var createReadableStreamAsyncIterator;\n    var from;\n    require_inherits_browser()(Readable, Stream);\n    var errorOrDestroy = destroyImpl.errorOrDestroy;\n    var kProxyEvents = [\"error\", \"close\", \"destroy\", \"pause\", \"resume\"];\n    function prependListener(emitter, event, fn) {\n      if (typeof emitter.prependListener === \"function\")\n        return emitter.prependListener(event, fn);\n      if (!emitter._events || !emitter._events[event])\n        emitter.on(event, fn);\n      else if (Array.isArray(emitter._events[event]))\n        emitter._events[event].unshift(fn);\n      else\n        emitter._events[event] = [fn, emitter._events[event]];\n    }\n    function ReadableState(options, stream, isDuplex) {\n      Duplex = Duplex || require_stream_duplex();\n      options = options || {};\n      if (typeof isDuplex !== \"boolean\")\n        isDuplex = stream instanceof Duplex;\n      this.objectMode = !!options.objectMode;\n      if (isDuplex)\n        this.objectMode = this.objectMode || !!options.readableObjectMode;\n      this.highWaterMark = getHighWaterMark(this, options, \"readableHighWaterMark\", isDuplex);\n      this.buffer = new BufferList();\n      this.length = 0;\n      this.pipes = null;\n      this.pipesCount = 0;\n      this.flowing = null;\n      this.ended = false;\n      this.endEmitted = false;\n      this.reading = false;\n      this.sync = true;\n      this.needReadable = false;\n      this.emittedReadable = false;\n      this.readableListening = false;\n      this.resumeScheduled = false;\n      this.paused = true;\n      this.emitClose = options.emitClose !== false;\n      this.autoDestroy = !!options.autoDestroy;\n      this.destroyed = false;\n      this.defaultEncoding = options.defaultEncoding || \"utf8\";\n      this.awaitDrain = 0;\n      this.readingMore = false;\n      this.decoder = null;\n      this.encoding = null;\n      if (options.encoding) {\n        if (!StringDecoder)\n          StringDecoder = require_string_decoder().StringDecoder;\n        this.decoder = new StringDecoder(options.encoding);\n        this.encoding = options.encoding;\n      }\n    }\n    function Readable(options) {\n      Duplex = Duplex || require_stream_duplex();\n      if (!(this instanceof Readable))\n        return new Readable(options);\n      var isDuplex = this instanceof Duplex;\n      this._readableState = new ReadableState(options, this, isDuplex);\n      this.readable = true;\n      if (options) {\n        if (typeof options.read === \"function\")\n          this._read = options.read;\n        if (typeof options.destroy === \"function\")\n          this._destroy = options.destroy;\n      }\n      Stream.call(this);\n    }\n    Object.defineProperty(Readable.prototype, \"destroyed\", {\n      enumerable: false,\n      get: function get() {\n        if (this._readableState === void 0) {\n          return false;\n        }\n        return this._readableState.destroyed;\n      },\n      set: function set(value) {\n        if (!this._readableState) {\n          return;\n        }\n        this._readableState.destroyed = value;\n      }\n    });\n    Readable.prototype.destroy = destroyImpl.destroy;\n    Readable.prototype._undestroy = destroyImpl.undestroy;\n    Readable.prototype._destroy = function(err, cb) {\n      cb(err);\n    };\n    Readable.prototype.push = function(chunk, encoding) {\n      var state = this._readableState;\n      var skipChunkCheck;\n      if (!state.objectMode) {\n        if (typeof chunk === \"string\") {\n          encoding = encoding || state.defaultEncoding;\n          if (encoding !== state.encoding) {\n            chunk = Buffer2.from(chunk, encoding);\n            encoding = \"\";\n          }\n          skipChunkCheck = true;\n        }\n      } else {\n        skipChunkCheck = true;\n      }\n      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n    };\n    Readable.prototype.unshift = function(chunk) {\n      return readableAddChunk(this, chunk, null, true, false);\n    };\n    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n      debug(\"readableAddChunk\", chunk);\n      var state = stream._readableState;\n      if (chunk === null) {\n        state.reading = false;\n        onEofChunk(stream, state);\n      } else {\n        var er;\n        if (!skipChunkCheck)\n          er = chunkInvalid(state, chunk);\n        if (er) {\n          errorOrDestroy(stream, er);\n        } else if (state.objectMode || chunk && chunk.length > 0) {\n          if (typeof chunk !== \"string\" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {\n            chunk = _uint8ArrayToBuffer(chunk);\n          }\n          if (addToFront) {\n            if (state.endEmitted)\n              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());\n            else\n              addChunk(stream, state, chunk, true);\n          } else if (state.ended) {\n            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n          } else if (state.destroyed) {\n            return false;\n          } else {\n            state.reading = false;\n            if (state.decoder && !encoding) {\n              chunk = state.decoder.write(chunk);\n              if (state.objectMode || chunk.length !== 0)\n                addChunk(stream, state, chunk, false);\n              else\n                maybeReadMore(stream, state);\n            } else {\n              addChunk(stream, state, chunk, false);\n            }\n          }\n        } else if (!addToFront) {\n          state.reading = false;\n          maybeReadMore(stream, state);\n        }\n      }\n      return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n    }\n    function addChunk(stream, state, chunk, addToFront) {\n      if (state.flowing && state.length === 0 && !state.sync) {\n        state.awaitDrain = 0;\n        stream.emit(\"data\", chunk);\n      } else {\n        state.length += state.objectMode ? 1 : chunk.length;\n        if (addToFront)\n          state.buffer.unshift(chunk);\n        else\n          state.buffer.push(chunk);\n        if (state.needReadable)\n          emitReadable(stream);\n      }\n      maybeReadMore(stream, state);\n    }\n    function chunkInvalid(state, chunk) {\n      var er;\n      if (!_isUint8Array(chunk) && typeof chunk !== \"string\" && chunk !== void 0 && !state.objectMode) {\n        er = new ERR_INVALID_ARG_TYPE(\"chunk\", [\"string\", \"Buffer\", \"Uint8Array\"], chunk);\n      }\n      return er;\n    }\n    Readable.prototype.isPaused = function() {\n      return this._readableState.flowing === false;\n    };\n    Readable.prototype.setEncoding = function(enc) {\n      if (!StringDecoder)\n        StringDecoder = require_string_decoder().StringDecoder;\n      var decoder = new StringDecoder(enc);\n      this._readableState.decoder = decoder;\n      this._readableState.encoding = this._readableState.decoder.encoding;\n      var p = this._readableState.buffer.head;\n      var content = \"\";\n      while (p !== null) {\n        content += decoder.write(p.data);\n        p = p.next;\n      }\n      this._readableState.buffer.clear();\n      if (content !== \"\")\n        this._readableState.buffer.push(content);\n      this._readableState.length = content.length;\n      return this;\n    };\n    var MAX_HWM = 1073741824;\n    function computeNewHighWaterMark(n) {\n      if (n >= MAX_HWM) {\n        n = MAX_HWM;\n      } else {\n        n--;\n        n |= n >>> 1;\n        n |= n >>> 2;\n        n |= n >>> 4;\n        n |= n >>> 8;\n        n |= n >>> 16;\n        n++;\n      }\n      return n;\n    }\n    function howMuchToRead(n, state) {\n      if (n <= 0 || state.length === 0 && state.ended)\n        return 0;\n      if (state.objectMode)\n        return 1;\n      if (n !== n) {\n        if (state.flowing && state.length)\n          return state.buffer.head.data.length;\n        else\n          return state.length;\n      }\n      if (n > state.highWaterMark)\n        state.highWaterMark = computeNewHighWaterMark(n);\n      if (n <= state.length)\n        return n;\n      if (!state.ended) {\n        state.needReadable = true;\n        return 0;\n      }\n      return state.length;\n    }\n    Readable.prototype.read = function(n) {\n      debug(\"read\", n);\n      n = parseInt(n, 10);\n      var state = this._readableState;\n      var nOrig = n;\n      if (n !== 0)\n        state.emittedReadable = false;\n      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n        debug(\"read: emitReadable\", state.length, state.ended);\n        if (state.length === 0 && state.ended)\n          endReadable(this);\n        else\n          emitReadable(this);\n        return null;\n      }\n      n = howMuchToRead(n, state);\n      if (n === 0 && state.ended) {\n        if (state.length === 0)\n          endReadable(this);\n        return null;\n      }\n      var doRead = state.needReadable;\n      debug(\"need readable\", doRead);\n      if (state.length === 0 || state.length - n < state.highWaterMark) {\n        doRead = true;\n        debug(\"length less than watermark\", doRead);\n      }\n      if (state.ended || state.reading) {\n        doRead = false;\n        debug(\"reading or ended\", doRead);\n      } else if (doRead) {\n        debug(\"do read\");\n        state.reading = true;\n        state.sync = true;\n        if (state.length === 0)\n          state.needReadable = true;\n        this._read(state.highWaterMark);\n        state.sync = false;\n        if (!state.reading)\n          n = howMuchToRead(nOrig, state);\n      }\n      var ret;\n      if (n > 0)\n        ret = fromList(n, state);\n      else\n        ret = null;\n      if (ret === null) {\n        state.needReadable = state.length <= state.highWaterMark;\n        n = 0;\n      } else {\n        state.length -= n;\n        state.awaitDrain = 0;\n      }\n      if (state.length === 0) {\n        if (!state.ended)\n          state.needReadable = true;\n        if (nOrig !== n && state.ended)\n          endReadable(this);\n      }\n      if (ret !== null)\n        this.emit(\"data\", ret);\n      return ret;\n    };\n    function onEofChunk(stream, state) {\n      debug(\"onEofChunk\");\n      if (state.ended)\n        return;\n      if (state.decoder) {\n        var chunk = state.decoder.end();\n        if (chunk && chunk.length) {\n          state.buffer.push(chunk);\n          state.length += state.objectMode ? 1 : chunk.length;\n        }\n      }\n      state.ended = true;\n      if (state.sync) {\n        emitReadable(stream);\n      } else {\n        state.needReadable = false;\n        if (!state.emittedReadable) {\n          state.emittedReadable = true;\n          emitReadable_(stream);\n        }\n      }\n    }\n    function emitReadable(stream) {\n      var state = stream._readableState;\n      debug(\"emitReadable\", state.needReadable, state.emittedReadable);\n      state.needReadable = false;\n      if (!state.emittedReadable) {\n        debug(\"emitReadable\", state.flowing);\n        state.emittedReadable = true;\n        process.nextTick(emitReadable_, stream);\n      }\n    }\n    function emitReadable_(stream) {\n      var state = stream._readableState;\n      debug(\"emitReadable_\", state.destroyed, state.length, state.ended);\n      if (!state.destroyed && (state.length || state.ended)) {\n        stream.emit(\"readable\");\n        state.emittedReadable = false;\n      }\n      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n      flow(stream);\n    }\n    function maybeReadMore(stream, state) {\n      if (!state.readingMore) {\n        state.readingMore = true;\n        process.nextTick(maybeReadMore_, stream, state);\n      }\n    }\n    function maybeReadMore_(stream, state) {\n      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n        var len = state.length;\n        debug(\"maybeReadMore read 0\");\n        stream.read(0);\n        if (len === state.length)\n          break;\n      }\n      state.readingMore = false;\n    }\n    Readable.prototype._read = function(n) {\n      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED(\"_read()\"));\n    };\n    Readable.prototype.pipe = function(dest, pipeOpts) {\n      var src = this;\n      var state = this._readableState;\n      switch (state.pipesCount) {\n        case 0:\n          state.pipes = dest;\n          break;\n        case 1:\n          state.pipes = [state.pipes, dest];\n          break;\n        default:\n          state.pipes.push(dest);\n          break;\n      }\n      state.pipesCount += 1;\n      debug(\"pipe count=%d opts=%j\", state.pipesCount, pipeOpts);\n      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n      var endFn = doEnd ? onend : unpipe;\n      if (state.endEmitted)\n        process.nextTick(endFn);\n      else\n        src.once(\"end\", endFn);\n      dest.on(\"unpipe\", onunpipe);\n      function onunpipe(readable, unpipeInfo) {\n        debug(\"onunpipe\");\n        if (readable === src) {\n          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n            unpipeInfo.hasUnpiped = true;\n            cleanup();\n          }\n        }\n      }\n      function onend() {\n        debug(\"onend\");\n        dest.end();\n      }\n      var ondrain = pipeOnDrain(src);\n      dest.on(\"drain\", ondrain);\n      var cleanedUp = false;\n      function cleanup() {\n        debug(\"cleanup\");\n        dest.removeListener(\"close\", onclose);\n        dest.removeListener(\"finish\", onfinish);\n        dest.removeListener(\"drain\", ondrain);\n        dest.removeListener(\"error\", onerror);\n        dest.removeListener(\"unpipe\", onunpipe);\n        src.removeListener(\"end\", onend);\n        src.removeListener(\"end\", unpipe);\n        src.removeListener(\"data\", ondata);\n        cleanedUp = true;\n        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))\n          ondrain();\n      }\n      src.on(\"data\", ondata);\n      function ondata(chunk) {\n        debug(\"ondata\");\n        var ret = dest.write(chunk);\n        debug(\"dest.write\", ret);\n        if (ret === false) {\n          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n            debug(\"false write response, pause\", state.awaitDrain);\n            state.awaitDrain++;\n          }\n          src.pause();\n        }\n      }\n      function onerror(er) {\n        debug(\"onerror\", er);\n        unpipe();\n        dest.removeListener(\"error\", onerror);\n        if (EElistenerCount(dest, \"error\") === 0)\n          errorOrDestroy(dest, er);\n      }\n      prependListener(dest, \"error\", onerror);\n      function onclose() {\n        dest.removeListener(\"finish\", onfinish);\n        unpipe();\n      }\n      dest.once(\"close\", onclose);\n      function onfinish() {\n        debug(\"onfinish\");\n        dest.removeListener(\"close\", onclose);\n        unpipe();\n      }\n      dest.once(\"finish\", onfinish);\n      function unpipe() {\n        debug(\"unpipe\");\n        src.unpipe(dest);\n      }\n      dest.emit(\"pipe\", src);\n      if (!state.flowing) {\n        debug(\"pipe resume\");\n        src.resume();\n      }\n      return dest;\n    };\n    function pipeOnDrain(src) {\n      return function pipeOnDrainFunctionResult() {\n        var state = src._readableState;\n        debug(\"pipeOnDrain\", state.awaitDrain);\n        if (state.awaitDrain)\n          state.awaitDrain--;\n        if (state.awaitDrain === 0 && EElistenerCount(src, \"data\")) {\n          state.flowing = true;\n          flow(src);\n        }\n      };\n    }\n    Readable.prototype.unpipe = function(dest) {\n      var state = this._readableState;\n      var unpipeInfo = {\n        hasUnpiped: false\n      };\n      if (state.pipesCount === 0)\n        return this;\n      if (state.pipesCount === 1) {\n        if (dest && dest !== state.pipes)\n          return this;\n        if (!dest)\n          dest = state.pipes;\n        state.pipes = null;\n        state.pipesCount = 0;\n        state.flowing = false;\n        if (dest)\n          dest.emit(\"unpipe\", this, unpipeInfo);\n        return this;\n      }\n      if (!dest) {\n        var dests = state.pipes;\n        var len = state.pipesCount;\n        state.pipes = null;\n        state.pipesCount = 0;\n        state.flowing = false;\n        for (var i = 0; i < len; i++) {\n          dests[i].emit(\"unpipe\", this, {\n            hasUnpiped: false\n          });\n        }\n        return this;\n      }\n      var index = indexOf(state.pipes, dest);\n      if (index === -1)\n        return this;\n      state.pipes.splice(index, 1);\n      state.pipesCount -= 1;\n      if (state.pipesCount === 1)\n        state.pipes = state.pipes[0];\n      dest.emit(\"unpipe\", this, unpipeInfo);\n      return this;\n    };\n    Readable.prototype.on = function(ev, fn) {\n      var res = Stream.prototype.on.call(this, ev, fn);\n      var state = this._readableState;\n      if (ev === \"data\") {\n        state.readableListening = this.listenerCount(\"readable\") > 0;\n        if (state.flowing !== false)\n          this.resume();\n      } else if (ev === \"readable\") {\n        if (!state.endEmitted && !state.readableListening) {\n          state.readableListening = state.needReadable = true;\n          state.flowing = false;\n          state.emittedReadable = false;\n          debug(\"on readable\", state.length, state.reading);\n          if (state.length) {\n            emitReadable(this);\n          } else if (!state.reading) {\n            process.nextTick(nReadingNextTick, this);\n          }\n        }\n      }\n      return res;\n    };\n    Readable.prototype.addListener = Readable.prototype.on;\n    Readable.prototype.removeListener = function(ev, fn) {\n      var res = Stream.prototype.removeListener.call(this, ev, fn);\n      if (ev === \"readable\") {\n        process.nextTick(updateReadableListening, this);\n      }\n      return res;\n    };\n    Readable.prototype.removeAllListeners = function(ev) {\n      var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n      if (ev === \"readable\" || ev === void 0) {\n        process.nextTick(updateReadableListening, this);\n      }\n      return res;\n    };\n    function updateReadableListening(self) {\n      var state = self._readableState;\n      state.readableListening = self.listenerCount(\"readable\") > 0;\n      if (state.resumeScheduled && !state.paused) {\n        state.flowing = true;\n      } else if (self.listenerCount(\"data\") > 0) {\n        self.resume();\n      }\n    }\n    function nReadingNextTick(self) {\n      debug(\"readable nexttick read 0\");\n      self.read(0);\n    }\n    Readable.prototype.resume = function() {\n      var state = this._readableState;\n      if (!state.flowing) {\n        debug(\"resume\");\n        state.flowing = !state.readableListening;\n        resume(this, state);\n      }\n      state.paused = false;\n      return this;\n    };\n    function resume(stream, state) {\n      if (!state.resumeScheduled) {\n        state.resumeScheduled = true;\n        process.nextTick(resume_, stream, state);\n      }\n    }\n    function resume_(stream, state) {\n      debug(\"resume\", state.reading);\n      if (!state.reading) {\n        stream.read(0);\n      }\n      state.resumeScheduled = false;\n      stream.emit(\"resume\");\n      flow(stream);\n      if (state.flowing && !state.reading)\n        stream.read(0);\n    }\n    Readable.prototype.pause = function() {\n      debug(\"call pause flowing=%j\", this._readableState.flowing);\n      if (this._readableState.flowing !== false) {\n        debug(\"pause\");\n        this._readableState.flowing = false;\n        this.emit(\"pause\");\n      }\n      this._readableState.paused = true;\n      return this;\n    };\n    function flow(stream) {\n      var state = stream._readableState;\n      debug(\"flow\", state.flowing);\n      while (state.flowing && stream.read() !== null) {\n        ;\n      }\n    }\n    Readable.prototype.wrap = function(stream) {\n      var _this = this;\n      var state = this._readableState;\n      var paused = false;\n      stream.on(\"end\", function() {\n        debug(\"wrapped end\");\n        if (state.decoder && !state.ended) {\n          var chunk = state.decoder.end();\n          if (chunk && chunk.length)\n            _this.push(chunk);\n        }\n        _this.push(null);\n      });\n      stream.on(\"data\", function(chunk) {\n        debug(\"wrapped data\");\n        if (state.decoder)\n          chunk = state.decoder.write(chunk);\n        if (state.objectMode && (chunk === null || chunk === void 0))\n          return;\n        else if (!state.objectMode && (!chunk || !chunk.length))\n          return;\n        var ret = _this.push(chunk);\n        if (!ret) {\n          paused = true;\n          stream.pause();\n        }\n      });\n      for (var i in stream) {\n        if (this[i] === void 0 && typeof stream[i] === \"function\") {\n          this[i] = function methodWrap(method) {\n            return function methodWrapReturnFunction() {\n              return stream[method].apply(stream, arguments);\n            };\n          }(i);\n        }\n      }\n      for (var n = 0; n < kProxyEvents.length; n++) {\n        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n      }\n      this._read = function(n2) {\n        debug(\"wrapped _read\", n2);\n        if (paused) {\n          paused = false;\n          stream.resume();\n        }\n      };\n      return this;\n    };\n    if (typeof Symbol === \"function\") {\n      Readable.prototype[Symbol.asyncIterator] = function() {\n        if (createReadableStreamAsyncIterator === void 0) {\n          createReadableStreamAsyncIterator = require_async_iterator();\n        }\n        return createReadableStreamAsyncIterator(this);\n      };\n    }\n    Object.defineProperty(Readable.prototype, \"readableHighWaterMark\", {\n      enumerable: false,\n      get: function get() {\n        return this._readableState.highWaterMark;\n      }\n    });\n    Object.defineProperty(Readable.prototype, \"readableBuffer\", {\n      enumerable: false,\n      get: function get() {\n        return this._readableState && this._readableState.buffer;\n      }\n    });\n    Object.defineProperty(Readable.prototype, \"readableFlowing\", {\n      enumerable: false,\n      get: function get() {\n        return this._readableState.flowing;\n      },\n      set: function set(state) {\n        if (this._readableState) {\n          this._readableState.flowing = state;\n        }\n      }\n    });\n    Readable._fromList = fromList;\n    Object.defineProperty(Readable.prototype, \"readableLength\", {\n      enumerable: false,\n      get: function get() {\n        return this._readableState.length;\n      }\n    });\n    function fromList(n, state) {\n      if (state.length === 0)\n        return null;\n      var ret;\n      if (state.objectMode)\n        ret = state.buffer.shift();\n      else if (!n || n >= state.length) {\n        if (state.decoder)\n          ret = state.buffer.join(\"\");\n        else if (state.buffer.length === 1)\n          ret = state.buffer.first();\n        else\n          ret = state.buffer.concat(state.length);\n        state.buffer.clear();\n      } else {\n        ret = state.buffer.consume(n, state.decoder);\n      }\n      return ret;\n    }\n    function endReadable(stream) {\n      var state = stream._readableState;\n      debug(\"endReadable\", state.endEmitted);\n      if (!state.endEmitted) {\n        state.ended = true;\n        process.nextTick(endReadableNT, state, stream);\n      }\n    }\n    function endReadableNT(state, stream) {\n      debug(\"endReadableNT\", state.endEmitted, state.length);\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit(\"end\");\n        if (state.autoDestroy) {\n          var wState = stream._writableState;\n          if (!wState || wState.autoDestroy && wState.finished) {\n            stream.destroy();\n          }\n        }\n      }\n    }\n    if (typeof Symbol === \"function\") {\n      Readable.from = function(iterable, opts) {\n        if (from === void 0) {\n          from = require_from_browser();\n        }\n        return from(Readable, iterable, opts);\n      };\n    }\n    function indexOf(xs, x) {\n      for (var i = 0, l = xs.length; i < l; i++) {\n        if (xs[i] === x)\n          return i;\n      }\n      return -1;\n    }\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_transform.js\nvar require_stream_transform = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_transform.js\"(exports2, module2) {\n    \"use strict\";\n    module2.exports = Transform;\n    var _require$codes = require_errors_browser().codes;\n    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;\n    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;\n    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;\n    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n    var Duplex = require_stream_duplex();\n    require_inherits_browser()(Transform, Duplex);\n    function afterTransform(er, data) {\n      var ts = this._transformState;\n      ts.transforming = false;\n      var cb = ts.writecb;\n      if (cb === null) {\n        return this.emit(\"error\", new ERR_MULTIPLE_CALLBACK());\n      }\n      ts.writechunk = null;\n      ts.writecb = null;\n      if (data != null)\n        this.push(data);\n      cb(er);\n      var rs = this._readableState;\n      rs.reading = false;\n      if (rs.needReadable || rs.length < rs.highWaterMark) {\n        this._read(rs.highWaterMark);\n      }\n    }\n    function Transform(options) {\n      if (!(this instanceof Transform))\n        return new Transform(options);\n      Duplex.call(this, options);\n      this._transformState = {\n        afterTransform: afterTransform.bind(this),\n        needTransform: false,\n        transforming: false,\n        writecb: null,\n        writechunk: null,\n        writeencoding: null\n      };\n      this._readableState.needReadable = true;\n      this._readableState.sync = false;\n      if (options) {\n        if (typeof options.transform === \"function\")\n          this._transform = options.transform;\n        if (typeof options.flush === \"function\")\n          this._flush = options.flush;\n      }\n      this.on(\"prefinish\", prefinish);\n    }\n    function prefinish() {\n      var _this = this;\n      if (typeof this._flush === \"function\" && !this._readableState.destroyed) {\n        this._flush(function(er, data) {\n          done(_this, er, data);\n        });\n      } else {\n        done(this, null, null);\n      }\n    }\n    Transform.prototype.push = function(chunk, encoding) {\n      this._transformState.needTransform = false;\n      return Duplex.prototype.push.call(this, chunk, encoding);\n    };\n    Transform.prototype._transform = function(chunk, encoding, cb) {\n      cb(new ERR_METHOD_NOT_IMPLEMENTED(\"_transform()\"));\n    };\n    Transform.prototype._write = function(chunk, encoding, cb) {\n      var ts = this._transformState;\n      ts.writecb = cb;\n      ts.writechunk = chunk;\n      ts.writeencoding = encoding;\n      if (!ts.transforming) {\n        var rs = this._readableState;\n        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)\n          this._read(rs.highWaterMark);\n      }\n    };\n    Transform.prototype._read = function(n) {\n      var ts = this._transformState;\n      if (ts.writechunk !== null && !ts.transforming) {\n        ts.transforming = true;\n        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n      } else {\n        ts.needTransform = true;\n      }\n    };\n    Transform.prototype._destroy = function(err, cb) {\n      Duplex.prototype._destroy.call(this, err, function(err2) {\n        cb(err2);\n      });\n    };\n    function done(stream, er, data) {\n      if (er)\n        return stream.emit(\"error\", er);\n      if (data != null)\n        stream.push(data);\n      if (stream._writableState.length)\n        throw new ERR_TRANSFORM_WITH_LENGTH_0();\n      if (stream._transformState.transforming)\n        throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n      return stream.push(null);\n    }\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_passthrough.js\nvar require_stream_passthrough = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_passthrough.js\"(exports2, module2) {\n    \"use strict\";\n    module2.exports = PassThrough;\n    var Transform = require_stream_transform();\n    require_inherits_browser()(PassThrough, Transform);\n    function PassThrough(options) {\n      if (!(this instanceof PassThrough))\n        return new PassThrough(options);\n      Transform.call(this, options);\n    }\n    PassThrough.prototype._transform = function(chunk, encoding, cb) {\n      cb(null, chunk);\n    };\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/pipeline.js\nvar require_pipeline = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/pipeline.js\"(exports2, module2) {\n    \"use strict\";\n    var eos;\n    function once(callback) {\n      var called = false;\n      return function() {\n        if (called)\n          return;\n        called = true;\n        callback.apply(void 0, arguments);\n      };\n    }\n    var _require$codes = require_errors_browser().codes;\n    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;\n    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n    function noop(err) {\n      if (err)\n        throw err;\n    }\n    function isRequest(stream) {\n      return stream.setHeader && typeof stream.abort === \"function\";\n    }\n    function destroyer(stream, reading, writing, callback) {\n      callback = once(callback);\n      var closed = false;\n      stream.on(\"close\", function() {\n        closed = true;\n      });\n      if (eos === void 0)\n        eos = require_end_of_stream();\n      eos(stream, {\n        readable: reading,\n        writable: writing\n      }, function(err) {\n        if (err)\n          return callback(err);\n        closed = true;\n        callback();\n      });\n      var destroyed = false;\n      return function(err) {\n        if (closed)\n          return;\n        if (destroyed)\n          return;\n        destroyed = true;\n        if (isRequest(stream))\n          return stream.abort();\n        if (typeof stream.destroy === \"function\")\n          return stream.destroy();\n        callback(err || new ERR_STREAM_DESTROYED(\"pipe\"));\n      };\n    }\n    function call(fn) {\n      fn();\n    }\n    function pipe(from, to) {\n      return from.pipe(to);\n    }\n    function popCallback(streams) {\n      if (!streams.length)\n        return noop;\n      if (typeof streams[streams.length - 1] !== \"function\")\n        return noop;\n      return streams.pop();\n    }\n    function pipeline() {\n      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n        streams[_key] = arguments[_key];\n      }\n      var callback = popCallback(streams);\n      if (Array.isArray(streams[0]))\n        streams = streams[0];\n      if (streams.length < 2) {\n        throw new ERR_MISSING_ARGS(\"streams\");\n      }\n      var error;\n      var destroys = streams.map(function(stream, i) {\n        var reading = i < streams.length - 1;\n        var writing = i > 0;\n        return destroyer(stream, reading, writing, function(err) {\n          if (!error)\n            error = err;\n          if (err)\n            destroys.forEach(call);\n          if (reading)\n            return;\n          destroys.forEach(call);\n          callback(error);\n        });\n      });\n      return streams.reduce(pipe);\n    }\n    module2.exports = pipeline;\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/readable-browser.js\nvar require_readable_browser = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/readable-browser.js\"(exports2, module2) {\n    exports2 = module2.exports = require_stream_readable();\n    exports2.Stream = exports2;\n    exports2.Readable = exports2;\n    exports2.Writable = require_stream_writable();\n    exports2.Duplex = require_stream_duplex();\n    exports2.Transform = require_stream_transform();\n    exports2.PassThrough = require_stream_passthrough();\n    exports2.finished = require_end_of_stream();\n    exports2.pipeline = require_pipeline();\n  }\n});\n\n// packages/common/node-std/src/stream.js\nvar stream = require_readable_browser();\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n//# sourceMappingURL=stream.cjs.map\n\nexport default stream;\nexport { stream as __moduleExports };","start":1670465467214,"end":1670465467266,"order":"normal"},{"name":"polyfill-node","result":"import { default as process } from '\u0000polyfill-node.process';\n\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\n\"use strict\";\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\n\n// node_modules/.pnpm/events@3.3.0/node_modules/events/events.js\nvar require_events = __commonJS({\n  \"node_modules/.pnpm/events@3.3.0/node_modules/events/events.js\"(exports2, module2) {\n    \"use strict\";\n    var R = typeof Reflect === \"object\" ? Reflect : null;\n    var ReflectApply = R && typeof R.apply === \"function\" ? R.apply : function ReflectApply2(target, receiver, args) {\n      return Function.prototype.apply.call(target, receiver, args);\n    };\n    var ReflectOwnKeys;\n    if (R && typeof R.ownKeys === \"function\") {\n      ReflectOwnKeys = R.ownKeys;\n    } else if (Object.getOwnPropertySymbols) {\n      ReflectOwnKeys = function ReflectOwnKeys2(target) {\n        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));\n      };\n    } else {\n      ReflectOwnKeys = function ReflectOwnKeys2(target) {\n        return Object.getOwnPropertyNames(target);\n      };\n    }\n    function ProcessEmitWarning(warning) {\n      if (console && console.warn)\n        console.warn(warning);\n    }\n    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {\n      return value !== value;\n    };\n    function EventEmitter() {\n      EventEmitter.init.call(this);\n    }\n    module2.exports = EventEmitter;\n    module2.exports.once = once;\n    EventEmitter.EventEmitter = EventEmitter;\n    EventEmitter.prototype._events = void 0;\n    EventEmitter.prototype._eventsCount = 0;\n    EventEmitter.prototype._maxListeners = void 0;\n    var defaultMaxListeners = 10;\n    function checkListener(listener) {\n      if (typeof listener !== \"function\") {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n    }\n    Object.defineProperty(EventEmitter, \"defaultMaxListeners\", {\n      enumerable: true,\n      get: function() {\n        return defaultMaxListeners;\n      },\n      set: function(arg) {\n        if (typeof arg !== \"number\" || arg < 0 || NumberIsNaN(arg)) {\n          throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + \".\");\n        }\n        defaultMaxListeners = arg;\n      }\n    });\n    EventEmitter.init = function() {\n      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {\n        this._events = /* @__PURE__ */ Object.create(null);\n        this._eventsCount = 0;\n      }\n      this._maxListeners = this._maxListeners || void 0;\n    };\n    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n      if (typeof n !== \"number\" || n < 0 || NumberIsNaN(n)) {\n        throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + \".\");\n      }\n      this._maxListeners = n;\n      return this;\n    };\n    function _getMaxListeners(that) {\n      if (that._maxListeners === void 0)\n        return EventEmitter.defaultMaxListeners;\n      return that._maxListeners;\n    }\n    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n      return _getMaxListeners(this);\n    };\n    EventEmitter.prototype.emit = function emit(type) {\n      var args = [];\n      for (var i = 1; i < arguments.length; i++)\n        args.push(arguments[i]);\n      var doError = type === \"error\";\n      var events = this._events;\n      if (events !== void 0)\n        doError = doError && events.error === void 0;\n      else if (!doError)\n        return false;\n      if (doError) {\n        var er;\n        if (args.length > 0)\n          er = args[0];\n        if (er instanceof Error) {\n          throw er;\n        }\n        var err = new Error(\"Unhandled error.\" + (er ? \" (\" + er.message + \")\" : \"\"));\n        err.context = er;\n        throw err;\n      }\n      var handler = events[type];\n      if (handler === void 0)\n        return false;\n      if (typeof handler === \"function\") {\n        ReflectApply(handler, this, args);\n      } else {\n        var len = handler.length;\n        var listeners = arrayClone(handler, len);\n        for (var i = 0; i < len; ++i)\n          ReflectApply(listeners[i], this, args);\n      }\n      return true;\n    };\n    function _addListener(target, type, listener, prepend) {\n      var m;\n      var events;\n      var existing;\n      checkListener(listener);\n      events = target._events;\n      if (events === void 0) {\n        events = target._events = /* @__PURE__ */ Object.create(null);\n        target._eventsCount = 0;\n      } else {\n        if (events.newListener !== void 0) {\n          target.emit(\n            \"newListener\",\n            type,\n            listener.listener ? listener.listener : listener\n          );\n          events = target._events;\n        }\n        existing = events[type];\n      }\n      if (existing === void 0) {\n        existing = events[type] = listener;\n        ++target._eventsCount;\n      } else {\n        if (typeof existing === \"function\") {\n          existing = events[type] = prepend ? [listener, existing] : [existing, listener];\n        } else if (prepend) {\n          existing.unshift(listener);\n        } else {\n          existing.push(listener);\n        }\n        m = _getMaxListeners(target);\n        if (m > 0 && existing.length > m && !existing.warned) {\n          existing.warned = true;\n          var w = new Error(\"Possible EventEmitter memory leak detected. \" + existing.length + \" \" + String(type) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n          w.name = \"MaxListenersExceededWarning\";\n          w.emitter = target;\n          w.type = type;\n          w.count = existing.length;\n          ProcessEmitWarning(w);\n        }\n      }\n      return target;\n    }\n    EventEmitter.prototype.addListener = function addListener(type, listener) {\n      return _addListener(this, type, listener, false);\n    };\n    EventEmitter.prototype.on = EventEmitter.prototype.addListener;\n    EventEmitter.prototype.prependListener = function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n    function onceWrapper() {\n      if (!this.fired) {\n        this.target.removeListener(this.type, this.wrapFn);\n        this.fired = true;\n        if (arguments.length === 0)\n          return this.listener.call(this.target);\n        return this.listener.apply(this.target, arguments);\n      }\n    }\n    function _onceWrap(target, type, listener) {\n      var state = { fired: false, wrapFn: void 0, target, type, listener };\n      var wrapped = onceWrapper.bind(state);\n      wrapped.listener = listener;\n      state.wrapFn = wrapped;\n      return wrapped;\n    }\n    EventEmitter.prototype.once = function once2(type, listener) {\n      checkListener(listener);\n      this.on(type, _onceWrap(this, type, listener));\n      return this;\n    };\n    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n    EventEmitter.prototype.removeListener = function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n      checkListener(listener);\n      events = this._events;\n      if (events === void 0)\n        return this;\n      list = events[type];\n      if (list === void 0)\n        return this;\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = /* @__PURE__ */ Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit(\"removeListener\", type, list.listener || listener);\n        }\n      } else if (typeof list !== \"function\") {\n        position = -1;\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n        if (position < 0)\n          return this;\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n        if (list.length === 1)\n          events[type] = list[0];\n        if (events.removeListener !== void 0)\n          this.emit(\"removeListener\", type, originalListener || listener);\n      }\n      return this;\n    };\n    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {\n      var listeners, events, i;\n      events = this._events;\n      if (events === void 0)\n        return this;\n      if (events.removeListener === void 0) {\n        if (arguments.length === 0) {\n          this._events = /* @__PURE__ */ Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== void 0) {\n          if (--this._eventsCount === 0)\n            this._events = /* @__PURE__ */ Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === \"removeListener\")\n            continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners(\"removeListener\");\n        this._events = /* @__PURE__ */ Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n      listeners = events[type];\n      if (typeof listeners === \"function\") {\n        this.removeListener(type, listeners);\n      } else if (listeners !== void 0) {\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n      return this;\n    };\n    function _listeners(target, type, unwrap) {\n      var events = target._events;\n      if (events === void 0)\n        return [];\n      var evlistener = events[type];\n      if (evlistener === void 0)\n        return [];\n      if (typeof evlistener === \"function\")\n        return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n    }\n    EventEmitter.prototype.listeners = function listeners(type) {\n      return _listeners(this, type, true);\n    };\n    EventEmitter.prototype.rawListeners = function rawListeners(type) {\n      return _listeners(this, type, false);\n    };\n    EventEmitter.listenerCount = function(emitter, type) {\n      if (typeof emitter.listenerCount === \"function\") {\n        return emitter.listenerCount(type);\n      } else {\n        return listenerCount.call(emitter, type);\n      }\n    };\n    EventEmitter.prototype.listenerCount = listenerCount;\n    function listenerCount(type) {\n      var events = this._events;\n      if (events !== void 0) {\n        var evlistener = events[type];\n        if (typeof evlistener === \"function\") {\n          return 1;\n        } else if (evlistener !== void 0) {\n          return evlistener.length;\n        }\n      }\n      return 0;\n    }\n    EventEmitter.prototype.eventNames = function eventNames() {\n      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n    };\n    function arrayClone(arr, n) {\n      var copy = new Array(n);\n      for (var i = 0; i < n; ++i)\n        copy[i] = arr[i];\n      return copy;\n    }\n    function spliceOne(list, index) {\n      for (; index + 1 < list.length; index++)\n        list[index] = list[index + 1];\n      list.pop();\n    }\n    function unwrapListeners(arr) {\n      var ret = new Array(arr.length);\n      for (var i = 0; i < ret.length; ++i) {\n        ret[i] = arr[i].listener || arr[i];\n      }\n      return ret;\n    }\n    function once(emitter, name) {\n      return new Promise(function(resolve, reject) {\n        function errorListener(err) {\n          emitter.removeListener(name, resolver);\n          reject(err);\n        }\n        function resolver() {\n          if (typeof emitter.removeListener === \"function\") {\n            emitter.removeListener(\"error\", errorListener);\n          }\n          resolve([].slice.call(arguments));\n        }\n        ;\n        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n        if (name !== \"error\") {\n          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n        }\n      });\n    }\n    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n      if (typeof emitter.on === \"function\") {\n        eventTargetAgnosticAddListener(emitter, \"error\", handler, flags);\n      }\n    }\n    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n      if (typeof emitter.on === \"function\") {\n        if (flags.once) {\n          emitter.once(name, listener);\n        } else {\n          emitter.on(name, listener);\n        }\n      } else if (typeof emitter.addEventListener === \"function\") {\n        emitter.addEventListener(name, function wrapListener(arg) {\n          if (flags.once) {\n            emitter.removeEventListener(name, wrapListener);\n          }\n          listener(arg);\n        });\n      } else {\n        throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n      }\n    }\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/stream-browser.js\nvar require_stream_browser = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/stream-browser.js\"(exports2, module2) {\n    module2.exports = require_events().EventEmitter;\n  }\n});\n\n// node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\nvar require_base64_js = __commonJS({\n  \"node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js\"(exports2) {\n    \"use strict\";\n    exports2.byteLength = byteLength;\n    exports2.toByteArray = toByteArray;\n    exports2.fromByteArray = fromByteArray;\n    var lookup = [];\n    var revLookup = [];\n    var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n    var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for (i = 0, len = code.length; i < len; ++i) {\n      lookup[i] = code[i];\n      revLookup[code.charCodeAt(i)] = i;\n    }\n    var i;\n    var len;\n    revLookup[\"-\".charCodeAt(0)] = 62;\n    revLookup[\"_\".charCodeAt(0)] = 63;\n    function getLens(b64) {\n      var len2 = b64.length;\n      if (len2 % 4 > 0) {\n        throw new Error(\"Invalid string. Length must be a multiple of 4\");\n      }\n      var validLen = b64.indexOf(\"=\");\n      if (validLen === -1)\n        validLen = len2;\n      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;\n      return [validLen, placeHoldersLen];\n    }\n    function byteLength(b64) {\n      var lens = getLens(b64);\n      var validLen = lens[0];\n      var placeHoldersLen = lens[1];\n      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n    }\n    function _byteLength(b64, validLen, placeHoldersLen) {\n      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n    }\n    function toByteArray(b64) {\n      var tmp;\n      var lens = getLens(b64);\n      var validLen = lens[0];\n      var placeHoldersLen = lens[1];\n      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n      var curByte = 0;\n      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;\n      var i2;\n      for (i2 = 0; i2 < len2; i2 += 4) {\n        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n        arr[curByte++] = tmp >> 16 & 255;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n      }\n      if (placeHoldersLen === 2) {\n        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n        arr[curByte++] = tmp & 255;\n      }\n      if (placeHoldersLen === 1) {\n        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n      }\n      return arr;\n    }\n    function tripletToBase64(num) {\n      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n    }\n    function encodeChunk(uint8, start, end) {\n      var tmp;\n      var output = [];\n      for (var i2 = start; i2 < end; i2 += 3) {\n        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);\n        output.push(tripletToBase64(tmp));\n      }\n      return output.join(\"\");\n    }\n    function fromByteArray(uint8) {\n      var tmp;\n      var len2 = uint8.length;\n      var extraBytes = len2 % 3;\n      var parts = [];\n      var maxChunkLength = 16383;\n      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {\n        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));\n      }\n      if (extraBytes === 1) {\n        tmp = uint8[len2 - 1];\n        parts.push(\n          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\"\n        );\n      } else if (extraBytes === 2) {\n        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];\n        parts.push(\n          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\"\n        );\n      }\n      return parts.join(\"\");\n    }\n  }\n});\n\n// node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\nvar require_ieee754 = __commonJS({\n  \"node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js\"(exports2) {\n    exports2.read = function(buffer, offset, isLE, mLen, nBytes) {\n      var e, m;\n      var eLen = nBytes * 8 - mLen - 1;\n      var eMax = (1 << eLen) - 1;\n      var eBias = eMax >> 1;\n      var nBits = -7;\n      var i = isLE ? nBytes - 1 : 0;\n      var d = isLE ? -1 : 1;\n      var s = buffer[offset + i];\n      i += d;\n      e = s & (1 << -nBits) - 1;\n      s >>= -nBits;\n      nBits += eLen;\n      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {\n      }\n      m = e & (1 << -nBits) - 1;\n      e >>= -nBits;\n      nBits += mLen;\n      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {\n      }\n      if (e === 0) {\n        e = 1 - eBias;\n      } else if (e === eMax) {\n        return m ? NaN : (s ? -1 : 1) * Infinity;\n      } else {\n        m = m + Math.pow(2, mLen);\n        e = e - eBias;\n      }\n      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n    };\n    exports2.write = function(buffer, value, offset, isLE, mLen, nBytes) {\n      var e, m, c;\n      var eLen = nBytes * 8 - mLen - 1;\n      var eMax = (1 << eLen) - 1;\n      var eBias = eMax >> 1;\n      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n      var i = isLE ? 0 : nBytes - 1;\n      var d = isLE ? 1 : -1;\n      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n      value = Math.abs(value);\n      if (isNaN(value) || value === Infinity) {\n        m = isNaN(value) ? 1 : 0;\n        e = eMax;\n      } else {\n        e = Math.floor(Math.log(value) / Math.LN2);\n        if (value * (c = Math.pow(2, -e)) < 1) {\n          e--;\n          c *= 2;\n        }\n        if (e + eBias >= 1) {\n          value += rt / c;\n        } else {\n          value += rt * Math.pow(2, 1 - eBias);\n        }\n        if (value * c >= 2) {\n          e++;\n          c /= 2;\n        }\n        if (e + eBias >= eMax) {\n          m = 0;\n          e = eMax;\n        } else if (e + eBias >= 1) {\n          m = (value * c - 1) * Math.pow(2, mLen);\n          e = e + eBias;\n        } else {\n          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n          e = 0;\n        }\n      }\n      for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {\n      }\n      e = e << mLen | m;\n      eLen += mLen;\n      for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {\n      }\n      buffer[offset + i - d] |= s * 128;\n    };\n  }\n});\n\n// node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js\nvar require_buffer = __commonJS({\n  \"node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.js\"(exports2) {\n    \"use strict\";\n    var base64 = require_base64_js();\n    var ieee754 = require_ieee754();\n    var customInspectSymbol = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") : null;\n    exports2.Buffer = Buffer2;\n    exports2.SlowBuffer = SlowBuffer;\n    exports2.INSPECT_MAX_BYTES = 50;\n    var K_MAX_LENGTH = 2147483647;\n    exports2.kMaxLength = K_MAX_LENGTH;\n    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();\n    if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n      console.error(\n        \"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\"\n      );\n    }\n    function typedArraySupport() {\n      try {\n        const arr = new Uint8Array(1);\n        const proto = { foo: function() {\n          return 42;\n        } };\n        Object.setPrototypeOf(proto, Uint8Array.prototype);\n        Object.setPrototypeOf(arr, proto);\n        return arr.foo() === 42;\n      } catch (e) {\n        return false;\n      }\n    }\n    Object.defineProperty(Buffer2.prototype, \"parent\", {\n      enumerable: true,\n      get: function() {\n        if (!Buffer2.isBuffer(this))\n          return void 0;\n        return this.buffer;\n      }\n    });\n    Object.defineProperty(Buffer2.prototype, \"offset\", {\n      enumerable: true,\n      get: function() {\n        if (!Buffer2.isBuffer(this))\n          return void 0;\n        return this.byteOffset;\n      }\n    });\n    function createBuffer(length) {\n      if (length > K_MAX_LENGTH) {\n        throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n      }\n      const buf = new Uint8Array(length);\n      Object.setPrototypeOf(buf, Buffer2.prototype);\n      return buf;\n    }\n    function Buffer2(arg, encodingOrOffset, length) {\n      if (typeof arg === \"number\") {\n        if (typeof encodingOrOffset === \"string\") {\n          throw new TypeError(\n            'The \"string\" argument must be of type string. Received type number'\n          );\n        }\n        return allocUnsafe(arg);\n      }\n      return from(arg, encodingOrOffset, length);\n    }\n    Buffer2.poolSize = 8192;\n    function from(value, encodingOrOffset, length) {\n      if (typeof value === \"string\") {\n        return fromString(value, encodingOrOffset);\n      }\n      if (ArrayBuffer.isView(value)) {\n        return fromArrayView(value);\n      }\n      if (value == null) {\n        throw new TypeError(\n          \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n        );\n      }\n      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n      }\n      if (typeof SharedArrayBuffer !== \"undefined\" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {\n        return fromArrayBuffer(value, encodingOrOffset, length);\n      }\n      if (typeof value === \"number\") {\n        throw new TypeError(\n          'The \"value\" argument must not be of type number. Received type number'\n        );\n      }\n      const valueOf = value.valueOf && value.valueOf();\n      if (valueOf != null && valueOf !== value) {\n        return Buffer2.from(valueOf, encodingOrOffset, length);\n      }\n      const b = fromObject(value);\n      if (b)\n        return b;\n      if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n        return Buffer2.from(value[Symbol.toPrimitive](\"string\"), encodingOrOffset, length);\n      }\n      throw new TypeError(\n        \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value\n      );\n    }\n    Buffer2.from = function(value, encodingOrOffset, length) {\n      return from(value, encodingOrOffset, length);\n    };\n    Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);\n    Object.setPrototypeOf(Buffer2, Uint8Array);\n    function assertSize(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError('\"size\" argument must be of type number');\n      } else if (size < 0) {\n        throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n      }\n    }\n    function alloc(size, fill, encoding) {\n      assertSize(size);\n      if (size <= 0) {\n        return createBuffer(size);\n      }\n      if (fill !== void 0) {\n        return typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n      }\n      return createBuffer(size);\n    }\n    Buffer2.alloc = function(size, fill, encoding) {\n      return alloc(size, fill, encoding);\n    };\n    function allocUnsafe(size) {\n      assertSize(size);\n      return createBuffer(size < 0 ? 0 : checked(size) | 0);\n    }\n    Buffer2.allocUnsafe = function(size) {\n      return allocUnsafe(size);\n    };\n    Buffer2.allocUnsafeSlow = function(size) {\n      return allocUnsafe(size);\n    };\n    function fromString(string, encoding) {\n      if (typeof encoding !== \"string\" || encoding === \"\") {\n        encoding = \"utf8\";\n      }\n      if (!Buffer2.isEncoding(encoding)) {\n        throw new TypeError(\"Unknown encoding: \" + encoding);\n      }\n      const length = byteLength(string, encoding) | 0;\n      let buf = createBuffer(length);\n      const actual = buf.write(string, encoding);\n      if (actual !== length) {\n        buf = buf.slice(0, actual);\n      }\n      return buf;\n    }\n    function fromArrayLike(array) {\n      const length = array.length < 0 ? 0 : checked(array.length) | 0;\n      const buf = createBuffer(length);\n      for (let i = 0; i < length; i += 1) {\n        buf[i] = array[i] & 255;\n      }\n      return buf;\n    }\n    function fromArrayView(arrayView) {\n      if (isInstance(arrayView, Uint8Array)) {\n        const copy = new Uint8Array(arrayView);\n        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);\n      }\n      return fromArrayLike(arrayView);\n    }\n    function fromArrayBuffer(array, byteOffset, length) {\n      if (byteOffset < 0 || array.byteLength < byteOffset) {\n        throw new RangeError('\"offset\" is outside of buffer bounds');\n      }\n      if (array.byteLength < byteOffset + (length || 0)) {\n        throw new RangeError('\"length\" is outside of buffer bounds');\n      }\n      let buf;\n      if (byteOffset === void 0 && length === void 0) {\n        buf = new Uint8Array(array);\n      } else if (length === void 0) {\n        buf = new Uint8Array(array, byteOffset);\n      } else {\n        buf = new Uint8Array(array, byteOffset, length);\n      }\n      Object.setPrototypeOf(buf, Buffer2.prototype);\n      return buf;\n    }\n    function fromObject(obj) {\n      if (Buffer2.isBuffer(obj)) {\n        const len = checked(obj.length) | 0;\n        const buf = createBuffer(len);\n        if (buf.length === 0) {\n          return buf;\n        }\n        obj.copy(buf, 0, 0, len);\n        return buf;\n      }\n      if (obj.length !== void 0) {\n        if (typeof obj.length !== \"number\" || numberIsNaN(obj.length)) {\n          return createBuffer(0);\n        }\n        return fromArrayLike(obj);\n      }\n      if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n        return fromArrayLike(obj.data);\n      }\n    }\n    function checked(length) {\n      if (length >= K_MAX_LENGTH) {\n        throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + K_MAX_LENGTH.toString(16) + \" bytes\");\n      }\n      return length | 0;\n    }\n    function SlowBuffer(length) {\n      if (+length != length) {\n        length = 0;\n      }\n      return Buffer2.alloc(+length);\n    }\n    Buffer2.isBuffer = function isBuffer(b) {\n      return b != null && b._isBuffer === true && b !== Buffer2.prototype;\n    };\n    Buffer2.compare = function compare(a, b) {\n      if (isInstance(a, Uint8Array))\n        a = Buffer2.from(a, a.offset, a.byteLength);\n      if (isInstance(b, Uint8Array))\n        b = Buffer2.from(b, b.offset, b.byteLength);\n      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {\n        throw new TypeError(\n          'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n        );\n      }\n      if (a === b)\n        return 0;\n      let x = a.length;\n      let y = b.length;\n      for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n        if (a[i] !== b[i]) {\n          x = a[i];\n          y = b[i];\n          break;\n        }\n      }\n      if (x < y)\n        return -1;\n      if (y < x)\n        return 1;\n      return 0;\n    };\n    Buffer2.isEncoding = function isEncoding(encoding) {\n      switch (String(encoding).toLowerCase()) {\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n          return true;\n        default:\n          return false;\n      }\n    };\n    Buffer2.concat = function concat(list, length) {\n      if (!Array.isArray(list)) {\n        throw new TypeError('\"list\" argument must be an Array of Buffers');\n      }\n      if (list.length === 0) {\n        return Buffer2.alloc(0);\n      }\n      let i;\n      if (length === void 0) {\n        length = 0;\n        for (i = 0; i < list.length; ++i) {\n          length += list[i].length;\n        }\n      }\n      const buffer = Buffer2.allocUnsafe(length);\n      let pos = 0;\n      for (i = 0; i < list.length; ++i) {\n        let buf = list[i];\n        if (isInstance(buf, Uint8Array)) {\n          if (pos + buf.length > buffer.length) {\n            if (!Buffer2.isBuffer(buf))\n              buf = Buffer2.from(buf);\n            buf.copy(buffer, pos);\n          } else {\n            Uint8Array.prototype.set.call(\n              buffer,\n              buf,\n              pos\n            );\n          }\n        } else if (!Buffer2.isBuffer(buf)) {\n          throw new TypeError('\"list\" argument must be an Array of Buffers');\n        } else {\n          buf.copy(buffer, pos);\n        }\n        pos += buf.length;\n      }\n      return buffer;\n    };\n    function byteLength(string, encoding) {\n      if (Buffer2.isBuffer(string)) {\n        return string.length;\n      }\n      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n        return string.byteLength;\n      }\n      if (typeof string !== \"string\") {\n        throw new TypeError(\n          'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string\n        );\n      }\n      const len = string.length;\n      const mustMatch = arguments.length > 2 && arguments[2] === true;\n      if (!mustMatch && len === 0)\n        return 0;\n      let loweredCase = false;\n      for (; ; ) {\n        switch (encoding) {\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n            return len;\n          case \"utf8\":\n          case \"utf-8\":\n            return utf8ToBytes(string).length;\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return len * 2;\n          case \"hex\":\n            return len >>> 1;\n          case \"base64\":\n            return base64ToBytes(string).length;\n          default:\n            if (loweredCase) {\n              return mustMatch ? -1 : utf8ToBytes(string).length;\n            }\n            encoding = (\"\" + encoding).toLowerCase();\n            loweredCase = true;\n        }\n      }\n    }\n    Buffer2.byteLength = byteLength;\n    function slowToString(encoding, start, end) {\n      let loweredCase = false;\n      if (start === void 0 || start < 0) {\n        start = 0;\n      }\n      if (start > this.length) {\n        return \"\";\n      }\n      if (end === void 0 || end > this.length) {\n        end = this.length;\n      }\n      if (end <= 0) {\n        return \"\";\n      }\n      end >>>= 0;\n      start >>>= 0;\n      if (end <= start) {\n        return \"\";\n      }\n      if (!encoding)\n        encoding = \"utf8\";\n      while (true) {\n        switch (encoding) {\n          case \"hex\":\n            return hexSlice(this, start, end);\n          case \"utf8\":\n          case \"utf-8\":\n            return utf8Slice(this, start, end);\n          case \"ascii\":\n            return asciiSlice(this, start, end);\n          case \"latin1\":\n          case \"binary\":\n            return latin1Slice(this, start, end);\n          case \"base64\":\n            return base64Slice(this, start, end);\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return utf16leSlice(this, start, end);\n          default:\n            if (loweredCase)\n              throw new TypeError(\"Unknown encoding: \" + encoding);\n            encoding = (encoding + \"\").toLowerCase();\n            loweredCase = true;\n        }\n      }\n    }\n    Buffer2.prototype._isBuffer = true;\n    function swap(b, n, m) {\n      const i = b[n];\n      b[n] = b[m];\n      b[m] = i;\n    }\n    Buffer2.prototype.swap16 = function swap16() {\n      const len = this.length;\n      if (len % 2 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n      }\n      for (let i = 0; i < len; i += 2) {\n        swap(this, i, i + 1);\n      }\n      return this;\n    };\n    Buffer2.prototype.swap32 = function swap32() {\n      const len = this.length;\n      if (len % 4 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n      }\n      for (let i = 0; i < len; i += 4) {\n        swap(this, i, i + 3);\n        swap(this, i + 1, i + 2);\n      }\n      return this;\n    };\n    Buffer2.prototype.swap64 = function swap64() {\n      const len = this.length;\n      if (len % 8 !== 0) {\n        throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n      }\n      for (let i = 0; i < len; i += 8) {\n        swap(this, i, i + 7);\n        swap(this, i + 1, i + 6);\n        swap(this, i + 2, i + 5);\n        swap(this, i + 3, i + 4);\n      }\n      return this;\n    };\n    Buffer2.prototype.toString = function toString() {\n      const length = this.length;\n      if (length === 0)\n        return \"\";\n      if (arguments.length === 0)\n        return utf8Slice(this, 0, length);\n      return slowToString.apply(this, arguments);\n    };\n    Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;\n    Buffer2.prototype.equals = function equals(b) {\n      if (!Buffer2.isBuffer(b))\n        throw new TypeError(\"Argument must be a Buffer\");\n      if (this === b)\n        return true;\n      return Buffer2.compare(this, b) === 0;\n    };\n    Buffer2.prototype.inspect = function inspect() {\n      let str = \"\";\n      const max = exports2.INSPECT_MAX_BYTES;\n      str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n      if (this.length > max)\n        str += \" ... \";\n      return \"<Buffer \" + str + \">\";\n    };\n    if (customInspectSymbol) {\n      Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;\n    }\n    Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n      if (isInstance(target, Uint8Array)) {\n        target = Buffer2.from(target, target.offset, target.byteLength);\n      }\n      if (!Buffer2.isBuffer(target)) {\n        throw new TypeError(\n          'The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target\n        );\n      }\n      if (start === void 0) {\n        start = 0;\n      }\n      if (end === void 0) {\n        end = target ? target.length : 0;\n      }\n      if (thisStart === void 0) {\n        thisStart = 0;\n      }\n      if (thisEnd === void 0) {\n        thisEnd = this.length;\n      }\n      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n        throw new RangeError(\"out of range index\");\n      }\n      if (thisStart >= thisEnd && start >= end) {\n        return 0;\n      }\n      if (thisStart >= thisEnd) {\n        return -1;\n      }\n      if (start >= end) {\n        return 1;\n      }\n      start >>>= 0;\n      end >>>= 0;\n      thisStart >>>= 0;\n      thisEnd >>>= 0;\n      if (this === target)\n        return 0;\n      let x = thisEnd - thisStart;\n      let y = end - start;\n      const len = Math.min(x, y);\n      const thisCopy = this.slice(thisStart, thisEnd);\n      const targetCopy = target.slice(start, end);\n      for (let i = 0; i < len; ++i) {\n        if (thisCopy[i] !== targetCopy[i]) {\n          x = thisCopy[i];\n          y = targetCopy[i];\n          break;\n        }\n      }\n      if (x < y)\n        return -1;\n      if (y < x)\n        return 1;\n      return 0;\n    };\n    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n      if (buffer.length === 0)\n        return -1;\n      if (typeof byteOffset === \"string\") {\n        encoding = byteOffset;\n        byteOffset = 0;\n      } else if (byteOffset > 2147483647) {\n        byteOffset = 2147483647;\n      } else if (byteOffset < -2147483648) {\n        byteOffset = -2147483648;\n      }\n      byteOffset = +byteOffset;\n      if (numberIsNaN(byteOffset)) {\n        byteOffset = dir ? 0 : buffer.length - 1;\n      }\n      if (byteOffset < 0)\n        byteOffset = buffer.length + byteOffset;\n      if (byteOffset >= buffer.length) {\n        if (dir)\n          return -1;\n        else\n          byteOffset = buffer.length - 1;\n      } else if (byteOffset < 0) {\n        if (dir)\n          byteOffset = 0;\n        else\n          return -1;\n      }\n      if (typeof val === \"string\") {\n        val = Buffer2.from(val, encoding);\n      }\n      if (Buffer2.isBuffer(val)) {\n        if (val.length === 0) {\n          return -1;\n        }\n        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n      } else if (typeof val === \"number\") {\n        val = val & 255;\n        if (typeof Uint8Array.prototype.indexOf === \"function\") {\n          if (dir) {\n            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n          } else {\n            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n          }\n        }\n        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n      }\n      throw new TypeError(\"val must be string, number or Buffer\");\n    }\n    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n      let indexSize = 1;\n      let arrLength = arr.length;\n      let valLength = val.length;\n      if (encoding !== void 0) {\n        encoding = String(encoding).toLowerCase();\n        if (encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\") {\n          if (arr.length < 2 || val.length < 2) {\n            return -1;\n          }\n          indexSize = 2;\n          arrLength /= 2;\n          valLength /= 2;\n          byteOffset /= 2;\n        }\n      }\n      function read(buf, i2) {\n        if (indexSize === 1) {\n          return buf[i2];\n        } else {\n          return buf.readUInt16BE(i2 * indexSize);\n        }\n      }\n      let i;\n      if (dir) {\n        let foundIndex = -1;\n        for (i = byteOffset; i < arrLength; i++) {\n          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n            if (foundIndex === -1)\n              foundIndex = i;\n            if (i - foundIndex + 1 === valLength)\n              return foundIndex * indexSize;\n          } else {\n            if (foundIndex !== -1)\n              i -= i - foundIndex;\n            foundIndex = -1;\n          }\n        }\n      } else {\n        if (byteOffset + valLength > arrLength)\n          byteOffset = arrLength - valLength;\n        for (i = byteOffset; i >= 0; i--) {\n          let found = true;\n          for (let j = 0; j < valLength; j++) {\n            if (read(arr, i + j) !== read(val, j)) {\n              found = false;\n              break;\n            }\n          }\n          if (found)\n            return i;\n        }\n      }\n      return -1;\n    }\n    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {\n      return this.indexOf(val, byteOffset, encoding) !== -1;\n    };\n    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n    };\n    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n    };\n    function hexWrite(buf, string, offset, length) {\n      offset = Number(offset) || 0;\n      const remaining = buf.length - offset;\n      if (!length) {\n        length = remaining;\n      } else {\n        length = Number(length);\n        if (length > remaining) {\n          length = remaining;\n        }\n      }\n      const strLen = string.length;\n      if (length > strLen / 2) {\n        length = strLen / 2;\n      }\n      let i;\n      for (i = 0; i < length; ++i) {\n        const parsed = parseInt(string.substr(i * 2, 2), 16);\n        if (numberIsNaN(parsed))\n          return i;\n        buf[offset + i] = parsed;\n      }\n      return i;\n    }\n    function utf8Write(buf, string, offset, length) {\n      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n    }\n    function asciiWrite(buf, string, offset, length) {\n      return blitBuffer(asciiToBytes(string), buf, offset, length);\n    }\n    function base64Write(buf, string, offset, length) {\n      return blitBuffer(base64ToBytes(string), buf, offset, length);\n    }\n    function ucs2Write(buf, string, offset, length) {\n      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n    }\n    Buffer2.prototype.write = function write(string, offset, length, encoding) {\n      if (offset === void 0) {\n        encoding = \"utf8\";\n        length = this.length;\n        offset = 0;\n      } else if (length === void 0 && typeof offset === \"string\") {\n        encoding = offset;\n        length = this.length;\n        offset = 0;\n      } else if (isFinite(offset)) {\n        offset = offset >>> 0;\n        if (isFinite(length)) {\n          length = length >>> 0;\n          if (encoding === void 0)\n            encoding = \"utf8\";\n        } else {\n          encoding = length;\n          length = void 0;\n        }\n      } else {\n        throw new Error(\n          \"Buffer.write(string, encoding, offset[, length]) is no longer supported\"\n        );\n      }\n      const remaining = this.length - offset;\n      if (length === void 0 || length > remaining)\n        length = remaining;\n      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n        throw new RangeError(\"Attempt to write outside buffer bounds\");\n      }\n      if (!encoding)\n        encoding = \"utf8\";\n      let loweredCase = false;\n      for (; ; ) {\n        switch (encoding) {\n          case \"hex\":\n            return hexWrite(this, string, offset, length);\n          case \"utf8\":\n          case \"utf-8\":\n            return utf8Write(this, string, offset, length);\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n            return asciiWrite(this, string, offset, length);\n          case \"base64\":\n            return base64Write(this, string, offset, length);\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return ucs2Write(this, string, offset, length);\n          default:\n            if (loweredCase)\n              throw new TypeError(\"Unknown encoding: \" + encoding);\n            encoding = (\"\" + encoding).toLowerCase();\n            loweredCase = true;\n        }\n      }\n    };\n    Buffer2.prototype.toJSON = function toJSON() {\n      return {\n        type: \"Buffer\",\n        data: Array.prototype.slice.call(this._arr || this, 0)\n      };\n    };\n    function base64Slice(buf, start, end) {\n      if (start === 0 && end === buf.length) {\n        return base64.fromByteArray(buf);\n      } else {\n        return base64.fromByteArray(buf.slice(start, end));\n      }\n    }\n    function utf8Slice(buf, start, end) {\n      end = Math.min(buf.length, end);\n      const res = [];\n      let i = start;\n      while (i < end) {\n        const firstByte = buf[i];\n        let codePoint = null;\n        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n        if (i + bytesPerSequence <= end) {\n          let secondByte, thirdByte, fourthByte, tempCodePoint;\n          switch (bytesPerSequence) {\n            case 1:\n              if (firstByte < 128) {\n                codePoint = firstByte;\n              }\n              break;\n            case 2:\n              secondByte = buf[i + 1];\n              if ((secondByte & 192) === 128) {\n                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n                if (tempCodePoint > 127) {\n                  codePoint = tempCodePoint;\n                }\n              }\n              break;\n            case 3:\n              secondByte = buf[i + 1];\n              thirdByte = buf[i + 2];\n              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n                  codePoint = tempCodePoint;\n                }\n              }\n              break;\n            case 4:\n              secondByte = buf[i + 1];\n              thirdByte = buf[i + 2];\n              fourthByte = buf[i + 3];\n              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n                  codePoint = tempCodePoint;\n                }\n              }\n          }\n        }\n        if (codePoint === null) {\n          codePoint = 65533;\n          bytesPerSequence = 1;\n        } else if (codePoint > 65535) {\n          codePoint -= 65536;\n          res.push(codePoint >>> 10 & 1023 | 55296);\n          codePoint = 56320 | codePoint & 1023;\n        }\n        res.push(codePoint);\n        i += bytesPerSequence;\n      }\n      return decodeCodePointsArray(res);\n    }\n    var MAX_ARGUMENTS_LENGTH = 4096;\n    function decodeCodePointsArray(codePoints) {\n      const len = codePoints.length;\n      if (len <= MAX_ARGUMENTS_LENGTH) {\n        return String.fromCharCode.apply(String, codePoints);\n      }\n      let res = \"\";\n      let i = 0;\n      while (i < len) {\n        res += String.fromCharCode.apply(\n          String,\n          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n        );\n      }\n      return res;\n    }\n    function asciiSlice(buf, start, end) {\n      let ret = \"\";\n      end = Math.min(buf.length, end);\n      for (let i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i] & 127);\n      }\n      return ret;\n    }\n    function latin1Slice(buf, start, end) {\n      let ret = \"\";\n      end = Math.min(buf.length, end);\n      for (let i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i]);\n      }\n      return ret;\n    }\n    function hexSlice(buf, start, end) {\n      const len = buf.length;\n      if (!start || start < 0)\n        start = 0;\n      if (!end || end < 0 || end > len)\n        end = len;\n      let out = \"\";\n      for (let i = start; i < end; ++i) {\n        out += hexSliceLookupTable[buf[i]];\n      }\n      return out;\n    }\n    function utf16leSlice(buf, start, end) {\n      const bytes = buf.slice(start, end);\n      let res = \"\";\n      for (let i = 0; i < bytes.length - 1; i += 2) {\n        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n      }\n      return res;\n    }\n    Buffer2.prototype.slice = function slice(start, end) {\n      const len = this.length;\n      start = ~~start;\n      end = end === void 0 ? len : ~~end;\n      if (start < 0) {\n        start += len;\n        if (start < 0)\n          start = 0;\n      } else if (start > len) {\n        start = len;\n      }\n      if (end < 0) {\n        end += len;\n        if (end < 0)\n          end = 0;\n      } else if (end > len) {\n        end = len;\n      }\n      if (end < start)\n        end = start;\n      const newBuf = this.subarray(start, end);\n      Object.setPrototypeOf(newBuf, Buffer2.prototype);\n      return newBuf;\n    };\n    function checkOffset(offset, ext, length) {\n      if (offset % 1 !== 0 || offset < 0)\n        throw new RangeError(\"offset is not uint\");\n      if (offset + ext > length)\n        throw new RangeError(\"Trying to access beyond buffer length\");\n    }\n    Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert)\n        checkOffset(offset, byteLength2, this.length);\n      let val = this[offset];\n      let mul = 1;\n      let i = 0;\n      while (++i < byteLength2 && (mul *= 256)) {\n        val += this[offset + i] * mul;\n      }\n      return val;\n    };\n    Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        checkOffset(offset, byteLength2, this.length);\n      }\n      let val = this[offset + --byteLength2];\n      let mul = 1;\n      while (byteLength2 > 0 && (mul *= 256)) {\n        val += this[offset + --byteLength2] * mul;\n      }\n      return val;\n    };\n    Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 1, this.length);\n      return this[offset];\n    };\n    Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      return this[offset] | this[offset + 1] << 8;\n    };\n    Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      return this[offset] << 8 | this[offset + 1];\n    };\n    Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;\n    };\n    Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n    };\n    Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, \"offset\");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;\n      const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;\n      return BigInt(lo) + (BigInt(hi) << BigInt(32));\n    });\n    Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, \"offset\");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n      const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;\n      return (BigInt(hi) << BigInt(32)) + BigInt(lo);\n    });\n    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert)\n        checkOffset(offset, byteLength2, this.length);\n      let val = this[offset];\n      let mul = 1;\n      let i = 0;\n      while (++i < byteLength2 && (mul *= 256)) {\n        val += this[offset + i] * mul;\n      }\n      mul *= 128;\n      if (val >= mul)\n        val -= Math.pow(2, 8 * byteLength2);\n      return val;\n    };\n    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert)\n        checkOffset(offset, byteLength2, this.length);\n      let i = byteLength2;\n      let mul = 1;\n      let val = this[offset + --i];\n      while (i > 0 && (mul *= 256)) {\n        val += this[offset + --i] * mul;\n      }\n      mul *= 128;\n      if (val >= mul)\n        val -= Math.pow(2, 8 * byteLength2);\n      return val;\n    };\n    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 1, this.length);\n      if (!(this[offset] & 128))\n        return this[offset];\n      return (255 - this[offset] + 1) * -1;\n    };\n    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      const val = this[offset] | this[offset + 1] << 8;\n      return val & 32768 ? val | 4294901760 : val;\n    };\n    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 2, this.length);\n      const val = this[offset + 1] | this[offset] << 8;\n      return val & 32768 ? val | 4294901760 : val;\n    };\n    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n    };\n    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n    };\n    Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, \"offset\");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);\n      return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);\n    });\n    Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {\n      offset = offset >>> 0;\n      validateNumber(offset, \"offset\");\n      const first = this[offset];\n      const last = this[offset + 7];\n      if (first === void 0 || last === void 0) {\n        boundsError(offset, this.length - 8);\n      }\n      const val = (first << 24) + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];\n      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);\n    });\n    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return ieee754.read(this, offset, true, 23, 4);\n    };\n    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 4, this.length);\n      return ieee754.read(this, offset, false, 23, 4);\n    };\n    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 8, this.length);\n      return ieee754.read(this, offset, true, 52, 8);\n    };\n    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkOffset(offset, 8, this.length);\n      return ieee754.read(this, offset, false, 52, 8);\n    };\n    function checkInt(buf, value, offset, ext, max, min) {\n      if (!Buffer2.isBuffer(buf))\n        throw new TypeError('\"buffer\" argument must be a Buffer instance');\n      if (value > max || value < min)\n        throw new RangeError('\"value\" argument is out of bounds');\n      if (offset + ext > buf.length)\n        throw new RangeError(\"Index out of range\");\n    }\n    Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n        checkInt(this, value, offset, byteLength2, maxBytes, 0);\n      }\n      let mul = 1;\n      let i = 0;\n      this[offset] = value & 255;\n      while (++i < byteLength2 && (mul *= 256)) {\n        this[offset + i] = value / mul & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      byteLength2 = byteLength2 >>> 0;\n      if (!noAssert) {\n        const maxBytes = Math.pow(2, 8 * byteLength2) - 1;\n        checkInt(this, value, offset, byteLength2, maxBytes, 0);\n      }\n      let i = byteLength2 - 1;\n      let mul = 1;\n      this[offset + i] = value & 255;\n      while (--i >= 0 && (mul *= 256)) {\n        this[offset + i] = value / mul & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 1, 255, 0);\n      this[offset] = value & 255;\n      return offset + 1;\n    };\n    Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 65535, 0);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 65535, 0);\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 255;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 4294967295, 0);\n      this[offset + 3] = value >>> 24;\n      this[offset + 2] = value >>> 16;\n      this[offset + 1] = value >>> 8;\n      this[offset] = value & 255;\n      return offset + 4;\n    };\n    Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 4294967295, 0);\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 255;\n      return offset + 4;\n    };\n    function wrtBigUInt64LE(buf, value, offset, min, max) {\n      checkIntBI(value, min, max, buf, offset, 7);\n      let lo = Number(value & BigInt(4294967295));\n      buf[offset++] = lo;\n      lo = lo >> 8;\n      buf[offset++] = lo;\n      lo = lo >> 8;\n      buf[offset++] = lo;\n      lo = lo >> 8;\n      buf[offset++] = lo;\n      let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n      buf[offset++] = hi;\n      hi = hi >> 8;\n      buf[offset++] = hi;\n      hi = hi >> 8;\n      buf[offset++] = hi;\n      hi = hi >> 8;\n      buf[offset++] = hi;\n      return offset;\n    }\n    function wrtBigUInt64BE(buf, value, offset, min, max) {\n      checkIntBI(value, min, max, buf, offset, 7);\n      let lo = Number(value & BigInt(4294967295));\n      buf[offset + 7] = lo;\n      lo = lo >> 8;\n      buf[offset + 6] = lo;\n      lo = lo >> 8;\n      buf[offset + 5] = lo;\n      lo = lo >> 8;\n      buf[offset + 4] = lo;\n      let hi = Number(value >> BigInt(32) & BigInt(4294967295));\n      buf[offset + 3] = hi;\n      hi = hi >> 8;\n      buf[offset + 2] = hi;\n      hi = hi >> 8;\n      buf[offset + 1] = hi;\n      hi = hi >> 8;\n      buf[offset] = hi;\n      return offset + 8;\n    }\n    Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {\n      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    });\n    Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {\n      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    });\n    Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        const limit = Math.pow(2, 8 * byteLength2 - 1);\n        checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n      }\n      let i = 0;\n      let mul = 1;\n      let sub = 0;\n      this[offset] = value & 255;\n      while (++i < byteLength2 && (mul *= 256)) {\n        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n          sub = 1;\n        }\n        this[offset + i] = (value / mul >> 0) - sub & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        const limit = Math.pow(2, 8 * byteLength2 - 1);\n        checkInt(this, value, offset, byteLength2, limit - 1, -limit);\n      }\n      let i = byteLength2 - 1;\n      let mul = 1;\n      let sub = 0;\n      this[offset + i] = value & 255;\n      while (--i >= 0 && (mul *= 256)) {\n        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n          sub = 1;\n        }\n        this[offset + i] = (value / mul >> 0) - sub & 255;\n      }\n      return offset + byteLength2;\n    };\n    Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 1, 127, -128);\n      if (value < 0)\n        value = 255 + value + 1;\n      this[offset] = value & 255;\n      return offset + 1;\n    };\n    Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 32767, -32768);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 2, 32767, -32768);\n      this[offset] = value >>> 8;\n      this[offset + 1] = value & 255;\n      return offset + 2;\n    };\n    Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 2147483647, -2147483648);\n      this[offset] = value & 255;\n      this[offset + 1] = value >>> 8;\n      this[offset + 2] = value >>> 16;\n      this[offset + 3] = value >>> 24;\n      return offset + 4;\n    };\n    Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert)\n        checkInt(this, value, offset, 4, 2147483647, -2147483648);\n      if (value < 0)\n        value = 4294967295 + value + 1;\n      this[offset] = value >>> 24;\n      this[offset + 1] = value >>> 16;\n      this[offset + 2] = value >>> 8;\n      this[offset + 3] = value & 255;\n      return offset + 4;\n    };\n    Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {\n      return wrtBigUInt64LE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    });\n    Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {\n      return wrtBigUInt64BE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    });\n    function checkIEEE754(buf, value, offset, ext, max, min) {\n      if (offset + ext > buf.length)\n        throw new RangeError(\"Index out of range\");\n      if (offset < 0)\n        throw new RangeError(\"Index out of range\");\n    }\n    function writeFloat(buf, value, offset, littleEndian, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);\n      }\n      ieee754.write(buf, value, offset, littleEndian, 23, 4);\n      return offset + 4;\n    }\n    Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n      return writeFloat(this, value, offset, true, noAssert);\n    };\n    Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n      return writeFloat(this, value, offset, false, noAssert);\n    };\n    function writeDouble(buf, value, offset, littleEndian, noAssert) {\n      value = +value;\n      offset = offset >>> 0;\n      if (!noAssert) {\n        checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);\n      }\n      ieee754.write(buf, value, offset, littleEndian, 52, 8);\n      return offset + 8;\n    }\n    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n      return writeDouble(this, value, offset, true, noAssert);\n    };\n    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n      return writeDouble(this, value, offset, false, noAssert);\n    };\n    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {\n      if (!Buffer2.isBuffer(target))\n        throw new TypeError(\"argument should be a Buffer\");\n      if (!start)\n        start = 0;\n      if (!end && end !== 0)\n        end = this.length;\n      if (targetStart >= target.length)\n        targetStart = target.length;\n      if (!targetStart)\n        targetStart = 0;\n      if (end > 0 && end < start)\n        end = start;\n      if (end === start)\n        return 0;\n      if (target.length === 0 || this.length === 0)\n        return 0;\n      if (targetStart < 0) {\n        throw new RangeError(\"targetStart out of bounds\");\n      }\n      if (start < 0 || start >= this.length)\n        throw new RangeError(\"Index out of range\");\n      if (end < 0)\n        throw new RangeError(\"sourceEnd out of bounds\");\n      if (end > this.length)\n        end = this.length;\n      if (target.length - targetStart < end - start) {\n        end = target.length - targetStart + start;\n      }\n      const len = end - start;\n      if (this === target && typeof Uint8Array.prototype.copyWithin === \"function\") {\n        this.copyWithin(targetStart, start, end);\n      } else {\n        Uint8Array.prototype.set.call(\n          target,\n          this.subarray(start, end),\n          targetStart\n        );\n      }\n      return len;\n    };\n    Buffer2.prototype.fill = function fill(val, start, end, encoding) {\n      if (typeof val === \"string\") {\n        if (typeof start === \"string\") {\n          encoding = start;\n          start = 0;\n          end = this.length;\n        } else if (typeof end === \"string\") {\n          encoding = end;\n          end = this.length;\n        }\n        if (encoding !== void 0 && typeof encoding !== \"string\") {\n          throw new TypeError(\"encoding must be a string\");\n        }\n        if (typeof encoding === \"string\" && !Buffer2.isEncoding(encoding)) {\n          throw new TypeError(\"Unknown encoding: \" + encoding);\n        }\n        if (val.length === 1) {\n          const code = val.charCodeAt(0);\n          if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n            val = code;\n          }\n        }\n      } else if (typeof val === \"number\") {\n        val = val & 255;\n      } else if (typeof val === \"boolean\") {\n        val = Number(val);\n      }\n      if (start < 0 || this.length < start || this.length < end) {\n        throw new RangeError(\"Out of range index\");\n      }\n      if (end <= start) {\n        return this;\n      }\n      start = start >>> 0;\n      end = end === void 0 ? this.length : end >>> 0;\n      if (!val)\n        val = 0;\n      let i;\n      if (typeof val === \"number\") {\n        for (i = start; i < end; ++i) {\n          this[i] = val;\n        }\n      } else {\n        const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);\n        const len = bytes.length;\n        if (len === 0) {\n          throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n        }\n        for (i = 0; i < end - start; ++i) {\n          this[i + start] = bytes[i % len];\n        }\n      }\n      return this;\n    };\n    var errors = {};\n    function E(sym, getMessage, Base) {\n      errors[sym] = class NodeError extends Base {\n        constructor() {\n          super();\n          Object.defineProperty(this, \"message\", {\n            value: getMessage.apply(this, arguments),\n            writable: true,\n            configurable: true\n          });\n          this.name = `${this.name} [${sym}]`;\n          this.stack;\n          delete this.name;\n        }\n        get code() {\n          return sym;\n        }\n        set code(value) {\n          Object.defineProperty(this, \"code\", {\n            configurable: true,\n            enumerable: true,\n            value,\n            writable: true\n          });\n        }\n        toString() {\n          return `${this.name} [${sym}]: ${this.message}`;\n        }\n      };\n    }\n    E(\n      \"ERR_BUFFER_OUT_OF_BOUNDS\",\n      function(name) {\n        if (name) {\n          return `${name} is outside of buffer bounds`;\n        }\n        return \"Attempt to access memory outside buffer bounds\";\n      },\n      RangeError\n    );\n    E(\n      \"ERR_INVALID_ARG_TYPE\",\n      function(name, actual) {\n        return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`;\n      },\n      TypeError\n    );\n    E(\n      \"ERR_OUT_OF_RANGE\",\n      function(str, range, input) {\n        let msg = `The value of \"${str}\" is out of range.`;\n        let received = input;\n        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n          received = addNumericalSeparator(String(input));\n        } else if (typeof input === \"bigint\") {\n          received = String(input);\n          if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n            received = addNumericalSeparator(received);\n          }\n          received += \"n\";\n        }\n        msg += ` It must be ${range}. Received ${received}`;\n        return msg;\n      },\n      RangeError\n    );\n    function addNumericalSeparator(val) {\n      let res = \"\";\n      let i = val.length;\n      const start = val[0] === \"-\" ? 1 : 0;\n      for (; i >= start + 4; i -= 3) {\n        res = `_${val.slice(i - 3, i)}${res}`;\n      }\n      return `${val.slice(0, i)}${res}`;\n    }\n    function checkBounds(buf, offset, byteLength2) {\n      validateNumber(offset, \"offset\");\n      if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {\n        boundsError(offset, buf.length - (byteLength2 + 1));\n      }\n    }\n    function checkIntBI(value, min, max, buf, offset, byteLength2) {\n      if (value > max || value < min) {\n        const n = typeof min === \"bigint\" ? \"n\" : \"\";\n        let range;\n        if (byteLength2 > 3) {\n          if (min === 0 || min === BigInt(0)) {\n            range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;\n          } else {\n            range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;\n          }\n        } else {\n          range = `>= ${min}${n} and <= ${max}${n}`;\n        }\n        throw new errors.ERR_OUT_OF_RANGE(\"value\", range, value);\n      }\n      checkBounds(buf, offset, byteLength2);\n    }\n    function validateNumber(value, name) {\n      if (typeof value !== \"number\") {\n        throw new errors.ERR_INVALID_ARG_TYPE(name, \"number\", value);\n      }\n    }\n    function boundsError(value, length, type) {\n      if (Math.floor(value) !== value) {\n        validateNumber(value, type);\n        throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", \"an integer\", value);\n      }\n      if (length < 0) {\n        throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\n      }\n      throw new errors.ERR_OUT_OF_RANGE(\n        type || \"offset\",\n        `>= ${type ? 1 : 0} and <= ${length}`,\n        value\n      );\n    }\n    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n    function base64clean(str) {\n      str = str.split(\"=\")[0];\n      str = str.trim().replace(INVALID_BASE64_RE, \"\");\n      if (str.length < 2)\n        return \"\";\n      while (str.length % 4 !== 0) {\n        str = str + \"=\";\n      }\n      return str;\n    }\n    function utf8ToBytes(string, units) {\n      units = units || Infinity;\n      let codePoint;\n      const length = string.length;\n      let leadSurrogate = null;\n      const bytes = [];\n      for (let i = 0; i < length; ++i) {\n        codePoint = string.charCodeAt(i);\n        if (codePoint > 55295 && codePoint < 57344) {\n          if (!leadSurrogate) {\n            if (codePoint > 56319) {\n              if ((units -= 3) > -1)\n                bytes.push(239, 191, 189);\n              continue;\n            } else if (i + 1 === length) {\n              if ((units -= 3) > -1)\n                bytes.push(239, 191, 189);\n              continue;\n            }\n            leadSurrogate = codePoint;\n            continue;\n          }\n          if (codePoint < 56320) {\n            if ((units -= 3) > -1)\n              bytes.push(239, 191, 189);\n            leadSurrogate = codePoint;\n            continue;\n          }\n          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n        } else if (leadSurrogate) {\n          if ((units -= 3) > -1)\n            bytes.push(239, 191, 189);\n        }\n        leadSurrogate = null;\n        if (codePoint < 128) {\n          if ((units -= 1) < 0)\n            break;\n          bytes.push(codePoint);\n        } else if (codePoint < 2048) {\n          if ((units -= 2) < 0)\n            break;\n          bytes.push(\n            codePoint >> 6 | 192,\n            codePoint & 63 | 128\n          );\n        } else if (codePoint < 65536) {\n          if ((units -= 3) < 0)\n            break;\n          bytes.push(\n            codePoint >> 12 | 224,\n            codePoint >> 6 & 63 | 128,\n            codePoint & 63 | 128\n          );\n        } else if (codePoint < 1114112) {\n          if ((units -= 4) < 0)\n            break;\n          bytes.push(\n            codePoint >> 18 | 240,\n            codePoint >> 12 & 63 | 128,\n            codePoint >> 6 & 63 | 128,\n            codePoint & 63 | 128\n          );\n        } else {\n          throw new Error(\"Invalid code point\");\n        }\n      }\n      return bytes;\n    }\n    function asciiToBytes(str) {\n      const byteArray = [];\n      for (let i = 0; i < str.length; ++i) {\n        byteArray.push(str.charCodeAt(i) & 255);\n      }\n      return byteArray;\n    }\n    function utf16leToBytes(str, units) {\n      let c, hi, lo;\n      const byteArray = [];\n      for (let i = 0; i < str.length; ++i) {\n        if ((units -= 2) < 0)\n          break;\n        c = str.charCodeAt(i);\n        hi = c >> 8;\n        lo = c % 256;\n        byteArray.push(lo);\n        byteArray.push(hi);\n      }\n      return byteArray;\n    }\n    function base64ToBytes(str) {\n      return base64.toByteArray(base64clean(str));\n    }\n    function blitBuffer(src, dst, offset, length) {\n      let i;\n      for (i = 0; i < length; ++i) {\n        if (i + offset >= dst.length || i >= src.length)\n          break;\n        dst[i + offset] = src[i];\n      }\n      return i;\n    }\n    function isInstance(obj, type) {\n      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n    }\n    function numberIsNaN(obj) {\n      return obj !== obj;\n    }\n    var hexSliceLookupTable = function() {\n      const alphabet = \"0123456789abcdef\";\n      const table = new Array(256);\n      for (let i = 0; i < 16; ++i) {\n        const i16 = i * 16;\n        for (let j = 0; j < 16; ++j) {\n          table[i16 + j] = alphabet[i] + alphabet[j];\n        }\n      }\n      return table;\n    }();\n    function defineBigIntMethod(fn) {\n      return typeof BigInt === \"undefined\" ? BufferBigIntNotDefined : fn;\n    }\n    function BufferBigIntNotDefined() {\n      throw new Error(\"BigInt not supported\");\n    }\n  }\n});\n\n// (disabled):node_modules/.pnpm/util@0.12.5/node_modules/util/util.js\nvar require_util = __commonJS({\n  \"(disabled):node_modules/.pnpm/util@0.12.5/node_modules/util/util.js\"() {\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/buffer_list.js\nvar require_buffer_list = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/buffer_list.js\"(exports2, module2) {\n    \"use strict\";\n    function ownKeys(object, enumerableOnly) {\n      var keys = Object.keys(object);\n      if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly)\n          symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n          });\n        keys.push.apply(keys, symbols);\n      }\n      return keys;\n    }\n    function _objectSpread(target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n          ownKeys(Object(source), true).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n          });\n        } else if (Object.getOwnPropertyDescriptors) {\n          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n          ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n          });\n        }\n      }\n      return target;\n    }\n    function _defineProperty(obj, key, value) {\n      if (key in obj) {\n        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });\n      } else {\n        obj[key] = value;\n      }\n      return obj;\n    }\n    function _classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    }\n    function _defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor)\n          descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n    function _createClass(Constructor, protoProps, staticProps) {\n      if (protoProps)\n        _defineProperties(Constructor.prototype, protoProps);\n      if (staticProps)\n        _defineProperties(Constructor, staticProps);\n      return Constructor;\n    }\n    var _require = require_buffer();\n    var Buffer2 = _require.Buffer;\n    var _require2 = require_util();\n    var inspect = _require2.inspect;\n    var custom = inspect && inspect.custom || \"inspect\";\n    function copyBuffer(src, target, offset) {\n      Buffer2.prototype.copy.call(src, target, offset);\n    }\n    module2.exports = /* @__PURE__ */ function() {\n      function BufferList() {\n        _classCallCheck(this, BufferList);\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n      }\n      _createClass(BufferList, [{\n        key: \"push\",\n        value: function push(v) {\n          var entry = {\n            data: v,\n            next: null\n          };\n          if (this.length > 0)\n            this.tail.next = entry;\n          else\n            this.head = entry;\n          this.tail = entry;\n          ++this.length;\n        }\n      }, {\n        key: \"unshift\",\n        value: function unshift(v) {\n          var entry = {\n            data: v,\n            next: this.head\n          };\n          if (this.length === 0)\n            this.tail = entry;\n          this.head = entry;\n          ++this.length;\n        }\n      }, {\n        key: \"shift\",\n        value: function shift() {\n          if (this.length === 0)\n            return;\n          var ret = this.head.data;\n          if (this.length === 1)\n            this.head = this.tail = null;\n          else\n            this.head = this.head.next;\n          --this.length;\n          return ret;\n        }\n      }, {\n        key: \"clear\",\n        value: function clear() {\n          this.head = this.tail = null;\n          this.length = 0;\n        }\n      }, {\n        key: \"join\",\n        value: function join(s) {\n          if (this.length === 0)\n            return \"\";\n          var p = this.head;\n          var ret = \"\" + p.data;\n          while (p = p.next) {\n            ret += s + p.data;\n          }\n          return ret;\n        }\n      }, {\n        key: \"concat\",\n        value: function concat(n) {\n          if (this.length === 0)\n            return Buffer2.alloc(0);\n          var ret = Buffer2.allocUnsafe(n >>> 0);\n          var p = this.head;\n          var i = 0;\n          while (p) {\n            copyBuffer(p.data, ret, i);\n            i += p.data.length;\n            p = p.next;\n          }\n          return ret;\n        }\n      }, {\n        key: \"consume\",\n        value: function consume(n, hasStrings) {\n          var ret;\n          if (n < this.head.data.length) {\n            ret = this.head.data.slice(0, n);\n            this.head.data = this.head.data.slice(n);\n          } else if (n === this.head.data.length) {\n            ret = this.shift();\n          } else {\n            ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n          }\n          return ret;\n        }\n      }, {\n        key: \"first\",\n        value: function first() {\n          return this.head.data;\n        }\n      }, {\n        key: \"_getString\",\n        value: function _getString(n) {\n          var p = this.head;\n          var c = 1;\n          var ret = p.data;\n          n -= ret.length;\n          while (p = p.next) {\n            var str = p.data;\n            var nb = n > str.length ? str.length : n;\n            if (nb === str.length)\n              ret += str;\n            else\n              ret += str.slice(0, n);\n            n -= nb;\n            if (n === 0) {\n              if (nb === str.length) {\n                ++c;\n                if (p.next)\n                  this.head = p.next;\n                else\n                  this.head = this.tail = null;\n              } else {\n                this.head = p;\n                p.data = str.slice(nb);\n              }\n              break;\n            }\n            ++c;\n          }\n          this.length -= c;\n          return ret;\n        }\n      }, {\n        key: \"_getBuffer\",\n        value: function _getBuffer(n) {\n          var ret = Buffer2.allocUnsafe(n);\n          var p = this.head;\n          var c = 1;\n          p.data.copy(ret);\n          n -= p.data.length;\n          while (p = p.next) {\n            var buf = p.data;\n            var nb = n > buf.length ? buf.length : n;\n            buf.copy(ret, ret.length - n, 0, nb);\n            n -= nb;\n            if (n === 0) {\n              if (nb === buf.length) {\n                ++c;\n                if (p.next)\n                  this.head = p.next;\n                else\n                  this.head = this.tail = null;\n              } else {\n                this.head = p;\n                p.data = buf.slice(nb);\n              }\n              break;\n            }\n            ++c;\n          }\n          this.length -= c;\n          return ret;\n        }\n      }, {\n        key: custom,\n        value: function value(_, options) {\n          return inspect(this, _objectSpread({}, options, {\n            depth: 0,\n            customInspect: false\n          }));\n        }\n      }]);\n      return BufferList;\n    }();\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/destroy.js\nvar require_destroy = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/destroy.js\"(exports2, module2) {\n    \"use strict\";\n    function destroy(err, cb) {\n      var _this = this;\n      var readableDestroyed = this._readableState && this._readableState.destroyed;\n      var writableDestroyed = this._writableState && this._writableState.destroyed;\n      if (readableDestroyed || writableDestroyed) {\n        if (cb) {\n          cb(err);\n        } else if (err) {\n          if (!this._writableState) {\n            process.nextTick(emitErrorNT, this, err);\n          } else if (!this._writableState.errorEmitted) {\n            this._writableState.errorEmitted = true;\n            process.nextTick(emitErrorNT, this, err);\n          }\n        }\n        return this;\n      }\n      if (this._readableState) {\n        this._readableState.destroyed = true;\n      }\n      if (this._writableState) {\n        this._writableState.destroyed = true;\n      }\n      this._destroy(err || null, function(err2) {\n        if (!cb && err2) {\n          if (!_this._writableState) {\n            process.nextTick(emitErrorAndCloseNT, _this, err2);\n          } else if (!_this._writableState.errorEmitted) {\n            _this._writableState.errorEmitted = true;\n            process.nextTick(emitErrorAndCloseNT, _this, err2);\n          } else {\n            process.nextTick(emitCloseNT, _this);\n          }\n        } else if (cb) {\n          process.nextTick(emitCloseNT, _this);\n          cb(err2);\n        } else {\n          process.nextTick(emitCloseNT, _this);\n        }\n      });\n      return this;\n    }\n    function emitErrorAndCloseNT(self, err) {\n      emitErrorNT(self, err);\n      emitCloseNT(self);\n    }\n    function emitCloseNT(self) {\n      if (self._writableState && !self._writableState.emitClose)\n        return;\n      if (self._readableState && !self._readableState.emitClose)\n        return;\n      self.emit(\"close\");\n    }\n    function undestroy() {\n      if (this._readableState) {\n        this._readableState.destroyed = false;\n        this._readableState.reading = false;\n        this._readableState.ended = false;\n        this._readableState.endEmitted = false;\n      }\n      if (this._writableState) {\n        this._writableState.destroyed = false;\n        this._writableState.ended = false;\n        this._writableState.ending = false;\n        this._writableState.finalCalled = false;\n        this._writableState.prefinished = false;\n        this._writableState.finished = false;\n        this._writableState.errorEmitted = false;\n      }\n    }\n    function emitErrorNT(self, err) {\n      self.emit(\"error\", err);\n    }\n    function errorOrDestroy(stream, err) {\n      var rState = stream._readableState;\n      var wState = stream._writableState;\n      if (rState && rState.autoDestroy || wState && wState.autoDestroy)\n        stream.destroy(err);\n      else\n        stream.emit(\"error\", err);\n    }\n    module2.exports = {\n      destroy,\n      undestroy,\n      errorOrDestroy\n    };\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/errors-browser.js\nvar require_errors_browser = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/errors-browser.js\"(exports2, module2) {\n    \"use strict\";\n    function _inheritsLoose(subClass, superClass) {\n      subClass.prototype = Object.create(superClass.prototype);\n      subClass.prototype.constructor = subClass;\n      subClass.__proto__ = superClass;\n    }\n    var codes = {};\n    function createErrorType(code, message, Base) {\n      if (!Base) {\n        Base = Error;\n      }\n      function getMessage(arg1, arg2, arg3) {\n        if (typeof message === \"string\") {\n          return message;\n        } else {\n          return message(arg1, arg2, arg3);\n        }\n      }\n      var NodeError = /* @__PURE__ */ function(_Base) {\n        _inheritsLoose(NodeError2, _Base);\n        function NodeError2(arg1, arg2, arg3) {\n          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;\n        }\n        return NodeError2;\n      }(Base);\n      NodeError.prototype.name = Base.name;\n      NodeError.prototype.code = code;\n      codes[code] = NodeError;\n    }\n    function oneOf(expected, thing) {\n      if (Array.isArray(expected)) {\n        var len = expected.length;\n        expected = expected.map(function(i) {\n          return String(i);\n        });\n        if (len > 2) {\n          return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(\", \"), \", or \") + expected[len - 1];\n        } else if (len === 2) {\n          return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n        } else {\n          return \"of \".concat(thing, \" \").concat(expected[0]);\n        }\n      } else {\n        return \"of \".concat(thing, \" \").concat(String(expected));\n      }\n    }\n    function startsWith(str, search, pos) {\n      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n    }\n    function endsWith(str, search, this_len) {\n      if (this_len === void 0 || this_len > str.length) {\n        this_len = str.length;\n      }\n      return str.substring(this_len - search.length, this_len) === search;\n    }\n    function includes(str, search, start) {\n      if (typeof start !== \"number\") {\n        start = 0;\n      }\n      if (start + search.length > str.length) {\n        return false;\n      } else {\n        return str.indexOf(search, start) !== -1;\n      }\n    }\n    createErrorType(\"ERR_INVALID_OPT_VALUE\", function(name, value) {\n      return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n    }, TypeError);\n    createErrorType(\"ERR_INVALID_ARG_TYPE\", function(name, expected, actual) {\n      var determiner;\n      if (typeof expected === \"string\" && startsWith(expected, \"not \")) {\n        determiner = \"must not be\";\n        expected = expected.replace(/^not /, \"\");\n      } else {\n        determiner = \"must be\";\n      }\n      var msg;\n      if (endsWith(name, \" argument\")) {\n        msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, \"type\"));\n      } else {\n        var type = includes(name, \".\") ? \"property\" : \"argument\";\n        msg = 'The \"'.concat(name, '\" ').concat(type, \" \").concat(determiner, \" \").concat(oneOf(expected, \"type\"));\n      }\n      msg += \". Received type \".concat(typeof actual);\n      return msg;\n    }, TypeError);\n    createErrorType(\"ERR_STREAM_PUSH_AFTER_EOF\", \"stream.push() after EOF\");\n    createErrorType(\"ERR_METHOD_NOT_IMPLEMENTED\", function(name) {\n      return \"The \" + name + \" method is not implemented\";\n    });\n    createErrorType(\"ERR_STREAM_PREMATURE_CLOSE\", \"Premature close\");\n    createErrorType(\"ERR_STREAM_DESTROYED\", function(name) {\n      return \"Cannot call \" + name + \" after a stream was destroyed\";\n    });\n    createErrorType(\"ERR_MULTIPLE_CALLBACK\", \"Callback called multiple times\");\n    createErrorType(\"ERR_STREAM_CANNOT_PIPE\", \"Cannot pipe, not readable\");\n    createErrorType(\"ERR_STREAM_WRITE_AFTER_END\", \"write after end\");\n    createErrorType(\"ERR_STREAM_NULL_VALUES\", \"May not write null values to stream\", TypeError);\n    createErrorType(\"ERR_UNKNOWN_ENCODING\", function(arg) {\n      return \"Unknown encoding: \" + arg;\n    }, TypeError);\n    createErrorType(\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\", \"stream.unshift() after end event\");\n    module2.exports.codes = codes;\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/state.js\nvar require_state = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/state.js\"(exports2, module2) {\n    \"use strict\";\n    var ERR_INVALID_OPT_VALUE = require_errors_browser().codes.ERR_INVALID_OPT_VALUE;\n    function highWaterMarkFrom(options, isDuplex, duplexKey) {\n      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n    }\n    function getHighWaterMark(state, options, duplexKey, isDuplex) {\n      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n      if (hwm != null) {\n        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n          var name = isDuplex ? duplexKey : \"highWaterMark\";\n          throw new ERR_INVALID_OPT_VALUE(name, hwm);\n        }\n        return Math.floor(hwm);\n      }\n      return state.objectMode ? 16 : 16 * 1024;\n    }\n    module2.exports = {\n      getHighWaterMark\n    };\n  }\n});\n\n// node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js\nvar require_inherits_browser = __commonJS({\n  \"node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js\"(exports2, module2) {\n    if (typeof Object.create === \"function\") {\n      module2.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n          ctor.super_ = superCtor;\n          ctor.prototype = Object.create(superCtor.prototype, {\n            constructor: {\n              value: ctor,\n              enumerable: false,\n              writable: true,\n              configurable: true\n            }\n          });\n        }\n      };\n    } else {\n      module2.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n          ctor.super_ = superCtor;\n          var TempCtor = function() {\n          };\n          TempCtor.prototype = superCtor.prototype;\n          ctor.prototype = new TempCtor();\n          ctor.prototype.constructor = ctor;\n        }\n      };\n    }\n  }\n});\n\n// node_modules/.pnpm/util-deprecate@1.0.2/node_modules/util-deprecate/browser.js\nvar require_browser = __commonJS({\n  \"node_modules/.pnpm/util-deprecate@1.0.2/node_modules/util-deprecate/browser.js\"(exports2, module2) {\n    module2.exports = deprecate;\n    function deprecate(fn, msg) {\n      if (config(\"noDeprecation\")) {\n        return fn;\n      }\n      var warned = false;\n      function deprecated() {\n        if (!warned) {\n          if (config(\"throwDeprecation\")) {\n            throw new Error(msg);\n          } else if (config(\"traceDeprecation\")) {\n            console.trace(msg);\n          } else {\n            console.warn(msg);\n          }\n          warned = true;\n        }\n        return fn.apply(this, arguments);\n      }\n      return deprecated;\n    }\n    function config(name) {\n      try {\n        if (!commonjsHelpers.commonjsGlobal.localStorage)\n          return false;\n      } catch (_) {\n        return false;\n      }\n      var val = commonjsHelpers.commonjsGlobal.localStorage[name];\n      if (null == val)\n        return false;\n      return String(val).toLowerCase() === \"true\";\n    }\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_writable.js\nvar require_stream_writable = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_writable.js\"(exports2, module2) {\n    \"use strict\";\n    module2.exports = Writable;\n    function CorkedRequest(state) {\n      var _this = this;\n      this.next = null;\n      this.entry = null;\n      this.finish = function() {\n        onCorkedFinish(_this, state);\n      };\n    }\n    var Duplex;\n    Writable.WritableState = WritableState;\n    var internalUtil = {\n      deprecate: require_browser()\n    };\n    var Stream = require_stream_browser();\n    var Buffer2 = require_buffer().Buffer;\n    var OurUint8Array = commonjsHelpers.commonjsGlobal.Uint8Array || function() {\n    };\n    function _uint8ArrayToBuffer(chunk) {\n      return Buffer2.from(chunk);\n    }\n    function _isUint8Array(obj) {\n      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;\n    }\n    var destroyImpl = require_destroy();\n    var _require = require_state();\n    var getHighWaterMark = _require.getHighWaterMark;\n    var _require$codes = require_errors_browser().codes;\n    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;\n    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;\n    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;\n    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;\n    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;\n    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;\n    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n    var errorOrDestroy = destroyImpl.errorOrDestroy;\n    require_inherits_browser()(Writable, Stream);\n    function nop() {\n    }\n    function WritableState(options, stream, isDuplex) {\n      Duplex = Duplex || require_stream_duplex();\n      options = options || {};\n      if (typeof isDuplex !== \"boolean\")\n        isDuplex = stream instanceof Duplex;\n      this.objectMode = !!options.objectMode;\n      if (isDuplex)\n        this.objectMode = this.objectMode || !!options.writableObjectMode;\n      this.highWaterMark = getHighWaterMark(this, options, \"writableHighWaterMark\", isDuplex);\n      this.finalCalled = false;\n      this.needDrain = false;\n      this.ending = false;\n      this.ended = false;\n      this.finished = false;\n      this.destroyed = false;\n      var noDecode = options.decodeStrings === false;\n      this.decodeStrings = !noDecode;\n      this.defaultEncoding = options.defaultEncoding || \"utf8\";\n      this.length = 0;\n      this.writing = false;\n      this.corked = 0;\n      this.sync = true;\n      this.bufferProcessing = false;\n      this.onwrite = function(er) {\n        onwrite(stream, er);\n      };\n      this.writecb = null;\n      this.writelen = 0;\n      this.bufferedRequest = null;\n      this.lastBufferedRequest = null;\n      this.pendingcb = 0;\n      this.prefinished = false;\n      this.errorEmitted = false;\n      this.emitClose = options.emitClose !== false;\n      this.autoDestroy = !!options.autoDestroy;\n      this.bufferedRequestCount = 0;\n      this.corkedRequestsFree = new CorkedRequest(this);\n    }\n    WritableState.prototype.getBuffer = function getBuffer() {\n      var current = this.bufferedRequest;\n      var out = [];\n      while (current) {\n        out.push(current);\n        current = current.next;\n      }\n      return out;\n    };\n    (function() {\n      try {\n        Object.defineProperty(WritableState.prototype, \"buffer\", {\n          get: internalUtil.deprecate(function writableStateBufferGetter() {\n            return this.getBuffer();\n          }, \"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.\", \"DEP0003\")\n        });\n      } catch (_) {\n      }\n    })();\n    var realHasInstance;\n    if (typeof Symbol === \"function\" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === \"function\") {\n      realHasInstance = Function.prototype[Symbol.hasInstance];\n      Object.defineProperty(Writable, Symbol.hasInstance, {\n        value: function value(object) {\n          if (realHasInstance.call(this, object))\n            return true;\n          if (this !== Writable)\n            return false;\n          return object && object._writableState instanceof WritableState;\n        }\n      });\n    } else {\n      realHasInstance = function realHasInstance2(object) {\n        return object instanceof this;\n      };\n    }\n    function Writable(options) {\n      Duplex = Duplex || require_stream_duplex();\n      var isDuplex = this instanceof Duplex;\n      if (!isDuplex && !realHasInstance.call(Writable, this))\n        return new Writable(options);\n      this._writableState = new WritableState(options, this, isDuplex);\n      this.writable = true;\n      if (options) {\n        if (typeof options.write === \"function\")\n          this._write = options.write;\n        if (typeof options.writev === \"function\")\n          this._writev = options.writev;\n        if (typeof options.destroy === \"function\")\n          this._destroy = options.destroy;\n        if (typeof options.final === \"function\")\n          this._final = options.final;\n      }\n      Stream.call(this);\n    }\n    Writable.prototype.pipe = function() {\n      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n    };\n    function writeAfterEnd(stream, cb) {\n      var er = new ERR_STREAM_WRITE_AFTER_END();\n      errorOrDestroy(stream, er);\n      process.nextTick(cb, er);\n    }\n    function validChunk(stream, state, chunk, cb) {\n      var er;\n      if (chunk === null) {\n        er = new ERR_STREAM_NULL_VALUES();\n      } else if (typeof chunk !== \"string\" && !state.objectMode) {\n        er = new ERR_INVALID_ARG_TYPE(\"chunk\", [\"string\", \"Buffer\"], chunk);\n      }\n      if (er) {\n        errorOrDestroy(stream, er);\n        process.nextTick(cb, er);\n        return false;\n      }\n      return true;\n    }\n    Writable.prototype.write = function(chunk, encoding, cb) {\n      var state = this._writableState;\n      var ret = false;\n      var isBuf = !state.objectMode && _isUint8Array(chunk);\n      if (isBuf && !Buffer2.isBuffer(chunk)) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n      if (typeof encoding === \"function\") {\n        cb = encoding;\n        encoding = null;\n      }\n      if (isBuf)\n        encoding = \"buffer\";\n      else if (!encoding)\n        encoding = state.defaultEncoding;\n      if (typeof cb !== \"function\")\n        cb = nop;\n      if (state.ending)\n        writeAfterEnd(this, cb);\n      else if (isBuf || validChunk(this, state, chunk, cb)) {\n        state.pendingcb++;\n        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n      }\n      return ret;\n    };\n    Writable.prototype.cork = function() {\n      this._writableState.corked++;\n    };\n    Writable.prototype.uncork = function() {\n      var state = this._writableState;\n      if (state.corked) {\n        state.corked--;\n        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)\n          clearBuffer(this, state);\n      }\n    };\n    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n      if (typeof encoding === \"string\")\n        encoding = encoding.toLowerCase();\n      if (!([\"hex\", \"utf8\", \"utf-8\", \"ascii\", \"binary\", \"base64\", \"ucs2\", \"ucs-2\", \"utf16le\", \"utf-16le\", \"raw\"].indexOf((encoding + \"\").toLowerCase()) > -1))\n        throw new ERR_UNKNOWN_ENCODING(encoding);\n      this._writableState.defaultEncoding = encoding;\n      return this;\n    };\n    Object.defineProperty(Writable.prototype, \"writableBuffer\", {\n      enumerable: false,\n      get: function get() {\n        return this._writableState && this._writableState.getBuffer();\n      }\n    });\n    function decodeChunk(state, chunk, encoding) {\n      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === \"string\") {\n        chunk = Buffer2.from(chunk, encoding);\n      }\n      return chunk;\n    }\n    Object.defineProperty(Writable.prototype, \"writableHighWaterMark\", {\n      enumerable: false,\n      get: function get() {\n        return this._writableState.highWaterMark;\n      }\n    });\n    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n      if (!isBuf) {\n        var newChunk = decodeChunk(state, chunk, encoding);\n        if (chunk !== newChunk) {\n          isBuf = true;\n          encoding = \"buffer\";\n          chunk = newChunk;\n        }\n      }\n      var len = state.objectMode ? 1 : chunk.length;\n      state.length += len;\n      var ret = state.length < state.highWaterMark;\n      if (!ret)\n        state.needDrain = true;\n      if (state.writing || state.corked) {\n        var last = state.lastBufferedRequest;\n        state.lastBufferedRequest = {\n          chunk,\n          encoding,\n          isBuf,\n          callback: cb,\n          next: null\n        };\n        if (last) {\n          last.next = state.lastBufferedRequest;\n        } else {\n          state.bufferedRequest = state.lastBufferedRequest;\n        }\n        state.bufferedRequestCount += 1;\n      } else {\n        doWrite(stream, state, false, len, chunk, encoding, cb);\n      }\n      return ret;\n    }\n    function doWrite(stream, state, writev, len, chunk, encoding, cb) {\n      state.writelen = len;\n      state.writecb = cb;\n      state.writing = true;\n      state.sync = true;\n      if (state.destroyed)\n        state.onwrite(new ERR_STREAM_DESTROYED(\"write\"));\n      else if (writev)\n        stream._writev(chunk, state.onwrite);\n      else\n        stream._write(chunk, encoding, state.onwrite);\n      state.sync = false;\n    }\n    function onwriteError(stream, state, sync, er, cb) {\n      --state.pendingcb;\n      if (sync) {\n        process.nextTick(cb, er);\n        process.nextTick(finishMaybe, stream, state);\n        stream._writableState.errorEmitted = true;\n        errorOrDestroy(stream, er);\n      } else {\n        cb(er);\n        stream._writableState.errorEmitted = true;\n        errorOrDestroy(stream, er);\n        finishMaybe(stream, state);\n      }\n    }\n    function onwriteStateUpdate(state) {\n      state.writing = false;\n      state.writecb = null;\n      state.length -= state.writelen;\n      state.writelen = 0;\n    }\n    function onwrite(stream, er) {\n      var state = stream._writableState;\n      var sync = state.sync;\n      var cb = state.writecb;\n      if (typeof cb !== \"function\")\n        throw new ERR_MULTIPLE_CALLBACK();\n      onwriteStateUpdate(state);\n      if (er)\n        onwriteError(stream, state, sync, er, cb);\n      else {\n        var finished = needFinish(state) || stream.destroyed;\n        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n          clearBuffer(stream, state);\n        }\n        if (sync) {\n          process.nextTick(afterWrite, stream, state, finished, cb);\n        } else {\n          afterWrite(stream, state, finished, cb);\n        }\n      }\n    }\n    function afterWrite(stream, state, finished, cb) {\n      if (!finished)\n        onwriteDrain(stream, state);\n      state.pendingcb--;\n      cb();\n      finishMaybe(stream, state);\n    }\n    function onwriteDrain(stream, state) {\n      if (state.length === 0 && state.needDrain) {\n        state.needDrain = false;\n        stream.emit(\"drain\");\n      }\n    }\n    function clearBuffer(stream, state) {\n      state.bufferProcessing = true;\n      var entry = state.bufferedRequest;\n      if (stream._writev && entry && entry.next) {\n        var l = state.bufferedRequestCount;\n        var buffer = new Array(l);\n        var holder = state.corkedRequestsFree;\n        holder.entry = entry;\n        var count = 0;\n        var allBuffers = true;\n        while (entry) {\n          buffer[count] = entry;\n          if (!entry.isBuf)\n            allBuffers = false;\n          entry = entry.next;\n          count += 1;\n        }\n        buffer.allBuffers = allBuffers;\n        doWrite(stream, state, true, state.length, buffer, \"\", holder.finish);\n        state.pendingcb++;\n        state.lastBufferedRequest = null;\n        if (holder.next) {\n          state.corkedRequestsFree = holder.next;\n          holder.next = null;\n        } else {\n          state.corkedRequestsFree = new CorkedRequest(state);\n        }\n        state.bufferedRequestCount = 0;\n      } else {\n        while (entry) {\n          var chunk = entry.chunk;\n          var encoding = entry.encoding;\n          var cb = entry.callback;\n          var len = state.objectMode ? 1 : chunk.length;\n          doWrite(stream, state, false, len, chunk, encoding, cb);\n          entry = entry.next;\n          state.bufferedRequestCount--;\n          if (state.writing) {\n            break;\n          }\n        }\n        if (entry === null)\n          state.lastBufferedRequest = null;\n      }\n      state.bufferedRequest = entry;\n      state.bufferProcessing = false;\n    }\n    Writable.prototype._write = function(chunk, encoding, cb) {\n      cb(new ERR_METHOD_NOT_IMPLEMENTED(\"_write()\"));\n    };\n    Writable.prototype._writev = null;\n    Writable.prototype.end = function(chunk, encoding, cb) {\n      var state = this._writableState;\n      if (typeof chunk === \"function\") {\n        cb = chunk;\n        chunk = null;\n        encoding = null;\n      } else if (typeof encoding === \"function\") {\n        cb = encoding;\n        encoding = null;\n      }\n      if (chunk !== null && chunk !== void 0)\n        this.write(chunk, encoding);\n      if (state.corked) {\n        state.corked = 1;\n        this.uncork();\n      }\n      if (!state.ending)\n        endWritable(this, state, cb);\n      return this;\n    };\n    Object.defineProperty(Writable.prototype, \"writableLength\", {\n      enumerable: false,\n      get: function get() {\n        return this._writableState.length;\n      }\n    });\n    function needFinish(state) {\n      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n    }\n    function callFinal(stream, state) {\n      stream._final(function(err) {\n        state.pendingcb--;\n        if (err) {\n          errorOrDestroy(stream, err);\n        }\n        state.prefinished = true;\n        stream.emit(\"prefinish\");\n        finishMaybe(stream, state);\n      });\n    }\n    function prefinish(stream, state) {\n      if (!state.prefinished && !state.finalCalled) {\n        if (typeof stream._final === \"function\" && !state.destroyed) {\n          state.pendingcb++;\n          state.finalCalled = true;\n          process.nextTick(callFinal, stream, state);\n        } else {\n          state.prefinished = true;\n          stream.emit(\"prefinish\");\n        }\n      }\n    }\n    function finishMaybe(stream, state) {\n      var need = needFinish(state);\n      if (need) {\n        prefinish(stream, state);\n        if (state.pendingcb === 0) {\n          state.finished = true;\n          stream.emit(\"finish\");\n          if (state.autoDestroy) {\n            var rState = stream._readableState;\n            if (!rState || rState.autoDestroy && rState.endEmitted) {\n              stream.destroy();\n            }\n          }\n        }\n      }\n      return need;\n    }\n    function endWritable(stream, state, cb) {\n      state.ending = true;\n      finishMaybe(stream, state);\n      if (cb) {\n        if (state.finished)\n          process.nextTick(cb);\n        else\n          stream.once(\"finish\", cb);\n      }\n      state.ended = true;\n      stream.writable = false;\n    }\n    function onCorkedFinish(corkReq, state, err) {\n      var entry = corkReq.entry;\n      corkReq.entry = null;\n      while (entry) {\n        var cb = entry.callback;\n        state.pendingcb--;\n        cb(err);\n        entry = entry.next;\n      }\n      state.corkedRequestsFree.next = corkReq;\n    }\n    Object.defineProperty(Writable.prototype, \"destroyed\", {\n      enumerable: false,\n      get: function get() {\n        if (this._writableState === void 0) {\n          return false;\n        }\n        return this._writableState.destroyed;\n      },\n      set: function set(value) {\n        if (!this._writableState) {\n          return;\n        }\n        this._writableState.destroyed = value;\n      }\n    });\n    Writable.prototype.destroy = destroyImpl.destroy;\n    Writable.prototype._undestroy = destroyImpl.undestroy;\n    Writable.prototype._destroy = function(err, cb) {\n      cb(err);\n    };\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_duplex.js\nvar require_stream_duplex = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_duplex.js\"(exports2, module2) {\n    \"use strict\";\n    var objectKeys = Object.keys || function(obj) {\n      var keys2 = [];\n      for (var key in obj) {\n        keys2.push(key);\n      }\n      return keys2;\n    };\n    module2.exports = Duplex;\n    var Readable = require_stream_readable();\n    var Writable = require_stream_writable();\n    require_inherits_browser()(Duplex, Readable);\n    {\n      keys = objectKeys(Writable.prototype);\n      for (v = 0; v < keys.length; v++) {\n        method = keys[v];\n        if (!Duplex.prototype[method])\n          Duplex.prototype[method] = Writable.prototype[method];\n      }\n    }\n    var keys;\n    var method;\n    var v;\n    function Duplex(options) {\n      if (!(this instanceof Duplex))\n        return new Duplex(options);\n      Readable.call(this, options);\n      Writable.call(this, options);\n      this.allowHalfOpen = true;\n      if (options) {\n        if (options.readable === false)\n          this.readable = false;\n        if (options.writable === false)\n          this.writable = false;\n        if (options.allowHalfOpen === false) {\n          this.allowHalfOpen = false;\n          this.once(\"end\", onend);\n        }\n      }\n    }\n    Object.defineProperty(Duplex.prototype, \"writableHighWaterMark\", {\n      enumerable: false,\n      get: function get() {\n        return this._writableState.highWaterMark;\n      }\n    });\n    Object.defineProperty(Duplex.prototype, \"writableBuffer\", {\n      enumerable: false,\n      get: function get() {\n        return this._writableState && this._writableState.getBuffer();\n      }\n    });\n    Object.defineProperty(Duplex.prototype, \"writableLength\", {\n      enumerable: false,\n      get: function get() {\n        return this._writableState.length;\n      }\n    });\n    function onend() {\n      if (this._writableState.ended)\n        return;\n      process.nextTick(onEndNT, this);\n    }\n    function onEndNT(self) {\n      self.end();\n    }\n    Object.defineProperty(Duplex.prototype, \"destroyed\", {\n      enumerable: false,\n      get: function get() {\n        if (this._readableState === void 0 || this._writableState === void 0) {\n          return false;\n        }\n        return this._readableState.destroyed && this._writableState.destroyed;\n      },\n      set: function set(value) {\n        if (this._readableState === void 0 || this._writableState === void 0) {\n          return;\n        }\n        this._readableState.destroyed = value;\n        this._writableState.destroyed = value;\n      }\n    });\n  }\n});\n\n// node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js\nvar require_safe_buffer = __commonJS({\n  \"node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js\"(exports2, module2) {\n    var buffer = require_buffer();\n    var Buffer2 = buffer.Buffer;\n    function copyProps(src, dst) {\n      for (var key in src) {\n        dst[key] = src[key];\n      }\n    }\n    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {\n      module2.exports = buffer;\n    } else {\n      copyProps(buffer, exports2);\n      exports2.Buffer = SafeBuffer;\n    }\n    function SafeBuffer(arg, encodingOrOffset, length) {\n      return Buffer2(arg, encodingOrOffset, length);\n    }\n    SafeBuffer.prototype = Object.create(Buffer2.prototype);\n    copyProps(Buffer2, SafeBuffer);\n    SafeBuffer.from = function(arg, encodingOrOffset, length) {\n      if (typeof arg === \"number\") {\n        throw new TypeError(\"Argument must not be a number\");\n      }\n      return Buffer2(arg, encodingOrOffset, length);\n    };\n    SafeBuffer.alloc = function(size, fill, encoding) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      var buf = Buffer2(size);\n      if (fill !== void 0) {\n        if (typeof encoding === \"string\") {\n          buf.fill(fill, encoding);\n        } else {\n          buf.fill(fill);\n        }\n      } else {\n        buf.fill(0);\n      }\n      return buf;\n    };\n    SafeBuffer.allocUnsafe = function(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      return Buffer2(size);\n    };\n    SafeBuffer.allocUnsafeSlow = function(size) {\n      if (typeof size !== \"number\") {\n        throw new TypeError(\"Argument must be a number\");\n      }\n      return buffer.SlowBuffer(size);\n    };\n  }\n});\n\n// node_modules/.pnpm/string_decoder@1.3.0/node_modules/string_decoder/lib/string_decoder.js\nvar require_string_decoder = __commonJS({\n  \"node_modules/.pnpm/string_decoder@1.3.0/node_modules/string_decoder/lib/string_decoder.js\"(exports2) {\n    \"use strict\";\n    var Buffer2 = require_safe_buffer().Buffer;\n    var isEncoding = Buffer2.isEncoding || function(encoding) {\n      encoding = \"\" + encoding;\n      switch (encoding && encoding.toLowerCase()) {\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n        case \"raw\":\n          return true;\n        default:\n          return false;\n      }\n    };\n    function _normalizeEncoding(enc) {\n      if (!enc)\n        return \"utf8\";\n      var retried;\n      while (true) {\n        switch (enc) {\n          case \"utf8\":\n          case \"utf-8\":\n            return \"utf8\";\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return \"utf16le\";\n          case \"latin1\":\n          case \"binary\":\n            return \"latin1\";\n          case \"base64\":\n          case \"ascii\":\n          case \"hex\":\n            return enc;\n          default:\n            if (retried)\n              return;\n            enc = (\"\" + enc).toLowerCase();\n            retried = true;\n        }\n      }\n    }\n    function normalizeEncoding(enc) {\n      var nenc = _normalizeEncoding(enc);\n      if (typeof nenc !== \"string\" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))\n        throw new Error(\"Unknown encoding: \" + enc);\n      return nenc || enc;\n    }\n    exports2.StringDecoder = StringDecoder;\n    function StringDecoder(encoding) {\n      this.encoding = normalizeEncoding(encoding);\n      var nb;\n      switch (this.encoding) {\n        case \"utf16le\":\n          this.text = utf16Text;\n          this.end = utf16End;\n          nb = 4;\n          break;\n        case \"utf8\":\n          this.fillLast = utf8FillLast;\n          nb = 4;\n          break;\n        case \"base64\":\n          this.text = base64Text;\n          this.end = base64End;\n          nb = 3;\n          break;\n        default:\n          this.write = simpleWrite;\n          this.end = simpleEnd;\n          return;\n      }\n      this.lastNeed = 0;\n      this.lastTotal = 0;\n      this.lastChar = Buffer2.allocUnsafe(nb);\n    }\n    StringDecoder.prototype.write = function(buf) {\n      if (buf.length === 0)\n        return \"\";\n      var r;\n      var i;\n      if (this.lastNeed) {\n        r = this.fillLast(buf);\n        if (r === void 0)\n          return \"\";\n        i = this.lastNeed;\n        this.lastNeed = 0;\n      } else {\n        i = 0;\n      }\n      if (i < buf.length)\n        return r ? r + this.text(buf, i) : this.text(buf, i);\n      return r || \"\";\n    };\n    StringDecoder.prototype.end = utf8End;\n    StringDecoder.prototype.text = utf8Text;\n    StringDecoder.prototype.fillLast = function(buf) {\n      if (this.lastNeed <= buf.length) {\n        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n        return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n      }\n      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n      this.lastNeed -= buf.length;\n    };\n    function utf8CheckByte(byte) {\n      if (byte <= 127)\n        return 0;\n      else if (byte >> 5 === 6)\n        return 2;\n      else if (byte >> 4 === 14)\n        return 3;\n      else if (byte >> 3 === 30)\n        return 4;\n      return byte >> 6 === 2 ? -1 : -2;\n    }\n    function utf8CheckIncomplete(self, buf, i) {\n      var j = buf.length - 1;\n      if (j < i)\n        return 0;\n      var nb = utf8CheckByte(buf[j]);\n      if (nb >= 0) {\n        if (nb > 0)\n          self.lastNeed = nb - 1;\n        return nb;\n      }\n      if (--j < i || nb === -2)\n        return 0;\n      nb = utf8CheckByte(buf[j]);\n      if (nb >= 0) {\n        if (nb > 0)\n          self.lastNeed = nb - 2;\n        return nb;\n      }\n      if (--j < i || nb === -2)\n        return 0;\n      nb = utf8CheckByte(buf[j]);\n      if (nb >= 0) {\n        if (nb > 0) {\n          if (nb === 2)\n            nb = 0;\n          else\n            self.lastNeed = nb - 3;\n        }\n        return nb;\n      }\n      return 0;\n    }\n    function utf8CheckExtraBytes(self, buf, p) {\n      if ((buf[0] & 192) !== 128) {\n        self.lastNeed = 0;\n        return \"\\uFFFD\";\n      }\n      if (self.lastNeed > 1 && buf.length > 1) {\n        if ((buf[1] & 192) !== 128) {\n          self.lastNeed = 1;\n          return \"\\uFFFD\";\n        }\n        if (self.lastNeed > 2 && buf.length > 2) {\n          if ((buf[2] & 192) !== 128) {\n            self.lastNeed = 2;\n            return \"\\uFFFD\";\n          }\n        }\n      }\n    }\n    function utf8FillLast(buf) {\n      var p = this.lastTotal - this.lastNeed;\n      var r = utf8CheckExtraBytes(this, buf, p);\n      if (r !== void 0)\n        return r;\n      if (this.lastNeed <= buf.length) {\n        buf.copy(this.lastChar, p, 0, this.lastNeed);\n        return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n      }\n      buf.copy(this.lastChar, p, 0, buf.length);\n      this.lastNeed -= buf.length;\n    }\n    function utf8Text(buf, i) {\n      var total = utf8CheckIncomplete(this, buf, i);\n      if (!this.lastNeed)\n        return buf.toString(\"utf8\", i);\n      this.lastTotal = total;\n      var end = buf.length - (total - this.lastNeed);\n      buf.copy(this.lastChar, 0, end);\n      return buf.toString(\"utf8\", i, end);\n    }\n    function utf8End(buf) {\n      var r = buf && buf.length ? this.write(buf) : \"\";\n      if (this.lastNeed)\n        return r + \"\\uFFFD\";\n      return r;\n    }\n    function utf16Text(buf, i) {\n      if ((buf.length - i) % 2 === 0) {\n        var r = buf.toString(\"utf16le\", i);\n        if (r) {\n          var c = r.charCodeAt(r.length - 1);\n          if (c >= 55296 && c <= 56319) {\n            this.lastNeed = 2;\n            this.lastTotal = 4;\n            this.lastChar[0] = buf[buf.length - 2];\n            this.lastChar[1] = buf[buf.length - 1];\n            return r.slice(0, -1);\n          }\n        }\n        return r;\n      }\n      this.lastNeed = 1;\n      this.lastTotal = 2;\n      this.lastChar[0] = buf[buf.length - 1];\n      return buf.toString(\"utf16le\", i, buf.length - 1);\n    }\n    function utf16End(buf) {\n      var r = buf && buf.length ? this.write(buf) : \"\";\n      if (this.lastNeed) {\n        var end = this.lastTotal - this.lastNeed;\n        return r + this.lastChar.toString(\"utf16le\", 0, end);\n      }\n      return r;\n    }\n    function base64Text(buf, i) {\n      var n = (buf.length - i) % 3;\n      if (n === 0)\n        return buf.toString(\"base64\", i);\n      this.lastNeed = 3 - n;\n      this.lastTotal = 3;\n      if (n === 1) {\n        this.lastChar[0] = buf[buf.length - 1];\n      } else {\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n      }\n      return buf.toString(\"base64\", i, buf.length - n);\n    }\n    function base64End(buf) {\n      var r = buf && buf.length ? this.write(buf) : \"\";\n      if (this.lastNeed)\n        return r + this.lastChar.toString(\"base64\", 0, 3 - this.lastNeed);\n      return r;\n    }\n    function simpleWrite(buf) {\n      return buf.toString(this.encoding);\n    }\n    function simpleEnd(buf) {\n      return buf && buf.length ? this.write(buf) : \"\";\n    }\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\nvar require_end_of_stream = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\"(exports2, module2) {\n    \"use strict\";\n    var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser().codes.ERR_STREAM_PREMATURE_CLOSE;\n    function once(callback) {\n      var called = false;\n      return function() {\n        if (called)\n          return;\n        called = true;\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        callback.apply(this, args);\n      };\n    }\n    function noop() {\n    }\n    function isRequest(stream) {\n      return stream.setHeader && typeof stream.abort === \"function\";\n    }\n    function eos(stream, opts, callback) {\n      if (typeof opts === \"function\")\n        return eos(stream, null, opts);\n      if (!opts)\n        opts = {};\n      callback = once(callback || noop);\n      var readable = opts.readable || opts.readable !== false && stream.readable;\n      var writable = opts.writable || opts.writable !== false && stream.writable;\n      var onlegacyfinish = function onlegacyfinish2() {\n        if (!stream.writable)\n          onfinish();\n      };\n      var writableEnded = stream._writableState && stream._writableState.finished;\n      var onfinish = function onfinish2() {\n        writable = false;\n        writableEnded = true;\n        if (!readable)\n          callback.call(stream);\n      };\n      var readableEnded = stream._readableState && stream._readableState.endEmitted;\n      var onend = function onend2() {\n        readable = false;\n        readableEnded = true;\n        if (!writable)\n          callback.call(stream);\n      };\n      var onerror = function onerror2(err) {\n        callback.call(stream, err);\n      };\n      var onclose = function onclose2() {\n        var err;\n        if (readable && !readableEnded) {\n          if (!stream._readableState || !stream._readableState.ended)\n            err = new ERR_STREAM_PREMATURE_CLOSE();\n          return callback.call(stream, err);\n        }\n        if (writable && !writableEnded) {\n          if (!stream._writableState || !stream._writableState.ended)\n            err = new ERR_STREAM_PREMATURE_CLOSE();\n          return callback.call(stream, err);\n        }\n      };\n      var onrequest = function onrequest2() {\n        stream.req.on(\"finish\", onfinish);\n      };\n      if (isRequest(stream)) {\n        stream.on(\"complete\", onfinish);\n        stream.on(\"abort\", onclose);\n        if (stream.req)\n          onrequest();\n        else\n          stream.on(\"request\", onrequest);\n      } else if (writable && !stream._writableState) {\n        stream.on(\"end\", onlegacyfinish);\n        stream.on(\"close\", onlegacyfinish);\n      }\n      stream.on(\"end\", onend);\n      stream.on(\"finish\", onfinish);\n      if (opts.error !== false)\n        stream.on(\"error\", onerror);\n      stream.on(\"close\", onclose);\n      return function() {\n        stream.removeListener(\"complete\", onfinish);\n        stream.removeListener(\"abort\", onclose);\n        stream.removeListener(\"request\", onrequest);\n        if (stream.req)\n          stream.req.removeListener(\"finish\", onfinish);\n        stream.removeListener(\"end\", onlegacyfinish);\n        stream.removeListener(\"close\", onlegacyfinish);\n        stream.removeListener(\"finish\", onfinish);\n        stream.removeListener(\"end\", onend);\n        stream.removeListener(\"error\", onerror);\n        stream.removeListener(\"close\", onclose);\n      };\n    }\n    module2.exports = eos;\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/async_iterator.js\nvar require_async_iterator = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/async_iterator.js\"(exports2, module2) {\n    \"use strict\";\n    var _Object$setPrototypeO;\n    function _defineProperty(obj, key, value) {\n      if (key in obj) {\n        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });\n      } else {\n        obj[key] = value;\n      }\n      return obj;\n    }\n    var finished = require_end_of_stream();\n    var kLastResolve = Symbol(\"lastResolve\");\n    var kLastReject = Symbol(\"lastReject\");\n    var kError = Symbol(\"error\");\n    var kEnded = Symbol(\"ended\");\n    var kLastPromise = Symbol(\"lastPromise\");\n    var kHandlePromise = Symbol(\"handlePromise\");\n    var kStream = Symbol(\"stream\");\n    function createIterResult(value, done) {\n      return {\n        value,\n        done\n      };\n    }\n    function readAndResolve(iter) {\n      var resolve = iter[kLastResolve];\n      if (resolve !== null) {\n        var data = iter[kStream].read();\n        if (data !== null) {\n          iter[kLastPromise] = null;\n          iter[kLastResolve] = null;\n          iter[kLastReject] = null;\n          resolve(createIterResult(data, false));\n        }\n      }\n    }\n    function onReadable(iter) {\n      process.nextTick(readAndResolve, iter);\n    }\n    function wrapForNext(lastPromise, iter) {\n      return function(resolve, reject) {\n        lastPromise.then(function() {\n          if (iter[kEnded]) {\n            resolve(createIterResult(void 0, true));\n            return;\n          }\n          iter[kHandlePromise](resolve, reject);\n        }, reject);\n      };\n    }\n    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {\n    });\n    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n      get stream() {\n        return this[kStream];\n      },\n      next: function next() {\n        var _this = this;\n        var error = this[kError];\n        if (error !== null) {\n          return Promise.reject(error);\n        }\n        if (this[kEnded]) {\n          return Promise.resolve(createIterResult(void 0, true));\n        }\n        if (this[kStream].destroyed) {\n          return new Promise(function(resolve, reject) {\n            process.nextTick(function() {\n              if (_this[kError]) {\n                reject(_this[kError]);\n              } else {\n                resolve(createIterResult(void 0, true));\n              }\n            });\n          });\n        }\n        var lastPromise = this[kLastPromise];\n        var promise;\n        if (lastPromise) {\n          promise = new Promise(wrapForNext(lastPromise, this));\n        } else {\n          var data = this[kStream].read();\n          if (data !== null) {\n            return Promise.resolve(createIterResult(data, false));\n          }\n          promise = new Promise(this[kHandlePromise]);\n        }\n        this[kLastPromise] = promise;\n        return promise;\n      }\n    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {\n      return this;\n    }), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n      var _this2 = this;\n      return new Promise(function(resolve, reject) {\n        _this2[kStream].destroy(null, function(err) {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(createIterResult(void 0, true));\n        });\n      });\n    }), _Object$setPrototypeO), AsyncIteratorPrototype);\n    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {\n      var _Object$create;\n      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n        value: stream,\n        writable: true\n      }), _defineProperty(_Object$create, kLastResolve, {\n        value: null,\n        writable: true\n      }), _defineProperty(_Object$create, kLastReject, {\n        value: null,\n        writable: true\n      }), _defineProperty(_Object$create, kError, {\n        value: null,\n        writable: true\n      }), _defineProperty(_Object$create, kEnded, {\n        value: stream._readableState.endEmitted,\n        writable: true\n      }), _defineProperty(_Object$create, kHandlePromise, {\n        value: function value(resolve, reject) {\n          var data = iterator[kStream].read();\n          if (data) {\n            iterator[kLastPromise] = null;\n            iterator[kLastResolve] = null;\n            iterator[kLastReject] = null;\n            resolve(createIterResult(data, false));\n          } else {\n            iterator[kLastResolve] = resolve;\n            iterator[kLastReject] = reject;\n          }\n        },\n        writable: true\n      }), _Object$create));\n      iterator[kLastPromise] = null;\n      finished(stream, function(err) {\n        if (err && err.code !== \"ERR_STREAM_PREMATURE_CLOSE\") {\n          var reject = iterator[kLastReject];\n          if (reject !== null) {\n            iterator[kLastPromise] = null;\n            iterator[kLastResolve] = null;\n            iterator[kLastReject] = null;\n            reject(err);\n          }\n          iterator[kError] = err;\n          return;\n        }\n        var resolve = iterator[kLastResolve];\n        if (resolve !== null) {\n          iterator[kLastPromise] = null;\n          iterator[kLastResolve] = null;\n          iterator[kLastReject] = null;\n          resolve(createIterResult(void 0, true));\n        }\n        iterator[kEnded] = true;\n      });\n      stream.on(\"readable\", onReadable.bind(null, iterator));\n      return iterator;\n    };\n    module2.exports = createReadableStreamAsyncIterator;\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/from-browser.js\nvar require_from_browser = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/from-browser.js\"(exports2, module2) {\n    module2.exports = function() {\n      throw new Error(\"Readable.from is not available in the browser\");\n    };\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_readable.js\nvar require_stream_readable = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_readable.js\"(exports2, module2) {\n    \"use strict\";\n    module2.exports = Readable;\n    var Duplex;\n    Readable.ReadableState = ReadableState;\n    var EE = require_events().EventEmitter;\n    var EElistenerCount = function EElistenerCount2(emitter, type) {\n      return emitter.listeners(type).length;\n    };\n    var Stream = require_stream_browser();\n    var Buffer2 = require_buffer().Buffer;\n    var OurUint8Array = commonjsHelpers.commonjsGlobal.Uint8Array || function() {\n    };\n    function _uint8ArrayToBuffer(chunk) {\n      return Buffer2.from(chunk);\n    }\n    function _isUint8Array(obj) {\n      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;\n    }\n    var debugUtil = require_util();\n    var debug;\n    if (debugUtil && debugUtil.debuglog) {\n      debug = debugUtil.debuglog(\"stream\");\n    } else {\n      debug = function debug2() {\n      };\n    }\n    var BufferList = require_buffer_list();\n    var destroyImpl = require_destroy();\n    var _require = require_state();\n    var getHighWaterMark = _require.getHighWaterMark;\n    var _require$codes = require_errors_browser().codes;\n    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;\n    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;\n    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;\n    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;\n    var StringDecoder;\n    var createReadableStreamAsyncIterator;\n    var from;\n    require_inherits_browser()(Readable, Stream);\n    var errorOrDestroy = destroyImpl.errorOrDestroy;\n    var kProxyEvents = [\"error\", \"close\", \"destroy\", \"pause\", \"resume\"];\n    function prependListener(emitter, event, fn) {\n      if (typeof emitter.prependListener === \"function\")\n        return emitter.prependListener(event, fn);\n      if (!emitter._events || !emitter._events[event])\n        emitter.on(event, fn);\n      else if (Array.isArray(emitter._events[event]))\n        emitter._events[event].unshift(fn);\n      else\n        emitter._events[event] = [fn, emitter._events[event]];\n    }\n    function ReadableState(options, stream, isDuplex) {\n      Duplex = Duplex || require_stream_duplex();\n      options = options || {};\n      if (typeof isDuplex !== \"boolean\")\n        isDuplex = stream instanceof Duplex;\n      this.objectMode = !!options.objectMode;\n      if (isDuplex)\n        this.objectMode = this.objectMode || !!options.readableObjectMode;\n      this.highWaterMark = getHighWaterMark(this, options, \"readableHighWaterMark\", isDuplex);\n      this.buffer = new BufferList();\n      this.length = 0;\n      this.pipes = null;\n      this.pipesCount = 0;\n      this.flowing = null;\n      this.ended = false;\n      this.endEmitted = false;\n      this.reading = false;\n      this.sync = true;\n      this.needReadable = false;\n      this.emittedReadable = false;\n      this.readableListening = false;\n      this.resumeScheduled = false;\n      this.paused = true;\n      this.emitClose = options.emitClose !== false;\n      this.autoDestroy = !!options.autoDestroy;\n      this.destroyed = false;\n      this.defaultEncoding = options.defaultEncoding || \"utf8\";\n      this.awaitDrain = 0;\n      this.readingMore = false;\n      this.decoder = null;\n      this.encoding = null;\n      if (options.encoding) {\n        if (!StringDecoder)\n          StringDecoder = require_string_decoder().StringDecoder;\n        this.decoder = new StringDecoder(options.encoding);\n        this.encoding = options.encoding;\n      }\n    }\n    function Readable(options) {\n      Duplex = Duplex || require_stream_duplex();\n      if (!(this instanceof Readable))\n        return new Readable(options);\n      var isDuplex = this instanceof Duplex;\n      this._readableState = new ReadableState(options, this, isDuplex);\n      this.readable = true;\n      if (options) {\n        if (typeof options.read === \"function\")\n          this._read = options.read;\n        if (typeof options.destroy === \"function\")\n          this._destroy = options.destroy;\n      }\n      Stream.call(this);\n    }\n    Object.defineProperty(Readable.prototype, \"destroyed\", {\n      enumerable: false,\n      get: function get() {\n        if (this._readableState === void 0) {\n          return false;\n        }\n        return this._readableState.destroyed;\n      },\n      set: function set(value) {\n        if (!this._readableState) {\n          return;\n        }\n        this._readableState.destroyed = value;\n      }\n    });\n    Readable.prototype.destroy = destroyImpl.destroy;\n    Readable.prototype._undestroy = destroyImpl.undestroy;\n    Readable.prototype._destroy = function(err, cb) {\n      cb(err);\n    };\n    Readable.prototype.push = function(chunk, encoding) {\n      var state = this._readableState;\n      var skipChunkCheck;\n      if (!state.objectMode) {\n        if (typeof chunk === \"string\") {\n          encoding = encoding || state.defaultEncoding;\n          if (encoding !== state.encoding) {\n            chunk = Buffer2.from(chunk, encoding);\n            encoding = \"\";\n          }\n          skipChunkCheck = true;\n        }\n      } else {\n        skipChunkCheck = true;\n      }\n      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n    };\n    Readable.prototype.unshift = function(chunk) {\n      return readableAddChunk(this, chunk, null, true, false);\n    };\n    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n      debug(\"readableAddChunk\", chunk);\n      var state = stream._readableState;\n      if (chunk === null) {\n        state.reading = false;\n        onEofChunk(stream, state);\n      } else {\n        var er;\n        if (!skipChunkCheck)\n          er = chunkInvalid(state, chunk);\n        if (er) {\n          errorOrDestroy(stream, er);\n        } else if (state.objectMode || chunk && chunk.length > 0) {\n          if (typeof chunk !== \"string\" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {\n            chunk = _uint8ArrayToBuffer(chunk);\n          }\n          if (addToFront) {\n            if (state.endEmitted)\n              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());\n            else\n              addChunk(stream, state, chunk, true);\n          } else if (state.ended) {\n            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n          } else if (state.destroyed) {\n            return false;\n          } else {\n            state.reading = false;\n            if (state.decoder && !encoding) {\n              chunk = state.decoder.write(chunk);\n              if (state.objectMode || chunk.length !== 0)\n                addChunk(stream, state, chunk, false);\n              else\n                maybeReadMore(stream, state);\n            } else {\n              addChunk(stream, state, chunk, false);\n            }\n          }\n        } else if (!addToFront) {\n          state.reading = false;\n          maybeReadMore(stream, state);\n        }\n      }\n      return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n    }\n    function addChunk(stream, state, chunk, addToFront) {\n      if (state.flowing && state.length === 0 && !state.sync) {\n        state.awaitDrain = 0;\n        stream.emit(\"data\", chunk);\n      } else {\n        state.length += state.objectMode ? 1 : chunk.length;\n        if (addToFront)\n          state.buffer.unshift(chunk);\n        else\n          state.buffer.push(chunk);\n        if (state.needReadable)\n          emitReadable(stream);\n      }\n      maybeReadMore(stream, state);\n    }\n    function chunkInvalid(state, chunk) {\n      var er;\n      if (!_isUint8Array(chunk) && typeof chunk !== \"string\" && chunk !== void 0 && !state.objectMode) {\n        er = new ERR_INVALID_ARG_TYPE(\"chunk\", [\"string\", \"Buffer\", \"Uint8Array\"], chunk);\n      }\n      return er;\n    }\n    Readable.prototype.isPaused = function() {\n      return this._readableState.flowing === false;\n    };\n    Readable.prototype.setEncoding = function(enc) {\n      if (!StringDecoder)\n        StringDecoder = require_string_decoder().StringDecoder;\n      var decoder = new StringDecoder(enc);\n      this._readableState.decoder = decoder;\n      this._readableState.encoding = this._readableState.decoder.encoding;\n      var p = this._readableState.buffer.head;\n      var content = \"\";\n      while (p !== null) {\n        content += decoder.write(p.data);\n        p = p.next;\n      }\n      this._readableState.buffer.clear();\n      if (content !== \"\")\n        this._readableState.buffer.push(content);\n      this._readableState.length = content.length;\n      return this;\n    };\n    var MAX_HWM = 1073741824;\n    function computeNewHighWaterMark(n) {\n      if (n >= MAX_HWM) {\n        n = MAX_HWM;\n      } else {\n        n--;\n        n |= n >>> 1;\n        n |= n >>> 2;\n        n |= n >>> 4;\n        n |= n >>> 8;\n        n |= n >>> 16;\n        n++;\n      }\n      return n;\n    }\n    function howMuchToRead(n, state) {\n      if (n <= 0 || state.length === 0 && state.ended)\n        return 0;\n      if (state.objectMode)\n        return 1;\n      if (n !== n) {\n        if (state.flowing && state.length)\n          return state.buffer.head.data.length;\n        else\n          return state.length;\n      }\n      if (n > state.highWaterMark)\n        state.highWaterMark = computeNewHighWaterMark(n);\n      if (n <= state.length)\n        return n;\n      if (!state.ended) {\n        state.needReadable = true;\n        return 0;\n      }\n      return state.length;\n    }\n    Readable.prototype.read = function(n) {\n      debug(\"read\", n);\n      n = parseInt(n, 10);\n      var state = this._readableState;\n      var nOrig = n;\n      if (n !== 0)\n        state.emittedReadable = false;\n      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n        debug(\"read: emitReadable\", state.length, state.ended);\n        if (state.length === 0 && state.ended)\n          endReadable(this);\n        else\n          emitReadable(this);\n        return null;\n      }\n      n = howMuchToRead(n, state);\n      if (n === 0 && state.ended) {\n        if (state.length === 0)\n          endReadable(this);\n        return null;\n      }\n      var doRead = state.needReadable;\n      debug(\"need readable\", doRead);\n      if (state.length === 0 || state.length - n < state.highWaterMark) {\n        doRead = true;\n        debug(\"length less than watermark\", doRead);\n      }\n      if (state.ended || state.reading) {\n        doRead = false;\n        debug(\"reading or ended\", doRead);\n      } else if (doRead) {\n        debug(\"do read\");\n        state.reading = true;\n        state.sync = true;\n        if (state.length === 0)\n          state.needReadable = true;\n        this._read(state.highWaterMark);\n        state.sync = false;\n        if (!state.reading)\n          n = howMuchToRead(nOrig, state);\n      }\n      var ret;\n      if (n > 0)\n        ret = fromList(n, state);\n      else\n        ret = null;\n      if (ret === null) {\n        state.needReadable = state.length <= state.highWaterMark;\n        n = 0;\n      } else {\n        state.length -= n;\n        state.awaitDrain = 0;\n      }\n      if (state.length === 0) {\n        if (!state.ended)\n          state.needReadable = true;\n        if (nOrig !== n && state.ended)\n          endReadable(this);\n      }\n      if (ret !== null)\n        this.emit(\"data\", ret);\n      return ret;\n    };\n    function onEofChunk(stream, state) {\n      debug(\"onEofChunk\");\n      if (state.ended)\n        return;\n      if (state.decoder) {\n        var chunk = state.decoder.end();\n        if (chunk && chunk.length) {\n          state.buffer.push(chunk);\n          state.length += state.objectMode ? 1 : chunk.length;\n        }\n      }\n      state.ended = true;\n      if (state.sync) {\n        emitReadable(stream);\n      } else {\n        state.needReadable = false;\n        if (!state.emittedReadable) {\n          state.emittedReadable = true;\n          emitReadable_(stream);\n        }\n      }\n    }\n    function emitReadable(stream) {\n      var state = stream._readableState;\n      debug(\"emitReadable\", state.needReadable, state.emittedReadable);\n      state.needReadable = false;\n      if (!state.emittedReadable) {\n        debug(\"emitReadable\", state.flowing);\n        state.emittedReadable = true;\n        process.nextTick(emitReadable_, stream);\n      }\n    }\n    function emitReadable_(stream) {\n      var state = stream._readableState;\n      debug(\"emitReadable_\", state.destroyed, state.length, state.ended);\n      if (!state.destroyed && (state.length || state.ended)) {\n        stream.emit(\"readable\");\n        state.emittedReadable = false;\n      }\n      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n      flow(stream);\n    }\n    function maybeReadMore(stream, state) {\n      if (!state.readingMore) {\n        state.readingMore = true;\n        process.nextTick(maybeReadMore_, stream, state);\n      }\n    }\n    function maybeReadMore_(stream, state) {\n      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n        var len = state.length;\n        debug(\"maybeReadMore read 0\");\n        stream.read(0);\n        if (len === state.length)\n          break;\n      }\n      state.readingMore = false;\n    }\n    Readable.prototype._read = function(n) {\n      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED(\"_read()\"));\n    };\n    Readable.prototype.pipe = function(dest, pipeOpts) {\n      var src = this;\n      var state = this._readableState;\n      switch (state.pipesCount) {\n        case 0:\n          state.pipes = dest;\n          break;\n        case 1:\n          state.pipes = [state.pipes, dest];\n          break;\n        default:\n          state.pipes.push(dest);\n          break;\n      }\n      state.pipesCount += 1;\n      debug(\"pipe count=%d opts=%j\", state.pipesCount, pipeOpts);\n      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n      var endFn = doEnd ? onend : unpipe;\n      if (state.endEmitted)\n        process.nextTick(endFn);\n      else\n        src.once(\"end\", endFn);\n      dest.on(\"unpipe\", onunpipe);\n      function onunpipe(readable, unpipeInfo) {\n        debug(\"onunpipe\");\n        if (readable === src) {\n          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n            unpipeInfo.hasUnpiped = true;\n            cleanup();\n          }\n        }\n      }\n      function onend() {\n        debug(\"onend\");\n        dest.end();\n      }\n      var ondrain = pipeOnDrain(src);\n      dest.on(\"drain\", ondrain);\n      var cleanedUp = false;\n      function cleanup() {\n        debug(\"cleanup\");\n        dest.removeListener(\"close\", onclose);\n        dest.removeListener(\"finish\", onfinish);\n        dest.removeListener(\"drain\", ondrain);\n        dest.removeListener(\"error\", onerror);\n        dest.removeListener(\"unpipe\", onunpipe);\n        src.removeListener(\"end\", onend);\n        src.removeListener(\"end\", unpipe);\n        src.removeListener(\"data\", ondata);\n        cleanedUp = true;\n        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))\n          ondrain();\n      }\n      src.on(\"data\", ondata);\n      function ondata(chunk) {\n        debug(\"ondata\");\n        var ret = dest.write(chunk);\n        debug(\"dest.write\", ret);\n        if (ret === false) {\n          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n            debug(\"false write response, pause\", state.awaitDrain);\n            state.awaitDrain++;\n          }\n          src.pause();\n        }\n      }\n      function onerror(er) {\n        debug(\"onerror\", er);\n        unpipe();\n        dest.removeListener(\"error\", onerror);\n        if (EElistenerCount(dest, \"error\") === 0)\n          errorOrDestroy(dest, er);\n      }\n      prependListener(dest, \"error\", onerror);\n      function onclose() {\n        dest.removeListener(\"finish\", onfinish);\n        unpipe();\n      }\n      dest.once(\"close\", onclose);\n      function onfinish() {\n        debug(\"onfinish\");\n        dest.removeListener(\"close\", onclose);\n        unpipe();\n      }\n      dest.once(\"finish\", onfinish);\n      function unpipe() {\n        debug(\"unpipe\");\n        src.unpipe(dest);\n      }\n      dest.emit(\"pipe\", src);\n      if (!state.flowing) {\n        debug(\"pipe resume\");\n        src.resume();\n      }\n      return dest;\n    };\n    function pipeOnDrain(src) {\n      return function pipeOnDrainFunctionResult() {\n        var state = src._readableState;\n        debug(\"pipeOnDrain\", state.awaitDrain);\n        if (state.awaitDrain)\n          state.awaitDrain--;\n        if (state.awaitDrain === 0 && EElistenerCount(src, \"data\")) {\n          state.flowing = true;\n          flow(src);\n        }\n      };\n    }\n    Readable.prototype.unpipe = function(dest) {\n      var state = this._readableState;\n      var unpipeInfo = {\n        hasUnpiped: false\n      };\n      if (state.pipesCount === 0)\n        return this;\n      if (state.pipesCount === 1) {\n        if (dest && dest !== state.pipes)\n          return this;\n        if (!dest)\n          dest = state.pipes;\n        state.pipes = null;\n        state.pipesCount = 0;\n        state.flowing = false;\n        if (dest)\n          dest.emit(\"unpipe\", this, unpipeInfo);\n        return this;\n      }\n      if (!dest) {\n        var dests = state.pipes;\n        var len = state.pipesCount;\n        state.pipes = null;\n        state.pipesCount = 0;\n        state.flowing = false;\n        for (var i = 0; i < len; i++) {\n          dests[i].emit(\"unpipe\", this, {\n            hasUnpiped: false\n          });\n        }\n        return this;\n      }\n      var index = indexOf(state.pipes, dest);\n      if (index === -1)\n        return this;\n      state.pipes.splice(index, 1);\n      state.pipesCount -= 1;\n      if (state.pipesCount === 1)\n        state.pipes = state.pipes[0];\n      dest.emit(\"unpipe\", this, unpipeInfo);\n      return this;\n    };\n    Readable.prototype.on = function(ev, fn) {\n      var res = Stream.prototype.on.call(this, ev, fn);\n      var state = this._readableState;\n      if (ev === \"data\") {\n        state.readableListening = this.listenerCount(\"readable\") > 0;\n        if (state.flowing !== false)\n          this.resume();\n      } else if (ev === \"readable\") {\n        if (!state.endEmitted && !state.readableListening) {\n          state.readableListening = state.needReadable = true;\n          state.flowing = false;\n          state.emittedReadable = false;\n          debug(\"on readable\", state.length, state.reading);\n          if (state.length) {\n            emitReadable(this);\n          } else if (!state.reading) {\n            process.nextTick(nReadingNextTick, this);\n          }\n        }\n      }\n      return res;\n    };\n    Readable.prototype.addListener = Readable.prototype.on;\n    Readable.prototype.removeListener = function(ev, fn) {\n      var res = Stream.prototype.removeListener.call(this, ev, fn);\n      if (ev === \"readable\") {\n        process.nextTick(updateReadableListening, this);\n      }\n      return res;\n    };\n    Readable.prototype.removeAllListeners = function(ev) {\n      var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n      if (ev === \"readable\" || ev === void 0) {\n        process.nextTick(updateReadableListening, this);\n      }\n      return res;\n    };\n    function updateReadableListening(self) {\n      var state = self._readableState;\n      state.readableListening = self.listenerCount(\"readable\") > 0;\n      if (state.resumeScheduled && !state.paused) {\n        state.flowing = true;\n      } else if (self.listenerCount(\"data\") > 0) {\n        self.resume();\n      }\n    }\n    function nReadingNextTick(self) {\n      debug(\"readable nexttick read 0\");\n      self.read(0);\n    }\n    Readable.prototype.resume = function() {\n      var state = this._readableState;\n      if (!state.flowing) {\n        debug(\"resume\");\n        state.flowing = !state.readableListening;\n        resume(this, state);\n      }\n      state.paused = false;\n      return this;\n    };\n    function resume(stream, state) {\n      if (!state.resumeScheduled) {\n        state.resumeScheduled = true;\n        process.nextTick(resume_, stream, state);\n      }\n    }\n    function resume_(stream, state) {\n      debug(\"resume\", state.reading);\n      if (!state.reading) {\n        stream.read(0);\n      }\n      state.resumeScheduled = false;\n      stream.emit(\"resume\");\n      flow(stream);\n      if (state.flowing && !state.reading)\n        stream.read(0);\n    }\n    Readable.prototype.pause = function() {\n      debug(\"call pause flowing=%j\", this._readableState.flowing);\n      if (this._readableState.flowing !== false) {\n        debug(\"pause\");\n        this._readableState.flowing = false;\n        this.emit(\"pause\");\n      }\n      this._readableState.paused = true;\n      return this;\n    };\n    function flow(stream) {\n      var state = stream._readableState;\n      debug(\"flow\", state.flowing);\n      while (state.flowing && stream.read() !== null) {\n        ;\n      }\n    }\n    Readable.prototype.wrap = function(stream) {\n      var _this = this;\n      var state = this._readableState;\n      var paused = false;\n      stream.on(\"end\", function() {\n        debug(\"wrapped end\");\n        if (state.decoder && !state.ended) {\n          var chunk = state.decoder.end();\n          if (chunk && chunk.length)\n            _this.push(chunk);\n        }\n        _this.push(null);\n      });\n      stream.on(\"data\", function(chunk) {\n        debug(\"wrapped data\");\n        if (state.decoder)\n          chunk = state.decoder.write(chunk);\n        if (state.objectMode && (chunk === null || chunk === void 0))\n          return;\n        else if (!state.objectMode && (!chunk || !chunk.length))\n          return;\n        var ret = _this.push(chunk);\n        if (!ret) {\n          paused = true;\n          stream.pause();\n        }\n      });\n      for (var i in stream) {\n        if (this[i] === void 0 && typeof stream[i] === \"function\") {\n          this[i] = function methodWrap(method) {\n            return function methodWrapReturnFunction() {\n              return stream[method].apply(stream, arguments);\n            };\n          }(i);\n        }\n      }\n      for (var n = 0; n < kProxyEvents.length; n++) {\n        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n      }\n      this._read = function(n2) {\n        debug(\"wrapped _read\", n2);\n        if (paused) {\n          paused = false;\n          stream.resume();\n        }\n      };\n      return this;\n    };\n    if (typeof Symbol === \"function\") {\n      Readable.prototype[Symbol.asyncIterator] = function() {\n        if (createReadableStreamAsyncIterator === void 0) {\n          createReadableStreamAsyncIterator = require_async_iterator();\n        }\n        return createReadableStreamAsyncIterator(this);\n      };\n    }\n    Object.defineProperty(Readable.prototype, \"readableHighWaterMark\", {\n      enumerable: false,\n      get: function get() {\n        return this._readableState.highWaterMark;\n      }\n    });\n    Object.defineProperty(Readable.prototype, \"readableBuffer\", {\n      enumerable: false,\n      get: function get() {\n        return this._readableState && this._readableState.buffer;\n      }\n    });\n    Object.defineProperty(Readable.prototype, \"readableFlowing\", {\n      enumerable: false,\n      get: function get() {\n        return this._readableState.flowing;\n      },\n      set: function set(state) {\n        if (this._readableState) {\n          this._readableState.flowing = state;\n        }\n      }\n    });\n    Readable._fromList = fromList;\n    Object.defineProperty(Readable.prototype, \"readableLength\", {\n      enumerable: false,\n      get: function get() {\n        return this._readableState.length;\n      }\n    });\n    function fromList(n, state) {\n      if (state.length === 0)\n        return null;\n      var ret;\n      if (state.objectMode)\n        ret = state.buffer.shift();\n      else if (!n || n >= state.length) {\n        if (state.decoder)\n          ret = state.buffer.join(\"\");\n        else if (state.buffer.length === 1)\n          ret = state.buffer.first();\n        else\n          ret = state.buffer.concat(state.length);\n        state.buffer.clear();\n      } else {\n        ret = state.buffer.consume(n, state.decoder);\n      }\n      return ret;\n    }\n    function endReadable(stream) {\n      var state = stream._readableState;\n      debug(\"endReadable\", state.endEmitted);\n      if (!state.endEmitted) {\n        state.ended = true;\n        process.nextTick(endReadableNT, state, stream);\n      }\n    }\n    function endReadableNT(state, stream) {\n      debug(\"endReadableNT\", state.endEmitted, state.length);\n      if (!state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.readable = false;\n        stream.emit(\"end\");\n        if (state.autoDestroy) {\n          var wState = stream._writableState;\n          if (!wState || wState.autoDestroy && wState.finished) {\n            stream.destroy();\n          }\n        }\n      }\n    }\n    if (typeof Symbol === \"function\") {\n      Readable.from = function(iterable, opts) {\n        if (from === void 0) {\n          from = require_from_browser();\n        }\n        return from(Readable, iterable, opts);\n      };\n    }\n    function indexOf(xs, x) {\n      for (var i = 0, l = xs.length; i < l; i++) {\n        if (xs[i] === x)\n          return i;\n      }\n      return -1;\n    }\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_transform.js\nvar require_stream_transform = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_transform.js\"(exports2, module2) {\n    \"use strict\";\n    module2.exports = Transform;\n    var _require$codes = require_errors_browser().codes;\n    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;\n    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;\n    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;\n    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n    var Duplex = require_stream_duplex();\n    require_inherits_browser()(Transform, Duplex);\n    function afterTransform(er, data) {\n      var ts = this._transformState;\n      ts.transforming = false;\n      var cb = ts.writecb;\n      if (cb === null) {\n        return this.emit(\"error\", new ERR_MULTIPLE_CALLBACK());\n      }\n      ts.writechunk = null;\n      ts.writecb = null;\n      if (data != null)\n        this.push(data);\n      cb(er);\n      var rs = this._readableState;\n      rs.reading = false;\n      if (rs.needReadable || rs.length < rs.highWaterMark) {\n        this._read(rs.highWaterMark);\n      }\n    }\n    function Transform(options) {\n      if (!(this instanceof Transform))\n        return new Transform(options);\n      Duplex.call(this, options);\n      this._transformState = {\n        afterTransform: afterTransform.bind(this),\n        needTransform: false,\n        transforming: false,\n        writecb: null,\n        writechunk: null,\n        writeencoding: null\n      };\n      this._readableState.needReadable = true;\n      this._readableState.sync = false;\n      if (options) {\n        if (typeof options.transform === \"function\")\n          this._transform = options.transform;\n        if (typeof options.flush === \"function\")\n          this._flush = options.flush;\n      }\n      this.on(\"prefinish\", prefinish);\n    }\n    function prefinish() {\n      var _this = this;\n      if (typeof this._flush === \"function\" && !this._readableState.destroyed) {\n        this._flush(function(er, data) {\n          done(_this, er, data);\n        });\n      } else {\n        done(this, null, null);\n      }\n    }\n    Transform.prototype.push = function(chunk, encoding) {\n      this._transformState.needTransform = false;\n      return Duplex.prototype.push.call(this, chunk, encoding);\n    };\n    Transform.prototype._transform = function(chunk, encoding, cb) {\n      cb(new ERR_METHOD_NOT_IMPLEMENTED(\"_transform()\"));\n    };\n    Transform.prototype._write = function(chunk, encoding, cb) {\n      var ts = this._transformState;\n      ts.writecb = cb;\n      ts.writechunk = chunk;\n      ts.writeencoding = encoding;\n      if (!ts.transforming) {\n        var rs = this._readableState;\n        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)\n          this._read(rs.highWaterMark);\n      }\n    };\n    Transform.prototype._read = function(n) {\n      var ts = this._transformState;\n      if (ts.writechunk !== null && !ts.transforming) {\n        ts.transforming = true;\n        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n      } else {\n        ts.needTransform = true;\n      }\n    };\n    Transform.prototype._destroy = function(err, cb) {\n      Duplex.prototype._destroy.call(this, err, function(err2) {\n        cb(err2);\n      });\n    };\n    function done(stream, er, data) {\n      if (er)\n        return stream.emit(\"error\", er);\n      if (data != null)\n        stream.push(data);\n      if (stream._writableState.length)\n        throw new ERR_TRANSFORM_WITH_LENGTH_0();\n      if (stream._transformState.transforming)\n        throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n      return stream.push(null);\n    }\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_passthrough.js\nvar require_stream_passthrough = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_passthrough.js\"(exports2, module2) {\n    \"use strict\";\n    module2.exports = PassThrough;\n    var Transform = require_stream_transform();\n    require_inherits_browser()(PassThrough, Transform);\n    function PassThrough(options) {\n      if (!(this instanceof PassThrough))\n        return new PassThrough(options);\n      Transform.call(this, options);\n    }\n    PassThrough.prototype._transform = function(chunk, encoding, cb) {\n      cb(null, chunk);\n    };\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/pipeline.js\nvar require_pipeline = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/pipeline.js\"(exports2, module2) {\n    \"use strict\";\n    var eos;\n    function once(callback) {\n      var called = false;\n      return function() {\n        if (called)\n          return;\n        called = true;\n        callback.apply(void 0, arguments);\n      };\n    }\n    var _require$codes = require_errors_browser().codes;\n    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;\n    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n    function noop(err) {\n      if (err)\n        throw err;\n    }\n    function isRequest(stream) {\n      return stream.setHeader && typeof stream.abort === \"function\";\n    }\n    function destroyer(stream, reading, writing, callback) {\n      callback = once(callback);\n      var closed = false;\n      stream.on(\"close\", function() {\n        closed = true;\n      });\n      if (eos === void 0)\n        eos = require_end_of_stream();\n      eos(stream, {\n        readable: reading,\n        writable: writing\n      }, function(err) {\n        if (err)\n          return callback(err);\n        closed = true;\n        callback();\n      });\n      var destroyed = false;\n      return function(err) {\n        if (closed)\n          return;\n        if (destroyed)\n          return;\n        destroyed = true;\n        if (isRequest(stream))\n          return stream.abort();\n        if (typeof stream.destroy === \"function\")\n          return stream.destroy();\n        callback(err || new ERR_STREAM_DESTROYED(\"pipe\"));\n      };\n    }\n    function call(fn) {\n      fn();\n    }\n    function pipe(from, to) {\n      return from.pipe(to);\n    }\n    function popCallback(streams) {\n      if (!streams.length)\n        return noop;\n      if (typeof streams[streams.length - 1] !== \"function\")\n        return noop;\n      return streams.pop();\n    }\n    function pipeline() {\n      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n        streams[_key] = arguments[_key];\n      }\n      var callback = popCallback(streams);\n      if (Array.isArray(streams[0]))\n        streams = streams[0];\n      if (streams.length < 2) {\n        throw new ERR_MISSING_ARGS(\"streams\");\n      }\n      var error;\n      var destroys = streams.map(function(stream, i) {\n        var reading = i < streams.length - 1;\n        var writing = i > 0;\n        return destroyer(stream, reading, writing, function(err) {\n          if (!error)\n            error = err;\n          if (err)\n            destroys.forEach(call);\n          if (reading)\n            return;\n          destroys.forEach(call);\n          callback(error);\n        });\n      });\n      return streams.reduce(pipe);\n    }\n    module2.exports = pipeline;\n  }\n});\n\n// node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/readable-browser.js\nvar require_readable_browser = __commonJS({\n  \"node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/readable-browser.js\"(exports2, module2) {\n    exports2 = module2.exports = require_stream_readable();\n    exports2.Stream = exports2;\n    exports2.Readable = exports2;\n    exports2.Writable = require_stream_writable();\n    exports2.Duplex = require_stream_duplex();\n    exports2.Transform = require_stream_transform();\n    exports2.PassThrough = require_stream_passthrough();\n    exports2.finished = require_end_of_stream();\n    exports2.pipeline = require_pipeline();\n  }\n});\n\n// packages/common/node-std/src/stream.js\nvar stream = require_readable_browser();\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n//# sourceMappingURL=stream.cjs.map\n\nexport default stream;\nexport { stream as __moduleExports };","start":1670465467268,"end":1670465467336,"order":"normal"}]}
