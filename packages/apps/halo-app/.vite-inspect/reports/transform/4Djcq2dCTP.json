{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@segment+snippet@4.15.3/node_modules/@segment/snippet/dist/max.template.js","transforms":[{"name":"vite:load-fallback","result":"module.exports=function(settings) {\nvar __t, __p = '';\n__p += '(function(){\\n\\n  // Create a queue, but don\\'t obliterate an existing one!\\n  var analytics = window.analytics = window.analytics || [];\\n\\n  // If the real analytics.js is already on the page return.\\n  if (analytics.initialize) return;\\n\\n  // If the snippet was invoked already show an error.\\n  if (analytics.invoked) {\\n    if (window.console && console.error) {\\n      console.error(\\'Segment snippet included twice.\\');\\n    }\\n    return;\\n  }\\n\\n  // Invoked flag, to make sure the snippet\\n  // is never invoked twice.\\n  analytics.invoked = true;\\n\\n  // A list of the methods in Analytics.js to stub.\\n  analytics.methods = [\\n    \\'trackSubmit\\',\\n    \\'trackClick\\',\\n    \\'trackLink\\',\\n    \\'trackForm\\',\\n    \\'pageview\\',\\n    \\'identify\\',\\n    \\'reset\\',\\n    \\'group\\',\\n    \\'track\\',\\n    \\'ready\\',\\n    \\'alias\\',\\n    \\'debug\\',\\n    \\'page\\',\\n    \\'once\\',\\n    \\'off\\',\\n    \\'on\\',\\n    \\'addSourceMiddleware\\',\\n    \\'addIntegrationMiddleware\\',\\n    \\'setAnonymousId\\',\\n    \\'addDestinationMiddleware\\'\\n  ];\\n\\n  // Define a factory to create stubs. These are placeholders\\n  // for methods in Analytics.js so that you never have to wait\\n  // for it to load to actually record data. The `method` is\\n  // stored as the first argument, so we can replay the data.\\n  analytics.factory = function(method){\\n    return function(){\\n      var args = Array.prototype.slice.call(arguments);\\n      args.unshift(method);\\n      analytics.push(args);\\n      return analytics;\\n    };\\n  };\\n\\n  // For each of our methods, generate a queueing stub.\\n  for (var i = 0; i < analytics.methods.length; i++) {\\n    var key = analytics.methods[i];\\n    analytics[key] = analytics.factory(key);\\n  }\\n\\n  // Define a method to load Analytics.js from our CDN,\\n  // and that will be sure to only ever load it once.\\n  analytics.load = function(key, options){\\n    // Create an async script element based on your key.\\n    var script = document.createElement(\\'script\\');\\n    script.type = \\'text/javascript\\';\\n    script.async = true;\\n    script.src = \"https://' +\n((__t = ( settings.host )) == null ? '' : __t) +\n'' +\n((__t = ( settings.ajsPath )) == null ? '' : __t) +\n'\";\\n\\n    // Insert our script next to the first script element.\\n    var first = document.getElementsByTagName(\\'script\\')[0];\\n    first.parentNode.insertBefore(script, first);\\n    analytics._loadOptions = options;\\n  };\\n  analytics._writeKey = \\'' +\n((__t = ( settings.apiKey )) == null ? '' : __t) +\n'\\';\\n\\n  ' +\n((__t = ( settings.optionalCDN )) == null ? '' : __t) +\n'\\n\\n  // Add a version to keep track of what\\'s in the wild.\\n  analytics.SNIPPET_VERSION = \\'4.15.3\\';\\n\\n  // Load Analytics.js with your key, which will automatically\\n  // load the tools you\\'ve enabled for your account. Boosh!\\n  ' +\n((__t = ( settings.load )) == null ? '' : __t) +\n'\\n\\n  // Make the first page call to load the integrations. If\\n  // you\\'d like to manually name or tag the page, edit or\\n  // move this call however you\\'d like.\\n  ' +\n((__t = ( settings.page )) == null ? '' : __t) +\n'\\n})();\\n';\nreturn __p\n}","start":1670465466906,"end":1670465466972},{"name":"vite:react-babel","result":"module.exports=function(settings) {\nvar __t, __p = '';\n__p += '(function(){\\n\\n  // Create a queue, but don\\'t obliterate an existing one!\\n  var analytics = window.analytics = window.analytics || [];\\n\\n  // If the real analytics.js is already on the page return.\\n  if (analytics.initialize) return;\\n\\n  // If the snippet was invoked already show an error.\\n  if (analytics.invoked) {\\n    if (window.console && console.error) {\\n      console.error(\\'Segment snippet included twice.\\');\\n    }\\n    return;\\n  }\\n\\n  // Invoked flag, to make sure the snippet\\n  // is never invoked twice.\\n  analytics.invoked = true;\\n\\n  // A list of the methods in Analytics.js to stub.\\n  analytics.methods = [\\n    \\'trackSubmit\\',\\n    \\'trackClick\\',\\n    \\'trackLink\\',\\n    \\'trackForm\\',\\n    \\'pageview\\',\\n    \\'identify\\',\\n    \\'reset\\',\\n    \\'group\\',\\n    \\'track\\',\\n    \\'ready\\',\\n    \\'alias\\',\\n    \\'debug\\',\\n    \\'page\\',\\n    \\'once\\',\\n    \\'off\\',\\n    \\'on\\',\\n    \\'addSourceMiddleware\\',\\n    \\'addIntegrationMiddleware\\',\\n    \\'setAnonymousId\\',\\n    \\'addDestinationMiddleware\\'\\n  ];\\n\\n  // Define a factory to create stubs. These are placeholders\\n  // for methods in Analytics.js so that you never have to wait\\n  // for it to load to actually record data. The `method` is\\n  // stored as the first argument, so we can replay the data.\\n  analytics.factory = function(method){\\n    return function(){\\n      var args = Array.prototype.slice.call(arguments);\\n      args.unshift(method);\\n      analytics.push(args);\\n      return analytics;\\n    };\\n  };\\n\\n  // For each of our methods, generate a queueing stub.\\n  for (var i = 0; i < analytics.methods.length; i++) {\\n    var key = analytics.methods[i];\\n    analytics[key] = analytics.factory(key);\\n  }\\n\\n  // Define a method to load Analytics.js from our CDN,\\n  // and that will be sure to only ever load it once.\\n  analytics.load = function(key, options){\\n    // Create an async script element based on your key.\\n    var script = document.createElement(\\'script\\');\\n    script.type = \\'text/javascript\\';\\n    script.async = true;\\n    script.src = \"https://' +\n((__t = ( settings.host )) == null ? '' : __t) +\n'' +\n((__t = ( settings.ajsPath )) == null ? '' : __t) +\n'\";\\n\\n    // Insert our script next to the first script element.\\n    var first = document.getElementsByTagName(\\'script\\')[0];\\n    first.parentNode.insertBefore(script, first);\\n    analytics._loadOptions = options;\\n  };\\n  analytics._writeKey = \\'' +\n((__t = ( settings.apiKey )) == null ? '' : __t) +\n'\\';\\n\\n  ' +\n((__t = ( settings.optionalCDN )) == null ? '' : __t) +\n'\\n\\n  // Add a version to keep track of what\\'s in the wild.\\n  analytics.SNIPPET_VERSION = \\'4.15.3\\';\\n\\n  // Load Analytics.js with your key, which will automatically\\n  // load the tools you\\'ve enabled for your account. Boosh!\\n  ' +\n((__t = ( settings.load )) == null ? '' : __t) +\n'\\n\\n  // Make the first page call to load the integrations. If\\n  // you\\'d like to manually name or tag the page, edit or\\n  // move this call however you\\'d like.\\n  ' +\n((__t = ( settings.page )) == null ? '' : __t) +\n'\\n})();\\n';\nreturn __p\n}","start":1670465466972,"end":1670465466972,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar max_template=function(settings) {\nvar __t, __p = '';\n__p += '(function(){\\n\\n  // Create a queue, but don\\'t obliterate an existing one!\\n  var analytics = window.analytics = window.analytics || [];\\n\\n  // If the real analytics.js is already on the page return.\\n  if (analytics.initialize) return;\\n\\n  // If the snippet was invoked already show an error.\\n  if (analytics.invoked) {\\n    if (window.console && console.error) {\\n      console.error(\\'Segment snippet included twice.\\');\\n    }\\n    return;\\n  }\\n\\n  // Invoked flag, to make sure the snippet\\n  // is never invoked twice.\\n  analytics.invoked = true;\\n\\n  // A list of the methods in Analytics.js to stub.\\n  analytics.methods = [\\n    \\'trackSubmit\\',\\n    \\'trackClick\\',\\n    \\'trackLink\\',\\n    \\'trackForm\\',\\n    \\'pageview\\',\\n    \\'identify\\',\\n    \\'reset\\',\\n    \\'group\\',\\n    \\'track\\',\\n    \\'ready\\',\\n    \\'alias\\',\\n    \\'debug\\',\\n    \\'page\\',\\n    \\'once\\',\\n    \\'off\\',\\n    \\'on\\',\\n    \\'addSourceMiddleware\\',\\n    \\'addIntegrationMiddleware\\',\\n    \\'setAnonymousId\\',\\n    \\'addDestinationMiddleware\\'\\n  ];\\n\\n  // Define a factory to create stubs. These are placeholders\\n  // for methods in Analytics.js so that you never have to wait\\n  // for it to load to actually record data. The `method` is\\n  // stored as the first argument, so we can replay the data.\\n  analytics.factory = function(method){\\n    return function(){\\n      var args = Array.prototype.slice.call(arguments);\\n      args.unshift(method);\\n      analytics.push(args);\\n      return analytics;\\n    };\\n  };\\n\\n  // For each of our methods, generate a queueing stub.\\n  for (var i = 0; i < analytics.methods.length; i++) {\\n    var key = analytics.methods[i];\\n    analytics[key] = analytics.factory(key);\\n  }\\n\\n  // Define a method to load Analytics.js from our CDN,\\n  // and that will be sure to only ever load it once.\\n  analytics.load = function(key, options){\\n    // Create an async script element based on your key.\\n    var script = document.createElement(\\'script\\');\\n    script.type = \\'text/javascript\\';\\n    script.async = true;\\n    script.src = \"https://' +\n((__t = ( settings.host )) == null ? '' : __t) +\n'' +\n((__t = ( settings.ajsPath )) == null ? '' : __t) +\n'\";\\n\\n    // Insert our script next to the first script element.\\n    var first = document.getElementsByTagName(\\'script\\')[0];\\n    first.parentNode.insertBefore(script, first);\\n    analytics._loadOptions = options;\\n  };\\n  analytics._writeKey = \\'' +\n((__t = ( settings.apiKey )) == null ? '' : __t) +\n'\\';\\n\\n  ' +\n((__t = ( settings.optionalCDN )) == null ? '' : __t) +\n'\\n\\n  // Add a version to keep track of what\\'s in the wild.\\n  analytics.SNIPPET_VERSION = \\'4.15.3\\';\\n\\n  // Load Analytics.js with your key, which will automatically\\n  // load the tools you\\'ve enabled for your account. Boosh!\\n  ' +\n((__t = ( settings.load )) == null ? '' : __t) +\n'\\n\\n  // Make the first page call to load the integrations. If\\n  // you\\'d like to manually name or tag the page, edit or\\n  // move this call however you\\'d like.\\n  ' +\n((__t = ( settings.page )) == null ? '' : __t) +\n'\\n})();\\n';\nreturn __p\n}\n\nexport default max_template;\nexport { max_template as __moduleExports };","start":1670465466973,"end":1670465466973,"order":"normal"}]}
