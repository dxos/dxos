{"resolvedId":"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/dist/lib/browser/index.mjs","transforms":[{"name":"vite:load-fallback","result":"// packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\nimport assert from \"@dxos/node-std/assert\";\nimport { asyncTimeout, DeferredTask, synchronized } from \"@dxos/async\";\nimport { Context } from \"@dxos/context\";\nimport { failUndefined } from \"@dxos/debug\";\nimport { PublicKey } from \"@dxos/keys\";\nimport { log, logInfo } from \"@dxos/log\";\nimport { schema } from \"@dxos/protocols\";\nimport { createProtoRpcPeer, RpcClosedError } from \"@dxos/rpc\";\nimport { ComplexMap } from \"@dxos/util\";\nvar __decorate = function(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n    r = Reflect.decorate(decorators, target, key, desc);\n  else\n    for (var i = decorators.length - 1; i >= 0; i--)\n      if (d = decorators[i])\n        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar ReplicatorExtension = class {\n  constructor() {\n    this._ctx = new Context({\n      onError: (err) => {\n        var _a;\n        log.catch(err, {}, {\n          file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n          line: 31,\n          scope: this,\n          callSite: (f, a) => f(...a)\n        });\n        (_a = this._extensionContext) == null ? void 0 : _a.close(err);\n      }\n    });\n    this._feeds = new ComplexMap(PublicKey.hash);\n    this._streams = new ComplexMap(PublicKey.hash);\n    this._options = {\n      upload: false\n    };\n    this._updateTask = new DeferredTask(this._ctx, async () => {\n      try {\n        if (this._extensionContext.initiator === false) {\n          await this._rpc.rpc.ReplicatorService.updateFeeds({\n            feeds: Array.from(this._feeds.values()).map((feed) => ({\n              feedKey: feed.key,\n              download: true,\n              upload: this._options.upload\n            }))\n          });\n        } else if (this._extensionContext.initiator === true) {\n          await this._reevaluateFeeds();\n        }\n      } catch (err) {\n        if (err instanceof RpcClosedError) {\n          return;\n        }\n        throw err;\n      }\n    });\n  }\n  get extensionInfo() {\n    var _a, _b, _c;\n    return {\n      initiator: (_a = this._extensionContext) == null ? void 0 : _a.initiator,\n      localPeerId: (_b = this._extensionContext) == null ? void 0 : _b.localPeerId,\n      remotePeerId: (_c = this._extensionContext) == null ? void 0 : _c.remotePeerId,\n      feeds: Array.from(this._feeds.keys())\n    };\n  }\n  setOptions(options) {\n    this._options = options;\n    log(\"setOptions\", {\n      options\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n      line: 79,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    if (this._extensionContext) {\n      this._updateTask.schedule();\n    }\n    return this;\n  }\n  addFeed(feed) {\n    this._feeds.set(feed.key, feed);\n    log(\"addFeed\", {\n      feedKey: feed.key\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n      line: 88,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    if (this._extensionContext) {\n      this._updateTask.schedule();\n    }\n  }\n  async onOpen(context) {\n    this._extensionContext = context;\n    log(\"open\", {}, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n      line: 96,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    this._rpc = createProtoRpcPeer({\n      requested: {\n        ReplicatorService: schema.getService(\"dxos.mesh.teleport.replicator.ReplicatorService\")\n      },\n      exposed: {\n        ReplicatorService: schema.getService(\"dxos.mesh.teleport.replicator.ReplicatorService\")\n      },\n      handlers: {\n        ReplicatorService: {\n          updateFeeds: async ({ feeds }) => {\n            log(\"received feed info\", {\n              feeds\n            }, {\n              file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n              line: 108,\n              scope: this,\n              callSite: (f, a) => f(...a)\n            });\n            assert(this._extensionContext.initiator === true, \"Invalid call\");\n            this._updateTask.schedule();\n          },\n          startReplication: async ({ info }) => {\n            log(\"starting replication...\", {\n              info\n            }, {\n              file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n              line: 113,\n              scope: this,\n              callSite: (f, a) => f(...a)\n            });\n            assert(this._extensionContext.initiator === false, \"Invalid call\");\n            const streamTag = await this._acceptReplication(info);\n            return {\n              streamTag\n            };\n          },\n          stopReplication: async ({ info }) => {\n            log(\"stopping replication...\", {\n              info\n            }, {\n              file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n              line: 122,\n              scope: this,\n              callSite: (f, a) => f(...a)\n            });\n            assert(this._extensionContext.initiator === false, \"Invalid call\");\n            await this._stopReplication(info.feedKey);\n          }\n        }\n      },\n      port: context.createPort(\"rpc\", {\n        contentType: 'application/x-protobuf; messageType=\"dxos.rpc.Message\"'\n      })\n    });\n    await this._rpc.open();\n    this._updateTask.schedule();\n  }\n  async onClose(err) {\n    var _a;\n    log(\"close\", {\n      err\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n      line: 140,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    await this._ctx.dispose();\n    await ((_a = this._rpc) == null ? void 0 : _a.close());\n    for (const feedKey of this._streams.keys()) {\n      await this._stopReplication(feedKey);\n    }\n  }\n  async _reevaluateFeeds() {\n    var _a;\n    log(\"_reevaluateFeeds\", {}, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n      line: 150,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    for (const feedKey of this._feeds.keys()) {\n      if (this._ctx.disposed) {\n        return;\n      }\n      if (this._streams.has(feedKey) && this._options.upload !== ((_a = this._streams.get(feedKey)) == null ? void 0 : _a.info.upload)) {\n        try {\n          await asyncTimeout(this._stopReplication(feedKey), 1e3);\n        } catch (err) {\n          log.catch(err, {}, {\n            file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n            line: 159,\n            scope: this,\n            callSite: (f, a) => f(...a)\n          });\n        }\n      }\n      if (this._ctx.disposed) {\n        return;\n      }\n      if (!this._streams.has(feedKey)) {\n        await this._initiateReplication({\n          feedKey,\n          download: true,\n          upload: this._options.upload\n        });\n      }\n    }\n  }\n  async _initiateReplication(feedInfo) {\n    log(\"initiating replication\", {\n      feedInfo\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n      line: 180,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    assert(this._extensionContext.initiator === true, \"Invalid call\");\n    assert(!this._streams.has(feedInfo.feedKey), `Replication already in progress for feed: ${feedInfo.feedKey}`);\n    const { streamTag } = await this._rpc.rpc.ReplicatorService.startReplication({\n      info: feedInfo\n    });\n    if (!streamTag) {\n      return;\n    }\n    this._replicateFeed(feedInfo, streamTag);\n  }\n  async _acceptReplication(feedInfo) {\n    assert(this._extensionContext.initiator === false, \"Invalid call\");\n    if (!this._feeds.has(feedInfo.feedKey) || this._streams.has(feedInfo.feedKey)) {\n      return void 0;\n    }\n    const tag = `feed-${feedInfo.feedKey.toHex()}-${PublicKey.random().toHex().slice(0, 8)}`;\n    this._replicateFeed(feedInfo, tag);\n    return tag;\n  }\n  _replicateFeed(info, streamTag) {\n    var _a;\n    log(\"replicate\", {\n      info,\n      streamTag\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n      line: 209,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    assert(!this._streams.has(info.feedKey), `Replication already in progress for feed: ${info.feedKey}`);\n    const feed = (_a = this._feeds.get(info.feedKey)) != null ? _a : failUndefined();\n    const networkStream = this._extensionContext.createStream(streamTag, {\n      contentType: \"application/x-hypercore\"\n    });\n    const replicationStream = feed.replicate(true, {\n      live: true,\n      upload: info.upload,\n      download: info.download,\n      noise: false,\n      encrypted: false\n    });\n    replicationStream.on(\"error\", (err) => {\n      if ((err == null ? void 0 : err.message) === \"Writable stream closed prematurely\" || (err == null ? void 0 : err.message) === \"Cannot call write after a stream was destroyed\") {\n        return;\n      }\n      log.warn(\"replication stream error\", {\n        err,\n        info\n      }, {\n        file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n        line: 231,\n        scope: this,\n        callSite: (f, a) => f(...a)\n      });\n    });\n    this._streams.set(info.feedKey, {\n      streamTag,\n      networkStream,\n      replicationStream,\n      info\n    });\n    networkStream.pipe(replicationStream).pipe(networkStream);\n  }\n  async _stopReplication(feedKey) {\n    const stream = this._streams.get(feedKey);\n    if (!stream) {\n      return;\n    }\n    stream.networkStream.destroy();\n    this._streams.delete(feedKey);\n  }\n};\n__decorate([\n  logInfo\n], ReplicatorExtension.prototype, \"extensionInfo\", null);\n__decorate([\n  synchronized\n], ReplicatorExtension.prototype, \"_reevaluateFeeds\", null);\n__decorate([\n  synchronized\n], ReplicatorExtension.prototype, \"_acceptReplication\", null);\nexport {\n  ReplicatorExtension\n};\n//# sourceMappingURL=index.mjs.map\n","start":1670465466975,"end":1670465467084},{"name":"vite:react-babel","result":"// packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\nimport assert from \"@dxos/node-std/assert\";\nimport { asyncTimeout, DeferredTask, synchronized } from \"@dxos/async\";\nimport { Context } from \"@dxos/context\";\nimport { failUndefined } from \"@dxos/debug\";\nimport { PublicKey } from \"@dxos/keys\";\nimport { log, logInfo } from \"@dxos/log\";\nimport { schema } from \"@dxos/protocols\";\nimport { createProtoRpcPeer, RpcClosedError } from \"@dxos/rpc\";\nimport { ComplexMap } from \"@dxos/util\";\nvar __decorate = function(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n    r = Reflect.decorate(decorators, target, key, desc);\n  else\n    for (var i = decorators.length - 1; i >= 0; i--)\n      if (d = decorators[i])\n        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar ReplicatorExtension = class {\n  constructor() {\n    this._ctx = new Context({\n      onError: (err) => {\n        var _a;\n        log.catch(err, {}, {\n          file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n          line: 31,\n          scope: this,\n          callSite: (f, a) => f(...a)\n        });\n        (_a = this._extensionContext) == null ? void 0 : _a.close(err);\n      }\n    });\n    this._feeds = new ComplexMap(PublicKey.hash);\n    this._streams = new ComplexMap(PublicKey.hash);\n    this._options = {\n      upload: false\n    };\n    this._updateTask = new DeferredTask(this._ctx, async () => {\n      try {\n        if (this._extensionContext.initiator === false) {\n          await this._rpc.rpc.ReplicatorService.updateFeeds({\n            feeds: Array.from(this._feeds.values()).map((feed) => ({\n              feedKey: feed.key,\n              download: true,\n              upload: this._options.upload\n            }))\n          });\n        } else if (this._extensionContext.initiator === true) {\n          await this._reevaluateFeeds();\n        }\n      } catch (err) {\n        if (err instanceof RpcClosedError) {\n          return;\n        }\n        throw err;\n      }\n    });\n  }\n  get extensionInfo() {\n    var _a, _b, _c;\n    return {\n      initiator: (_a = this._extensionContext) == null ? void 0 : _a.initiator,\n      localPeerId: (_b = this._extensionContext) == null ? void 0 : _b.localPeerId,\n      remotePeerId: (_c = this._extensionContext) == null ? void 0 : _c.remotePeerId,\n      feeds: Array.from(this._feeds.keys())\n    };\n  }\n  setOptions(options) {\n    this._options = options;\n    log(\"setOptions\", {\n      options\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n      line: 79,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    if (this._extensionContext) {\n      this._updateTask.schedule();\n    }\n    return this;\n  }\n  addFeed(feed) {\n    this._feeds.set(feed.key, feed);\n    log(\"addFeed\", {\n      feedKey: feed.key\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n      line: 88,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    if (this._extensionContext) {\n      this._updateTask.schedule();\n    }\n  }\n  async onOpen(context) {\n    this._extensionContext = context;\n    log(\"open\", {}, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n      line: 96,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    this._rpc = createProtoRpcPeer({\n      requested: {\n        ReplicatorService: schema.getService(\"dxos.mesh.teleport.replicator.ReplicatorService\")\n      },\n      exposed: {\n        ReplicatorService: schema.getService(\"dxos.mesh.teleport.replicator.ReplicatorService\")\n      },\n      handlers: {\n        ReplicatorService: {\n          updateFeeds: async ({ feeds }) => {\n            log(\"received feed info\", {\n              feeds\n            }, {\n              file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n              line: 108,\n              scope: this,\n              callSite: (f, a) => f(...a)\n            });\n            assert(this._extensionContext.initiator === true, \"Invalid call\");\n            this._updateTask.schedule();\n          },\n          startReplication: async ({ info }) => {\n            log(\"starting replication...\", {\n              info\n            }, {\n              file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n              line: 113,\n              scope: this,\n              callSite: (f, a) => f(...a)\n            });\n            assert(this._extensionContext.initiator === false, \"Invalid call\");\n            const streamTag = await this._acceptReplication(info);\n            return {\n              streamTag\n            };\n          },\n          stopReplication: async ({ info }) => {\n            log(\"stopping replication...\", {\n              info\n            }, {\n              file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n              line: 122,\n              scope: this,\n              callSite: (f, a) => f(...a)\n            });\n            assert(this._extensionContext.initiator === false, \"Invalid call\");\n            await this._stopReplication(info.feedKey);\n          }\n        }\n      },\n      port: context.createPort(\"rpc\", {\n        contentType: 'application/x-protobuf; messageType=\"dxos.rpc.Message\"'\n      })\n    });\n    await this._rpc.open();\n    this._updateTask.schedule();\n  }\n  async onClose(err) {\n    var _a;\n    log(\"close\", {\n      err\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n      line: 140,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    await this._ctx.dispose();\n    await ((_a = this._rpc) == null ? void 0 : _a.close());\n    for (const feedKey of this._streams.keys()) {\n      await this._stopReplication(feedKey);\n    }\n  }\n  async _reevaluateFeeds() {\n    var _a;\n    log(\"_reevaluateFeeds\", {}, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n      line: 150,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    for (const feedKey of this._feeds.keys()) {\n      if (this._ctx.disposed) {\n        return;\n      }\n      if (this._streams.has(feedKey) && this._options.upload !== ((_a = this._streams.get(feedKey)) == null ? void 0 : _a.info.upload)) {\n        try {\n          await asyncTimeout(this._stopReplication(feedKey), 1e3);\n        } catch (err) {\n          log.catch(err, {}, {\n            file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n            line: 159,\n            scope: this,\n            callSite: (f, a) => f(...a)\n          });\n        }\n      }\n      if (this._ctx.disposed) {\n        return;\n      }\n      if (!this._streams.has(feedKey)) {\n        await this._initiateReplication({\n          feedKey,\n          download: true,\n          upload: this._options.upload\n        });\n      }\n    }\n  }\n  async _initiateReplication(feedInfo) {\n    log(\"initiating replication\", {\n      feedInfo\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n      line: 180,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    assert(this._extensionContext.initiator === true, \"Invalid call\");\n    assert(!this._streams.has(feedInfo.feedKey), `Replication already in progress for feed: ${feedInfo.feedKey}`);\n    const { streamTag } = await this._rpc.rpc.ReplicatorService.startReplication({\n      info: feedInfo\n    });\n    if (!streamTag) {\n      return;\n    }\n    this._replicateFeed(feedInfo, streamTag);\n  }\n  async _acceptReplication(feedInfo) {\n    assert(this._extensionContext.initiator === false, \"Invalid call\");\n    if (!this._feeds.has(feedInfo.feedKey) || this._streams.has(feedInfo.feedKey)) {\n      return void 0;\n    }\n    const tag = `feed-${feedInfo.feedKey.toHex()}-${PublicKey.random().toHex().slice(0, 8)}`;\n    this._replicateFeed(feedInfo, tag);\n    return tag;\n  }\n  _replicateFeed(info, streamTag) {\n    var _a;\n    log(\"replicate\", {\n      info,\n      streamTag\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n      line: 209,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    assert(!this._streams.has(info.feedKey), `Replication already in progress for feed: ${info.feedKey}`);\n    const feed = (_a = this._feeds.get(info.feedKey)) != null ? _a : failUndefined();\n    const networkStream = this._extensionContext.createStream(streamTag, {\n      contentType: \"application/x-hypercore\"\n    });\n    const replicationStream = feed.replicate(true, {\n      live: true,\n      upload: info.upload,\n      download: info.download,\n      noise: false,\n      encrypted: false\n    });\n    replicationStream.on(\"error\", (err) => {\n      if ((err == null ? void 0 : err.message) === \"Writable stream closed prematurely\" || (err == null ? void 0 : err.message) === \"Cannot call write after a stream was destroyed\") {\n        return;\n      }\n      log.warn(\"replication stream error\", {\n        err,\n        info\n      }, {\n        file: \"/home/jdw/Code/dxos/dxos/packages/core/mesh/teleport-plugin-replicator/src/replicator-extension.ts\",\n        line: 231,\n        scope: this,\n        callSite: (f, a) => f(...a)\n      });\n    });\n    this._streams.set(info.feedKey, {\n      streamTag,\n      networkStream,\n      replicationStream,\n      info\n    });\n    networkStream.pipe(replicationStream).pipe(networkStream);\n  }\n  async _stopReplication(feedKey) {\n    const stream = this._streams.get(feedKey);\n    if (!stream) {\n      return;\n    }\n    stream.networkStream.destroy();\n    this._streams.delete(feedKey);\n  }\n};\n__decorate([\n  logInfo\n], ReplicatorExtension.prototype, \"extensionInfo\", null);\n__decorate([\n  synchronized\n], ReplicatorExtension.prototype, \"_reevaluateFeeds\", null);\n__decorate([\n  synchronized\n], ReplicatorExtension.prototype, \"_acceptReplication\", null);\nexport {\n  ReplicatorExtension\n};\n//# sourceMappingURL=index.mjs.map\n","start":1670465467084,"end":1670465467084,"order":"pre"}]}
