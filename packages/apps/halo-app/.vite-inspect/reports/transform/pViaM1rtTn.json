{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_duplex.js","transforms":[{"name":"vite:load-fallback","result":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n'use strict';\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var key in obj) {\n    keys.push(key);\n  }\n\n  return keys;\n};\n/*</replacement>*/\n\n\nmodule.exports = Duplex;\n\nvar Readable = require('./_stream_readable');\n\nvar Writable = require('./_stream_writable');\n\nrequire('inherits')(Duplex, Readable);\n\n{\n  // Allow the keys array to be GC'ed.\n  var keys = objectKeys(Writable.prototype);\n\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  this.allowHalfOpen = true;\n\n  if (options) {\n    if (options.readable === false) this.readable = false;\n    if (options.writable === false) this.writable = false;\n\n    if (options.allowHalfOpen === false) {\n      this.allowHalfOpen = false;\n      this.once('end', onend);\n    }\n  }\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n}); // the no-half-open enforcer\n\nfunction onend() {\n  // If the writable side ended, then we're ok.\n  if (this._writableState.ended) return; // no more data can be written.\n  // But allow more writes to happen in this tick.\n\n  process.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});","start":1670465469244,"end":1670465469411},{"name":"vite:react-babel","result":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n'use strict';\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var key in obj) {\n    keys.push(key);\n  }\n\n  return keys;\n};\n/*</replacement>*/\n\n\nmodule.exports = Duplex;\n\nvar Readable = require('./_stream_readable');\n\nvar Writable = require('./_stream_writable');\n\nrequire('inherits')(Duplex, Readable);\n\n{\n  // Allow the keys array to be GC'ed.\n  var keys = objectKeys(Writable.prototype);\n\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  this.allowHalfOpen = true;\n\n  if (options) {\n    if (options.readable === false) this.readable = false;\n    if (options.writable === false) this.writable = false;\n\n    if (options.allowHalfOpen === false) {\n      this.allowHalfOpen = false;\n      this.once('end', onend);\n    }\n  }\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n}); // the no-half-open enforcer\n\nfunction onend() {\n  // If the writable side ended, then we're ok.\n  if (this._writableState.ended) return; // no more data can be written.\n  // But allow more writes to happen in this tick.\n\n  process.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});","start":1670465469411,"end":1670465469411,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_readable.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_writable.js?commonjs-wrapped\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js?commonjs-proxy\";\n\nvar _stream_duplex;\nvar hasRequired_stream_duplex;\n\nfunction require_stream_duplex () {\n\tif (hasRequired_stream_duplex) return _stream_duplex;\n\thasRequired_stream_duplex = 1;\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t// a duplex stream is just a stream that is both readable and writable.\n\t// Since JS doesn't have multiple prototypal inheritance, this class\n\t// prototypally inherits from Readable, and then parasitically from\n\t// Writable.\n\t'use strict';\n\t/*<replacement>*/\n\n\tvar objectKeys = Object.keys || function (obj) {\n\t  var keys = [];\n\n\t  for (var key in obj) {\n\t    keys.push(key);\n\t  }\n\n\t  return keys;\n\t};\n\t/*</replacement>*/\n\n\n\t_stream_duplex = Duplex;\n\n\tvar Readable = require$$0();\n\n\tvar Writable = require$$1();\n\n\trequire$$2(Duplex, Readable);\n\n\t{\n\t  // Allow the keys array to be GC'ed.\n\t  var keys = objectKeys(Writable.prototype);\n\n\t  for (var v = 0; v < keys.length; v++) {\n\t    var method = keys[v];\n\t    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n\t  }\n\t}\n\n\tfunction Duplex(options) {\n\t  if (!(this instanceof Duplex)) return new Duplex(options);\n\t  Readable.call(this, options);\n\t  Writable.call(this, options);\n\t  this.allowHalfOpen = true;\n\n\t  if (options) {\n\t    if (options.readable === false) this.readable = false;\n\t    if (options.writable === false) this.writable = false;\n\n\t    if (options.allowHalfOpen === false) {\n\t      this.allowHalfOpen = false;\n\t      this.once('end', onend);\n\t    }\n\t  }\n\t}\n\n\tObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n\t  // making it explicit this property is not enumerable\n\t  // because otherwise some prototype manipulation in\n\t  // userland will fail\n\t  enumerable: false,\n\t  get: function get() {\n\t    return this._writableState.highWaterMark;\n\t  }\n\t});\n\tObject.defineProperty(Duplex.prototype, 'writableBuffer', {\n\t  // making it explicit this property is not enumerable\n\t  // because otherwise some prototype manipulation in\n\t  // userland will fail\n\t  enumerable: false,\n\t  get: function get() {\n\t    return this._writableState && this._writableState.getBuffer();\n\t  }\n\t});\n\tObject.defineProperty(Duplex.prototype, 'writableLength', {\n\t  // making it explicit this property is not enumerable\n\t  // because otherwise some prototype manipulation in\n\t  // userland will fail\n\t  enumerable: false,\n\t  get: function get() {\n\t    return this._writableState.length;\n\t  }\n\t}); // the no-half-open enforcer\n\n\tfunction onend() {\n\t  // If the writable side ended, then we're ok.\n\t  if (this._writableState.ended) return; // no more data can be written.\n\t  // But allow more writes to happen in this tick.\n\n\t  process.nextTick(onEndNT, this);\n\t}\n\n\tfunction onEndNT(self) {\n\t  self.end();\n\t}\n\n\tObject.defineProperty(Duplex.prototype, 'destroyed', {\n\t  // making it explicit this property is not enumerable\n\t  // because otherwise some prototype manipulation in\n\t  // userland will fail\n\t  enumerable: false,\n\t  get: function get() {\n\t    if (this._readableState === undefined || this._writableState === undefined) {\n\t      return false;\n\t    }\n\n\t    return this._readableState.destroyed && this._writableState.destroyed;\n\t  },\n\t  set: function set(value) {\n\t    // we ignore the value if the stream\n\t    // has not been initialized yet\n\t    if (this._readableState === undefined || this._writableState === undefined) {\n\t      return;\n\t    } // backward compatibility, the user is explicitly\n\t    // managing destroyed\n\n\n\t    this._readableState.destroyed = value;\n\t    this._writableState.destroyed = value;\n\t  }\n\t});\n\treturn _stream_duplex;\n}\n\nexport { require_stream_duplex as __require };","start":1670465469412,"end":1670465469415,"order":"normal"},{"name":"polyfill-node","result":"import { default as process } from '\u0000polyfill-node.process';\n\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_readable.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_writable.js?commonjs-wrapped\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js?commonjs-proxy\";\n\nvar _stream_duplex;\nvar hasRequired_stream_duplex;\n\nfunction require_stream_duplex () {\n\tif (hasRequired_stream_duplex) return _stream_duplex;\n\thasRequired_stream_duplex = 1;\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t// a duplex stream is just a stream that is both readable and writable.\n\t// Since JS doesn't have multiple prototypal inheritance, this class\n\t// prototypally inherits from Readable, and then parasitically from\n\t// Writable.\n\t'use strict';\n\t/*<replacement>*/\n\n\tvar objectKeys = Object.keys || function (obj) {\n\t  var keys = [];\n\n\t  for (var key in obj) {\n\t    keys.push(key);\n\t  }\n\n\t  return keys;\n\t};\n\t/*</replacement>*/\n\n\n\t_stream_duplex = Duplex;\n\n\tvar Readable = require$$0();\n\n\tvar Writable = require$$1();\n\n\trequire$$2(Duplex, Readable);\n\n\t{\n\t  // Allow the keys array to be GC'ed.\n\t  var keys = objectKeys(Writable.prototype);\n\n\t  for (var v = 0; v < keys.length; v++) {\n\t    var method = keys[v];\n\t    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n\t  }\n\t}\n\n\tfunction Duplex(options) {\n\t  if (!(this instanceof Duplex)) return new Duplex(options);\n\t  Readable.call(this, options);\n\t  Writable.call(this, options);\n\t  this.allowHalfOpen = true;\n\n\t  if (options) {\n\t    if (options.readable === false) this.readable = false;\n\t    if (options.writable === false) this.writable = false;\n\n\t    if (options.allowHalfOpen === false) {\n\t      this.allowHalfOpen = false;\n\t      this.once('end', onend);\n\t    }\n\t  }\n\t}\n\n\tObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n\t  // making it explicit this property is not enumerable\n\t  // because otherwise some prototype manipulation in\n\t  // userland will fail\n\t  enumerable: false,\n\t  get: function get() {\n\t    return this._writableState.highWaterMark;\n\t  }\n\t});\n\tObject.defineProperty(Duplex.prototype, 'writableBuffer', {\n\t  // making it explicit this property is not enumerable\n\t  // because otherwise some prototype manipulation in\n\t  // userland will fail\n\t  enumerable: false,\n\t  get: function get() {\n\t    return this._writableState && this._writableState.getBuffer();\n\t  }\n\t});\n\tObject.defineProperty(Duplex.prototype, 'writableLength', {\n\t  // making it explicit this property is not enumerable\n\t  // because otherwise some prototype manipulation in\n\t  // userland will fail\n\t  enumerable: false,\n\t  get: function get() {\n\t    return this._writableState.length;\n\t  }\n\t}); // the no-half-open enforcer\n\n\tfunction onend() {\n\t  // If the writable side ended, then we're ok.\n\t  if (this._writableState.ended) return; // no more data can be written.\n\t  // But allow more writes to happen in this tick.\n\n\t  process.nextTick(onEndNT, this);\n\t}\n\n\tfunction onEndNT(self) {\n\t  self.end();\n\t}\n\n\tObject.defineProperty(Duplex.prototype, 'destroyed', {\n\t  // making it explicit this property is not enumerable\n\t  // because otherwise some prototype manipulation in\n\t  // userland will fail\n\t  enumerable: false,\n\t  get: function get() {\n\t    if (this._readableState === undefined || this._writableState === undefined) {\n\t      return false;\n\t    }\n\n\t    return this._readableState.destroyed && this._writableState.destroyed;\n\t  },\n\t  set: function set(value) {\n\t    // we ignore the value if the stream\n\t    // has not been initialized yet\n\t    if (this._readableState === undefined || this._writableState === undefined) {\n\t      return;\n\t    } // backward compatibility, the user is explicitly\n\t    // managing destroyed\n\n\n\t    this._readableState.destroyed = value;\n\t    this._writableState.destroyed = value;\n\t  }\n\t});\n\treturn _stream_duplex;\n}\n\nexport { require_stream_duplex as __require };","start":1670465469415,"end":1670465469419,"order":"normal"}]}
