{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoresource-promise@2.0.0/node_modules/nanoresource-promise/index.js","transforms":[{"name":"vite:load-fallback","result":"const nanoresource = require('./nanoresource-cb')\n\nfunction callbackPromise () {\n  let callback\n\n  const promise = new Promise((resolve, reject) => {\n    callback = (err, value) => {\n      if (err) reject(err)\n      else resolve(value)\n    }\n  })\n\n  callback.promise = promise\n  return callback\n}\n\nconst kNanoresource = Symbol('nanoresource')\nconst kProcessPromise = Symbol('processpromise')\n\nclass NanoresourcePromise {\n  constructor (opts = {}) {\n    const open = opts.open || this._open.bind(this)\n    const close = opts.close || this._close.bind(this)\n\n    this[kNanoresource] = nanoresource({\n      open: (cb) => this[kProcessPromise](open, cb),\n      close: (cb) => this[kProcessPromise](close, cb),\n      reopen: opts.reopen\n    })\n  }\n\n  get opened () {\n    return this[kNanoresource].opened\n  }\n\n  get opening () {\n    return this[kNanoresource].opening\n  }\n\n  get closed () {\n    return this[kNanoresource].closed\n  }\n\n  get closing () {\n    return this[kNanoresource].closing\n  }\n\n  get actives () {\n    return this[kNanoresource].actives\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  open () {\n    const callback = callbackPromise()\n    this[kNanoresource].open(callback)\n    return callback.promise\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  close (allowActive = false) {\n    const callback = callbackPromise()\n    this[kNanoresource].close(allowActive, callback)\n    return callback.promise\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  active (cb) {\n    return this[kNanoresource].active(cb)\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  inactive (cb, err, value) {\n    return this[kNanoresource].inactive(cb, err, value)\n  }\n\n  /**\n   * @abstract\n   */\n  async _open () {}\n\n  /**\n   * @abstract\n   */\n  async _close () {}\n\n  async [kProcessPromise] (fnPromise, cb) {\n    try {\n      await fnPromise()\n      cb()\n    } catch (err) {\n      cb(err)\n    }\n  }\n}\n\nmodule.exports = (opts) => new NanoresourcePromise(opts)\nmodule.exports.NanoresourcePromise = NanoresourcePromise\n","start":1670465470851,"end":1670465470940},{"name":"vite:react-babel","result":"const nanoresource = require('./nanoresource-cb')\n\nfunction callbackPromise () {\n  let callback\n\n  const promise = new Promise((resolve, reject) => {\n    callback = (err, value) => {\n      if (err) reject(err)\n      else resolve(value)\n    }\n  })\n\n  callback.promise = promise\n  return callback\n}\n\nconst kNanoresource = Symbol('nanoresource')\nconst kProcessPromise = Symbol('processpromise')\n\nclass NanoresourcePromise {\n  constructor (opts = {}) {\n    const open = opts.open || this._open.bind(this)\n    const close = opts.close || this._close.bind(this)\n\n    this[kNanoresource] = nanoresource({\n      open: (cb) => this[kProcessPromise](open, cb),\n      close: (cb) => this[kProcessPromise](close, cb),\n      reopen: opts.reopen\n    })\n  }\n\n  get opened () {\n    return this[kNanoresource].opened\n  }\n\n  get opening () {\n    return this[kNanoresource].opening\n  }\n\n  get closed () {\n    return this[kNanoresource].closed\n  }\n\n  get closing () {\n    return this[kNanoresource].closing\n  }\n\n  get actives () {\n    return this[kNanoresource].actives\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  open () {\n    const callback = callbackPromise()\n    this[kNanoresource].open(callback)\n    return callback.promise\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  close (allowActive = false) {\n    const callback = callbackPromise()\n    this[kNanoresource].close(allowActive, callback)\n    return callback.promise\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  active (cb) {\n    return this[kNanoresource].active(cb)\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  inactive (cb, err, value) {\n    return this[kNanoresource].inactive(cb, err, value)\n  }\n\n  /**\n   * @abstract\n   */\n  async _open () {}\n\n  /**\n   * @abstract\n   */\n  async _close () {}\n\n  async [kProcessPromise] (fnPromise, cb) {\n    try {\n      await fnPromise()\n      cb()\n    } catch (err) {\n      cb(err)\n    }\n  }\n}\n\nmodule.exports = (opts) => new NanoresourcePromise(opts)\nmodule.exports.NanoresourcePromise = NanoresourcePromise\n","start":1670465470940,"end":1670465470940,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as nanoresourcePromiseModule, exports as nanoresourcePromise } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoresource-promise@2.0.0/node_modules/nanoresource-promise/index.js?commonjs-module\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoresource-promise@2.0.0/node_modules/nanoresource-promise/nanoresource-cb.js?commonjs-proxy\";\n\nconst nanoresource = require$$0\n\nfunction callbackPromise () {\n  let callback\n\n  const promise = new Promise((resolve, reject) => {\n    callback = (err, value) => {\n      if (err) reject(err)\n      else resolve(value)\n    }\n  })\n\n  callback.promise = promise\n  return callback\n}\n\nconst kNanoresource = Symbol('nanoresource')\nconst kProcessPromise = Symbol('processpromise')\n\nclass NanoresourcePromise {\n  constructor (opts = {}) {\n    const open = opts.open || this._open.bind(this)\n    const close = opts.close || this._close.bind(this)\n\n    this[kNanoresource] = nanoresource({\n      open: (cb) => this[kProcessPromise](open, cb),\n      close: (cb) => this[kProcessPromise](close, cb),\n      reopen: opts.reopen\n    })\n  }\n\n  get opened () {\n    return this[kNanoresource].opened\n  }\n\n  get opening () {\n    return this[kNanoresource].opening\n  }\n\n  get closed () {\n    return this[kNanoresource].closed\n  }\n\n  get closing () {\n    return this[kNanoresource].closing\n  }\n\n  get actives () {\n    return this[kNanoresource].actives\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  open () {\n    const callback = callbackPromise()\n    this[kNanoresource].open(callback)\n    return callback.promise\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  close (allowActive = false) {\n    const callback = callbackPromise()\n    this[kNanoresource].close(allowActive, callback)\n    return callback.promise\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  active (cb) {\n    return this[kNanoresource].active(cb)\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  inactive (cb, err, value) {\n    return this[kNanoresource].inactive(cb, err, value)\n  }\n\n  /**\n   * @abstract\n   */\n  async _open () {}\n\n  /**\n   * @abstract\n   */\n  async _close () {}\n\n  async [kProcessPromise] (fnPromise, cb) {\n    try {\n      await fnPromise()\n      cb()\n    } catch (err) {\n      cb(err)\n    }\n  }\n}\n\nnanoresourcePromiseModule.exports = (opts) => new NanoresourcePromise(opts)\nvar NanoresourcePromise_1 = nanoresourcePromise.NanoresourcePromise = NanoresourcePromise\n\nexport { nanoresourcePromise as __moduleExports, NanoresourcePromise_1 as NanoresourcePromise, nanoresourcePromise as default };","start":1670465470940,"end":1670465471219,"order":"normal"},{"name":"polyfill-node","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as nanoresourcePromiseModule, exports as nanoresourcePromise } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoresource-promise@2.0.0/node_modules/nanoresource-promise/index.js?commonjs-module\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoresource-promise@2.0.0/node_modules/nanoresource-promise/nanoresource-cb.js?commonjs-proxy\";\n\nconst nanoresource = require$$0\n\nfunction callbackPromise () {\n  let callback\n\n  const promise = new Promise((resolve, reject) => {\n    callback = (err, value) => {\n      if (err) reject(err)\n      else resolve(value)\n    }\n  })\n\n  callback.promise = promise\n  return callback\n}\n\nconst kNanoresource = Symbol('nanoresource')\nconst kProcessPromise = Symbol('processpromise')\n\nclass NanoresourcePromise {\n  constructor (opts = {}) {\n    const open = opts.open || this._open.bind(this)\n    const close = opts.close || this._close.bind(this)\n\n    this[kNanoresource] = nanoresource({\n      open: (cb) => this[kProcessPromise](open, cb),\n      close: (cb) => this[kProcessPromise](close, cb),\n      reopen: opts.reopen\n    })\n  }\n\n  get opened () {\n    return this[kNanoresource].opened\n  }\n\n  get opening () {\n    return this[kNanoresource].opening\n  }\n\n  get closed () {\n    return this[kNanoresource].closed\n  }\n\n  get closing () {\n    return this[kNanoresource].closing\n  }\n\n  get actives () {\n    return this[kNanoresource].actives\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  open () {\n    const callback = callbackPromise()\n    this[kNanoresource].open(callback)\n    return callback.promise\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  close (allowActive = false) {\n    const callback = callbackPromise()\n    this[kNanoresource].close(allowActive, callback)\n    return callback.promise\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  active (cb) {\n    return this[kNanoresource].active(cb)\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  inactive (cb, err, value) {\n    return this[kNanoresource].inactive(cb, err, value)\n  }\n\n  /**\n   * @abstract\n   */\n  async _open () {}\n\n  /**\n   * @abstract\n   */\n  async _close () {}\n\n  async [kProcessPromise] (fnPromise, cb) {\n    try {\n      await fnPromise()\n      cb()\n    } catch (err) {\n      cb(err)\n    }\n  }\n}\n\nnanoresourcePromiseModule.exports = (opts) => new NanoresourcePromise(opts)\nvar NanoresourcePromise_1 = nanoresourcePromise.NanoresourcePromise = NanoresourcePromise\n\nexport { nanoresourcePromise as __moduleExports, NanoresourcePromise_1 as NanoresourcePromise, nanoresourcePromise as default };","start":1670465471219,"end":1670465471220,"order":"normal"}]}
