{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_secretbox.js","transforms":[{"name":"vite:load-fallback","result":"/* eslint-disable camelcase */\nconst assert = require('nanoassert')\nconst { crypto_stream, crypto_stream_xor } = require('./crypto_stream')\nconst { crypto_onetimeauth, crypto_onetimeauth_verify, crypto_onetimeauth_BYTES, crypto_onetimeauth_KEYBYTES } = require('./crypto_onetimeauth')\n\nconst crypto_secretbox_KEYBYTES = 32\nconst crypto_secretbox_NONCEBYTES = 24\nconst crypto_secretbox_ZEROBYTES = 32\nconst crypto_secretbox_BOXZEROBYTES = 16\nconst crypto_secretbox_MACBYTES = 16\n\nmodule.exports = {\n  crypto_secretbox,\n  crypto_secretbox_open,\n  crypto_secretbox_detached,\n  crypto_secretbox_open_detached,\n  crypto_secretbox_easy,\n  crypto_secretbox_open_easy,\n  crypto_secretbox_KEYBYTES,\n  crypto_secretbox_NONCEBYTES,\n  crypto_secretbox_ZEROBYTES,\n  crypto_secretbox_BOXZEROBYTES,\n  crypto_secretbox_MACBYTES\n}\n\nfunction crypto_secretbox (c, m, n, k) {\n  assert(c.byteLength === m.byteLength, \"c must be 'm.byteLength' bytes\")\n  const mlen = m.byteLength\n  assert(mlen >= crypto_secretbox_ZEROBYTES, \"mlen must be at least 'crypto_secretbox_ZEROBYTES'\")\n  assert(n.byteLength === crypto_secretbox_NONCEBYTES, \"n must be 'crypto_secretbox_NONCEBYTES' bytes\")\n  assert(k.byteLength === crypto_secretbox_KEYBYTES, \"k must be 'crypto_secretbox_KEYBYTES' bytes\")\n\n  crypto_stream_xor(c, m, n, k)\n  crypto_onetimeauth(\n    c.subarray(crypto_secretbox_BOXZEROBYTES, crypto_secretbox_BOXZEROBYTES + crypto_onetimeauth_BYTES),\n    c.subarray(crypto_secretbox_BOXZEROBYTES + crypto_onetimeauth_BYTES, c.byteLength),\n    c.subarray(0, crypto_onetimeauth_KEYBYTES)\n  )\n  c.fill(0, 0, crypto_secretbox_BOXZEROBYTES)\n}\n\nfunction crypto_secretbox_open (m, c, n, k) {\n  assert(c.byteLength === m.byteLength, \"c must be 'm.byteLength' bytes\")\n  const mlen = m.byteLength\n  assert(mlen >= crypto_secretbox_ZEROBYTES, \"mlen must be at least 'crypto_secretbox_ZEROBYTES'\")\n  assert(n.byteLength === crypto_secretbox_NONCEBYTES, \"n must be 'crypto_secretbox_NONCEBYTES' bytes\")\n  assert(k.byteLength === crypto_secretbox_KEYBYTES, \"k must be 'crypto_secretbox_KEYBYTES' bytes\")\n\n  const x = new Uint8Array(crypto_onetimeauth_KEYBYTES)\n  crypto_stream(x, n, k)\n  const validMac = crypto_onetimeauth_verify(\n    c.subarray(crypto_secretbox_BOXZEROBYTES, crypto_secretbox_BOXZEROBYTES + crypto_onetimeauth_BYTES),\n    c.subarray(crypto_secretbox_BOXZEROBYTES + crypto_onetimeauth_BYTES, c.byteLength),\n    x\n  )\n\n  if (validMac === false) return false\n  crypto_stream_xor(m, c, n, k)\n  m.fill(0, 0, 32)\n  return true\n}\n\nfunction crypto_secretbox_detached (o, mac, msg, n, k) {\n  assert(o.byteLength === msg.byteLength, \"o must be 'msg.byteLength' bytes\")\n  assert(mac.byteLength === crypto_secretbox_MACBYTES, \"mac must be 'crypto_secretbox_MACBYTES' bytes\")\n  assert(n.byteLength === crypto_secretbox_NONCEBYTES, \"n must be 'crypto_secretbox_NONCEBYTES' bytes\")\n  assert(k.byteLength === crypto_secretbox_KEYBYTES, \"k must be 'crypto_secretbox_KEYBYTES' bytes\")\n\n  const tmp = new Uint8Array(msg.byteLength + mac.byteLength)\n  crypto_secretbox_easy(tmp, msg, n, k)\n  mac.set(tmp.subarray(0, mac.byteLength))\n  o.set(tmp.subarray(mac.byteLength))\n  return true\n}\n\nfunction crypto_secretbox_open_detached (msg, o, mac, n, k) {\n  assert(o.byteLength === msg.byteLength, \"o must be 'msg.byteLength' bytes\")\n  assert(mac.byteLength === crypto_secretbox_MACBYTES, \"mac must be 'crypto_secretbox_MACBYTES' bytes\")\n  assert(n.byteLength === crypto_secretbox_NONCEBYTES, \"n must be 'crypto_secretbox_NONCEBYTES' bytes\")\n  assert(k.byteLength === crypto_secretbox_KEYBYTES, \"k must be 'crypto_secretbox_KEYBYTES' bytes\")\n\n  const tmp = new Uint8Array(o.byteLength + mac.byteLength)\n  tmp.set(mac)\n  tmp.set(o, mac.byteLength)\n  return crypto_secretbox_open_easy(msg, tmp, n, k)\n}\n\nfunction crypto_secretbox_easy (o, msg, n, k) {\n  assert(o.byteLength === msg.byteLength + crypto_secretbox_MACBYTES, \"o must be 'msg.byteLength + crypto_secretbox_MACBYTES' bytes\")\n  assert(n.byteLength === crypto_secretbox_NONCEBYTES, \"n must be 'crypto_secretbox_NONCEBYTES' bytes\")\n  assert(k.byteLength === crypto_secretbox_KEYBYTES, \"k must be 'crypto_secretbox_KEYBYTES' bytes\")\n\n  const m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.byteLength)\n  const c = new Uint8Array(m.byteLength)\n  m.set(msg, crypto_secretbox_ZEROBYTES)\n  crypto_secretbox(c, m, n, k)\n  o.set(c.subarray(crypto_secretbox_BOXZEROBYTES))\n}\n\nfunction crypto_secretbox_open_easy (msg, box, n, k) {\n  assert(box.byteLength === msg.byteLength + crypto_secretbox_MACBYTES, \"box must be 'msg.byteLength + crypto_secretbox_MACBYTES' bytes\")\n  assert(n.byteLength === crypto_secretbox_NONCEBYTES, \"n must be 'crypto_secretbox_NONCEBYTES' bytes\")\n  assert(k.byteLength === crypto_secretbox_KEYBYTES, \"k must be 'crypto_secretbox_KEYBYTES' bytes\")\n\n  const c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.byteLength)\n  const m = new Uint8Array(c.byteLength)\n  c.set(box, crypto_secretbox_BOXZEROBYTES)\n  if (crypto_secretbox_open(m, c, n, k) === false) return false\n  msg.set(m.subarray(crypto_secretbox_ZEROBYTES))\n  return true\n}\n","start":1670465470694,"end":1670465470857},{"name":"vite:react-babel","result":"/* eslint-disable camelcase */\nconst assert = require('nanoassert')\nconst { crypto_stream, crypto_stream_xor } = require('./crypto_stream')\nconst { crypto_onetimeauth, crypto_onetimeauth_verify, crypto_onetimeauth_BYTES, crypto_onetimeauth_KEYBYTES } = require('./crypto_onetimeauth')\n\nconst crypto_secretbox_KEYBYTES = 32\nconst crypto_secretbox_NONCEBYTES = 24\nconst crypto_secretbox_ZEROBYTES = 32\nconst crypto_secretbox_BOXZEROBYTES = 16\nconst crypto_secretbox_MACBYTES = 16\n\nmodule.exports = {\n  crypto_secretbox,\n  crypto_secretbox_open,\n  crypto_secretbox_detached,\n  crypto_secretbox_open_detached,\n  crypto_secretbox_easy,\n  crypto_secretbox_open_easy,\n  crypto_secretbox_KEYBYTES,\n  crypto_secretbox_NONCEBYTES,\n  crypto_secretbox_ZEROBYTES,\n  crypto_secretbox_BOXZEROBYTES,\n  crypto_secretbox_MACBYTES\n}\n\nfunction crypto_secretbox (c, m, n, k) {\n  assert(c.byteLength === m.byteLength, \"c must be 'm.byteLength' bytes\")\n  const mlen = m.byteLength\n  assert(mlen >= crypto_secretbox_ZEROBYTES, \"mlen must be at least 'crypto_secretbox_ZEROBYTES'\")\n  assert(n.byteLength === crypto_secretbox_NONCEBYTES, \"n must be 'crypto_secretbox_NONCEBYTES' bytes\")\n  assert(k.byteLength === crypto_secretbox_KEYBYTES, \"k must be 'crypto_secretbox_KEYBYTES' bytes\")\n\n  crypto_stream_xor(c, m, n, k)\n  crypto_onetimeauth(\n    c.subarray(crypto_secretbox_BOXZEROBYTES, crypto_secretbox_BOXZEROBYTES + crypto_onetimeauth_BYTES),\n    c.subarray(crypto_secretbox_BOXZEROBYTES + crypto_onetimeauth_BYTES, c.byteLength),\n    c.subarray(0, crypto_onetimeauth_KEYBYTES)\n  )\n  c.fill(0, 0, crypto_secretbox_BOXZEROBYTES)\n}\n\nfunction crypto_secretbox_open (m, c, n, k) {\n  assert(c.byteLength === m.byteLength, \"c must be 'm.byteLength' bytes\")\n  const mlen = m.byteLength\n  assert(mlen >= crypto_secretbox_ZEROBYTES, \"mlen must be at least 'crypto_secretbox_ZEROBYTES'\")\n  assert(n.byteLength === crypto_secretbox_NONCEBYTES, \"n must be 'crypto_secretbox_NONCEBYTES' bytes\")\n  assert(k.byteLength === crypto_secretbox_KEYBYTES, \"k must be 'crypto_secretbox_KEYBYTES' bytes\")\n\n  const x = new Uint8Array(crypto_onetimeauth_KEYBYTES)\n  crypto_stream(x, n, k)\n  const validMac = crypto_onetimeauth_verify(\n    c.subarray(crypto_secretbox_BOXZEROBYTES, crypto_secretbox_BOXZEROBYTES + crypto_onetimeauth_BYTES),\n    c.subarray(crypto_secretbox_BOXZEROBYTES + crypto_onetimeauth_BYTES, c.byteLength),\n    x\n  )\n\n  if (validMac === false) return false\n  crypto_stream_xor(m, c, n, k)\n  m.fill(0, 0, 32)\n  return true\n}\n\nfunction crypto_secretbox_detached (o, mac, msg, n, k) {\n  assert(o.byteLength === msg.byteLength, \"o must be 'msg.byteLength' bytes\")\n  assert(mac.byteLength === crypto_secretbox_MACBYTES, \"mac must be 'crypto_secretbox_MACBYTES' bytes\")\n  assert(n.byteLength === crypto_secretbox_NONCEBYTES, \"n must be 'crypto_secretbox_NONCEBYTES' bytes\")\n  assert(k.byteLength === crypto_secretbox_KEYBYTES, \"k must be 'crypto_secretbox_KEYBYTES' bytes\")\n\n  const tmp = new Uint8Array(msg.byteLength + mac.byteLength)\n  crypto_secretbox_easy(tmp, msg, n, k)\n  mac.set(tmp.subarray(0, mac.byteLength))\n  o.set(tmp.subarray(mac.byteLength))\n  return true\n}\n\nfunction crypto_secretbox_open_detached (msg, o, mac, n, k) {\n  assert(o.byteLength === msg.byteLength, \"o must be 'msg.byteLength' bytes\")\n  assert(mac.byteLength === crypto_secretbox_MACBYTES, \"mac must be 'crypto_secretbox_MACBYTES' bytes\")\n  assert(n.byteLength === crypto_secretbox_NONCEBYTES, \"n must be 'crypto_secretbox_NONCEBYTES' bytes\")\n  assert(k.byteLength === crypto_secretbox_KEYBYTES, \"k must be 'crypto_secretbox_KEYBYTES' bytes\")\n\n  const tmp = new Uint8Array(o.byteLength + mac.byteLength)\n  tmp.set(mac)\n  tmp.set(o, mac.byteLength)\n  return crypto_secretbox_open_easy(msg, tmp, n, k)\n}\n\nfunction crypto_secretbox_easy (o, msg, n, k) {\n  assert(o.byteLength === msg.byteLength + crypto_secretbox_MACBYTES, \"o must be 'msg.byteLength + crypto_secretbox_MACBYTES' bytes\")\n  assert(n.byteLength === crypto_secretbox_NONCEBYTES, \"n must be 'crypto_secretbox_NONCEBYTES' bytes\")\n  assert(k.byteLength === crypto_secretbox_KEYBYTES, \"k must be 'crypto_secretbox_KEYBYTES' bytes\")\n\n  const m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.byteLength)\n  const c = new Uint8Array(m.byteLength)\n  m.set(msg, crypto_secretbox_ZEROBYTES)\n  crypto_secretbox(c, m, n, k)\n  o.set(c.subarray(crypto_secretbox_BOXZEROBYTES))\n}\n\nfunction crypto_secretbox_open_easy (msg, box, n, k) {\n  assert(box.byteLength === msg.byteLength + crypto_secretbox_MACBYTES, \"box must be 'msg.byteLength + crypto_secretbox_MACBYTES' bytes\")\n  assert(n.byteLength === crypto_secretbox_NONCEBYTES, \"n must be 'crypto_secretbox_NONCEBYTES' bytes\")\n  assert(k.byteLength === crypto_secretbox_KEYBYTES, \"k must be 'crypto_secretbox_KEYBYTES' bytes\")\n\n  const c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.byteLength)\n  const m = new Uint8Array(c.byteLength)\n  c.set(box, crypto_secretbox_BOXZEROBYTES)\n  if (crypto_secretbox_open(m, c, n, k) === false) return false\n  msg.set(m.subarray(crypto_secretbox_ZEROBYTES))\n  return true\n}\n","start":1670465470857,"end":1670465470857,"order":"pre"},{"name":"commonjs","result":"/* eslint-disable camelcase */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoassert@2.0.0/node_modules/nanoassert/index.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_stream.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_onetimeauth.js?commonjs-proxy\";\n\nconst assert = require$$0\nconst { crypto_stream, crypto_stream_xor } = require$$1\nconst { crypto_onetimeauth, crypto_onetimeauth_verify, crypto_onetimeauth_BYTES, crypto_onetimeauth_KEYBYTES } = require$$2\n\nconst crypto_secretbox_KEYBYTES = 32\nconst crypto_secretbox_NONCEBYTES = 24\nconst crypto_secretbox_ZEROBYTES = 32\nconst crypto_secretbox_BOXZEROBYTES = 16\nconst crypto_secretbox_MACBYTES = 16\n\nvar crypto_secretbox_1 = {\n  crypto_secretbox,\n  crypto_secretbox_open,\n  crypto_secretbox_detached,\n  crypto_secretbox_open_detached,\n  crypto_secretbox_easy,\n  crypto_secretbox_open_easy,\n  crypto_secretbox_KEYBYTES,\n  crypto_secretbox_NONCEBYTES,\n  crypto_secretbox_ZEROBYTES,\n  crypto_secretbox_BOXZEROBYTES,\n  crypto_secretbox_MACBYTES\n}\n\nfunction crypto_secretbox (c, m, n, k) {\n  assert(c.byteLength === m.byteLength, \"c must be 'm.byteLength' bytes\")\n  const mlen = m.byteLength\n  assert(mlen >= crypto_secretbox_ZEROBYTES, \"mlen must be at least 'crypto_secretbox_ZEROBYTES'\")\n  assert(n.byteLength === crypto_secretbox_NONCEBYTES, \"n must be 'crypto_secretbox_NONCEBYTES' bytes\")\n  assert(k.byteLength === crypto_secretbox_KEYBYTES, \"k must be 'crypto_secretbox_KEYBYTES' bytes\")\n\n  crypto_stream_xor(c, m, n, k)\n  crypto_onetimeauth(\n    c.subarray(crypto_secretbox_BOXZEROBYTES, crypto_secretbox_BOXZEROBYTES + crypto_onetimeauth_BYTES),\n    c.subarray(crypto_secretbox_BOXZEROBYTES + crypto_onetimeauth_BYTES, c.byteLength),\n    c.subarray(0, crypto_onetimeauth_KEYBYTES)\n  )\n  c.fill(0, 0, crypto_secretbox_BOXZEROBYTES)\n}\n\nfunction crypto_secretbox_open (m, c, n, k) {\n  assert(c.byteLength === m.byteLength, \"c must be 'm.byteLength' bytes\")\n  const mlen = m.byteLength\n  assert(mlen >= crypto_secretbox_ZEROBYTES, \"mlen must be at least 'crypto_secretbox_ZEROBYTES'\")\n  assert(n.byteLength === crypto_secretbox_NONCEBYTES, \"n must be 'crypto_secretbox_NONCEBYTES' bytes\")\n  assert(k.byteLength === crypto_secretbox_KEYBYTES, \"k must be 'crypto_secretbox_KEYBYTES' bytes\")\n\n  const x = new Uint8Array(crypto_onetimeauth_KEYBYTES)\n  crypto_stream(x, n, k)\n  const validMac = crypto_onetimeauth_verify(\n    c.subarray(crypto_secretbox_BOXZEROBYTES, crypto_secretbox_BOXZEROBYTES + crypto_onetimeauth_BYTES),\n    c.subarray(crypto_secretbox_BOXZEROBYTES + crypto_onetimeauth_BYTES, c.byteLength),\n    x\n  )\n\n  if (validMac === false) return false\n  crypto_stream_xor(m, c, n, k)\n  m.fill(0, 0, 32)\n  return true\n}\n\nfunction crypto_secretbox_detached (o, mac, msg, n, k) {\n  assert(o.byteLength === msg.byteLength, \"o must be 'msg.byteLength' bytes\")\n  assert(mac.byteLength === crypto_secretbox_MACBYTES, \"mac must be 'crypto_secretbox_MACBYTES' bytes\")\n  assert(n.byteLength === crypto_secretbox_NONCEBYTES, \"n must be 'crypto_secretbox_NONCEBYTES' bytes\")\n  assert(k.byteLength === crypto_secretbox_KEYBYTES, \"k must be 'crypto_secretbox_KEYBYTES' bytes\")\n\n  const tmp = new Uint8Array(msg.byteLength + mac.byteLength)\n  crypto_secretbox_easy(tmp, msg, n, k)\n  mac.set(tmp.subarray(0, mac.byteLength))\n  o.set(tmp.subarray(mac.byteLength))\n  return true\n}\n\nfunction crypto_secretbox_open_detached (msg, o, mac, n, k) {\n  assert(o.byteLength === msg.byteLength, \"o must be 'msg.byteLength' bytes\")\n  assert(mac.byteLength === crypto_secretbox_MACBYTES, \"mac must be 'crypto_secretbox_MACBYTES' bytes\")\n  assert(n.byteLength === crypto_secretbox_NONCEBYTES, \"n must be 'crypto_secretbox_NONCEBYTES' bytes\")\n  assert(k.byteLength === crypto_secretbox_KEYBYTES, \"k must be 'crypto_secretbox_KEYBYTES' bytes\")\n\n  const tmp = new Uint8Array(o.byteLength + mac.byteLength)\n  tmp.set(mac)\n  tmp.set(o, mac.byteLength)\n  return crypto_secretbox_open_easy(msg, tmp, n, k)\n}\n\nfunction crypto_secretbox_easy (o, msg, n, k) {\n  assert(o.byteLength === msg.byteLength + crypto_secretbox_MACBYTES, \"o must be 'msg.byteLength + crypto_secretbox_MACBYTES' bytes\")\n  assert(n.byteLength === crypto_secretbox_NONCEBYTES, \"n must be 'crypto_secretbox_NONCEBYTES' bytes\")\n  assert(k.byteLength === crypto_secretbox_KEYBYTES, \"k must be 'crypto_secretbox_KEYBYTES' bytes\")\n\n  const m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.byteLength)\n  const c = new Uint8Array(m.byteLength)\n  m.set(msg, crypto_secretbox_ZEROBYTES)\n  crypto_secretbox(c, m, n, k)\n  o.set(c.subarray(crypto_secretbox_BOXZEROBYTES))\n}\n\nfunction crypto_secretbox_open_easy (msg, box, n, k) {\n  assert(box.byteLength === msg.byteLength + crypto_secretbox_MACBYTES, \"box must be 'msg.byteLength + crypto_secretbox_MACBYTES' bytes\")\n  assert(n.byteLength === crypto_secretbox_NONCEBYTES, \"n must be 'crypto_secretbox_NONCEBYTES' bytes\")\n  assert(k.byteLength === crypto_secretbox_KEYBYTES, \"k must be 'crypto_secretbox_KEYBYTES' bytes\")\n\n  const c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.byteLength)\n  const m = new Uint8Array(c.byteLength)\n  c.set(box, crypto_secretbox_BOXZEROBYTES)\n  if (crypto_secretbox_open(m, c, n, k) === false) return false\n  msg.set(m.subarray(crypto_secretbox_ZEROBYTES))\n  return true\n}\n\nexport default crypto_secretbox_1;\nexport { crypto_secretbox_1 as __moduleExports };","start":1670465470857,"end":1670465471595,"order":"normal"}]}
