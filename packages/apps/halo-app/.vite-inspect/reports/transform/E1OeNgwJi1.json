{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/index-light.js","transforms":[{"name":"vite:load-fallback","result":"\"use strict\";\nvar protobuf = module.exports = require(\"./index-minimal\");\n\nprotobuf.build = \"light\";\n\n/**\n * A node-style callback as used by {@link load} and {@link Root#load}.\n * @typedef LoadCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Root} [root] Root, if there hasn't been an error\n * @returns {undefined}\n */\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n */\nfunction load(filename, root, callback) {\n    if (typeof root === \"function\") {\n        callback = root;\n        root = new protobuf.Root();\n    } else if (!root)\n        root = new protobuf.Root();\n    return root.load(filename, callback);\n}\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Promise<Root>} Promise\n * @see {@link Root#load}\n * @variation 3\n */\n// function load(filename:string, [root:Root]):Promise<Root>\n\nprotobuf.load = load;\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n * @see {@link Root#loadSync}\n */\nfunction loadSync(filename, root) {\n    if (!root)\n        root = new protobuf.Root();\n    return root.loadSync(filename);\n}\n\nprotobuf.loadSync = loadSync;\n\n// Serialization\nprotobuf.encoder          = require(\"./encoder\");\nprotobuf.decoder          = require(\"./decoder\");\nprotobuf.verifier         = require(\"./verifier\");\nprotobuf.converter        = require(\"./converter\");\n\n// Reflection\nprotobuf.ReflectionObject = require(\"./object\");\nprotobuf.Namespace        = require(\"./namespace\");\nprotobuf.Root             = require(\"./root\");\nprotobuf.Enum             = require(\"./enum\");\nprotobuf.Type             = require(\"./type\");\nprotobuf.Field            = require(\"./field\");\nprotobuf.OneOf            = require(\"./oneof\");\nprotobuf.MapField         = require(\"./mapfield\");\nprotobuf.Service          = require(\"./service\");\nprotobuf.Method           = require(\"./method\");\n\n// Runtime\nprotobuf.Message          = require(\"./message\");\nprotobuf.wrappers         = require(\"./wrappers\");\n\n// Utility\nprotobuf.types            = require(\"./types\");\nprotobuf.util             = require(\"./util\");\n\n// Set up possibly cyclic reflection dependencies\nprotobuf.ReflectionObject._configure(protobuf.Root);\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\nprotobuf.Root._configure(protobuf.Type);\nprotobuf.Field._configure(protobuf.Type);\n","start":1670465469847,"end":1670465469948},{"name":"vite:react-babel","result":"\"use strict\";\nvar protobuf = module.exports = require(\"./index-minimal\");\n\nprotobuf.build = \"light\";\n\n/**\n * A node-style callback as used by {@link load} and {@link Root#load}.\n * @typedef LoadCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Root} [root] Root, if there hasn't been an error\n * @returns {undefined}\n */\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n */\nfunction load(filename, root, callback) {\n    if (typeof root === \"function\") {\n        callback = root;\n        root = new protobuf.Root();\n    } else if (!root)\n        root = new protobuf.Root();\n    return root.load(filename, callback);\n}\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Promise<Root>} Promise\n * @see {@link Root#load}\n * @variation 3\n */\n// function load(filename:string, [root:Root]):Promise<Root>\n\nprotobuf.load = load;\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n * @see {@link Root#loadSync}\n */\nfunction loadSync(filename, root) {\n    if (!root)\n        root = new protobuf.Root();\n    return root.loadSync(filename);\n}\n\nprotobuf.loadSync = loadSync;\n\n// Serialization\nprotobuf.encoder          = require(\"./encoder\");\nprotobuf.decoder          = require(\"./decoder\");\nprotobuf.verifier         = require(\"./verifier\");\nprotobuf.converter        = require(\"./converter\");\n\n// Reflection\nprotobuf.ReflectionObject = require(\"./object\");\nprotobuf.Namespace        = require(\"./namespace\");\nprotobuf.Root             = require(\"./root\");\nprotobuf.Enum             = require(\"./enum\");\nprotobuf.Type             = require(\"./type\");\nprotobuf.Field            = require(\"./field\");\nprotobuf.OneOf            = require(\"./oneof\");\nprotobuf.MapField         = require(\"./mapfield\");\nprotobuf.Service          = require(\"./service\");\nprotobuf.Method           = require(\"./method\");\n\n// Runtime\nprotobuf.Message          = require(\"./message\");\nprotobuf.wrappers         = require(\"./wrappers\");\n\n// Utility\nprotobuf.types            = require(\"./types\");\nprotobuf.util             = require(\"./util\");\n\n// Set up possibly cyclic reflection dependencies\nprotobuf.ReflectionObject._configure(protobuf.Root);\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\nprotobuf.Root._configure(protobuf.Type);\nprotobuf.Field._configure(protobuf.Type);\n","start":1670465469949,"end":1670465469949,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as indexLightModule, exports as indexLight } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/index-light.js?commonjs-module\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/index-minimal.js?commonjs-proxy\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/encoder.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/decoder.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/verifier.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/converter.js?commonjs-wrapped\";\nimport { __require as require$$5 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/object.js?commonjs-wrapped\";\nimport { __require as require$$6 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/namespace.js?commonjs-wrapped\";\nimport { __require as require$$7 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/root.js?commonjs-wrapped\";\nimport { __require as require$$8 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/enum.js?commonjs-wrapped\";\nimport { __require as require$$9 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/type.js?commonjs-wrapped\";\nimport { __require as require$$10 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/field.js?commonjs-wrapped\";\nimport { __require as require$$11 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/oneof.js?commonjs-wrapped\";\nimport { __require as require$$12 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/mapfield.js?commonjs-wrapped\";\nimport { __require as require$$13 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/service.js?commonjs-wrapped\";\nimport { __require as require$$14 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/method.js?commonjs-wrapped\";\nimport require$$15 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/message.js?commonjs-proxy\";\nimport require$$16 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/wrappers.js?commonjs-proxy\";\nimport { __require as require$$17 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/types.js?commonjs-wrapped\";\nimport { __require as require$$18 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/util.js?commonjs-wrapped\";\n\n(function (module) {\n\t\"use strict\";\n\tvar protobuf = module.exports = require$$0;\n\n\tprotobuf.build = \"light\";\n\n\t/**\n\t * A node-style callback as used by {@link load} and {@link Root#load}.\n\t * @typedef LoadCallback\n\t * @type {function}\n\t * @param {Error|null} error Error, if any, otherwise `null`\n\t * @param {Root} [root] Root, if there hasn't been an error\n\t * @returns {undefined}\n\t */\n\n\t/**\n\t * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n\t * @param {string|string[]} filename One or multiple files to load\n\t * @param {Root} root Root namespace, defaults to create a new one if omitted.\n\t * @param {LoadCallback} callback Callback function\n\t * @returns {undefined}\n\t * @see {@link Root#load}\n\t */\n\tfunction load(filename, root, callback) {\n\t    if (typeof root === \"function\") {\n\t        callback = root;\n\t        root = new protobuf.Root();\n\t    } else if (!root)\n\t        root = new protobuf.Root();\n\t    return root.load(filename, callback);\n\t}\n\n\t/**\n\t * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n\t * @name load\n\t * @function\n\t * @param {string|string[]} filename One or multiple files to load\n\t * @param {LoadCallback} callback Callback function\n\t * @returns {undefined}\n\t * @see {@link Root#load}\n\t * @variation 2\n\t */\n\t// function load(filename:string, callback:LoadCallback):undefined\n\n\t/**\n\t * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n\t * @name load\n\t * @function\n\t * @param {string|string[]} filename One or multiple files to load\n\t * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n\t * @returns {Promise<Root>} Promise\n\t * @see {@link Root#load}\n\t * @variation 3\n\t */\n\t// function load(filename:string, [root:Root]):Promise<Root>\n\n\tprotobuf.load = load;\n\n\t/**\n\t * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\n\t * @param {string|string[]} filename One or multiple files to load\n\t * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n\t * @returns {Root} Root namespace\n\t * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n\t * @see {@link Root#loadSync}\n\t */\n\tfunction loadSync(filename, root) {\n\t    if (!root)\n\t        root = new protobuf.Root();\n\t    return root.loadSync(filename);\n\t}\n\n\tprotobuf.loadSync = loadSync;\n\n\t// Serialization\n\tprotobuf.encoder          = require$$1();\n\tprotobuf.decoder          = require$$2();\n\tprotobuf.verifier         = require$$3();\n\tprotobuf.converter        = require$$4();\n\n\t// Reflection\n\tprotobuf.ReflectionObject = require$$5();\n\tprotobuf.Namespace        = require$$6();\n\tprotobuf.Root             = require$$7();\n\tprotobuf.Enum             = require$$8();\n\tprotobuf.Type             = require$$9();\n\tprotobuf.Field            = require$$10();\n\tprotobuf.OneOf            = require$$11();\n\tprotobuf.MapField         = require$$12();\n\tprotobuf.Service          = require$$13();\n\tprotobuf.Method           = require$$14();\n\n\t// Runtime\n\tprotobuf.Message          = require$$15;\n\tprotobuf.wrappers         = require$$16;\n\n\t// Utility\n\tprotobuf.types            = require$$17();\n\tprotobuf.util             = require$$18();\n\n\t// Set up possibly cyclic reflection dependencies\n\tprotobuf.ReflectionObject._configure(protobuf.Root);\n\tprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\n\tprotobuf.Root._configure(protobuf.Type);\n\tprotobuf.Field._configure(protobuf.Type);\n} (indexLightModule));\n\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(indexLight);\nexport { indexLight as __moduleExports };","start":1670465469949,"end":1670465471452,"order":"normal"},{"name":"polyfill-node","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as indexLightModule, exports as indexLight } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/index-light.js?commonjs-module\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/index-minimal.js?commonjs-proxy\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/encoder.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/decoder.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/verifier.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/converter.js?commonjs-wrapped\";\nimport { __require as require$$5 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/object.js?commonjs-wrapped\";\nimport { __require as require$$6 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/namespace.js?commonjs-wrapped\";\nimport { __require as require$$7 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/root.js?commonjs-wrapped\";\nimport { __require as require$$8 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/enum.js?commonjs-wrapped\";\nimport { __require as require$$9 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/type.js?commonjs-wrapped\";\nimport { __require as require$$10 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/field.js?commonjs-wrapped\";\nimport { __require as require$$11 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/oneof.js?commonjs-wrapped\";\nimport { __require as require$$12 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/mapfield.js?commonjs-wrapped\";\nimport { __require as require$$13 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/service.js?commonjs-wrapped\";\nimport { __require as require$$14 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/method.js?commonjs-wrapped\";\nimport require$$15 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/message.js?commonjs-proxy\";\nimport require$$16 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/wrappers.js?commonjs-proxy\";\nimport { __require as require$$17 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/types.js?commonjs-wrapped\";\nimport { __require as require$$18 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/util.js?commonjs-wrapped\";\n\n(function (module) {\n\t\"use strict\";\n\tvar protobuf = module.exports = require$$0;\n\n\tprotobuf.build = \"light\";\n\n\t/**\n\t * A node-style callback as used by {@link load} and {@link Root#load}.\n\t * @typedef LoadCallback\n\t * @type {function}\n\t * @param {Error|null} error Error, if any, otherwise `null`\n\t * @param {Root} [root] Root, if there hasn't been an error\n\t * @returns {undefined}\n\t */\n\n\t/**\n\t * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n\t * @param {string|string[]} filename One or multiple files to load\n\t * @param {Root} root Root namespace, defaults to create a new one if omitted.\n\t * @param {LoadCallback} callback Callback function\n\t * @returns {undefined}\n\t * @see {@link Root#load}\n\t */\n\tfunction load(filename, root, callback) {\n\t    if (typeof root === \"function\") {\n\t        callback = root;\n\t        root = new protobuf.Root();\n\t    } else if (!root)\n\t        root = new protobuf.Root();\n\t    return root.load(filename, callback);\n\t}\n\n\t/**\n\t * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n\t * @name load\n\t * @function\n\t * @param {string|string[]} filename One or multiple files to load\n\t * @param {LoadCallback} callback Callback function\n\t * @returns {undefined}\n\t * @see {@link Root#load}\n\t * @variation 2\n\t */\n\t// function load(filename:string, callback:LoadCallback):undefined\n\n\t/**\n\t * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n\t * @name load\n\t * @function\n\t * @param {string|string[]} filename One or multiple files to load\n\t * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n\t * @returns {Promise<Root>} Promise\n\t * @see {@link Root#load}\n\t * @variation 3\n\t */\n\t// function load(filename:string, [root:Root]):Promise<Root>\n\n\tprotobuf.load = load;\n\n\t/**\n\t * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\n\t * @param {string|string[]} filename One or multiple files to load\n\t * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n\t * @returns {Root} Root namespace\n\t * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n\t * @see {@link Root#loadSync}\n\t */\n\tfunction loadSync(filename, root) {\n\t    if (!root)\n\t        root = new protobuf.Root();\n\t    return root.loadSync(filename);\n\t}\n\n\tprotobuf.loadSync = loadSync;\n\n\t// Serialization\n\tprotobuf.encoder          = require$$1();\n\tprotobuf.decoder          = require$$2();\n\tprotobuf.verifier         = require$$3();\n\tprotobuf.converter        = require$$4();\n\n\t// Reflection\n\tprotobuf.ReflectionObject = require$$5();\n\tprotobuf.Namespace        = require$$6();\n\tprotobuf.Root             = require$$7();\n\tprotobuf.Enum             = require$$8();\n\tprotobuf.Type             = require$$9();\n\tprotobuf.Field            = require$$10();\n\tprotobuf.OneOf            = require$$11();\n\tprotobuf.MapField         = require$$12();\n\tprotobuf.Service          = require$$13();\n\tprotobuf.Method           = require$$14();\n\n\t// Runtime\n\tprotobuf.Message          = require$$15;\n\tprotobuf.wrappers         = require$$16;\n\n\t// Utility\n\tprotobuf.types            = require$$17();\n\tprotobuf.util             = require$$18();\n\n\t// Set up possibly cyclic reflection dependencies\n\tprotobuf.ReflectionObject._configure(protobuf.Root);\n\tprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\n\tprotobuf.Root._configure(protobuf.Type);\n\tprotobuf.Field._configure(protobuf.Type);\n} (indexLightModule));\n\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(indexLight);\nexport { indexLight as __moduleExports };","start":1670465471459,"end":1670465471461,"order":"normal"}]}
