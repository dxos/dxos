{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/buffer@5.1.0/node_modules/buffer/index.js","transforms":[{"name":"vite:load-fallback","result":"/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  get: function () {\n    if (!(this instanceof Buffer)) {\n      return undefined\n    }\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  get: function () {\n    if (!(this instanceof Buffer)) {\n      return undefined\n    }\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('Invalid typed array length')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  return fromObject(value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj) {\n    if (ArrayBuffer.isView(obj) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n        return createBuffer(0)\n      }\n      return fromArrayLike(obj)\n    }\n\n    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n      return fromArrayLike(obj.data)\n    }\n  }\n\n  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (ArrayBuffer.isView(buf)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : new Buffer(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check\n// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166\nfunction isArrayBuffer (obj) {\n  return obj instanceof ArrayBuffer ||\n    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\n      typeof obj.byteLength === 'number')\n}\n\nfunction numberIsNaN (obj) {\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n","start":1670465470319,"end":1670465470402},{"name":"vite:react-babel","result":"/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  get: function () {\n    if (!(this instanceof Buffer)) {\n      return undefined\n    }\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  get: function () {\n    if (!(this instanceof Buffer)) {\n      return undefined\n    }\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('Invalid typed array length')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  return fromObject(value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj) {\n    if (ArrayBuffer.isView(obj) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n        return createBuffer(0)\n      }\n      return fromArrayLike(obj)\n    }\n\n    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n      return fromArrayLike(obj.data)\n    }\n  }\n\n  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (ArrayBuffer.isView(buf)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : new Buffer(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check\n// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166\nfunction isArrayBuffer (obj) {\n  return obj instanceof ArrayBuffer ||\n    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\n      typeof obj.byteLength === 'number')\n}\n\nfunction numberIsNaN (obj) {\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n","start":1670465470402,"end":1670465470402,"order":"pre"},{"name":"commonjs","result":"/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as buffer } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/buffer@5.1.0/node_modules/buffer/index.js?commonjs-exports\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js?commonjs-proxy\";\n\nvar hasRequiredBuffer;\n\nfunction requireBuffer () {\n\tif (hasRequiredBuffer) return buffer;\n\thasRequiredBuffer = 1;\n\t(function (exports) {\n\t\t/* eslint-disable no-proto */\n\n\t\t'use strict'\n\n\t\tvar base64 = require$$0\n\t\tvar ieee754 = require$$1\n\n\t\texports.Buffer = Buffer\n\t\texports.SlowBuffer = SlowBuffer\n\t\texports.INSPECT_MAX_BYTES = 50\n\n\t\tvar K_MAX_LENGTH = 0x7fffffff\n\t\texports.kMaxLength = K_MAX_LENGTH\n\n\t\t/**\n\t\t * If `Buffer.TYPED_ARRAY_SUPPORT`:\n\t\t *   === true    Use Uint8Array implementation (fastest)\n\t\t *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n\t\t *               implementation (most compatible, even IE6)\n\t\t *\n\t\t * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n\t\t * Opera 11.6+, iOS 4.2+.\n\t\t *\n\t\t * We report that the browser does not support typed arrays if the are not subclassable\n\t\t * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n\t\t * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n\t\t * for __proto__ and has a buggy typed array implementation.\n\t\t */\n\t\tBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\n\t\tif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n\t\t    typeof console.error === 'function') {\n\t\t  console.error(\n\t\t    'This browser lacks typed array (Uint8Array) support which is required by ' +\n\t\t    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n\t\t  )\n\t\t}\n\n\t\tfunction typedArraySupport () {\n\t\t  // Can typed array instances can be augmented?\n\t\t  try {\n\t\t    var arr = new Uint8Array(1)\n\t\t    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n\t\t    return arr.foo() === 42\n\t\t  } catch (e) {\n\t\t    return false\n\t\t  }\n\t\t}\n\n\t\tObject.defineProperty(Buffer.prototype, 'parent', {\n\t\t  get: function () {\n\t\t    if (!(this instanceof Buffer)) {\n\t\t      return undefined\n\t\t    }\n\t\t    return this.buffer\n\t\t  }\n\t\t})\n\n\t\tObject.defineProperty(Buffer.prototype, 'offset', {\n\t\t  get: function () {\n\t\t    if (!(this instanceof Buffer)) {\n\t\t      return undefined\n\t\t    }\n\t\t    return this.byteOffset\n\t\t  }\n\t\t})\n\n\t\tfunction createBuffer (length) {\n\t\t  if (length > K_MAX_LENGTH) {\n\t\t    throw new RangeError('Invalid typed array length')\n\t\t  }\n\t\t  // Return an augmented `Uint8Array` instance\n\t\t  var buf = new Uint8Array(length)\n\t\t  buf.__proto__ = Buffer.prototype\n\t\t  return buf\n\t\t}\n\n\t\t/**\n\t\t * The Buffer constructor returns instances of `Uint8Array` that have their\n\t\t * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n\t\t * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n\t\t * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n\t\t * returns a single octet.\n\t\t *\n\t\t * The `Uint8Array` prototype remains unmodified.\n\t\t */\n\n\t\tfunction Buffer (arg, encodingOrOffset, length) {\n\t\t  // Common case.\n\t\t  if (typeof arg === 'number') {\n\t\t    if (typeof encodingOrOffset === 'string') {\n\t\t      throw new Error(\n\t\t        'If encoding is specified then the first argument must be a string'\n\t\t      )\n\t\t    }\n\t\t    return allocUnsafe(arg)\n\t\t  }\n\t\t  return from(arg, encodingOrOffset, length)\n\t\t}\n\n\t\t// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n\t\tif (typeof Symbol !== 'undefined' && Symbol.species &&\n\t\t    Buffer[Symbol.species] === Buffer) {\n\t\t  Object.defineProperty(Buffer, Symbol.species, {\n\t\t    value: null,\n\t\t    configurable: true,\n\t\t    enumerable: false,\n\t\t    writable: false\n\t\t  })\n\t\t}\n\n\t\tBuffer.poolSize = 8192 // not used by this implementation\n\n\t\tfunction from (value, encodingOrOffset, length) {\n\t\t  if (typeof value === 'number') {\n\t\t    throw new TypeError('\"value\" argument must not be a number')\n\t\t  }\n\n\t\t  if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {\n\t\t    return fromArrayBuffer(value, encodingOrOffset, length)\n\t\t  }\n\n\t\t  if (typeof value === 'string') {\n\t\t    return fromString(value, encodingOrOffset)\n\t\t  }\n\n\t\t  return fromObject(value)\n\t\t}\n\n\t\t/**\n\t\t * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n\t\t * if value is a number.\n\t\t * Buffer.from(str[, encoding])\n\t\t * Buffer.from(array)\n\t\t * Buffer.from(buffer)\n\t\t * Buffer.from(arrayBuffer[, byteOffset[, length]])\n\t\t **/\n\t\tBuffer.from = function (value, encodingOrOffset, length) {\n\t\t  return from(value, encodingOrOffset, length)\n\t\t}\n\n\t\t// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n\t\t// https://github.com/feross/buffer/pull/148\n\t\tBuffer.prototype.__proto__ = Uint8Array.prototype\n\t\tBuffer.__proto__ = Uint8Array\n\n\t\tfunction assertSize (size) {\n\t\t  if (typeof size !== 'number') {\n\t\t    throw new TypeError('\"size\" argument must be of type number')\n\t\t  } else if (size < 0) {\n\t\t    throw new RangeError('\"size\" argument must not be negative')\n\t\t  }\n\t\t}\n\n\t\tfunction alloc (size, fill, encoding) {\n\t\t  assertSize(size)\n\t\t  if (size <= 0) {\n\t\t    return createBuffer(size)\n\t\t  }\n\t\t  if (fill !== undefined) {\n\t\t    // Only pay attention to encoding if it's a string. This\n\t\t    // prevents accidentally sending in a number that would\n\t\t    // be interpretted as a start offset.\n\t\t    return typeof encoding === 'string'\n\t\t      ? createBuffer(size).fill(fill, encoding)\n\t\t      : createBuffer(size).fill(fill)\n\t\t  }\n\t\t  return createBuffer(size)\n\t\t}\n\n\t\t/**\n\t\t * Creates a new filled Buffer instance.\n\t\t * alloc(size[, fill[, encoding]])\n\t\t **/\n\t\tBuffer.alloc = function (size, fill, encoding) {\n\t\t  return alloc(size, fill, encoding)\n\t\t}\n\n\t\tfunction allocUnsafe (size) {\n\t\t  assertSize(size)\n\t\t  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n\t\t}\n\n\t\t/**\n\t\t * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n\t\t * */\n\t\tBuffer.allocUnsafe = function (size) {\n\t\t  return allocUnsafe(size)\n\t\t}\n\t\t/**\n\t\t * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n\t\t */\n\t\tBuffer.allocUnsafeSlow = function (size) {\n\t\t  return allocUnsafe(size)\n\t\t}\n\n\t\tfunction fromString (string, encoding) {\n\t\t  if (typeof encoding !== 'string' || encoding === '') {\n\t\t    encoding = 'utf8'\n\t\t  }\n\n\t\t  if (!Buffer.isEncoding(encoding)) {\n\t\t    throw new TypeError('Unknown encoding: ' + encoding)\n\t\t  }\n\n\t\t  var length = byteLength(string, encoding) | 0\n\t\t  var buf = createBuffer(length)\n\n\t\t  var actual = buf.write(string, encoding)\n\n\t\t  if (actual !== length) {\n\t\t    // Writing a hex string, for example, that contains invalid characters will\n\t\t    // cause everything after the first invalid character to be ignored. (e.g.\n\t\t    // 'abxxcd' will be treated as 'ab')\n\t\t    buf = buf.slice(0, actual)\n\t\t  }\n\n\t\t  return buf\n\t\t}\n\n\t\tfunction fromArrayLike (array) {\n\t\t  var length = array.length < 0 ? 0 : checked(array.length) | 0\n\t\t  var buf = createBuffer(length)\n\t\t  for (var i = 0; i < length; i += 1) {\n\t\t    buf[i] = array[i] & 255\n\t\t  }\n\t\t  return buf\n\t\t}\n\n\t\tfunction fromArrayBuffer (array, byteOffset, length) {\n\t\t  if (byteOffset < 0 || array.byteLength < byteOffset) {\n\t\t    throw new RangeError('\"offset\" is outside of buffer bounds')\n\t\t  }\n\n\t\t  if (array.byteLength < byteOffset + (length || 0)) {\n\t\t    throw new RangeError('\"length\" is outside of buffer bounds')\n\t\t  }\n\n\t\t  var buf\n\t\t  if (byteOffset === undefined && length === undefined) {\n\t\t    buf = new Uint8Array(array)\n\t\t  } else if (length === undefined) {\n\t\t    buf = new Uint8Array(array, byteOffset)\n\t\t  } else {\n\t\t    buf = new Uint8Array(array, byteOffset, length)\n\t\t  }\n\n\t\t  // Return an augmented `Uint8Array` instance\n\t\t  buf.__proto__ = Buffer.prototype\n\t\t  return buf\n\t\t}\n\n\t\tfunction fromObject (obj) {\n\t\t  if (Buffer.isBuffer(obj)) {\n\t\t    var len = checked(obj.length) | 0\n\t\t    var buf = createBuffer(len)\n\n\t\t    if (buf.length === 0) {\n\t\t      return buf\n\t\t    }\n\n\t\t    obj.copy(buf, 0, 0, len)\n\t\t    return buf\n\t\t  }\n\n\t\t  if (obj) {\n\t\t    if (ArrayBuffer.isView(obj) || 'length' in obj) {\n\t\t      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n\t\t        return createBuffer(0)\n\t\t      }\n\t\t      return fromArrayLike(obj)\n\t\t    }\n\n\t\t    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n\t\t      return fromArrayLike(obj.data)\n\t\t    }\n\t\t  }\n\n\t\t  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.')\n\t\t}\n\n\t\tfunction checked (length) {\n\t\t  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n\t\t  // length is NaN (which is otherwise coerced to zero.)\n\t\t  if (length >= K_MAX_LENGTH) {\n\t\t    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n\t\t                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n\t\t  }\n\t\t  return length | 0\n\t\t}\n\n\t\tfunction SlowBuffer (length) {\n\t\t  if (+length != length) { // eslint-disable-line eqeqeq\n\t\t    length = 0\n\t\t  }\n\t\t  return Buffer.alloc(+length)\n\t\t}\n\n\t\tBuffer.isBuffer = function isBuffer (b) {\n\t\t  return b != null && b._isBuffer === true\n\t\t}\n\n\t\tBuffer.compare = function compare (a, b) {\n\t\t  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n\t\t    throw new TypeError('Arguments must be Buffers')\n\t\t  }\n\n\t\t  if (a === b) return 0\n\n\t\t  var x = a.length\n\t\t  var y = b.length\n\n\t\t  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n\t\t    if (a[i] !== b[i]) {\n\t\t      x = a[i]\n\t\t      y = b[i]\n\t\t      break\n\t\t    }\n\t\t  }\n\n\t\t  if (x < y) return -1\n\t\t  if (y < x) return 1\n\t\t  return 0\n\t\t}\n\n\t\tBuffer.isEncoding = function isEncoding (encoding) {\n\t\t  switch (String(encoding).toLowerCase()) {\n\t\t    case 'hex':\n\t\t    case 'utf8':\n\t\t    case 'utf-8':\n\t\t    case 'ascii':\n\t\t    case 'latin1':\n\t\t    case 'binary':\n\t\t    case 'base64':\n\t\t    case 'ucs2':\n\t\t    case 'ucs-2':\n\t\t    case 'utf16le':\n\t\t    case 'utf-16le':\n\t\t      return true\n\t\t    default:\n\t\t      return false\n\t\t  }\n\t\t}\n\n\t\tBuffer.concat = function concat (list, length) {\n\t\t  if (!Array.isArray(list)) {\n\t\t    throw new TypeError('\"list\" argument must be an Array of Buffers')\n\t\t  }\n\n\t\t  if (list.length === 0) {\n\t\t    return Buffer.alloc(0)\n\t\t  }\n\n\t\t  var i\n\t\t  if (length === undefined) {\n\t\t    length = 0\n\t\t    for (i = 0; i < list.length; ++i) {\n\t\t      length += list[i].length\n\t\t    }\n\t\t  }\n\n\t\t  var buffer = Buffer.allocUnsafe(length)\n\t\t  var pos = 0\n\t\t  for (i = 0; i < list.length; ++i) {\n\t\t    var buf = list[i]\n\t\t    if (ArrayBuffer.isView(buf)) {\n\t\t      buf = Buffer.from(buf)\n\t\t    }\n\t\t    if (!Buffer.isBuffer(buf)) {\n\t\t      throw new TypeError('\"list\" argument must be an Array of Buffers')\n\t\t    }\n\t\t    buf.copy(buffer, pos)\n\t\t    pos += buf.length\n\t\t  }\n\t\t  return buffer\n\t\t}\n\n\t\tfunction byteLength (string, encoding) {\n\t\t  if (Buffer.isBuffer(string)) {\n\t\t    return string.length\n\t\t  }\n\t\t  if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {\n\t\t    return string.byteLength\n\t\t  }\n\t\t  if (typeof string !== 'string') {\n\t\t    string = '' + string\n\t\t  }\n\n\t\t  var len = string.length\n\t\t  if (len === 0) return 0\n\n\t\t  // Use a for loop to avoid recursion\n\t\t  var loweredCase = false\n\t\t  for (;;) {\n\t\t    switch (encoding) {\n\t\t      case 'ascii':\n\t\t      case 'latin1':\n\t\t      case 'binary':\n\t\t        return len\n\t\t      case 'utf8':\n\t\t      case 'utf-8':\n\t\t      case undefined:\n\t\t        return utf8ToBytes(string).length\n\t\t      case 'ucs2':\n\t\t      case 'ucs-2':\n\t\t      case 'utf16le':\n\t\t      case 'utf-16le':\n\t\t        return len * 2\n\t\t      case 'hex':\n\t\t        return len >>> 1\n\t\t      case 'base64':\n\t\t        return base64ToBytes(string).length\n\t\t      default:\n\t\t        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n\t\t        encoding = ('' + encoding).toLowerCase()\n\t\t        loweredCase = true\n\t\t    }\n\t\t  }\n\t\t}\n\t\tBuffer.byteLength = byteLength\n\n\t\tfunction slowToString (encoding, start, end) {\n\t\t  var loweredCase = false\n\n\t\t  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n\t\t  // property of a typed array.\n\n\t\t  // This behaves neither like String nor Uint8Array in that we set start/end\n\t\t  // to their upper/lower bounds if the value passed is out of range.\n\t\t  // undefined is handled specially as per ECMA-262 6th Edition,\n\t\t  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\t\t  if (start === undefined || start < 0) {\n\t\t    start = 0\n\t\t  }\n\t\t  // Return early if start > this.length. Done here to prevent potential uint32\n\t\t  // coercion fail below.\n\t\t  if (start > this.length) {\n\t\t    return ''\n\t\t  }\n\n\t\t  if (end === undefined || end > this.length) {\n\t\t    end = this.length\n\t\t  }\n\n\t\t  if (end <= 0) {\n\t\t    return ''\n\t\t  }\n\n\t\t  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n\t\t  end >>>= 0\n\t\t  start >>>= 0\n\n\t\t  if (end <= start) {\n\t\t    return ''\n\t\t  }\n\n\t\t  if (!encoding) encoding = 'utf8'\n\n\t\t  while (true) {\n\t\t    switch (encoding) {\n\t\t      case 'hex':\n\t\t        return hexSlice(this, start, end)\n\n\t\t      case 'utf8':\n\t\t      case 'utf-8':\n\t\t        return utf8Slice(this, start, end)\n\n\t\t      case 'ascii':\n\t\t        return asciiSlice(this, start, end)\n\n\t\t      case 'latin1':\n\t\t      case 'binary':\n\t\t        return latin1Slice(this, start, end)\n\n\t\t      case 'base64':\n\t\t        return base64Slice(this, start, end)\n\n\t\t      case 'ucs2':\n\t\t      case 'ucs-2':\n\t\t      case 'utf16le':\n\t\t      case 'utf-16le':\n\t\t        return utf16leSlice(this, start, end)\n\n\t\t      default:\n\t\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t\t        encoding = (encoding + '').toLowerCase()\n\t\t        loweredCase = true\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\t// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n\t\t// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n\t\t// reliably in a browserify context because there could be multiple different\n\t\t// copies of the 'buffer' package in use. This method works even for Buffer\n\t\t// instances that were created from another copy of the `buffer` package.\n\t\t// See: https://github.com/feross/buffer/issues/154\n\t\tBuffer.prototype._isBuffer = true\n\n\t\tfunction swap (b, n, m) {\n\t\t  var i = b[n]\n\t\t  b[n] = b[m]\n\t\t  b[m] = i\n\t\t}\n\n\t\tBuffer.prototype.swap16 = function swap16 () {\n\t\t  var len = this.length\n\t\t  if (len % 2 !== 0) {\n\t\t    throw new RangeError('Buffer size must be a multiple of 16-bits')\n\t\t  }\n\t\t  for (var i = 0; i < len; i += 2) {\n\t\t    swap(this, i, i + 1)\n\t\t  }\n\t\t  return this\n\t\t}\n\n\t\tBuffer.prototype.swap32 = function swap32 () {\n\t\t  var len = this.length\n\t\t  if (len % 4 !== 0) {\n\t\t    throw new RangeError('Buffer size must be a multiple of 32-bits')\n\t\t  }\n\t\t  for (var i = 0; i < len; i += 4) {\n\t\t    swap(this, i, i + 3)\n\t\t    swap(this, i + 1, i + 2)\n\t\t  }\n\t\t  return this\n\t\t}\n\n\t\tBuffer.prototype.swap64 = function swap64 () {\n\t\t  var len = this.length\n\t\t  if (len % 8 !== 0) {\n\t\t    throw new RangeError('Buffer size must be a multiple of 64-bits')\n\t\t  }\n\t\t  for (var i = 0; i < len; i += 8) {\n\t\t    swap(this, i, i + 7)\n\t\t    swap(this, i + 1, i + 6)\n\t\t    swap(this, i + 2, i + 5)\n\t\t    swap(this, i + 3, i + 4)\n\t\t  }\n\t\t  return this\n\t\t}\n\n\t\tBuffer.prototype.toString = function toString () {\n\t\t  var length = this.length\n\t\t  if (length === 0) return ''\n\t\t  if (arguments.length === 0) return utf8Slice(this, 0, length)\n\t\t  return slowToString.apply(this, arguments)\n\t\t}\n\n\t\tBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\n\t\tBuffer.prototype.equals = function equals (b) {\n\t\t  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t\t  if (this === b) return true\n\t\t  return Buffer.compare(this, b) === 0\n\t\t}\n\n\t\tBuffer.prototype.inspect = function inspect () {\n\t\t  var str = ''\n\t\t  var max = exports.INSPECT_MAX_BYTES\n\t\t  if (this.length > 0) {\n\t\t    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n\t\t    if (this.length > max) str += ' ... '\n\t\t  }\n\t\t  return '<Buffer ' + str + '>'\n\t\t}\n\n\t\tBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n\t\t  if (!Buffer.isBuffer(target)) {\n\t\t    throw new TypeError('Argument must be a Buffer')\n\t\t  }\n\n\t\t  if (start === undefined) {\n\t\t    start = 0\n\t\t  }\n\t\t  if (end === undefined) {\n\t\t    end = target ? target.length : 0\n\t\t  }\n\t\t  if (thisStart === undefined) {\n\t\t    thisStart = 0\n\t\t  }\n\t\t  if (thisEnd === undefined) {\n\t\t    thisEnd = this.length\n\t\t  }\n\n\t\t  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n\t\t    throw new RangeError('out of range index')\n\t\t  }\n\n\t\t  if (thisStart >= thisEnd && start >= end) {\n\t\t    return 0\n\t\t  }\n\t\t  if (thisStart >= thisEnd) {\n\t\t    return -1\n\t\t  }\n\t\t  if (start >= end) {\n\t\t    return 1\n\t\t  }\n\n\t\t  start >>>= 0\n\t\t  end >>>= 0\n\t\t  thisStart >>>= 0\n\t\t  thisEnd >>>= 0\n\n\t\t  if (this === target) return 0\n\n\t\t  var x = thisEnd - thisStart\n\t\t  var y = end - start\n\t\t  var len = Math.min(x, y)\n\n\t\t  var thisCopy = this.slice(thisStart, thisEnd)\n\t\t  var targetCopy = target.slice(start, end)\n\n\t\t  for (var i = 0; i < len; ++i) {\n\t\t    if (thisCopy[i] !== targetCopy[i]) {\n\t\t      x = thisCopy[i]\n\t\t      y = targetCopy[i]\n\t\t      break\n\t\t    }\n\t\t  }\n\n\t\t  if (x < y) return -1\n\t\t  if (y < x) return 1\n\t\t  return 0\n\t\t}\n\n\t\t// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n\t\t// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n\t\t//\n\t\t// Arguments:\n\t\t// - buffer - a Buffer to search\n\t\t// - val - a string, Buffer, or number\n\t\t// - byteOffset - an index into `buffer`; will be clamped to an int32\n\t\t// - encoding - an optional encoding, relevant is val is a string\n\t\t// - dir - true for indexOf, false for lastIndexOf\n\t\tfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n\t\t  // Empty buffer means no match\n\t\t  if (buffer.length === 0) return -1\n\n\t\t  // Normalize byteOffset\n\t\t  if (typeof byteOffset === 'string') {\n\t\t    encoding = byteOffset\n\t\t    byteOffset = 0\n\t\t  } else if (byteOffset > 0x7fffffff) {\n\t\t    byteOffset = 0x7fffffff\n\t\t  } else if (byteOffset < -0x80000000) {\n\t\t    byteOffset = -0x80000000\n\t\t  }\n\t\t  byteOffset = +byteOffset  // Coerce to Number.\n\t\t  if (numberIsNaN(byteOffset)) {\n\t\t    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n\t\t    byteOffset = dir ? 0 : (buffer.length - 1)\n\t\t  }\n\n\t\t  // Normalize byteOffset: negative offsets start from the end of the buffer\n\t\t  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n\t\t  if (byteOffset >= buffer.length) {\n\t\t    if (dir) return -1\n\t\t    else byteOffset = buffer.length - 1\n\t\t  } else if (byteOffset < 0) {\n\t\t    if (dir) byteOffset = 0\n\t\t    else return -1\n\t\t  }\n\n\t\t  // Normalize val\n\t\t  if (typeof val === 'string') {\n\t\t    val = Buffer.from(val, encoding)\n\t\t  }\n\n\t\t  // Finally, search either indexOf (if dir is true) or lastIndexOf\n\t\t  if (Buffer.isBuffer(val)) {\n\t\t    // Special case: looking for empty string/buffer always fails\n\t\t    if (val.length === 0) {\n\t\t      return -1\n\t\t    }\n\t\t    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n\t\t  } else if (typeof val === 'number') {\n\t\t    val = val & 0xFF // Search for a byte value [0-255]\n\t\t    if (typeof Uint8Array.prototype.indexOf === 'function') {\n\t\t      if (dir) {\n\t\t        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n\t\t      } else {\n\t\t        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n\t\t      }\n\t\t    }\n\t\t    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n\t\t  }\n\n\t\t  throw new TypeError('val must be string, number or Buffer')\n\t\t}\n\n\t\tfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n\t\t  var indexSize = 1\n\t\t  var arrLength = arr.length\n\t\t  var valLength = val.length\n\n\t\t  if (encoding !== undefined) {\n\t\t    encoding = String(encoding).toLowerCase()\n\t\t    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n\t\t        encoding === 'utf16le' || encoding === 'utf-16le') {\n\t\t      if (arr.length < 2 || val.length < 2) {\n\t\t        return -1\n\t\t      }\n\t\t      indexSize = 2\n\t\t      arrLength /= 2\n\t\t      valLength /= 2\n\t\t      byteOffset /= 2\n\t\t    }\n\t\t  }\n\n\t\t  function read (buf, i) {\n\t\t    if (indexSize === 1) {\n\t\t      return buf[i]\n\t\t    } else {\n\t\t      return buf.readUInt16BE(i * indexSize)\n\t\t    }\n\t\t  }\n\n\t\t  var i\n\t\t  if (dir) {\n\t\t    var foundIndex = -1\n\t\t    for (i = byteOffset; i < arrLength; i++) {\n\t\t      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n\t\t        if (foundIndex === -1) foundIndex = i\n\t\t        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n\t\t      } else {\n\t\t        if (foundIndex !== -1) i -= i - foundIndex\n\t\t        foundIndex = -1\n\t\t      }\n\t\t    }\n\t\t  } else {\n\t\t    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n\t\t    for (i = byteOffset; i >= 0; i--) {\n\t\t      var found = true\n\t\t      for (var j = 0; j < valLength; j++) {\n\t\t        if (read(arr, i + j) !== read(val, j)) {\n\t\t          found = false\n\t\t          break\n\t\t        }\n\t\t      }\n\t\t      if (found) return i\n\t\t    }\n\t\t  }\n\n\t\t  return -1\n\t\t}\n\n\t\tBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n\t\t  return this.indexOf(val, byteOffset, encoding) !== -1\n\t\t}\n\n\t\tBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n\t\t  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n\t\t}\n\n\t\tBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n\t\t  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n\t\t}\n\n\t\tfunction hexWrite (buf, string, offset, length) {\n\t\t  offset = Number(offset) || 0\n\t\t  var remaining = buf.length - offset\n\t\t  if (!length) {\n\t\t    length = remaining\n\t\t  } else {\n\t\t    length = Number(length)\n\t\t    if (length > remaining) {\n\t\t      length = remaining\n\t\t    }\n\t\t  }\n\n\t\t  var strLen = string.length\n\n\t\t  if (length > strLen / 2) {\n\t\t    length = strLen / 2\n\t\t  }\n\t\t  for (var i = 0; i < length; ++i) {\n\t\t    var parsed = parseInt(string.substr(i * 2, 2), 16)\n\t\t    if (numberIsNaN(parsed)) return i\n\t\t    buf[offset + i] = parsed\n\t\t  }\n\t\t  return i\n\t\t}\n\n\t\tfunction utf8Write (buf, string, offset, length) {\n\t\t  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n\t\t}\n\n\t\tfunction asciiWrite (buf, string, offset, length) {\n\t\t  return blitBuffer(asciiToBytes(string), buf, offset, length)\n\t\t}\n\n\t\tfunction latin1Write (buf, string, offset, length) {\n\t\t  return asciiWrite(buf, string, offset, length)\n\t\t}\n\n\t\tfunction base64Write (buf, string, offset, length) {\n\t\t  return blitBuffer(base64ToBytes(string), buf, offset, length)\n\t\t}\n\n\t\tfunction ucs2Write (buf, string, offset, length) {\n\t\t  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n\t\t}\n\n\t\tBuffer.prototype.write = function write (string, offset, length, encoding) {\n\t\t  // Buffer#write(string)\n\t\t  if (offset === undefined) {\n\t\t    encoding = 'utf8'\n\t\t    length = this.length\n\t\t    offset = 0\n\t\t  // Buffer#write(string, encoding)\n\t\t  } else if (length === undefined && typeof offset === 'string') {\n\t\t    encoding = offset\n\t\t    length = this.length\n\t\t    offset = 0\n\t\t  // Buffer#write(string, offset[, length][, encoding])\n\t\t  } else if (isFinite(offset)) {\n\t\t    offset = offset >>> 0\n\t\t    if (isFinite(length)) {\n\t\t      length = length >>> 0\n\t\t      if (encoding === undefined) encoding = 'utf8'\n\t\t    } else {\n\t\t      encoding = length\n\t\t      length = undefined\n\t\t    }\n\t\t  } else {\n\t\t    throw new Error(\n\t\t      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n\t\t    )\n\t\t  }\n\n\t\t  var remaining = this.length - offset\n\t\t  if (length === undefined || length > remaining) length = remaining\n\n\t\t  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n\t\t    throw new RangeError('Attempt to write outside buffer bounds')\n\t\t  }\n\n\t\t  if (!encoding) encoding = 'utf8'\n\n\t\t  var loweredCase = false\n\t\t  for (;;) {\n\t\t    switch (encoding) {\n\t\t      case 'hex':\n\t\t        return hexWrite(this, string, offset, length)\n\n\t\t      case 'utf8':\n\t\t      case 'utf-8':\n\t\t        return utf8Write(this, string, offset, length)\n\n\t\t      case 'ascii':\n\t\t        return asciiWrite(this, string, offset, length)\n\n\t\t      case 'latin1':\n\t\t      case 'binary':\n\t\t        return latin1Write(this, string, offset, length)\n\n\t\t      case 'base64':\n\t\t        // Warning: maxLength not taken into account in base64Write\n\t\t        return base64Write(this, string, offset, length)\n\n\t\t      case 'ucs2':\n\t\t      case 'ucs-2':\n\t\t      case 'utf16le':\n\t\t      case 'utf-16le':\n\t\t        return ucs2Write(this, string, offset, length)\n\n\t\t      default:\n\t\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t\t        encoding = ('' + encoding).toLowerCase()\n\t\t        loweredCase = true\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tBuffer.prototype.toJSON = function toJSON () {\n\t\t  return {\n\t\t    type: 'Buffer',\n\t\t    data: Array.prototype.slice.call(this._arr || this, 0)\n\t\t  }\n\t\t}\n\n\t\tfunction base64Slice (buf, start, end) {\n\t\t  if (start === 0 && end === buf.length) {\n\t\t    return base64.fromByteArray(buf)\n\t\t  } else {\n\t\t    return base64.fromByteArray(buf.slice(start, end))\n\t\t  }\n\t\t}\n\n\t\tfunction utf8Slice (buf, start, end) {\n\t\t  end = Math.min(buf.length, end)\n\t\t  var res = []\n\n\t\t  var i = start\n\t\t  while (i < end) {\n\t\t    var firstByte = buf[i]\n\t\t    var codePoint = null\n\t\t    var bytesPerSequence = (firstByte > 0xEF) ? 4\n\t\t      : (firstByte > 0xDF) ? 3\n\t\t      : (firstByte > 0xBF) ? 2\n\t\t      : 1\n\n\t\t    if (i + bytesPerSequence <= end) {\n\t\t      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n\t\t      switch (bytesPerSequence) {\n\t\t        case 1:\n\t\t          if (firstByte < 0x80) {\n\t\t            codePoint = firstByte\n\t\t          }\n\t\t          break\n\t\t        case 2:\n\t\t          secondByte = buf[i + 1]\n\t\t          if ((secondByte & 0xC0) === 0x80) {\n\t\t            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n\t\t            if (tempCodePoint > 0x7F) {\n\t\t              codePoint = tempCodePoint\n\t\t            }\n\t\t          }\n\t\t          break\n\t\t        case 3:\n\t\t          secondByte = buf[i + 1]\n\t\t          thirdByte = buf[i + 2]\n\t\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n\t\t            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n\t\t            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n\t\t              codePoint = tempCodePoint\n\t\t            }\n\t\t          }\n\t\t          break\n\t\t        case 4:\n\t\t          secondByte = buf[i + 1]\n\t\t          thirdByte = buf[i + 2]\n\t\t          fourthByte = buf[i + 3]\n\t\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n\t\t            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n\t\t            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n\t\t              codePoint = tempCodePoint\n\t\t            }\n\t\t          }\n\t\t      }\n\t\t    }\n\n\t\t    if (codePoint === null) {\n\t\t      // we did not generate a valid codePoint so insert a\n\t\t      // replacement char (U+FFFD) and advance only 1 byte\n\t\t      codePoint = 0xFFFD\n\t\t      bytesPerSequence = 1\n\t\t    } else if (codePoint > 0xFFFF) {\n\t\t      // encode to utf16 (surrogate pair dance)\n\t\t      codePoint -= 0x10000\n\t\t      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n\t\t      codePoint = 0xDC00 | codePoint & 0x3FF\n\t\t    }\n\n\t\t    res.push(codePoint)\n\t\t    i += bytesPerSequence\n\t\t  }\n\n\t\t  return decodeCodePointsArray(res)\n\t\t}\n\n\t\t// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n\t\t// the lowest limit is Chrome, with 0x10000 args.\n\t\t// We go 1 magnitude less, for safety\n\t\tvar MAX_ARGUMENTS_LENGTH = 0x1000\n\n\t\tfunction decodeCodePointsArray (codePoints) {\n\t\t  var len = codePoints.length\n\t\t  if (len <= MAX_ARGUMENTS_LENGTH) {\n\t\t    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n\t\t  }\n\n\t\t  // Decode in chunks to avoid \"call stack size exceeded\".\n\t\t  var res = ''\n\t\t  var i = 0\n\t\t  while (i < len) {\n\t\t    res += String.fromCharCode.apply(\n\t\t      String,\n\t\t      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n\t\t    )\n\t\t  }\n\t\t  return res\n\t\t}\n\n\t\tfunction asciiSlice (buf, start, end) {\n\t\t  var ret = ''\n\t\t  end = Math.min(buf.length, end)\n\n\t\t  for (var i = start; i < end; ++i) {\n\t\t    ret += String.fromCharCode(buf[i] & 0x7F)\n\t\t  }\n\t\t  return ret\n\t\t}\n\n\t\tfunction latin1Slice (buf, start, end) {\n\t\t  var ret = ''\n\t\t  end = Math.min(buf.length, end)\n\n\t\t  for (var i = start; i < end; ++i) {\n\t\t    ret += String.fromCharCode(buf[i])\n\t\t  }\n\t\t  return ret\n\t\t}\n\n\t\tfunction hexSlice (buf, start, end) {\n\t\t  var len = buf.length\n\n\t\t  if (!start || start < 0) start = 0\n\t\t  if (!end || end < 0 || end > len) end = len\n\n\t\t  var out = ''\n\t\t  for (var i = start; i < end; ++i) {\n\t\t    out += toHex(buf[i])\n\t\t  }\n\t\t  return out\n\t\t}\n\n\t\tfunction utf16leSlice (buf, start, end) {\n\t\t  var bytes = buf.slice(start, end)\n\t\t  var res = ''\n\t\t  for (var i = 0; i < bytes.length; i += 2) {\n\t\t    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n\t\t  }\n\t\t  return res\n\t\t}\n\n\t\tBuffer.prototype.slice = function slice (start, end) {\n\t\t  var len = this.length\n\t\t  start = ~~start\n\t\t  end = end === undefined ? len : ~~end\n\n\t\t  if (start < 0) {\n\t\t    start += len\n\t\t    if (start < 0) start = 0\n\t\t  } else if (start > len) {\n\t\t    start = len\n\t\t  }\n\n\t\t  if (end < 0) {\n\t\t    end += len\n\t\t    if (end < 0) end = 0\n\t\t  } else if (end > len) {\n\t\t    end = len\n\t\t  }\n\n\t\t  if (end < start) end = start\n\n\t\t  var newBuf = this.subarray(start, end)\n\t\t  // Return an augmented `Uint8Array` instance\n\t\t  newBuf.__proto__ = Buffer.prototype\n\t\t  return newBuf\n\t\t}\n\n\t\t/*\n\t\t * Need to make sure that buffer isn't trying to write out of bounds.\n\t\t */\n\t\tfunction checkOffset (offset, ext, length) {\n\t\t  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n\t\t  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n\t\t}\n\n\t\tBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  byteLength = byteLength >>> 0\n\t\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n\t\t  var val = this[offset]\n\t\t  var mul = 1\n\t\t  var i = 0\n\t\t  while (++i < byteLength && (mul *= 0x100)) {\n\t\t    val += this[offset + i] * mul\n\t\t  }\n\n\t\t  return val\n\t\t}\n\n\t\tBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  byteLength = byteLength >>> 0\n\t\t  if (!noAssert) {\n\t\t    checkOffset(offset, byteLength, this.length)\n\t\t  }\n\n\t\t  var val = this[offset + --byteLength]\n\t\t  var mul = 1\n\t\t  while (byteLength > 0 && (mul *= 0x100)) {\n\t\t    val += this[offset + --byteLength] * mul\n\t\t  }\n\n\t\t  return val\n\t\t}\n\n\t\tBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t\t  return this[offset]\n\t\t}\n\n\t\tBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t\t  return this[offset] | (this[offset + 1] << 8)\n\t\t}\n\n\t\tBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t\t  return (this[offset] << 8) | this[offset + 1]\n\t\t}\n\n\t\tBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\n\t\t  return ((this[offset]) |\n\t\t      (this[offset + 1] << 8) |\n\t\t      (this[offset + 2] << 16)) +\n\t\t      (this[offset + 3] * 0x1000000)\n\t\t}\n\n\t\tBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\n\t\t  return (this[offset] * 0x1000000) +\n\t\t    ((this[offset + 1] << 16) |\n\t\t    (this[offset + 2] << 8) |\n\t\t    this[offset + 3])\n\t\t}\n\n\t\tBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  byteLength = byteLength >>> 0\n\t\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n\t\t  var val = this[offset]\n\t\t  var mul = 1\n\t\t  var i = 0\n\t\t  while (++i < byteLength && (mul *= 0x100)) {\n\t\t    val += this[offset + i] * mul\n\t\t  }\n\t\t  mul *= 0x80\n\n\t\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n\t\t  return val\n\t\t}\n\n\t\tBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  byteLength = byteLength >>> 0\n\t\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n\t\t  var i = byteLength\n\t\t  var mul = 1\n\t\t  var val = this[offset + --i]\n\t\t  while (i > 0 && (mul *= 0x100)) {\n\t\t    val += this[offset + --i] * mul\n\t\t  }\n\t\t  mul *= 0x80\n\n\t\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n\t\t  return val\n\t\t}\n\n\t\tBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t\t  if (!(this[offset] & 0x80)) return (this[offset])\n\t\t  return ((0xff - this[offset] + 1) * -1)\n\t\t}\n\n\t\tBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t\t  var val = this[offset] | (this[offset + 1] << 8)\n\t\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t\t}\n\n\t\tBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t\t  var val = this[offset + 1] | (this[offset] << 8)\n\t\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t\t}\n\n\t\tBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\n\t\t  return (this[offset]) |\n\t\t    (this[offset + 1] << 8) |\n\t\t    (this[offset + 2] << 16) |\n\t\t    (this[offset + 3] << 24)\n\t\t}\n\n\t\tBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\n\t\t  return (this[offset] << 24) |\n\t\t    (this[offset + 1] << 16) |\n\t\t    (this[offset + 2] << 8) |\n\t\t    (this[offset + 3])\n\t\t}\n\n\t\tBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\t  return ieee754.read(this, offset, true, 23, 4)\n\t\t}\n\n\t\tBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\t  return ieee754.read(this, offset, false, 23, 4)\n\t\t}\n\n\t\tBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t\t  return ieee754.read(this, offset, true, 52, 8)\n\t\t}\n\n\t\tBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t\t  return ieee754.read(this, offset, false, 52, 8)\n\t\t}\n\n\t\tfunction checkInt (buf, value, offset, ext, max, min) {\n\t\t  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n\t\t  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n\t\t  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n\t\t}\n\n\t\tBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  byteLength = byteLength >>> 0\n\t\t  if (!noAssert) {\n\t\t    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n\t\t    checkInt(this, value, offset, byteLength, maxBytes, 0)\n\t\t  }\n\n\t\t  var mul = 1\n\t\t  var i = 0\n\t\t  this[offset] = value & 0xFF\n\t\t  while (++i < byteLength && (mul *= 0x100)) {\n\t\t    this[offset + i] = (value / mul) & 0xFF\n\t\t  }\n\n\t\t  return offset + byteLength\n\t\t}\n\n\t\tBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  byteLength = byteLength >>> 0\n\t\t  if (!noAssert) {\n\t\t    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n\t\t    checkInt(this, value, offset, byteLength, maxBytes, 0)\n\t\t  }\n\n\t\t  var i = byteLength - 1\n\t\t  var mul = 1\n\t\t  this[offset + i] = value & 0xFF\n\t\t  while (--i >= 0 && (mul *= 0x100)) {\n\t\t    this[offset + i] = (value / mul) & 0xFF\n\t\t  }\n\n\t\t  return offset + byteLength\n\t\t}\n\n\t\tBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n\t\t  this[offset] = (value & 0xff)\n\t\t  return offset + 1\n\t\t}\n\n\t\tBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t\t  this[offset] = (value & 0xff)\n\t\t  this[offset + 1] = (value >>> 8)\n\t\t  return offset + 2\n\t\t}\n\n\t\tBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t\t  this[offset] = (value >>> 8)\n\t\t  this[offset + 1] = (value & 0xff)\n\t\t  return offset + 2\n\t\t}\n\n\t\tBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t\t  this[offset + 3] = (value >>> 24)\n\t\t  this[offset + 2] = (value >>> 16)\n\t\t  this[offset + 1] = (value >>> 8)\n\t\t  this[offset] = (value & 0xff)\n\t\t  return offset + 4\n\t\t}\n\n\t\tBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t\t  this[offset] = (value >>> 24)\n\t\t  this[offset + 1] = (value >>> 16)\n\t\t  this[offset + 2] = (value >>> 8)\n\t\t  this[offset + 3] = (value & 0xff)\n\t\t  return offset + 4\n\t\t}\n\n\t\tBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) {\n\t\t    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n\t\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t\t  }\n\n\t\t  var i = 0\n\t\t  var mul = 1\n\t\t  var sub = 0\n\t\t  this[offset] = value & 0xFF\n\t\t  while (++i < byteLength && (mul *= 0x100)) {\n\t\t    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n\t\t      sub = 1\n\t\t    }\n\t\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t\t  }\n\n\t\t  return offset + byteLength\n\t\t}\n\n\t\tBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) {\n\t\t    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n\t\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t\t  }\n\n\t\t  var i = byteLength - 1\n\t\t  var mul = 1\n\t\t  var sub = 0\n\t\t  this[offset + i] = value & 0xFF\n\t\t  while (--i >= 0 && (mul *= 0x100)) {\n\t\t    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n\t\t      sub = 1\n\t\t    }\n\t\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t\t  }\n\n\t\t  return offset + byteLength\n\t\t}\n\n\t\tBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n\t\t  if (value < 0) value = 0xff + value + 1\n\t\t  this[offset] = (value & 0xff)\n\t\t  return offset + 1\n\t\t}\n\n\t\tBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t\t  this[offset] = (value & 0xff)\n\t\t  this[offset + 1] = (value >>> 8)\n\t\t  return offset + 2\n\t\t}\n\n\t\tBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t\t  this[offset] = (value >>> 8)\n\t\t  this[offset + 1] = (value & 0xff)\n\t\t  return offset + 2\n\t\t}\n\n\t\tBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t\t  this[offset] = (value & 0xff)\n\t\t  this[offset + 1] = (value >>> 8)\n\t\t  this[offset + 2] = (value >>> 16)\n\t\t  this[offset + 3] = (value >>> 24)\n\t\t  return offset + 4\n\t\t}\n\n\t\tBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t\t  if (value < 0) value = 0xffffffff + value + 1\n\t\t  this[offset] = (value >>> 24)\n\t\t  this[offset + 1] = (value >>> 16)\n\t\t  this[offset + 2] = (value >>> 8)\n\t\t  this[offset + 3] = (value & 0xff)\n\t\t  return offset + 4\n\t\t}\n\n\t\tfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n\t\t  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n\t\t  if (offset < 0) throw new RangeError('Index out of range')\n\t\t}\n\n\t\tfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) {\n\t\t    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n\t\t  }\n\t\t  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n\t\t  return offset + 4\n\t\t}\n\n\t\tBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n\t\t  return writeFloat(this, value, offset, true, noAssert)\n\t\t}\n\n\t\tBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n\t\t  return writeFloat(this, value, offset, false, noAssert)\n\t\t}\n\n\t\tfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) {\n\t\t    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n\t\t  }\n\t\t  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n\t\t  return offset + 8\n\t\t}\n\n\t\tBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n\t\t  return writeDouble(this, value, offset, true, noAssert)\n\t\t}\n\n\t\tBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n\t\t  return writeDouble(this, value, offset, false, noAssert)\n\t\t}\n\n\t\t// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\t\tBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n\t\t  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n\t\t  if (!start) start = 0\n\t\t  if (!end && end !== 0) end = this.length\n\t\t  if (targetStart >= target.length) targetStart = target.length\n\t\t  if (!targetStart) targetStart = 0\n\t\t  if (end > 0 && end < start) end = start\n\n\t\t  // Copy 0 bytes; we're done\n\t\t  if (end === start) return 0\n\t\t  if (target.length === 0 || this.length === 0) return 0\n\n\t\t  // Fatal error conditions\n\t\t  if (targetStart < 0) {\n\t\t    throw new RangeError('targetStart out of bounds')\n\t\t  }\n\t\t  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n\t\t  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n\t\t  // Are we oob?\n\t\t  if (end > this.length) end = this.length\n\t\t  if (target.length - targetStart < end - start) {\n\t\t    end = target.length - targetStart + start\n\t\t  }\n\n\t\t  var len = end - start\n\n\t\t  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n\t\t    // Use built-in when available, missing from IE11\n\t\t    this.copyWithin(targetStart, start, end)\n\t\t  } else if (this === target && start < targetStart && targetStart < end) {\n\t\t    // descending copy from end\n\t\t    for (var i = len - 1; i >= 0; --i) {\n\t\t      target[i + targetStart] = this[i + start]\n\t\t    }\n\t\t  } else {\n\t\t    Uint8Array.prototype.set.call(\n\t\t      target,\n\t\t      this.subarray(start, end),\n\t\t      targetStart\n\t\t    )\n\t\t  }\n\n\t\t  return len\n\t\t}\n\n\t\t// Usage:\n\t\t//    buffer.fill(number[, offset[, end]])\n\t\t//    buffer.fill(buffer[, offset[, end]])\n\t\t//    buffer.fill(string[, offset[, end]][, encoding])\n\t\tBuffer.prototype.fill = function fill (val, start, end, encoding) {\n\t\t  // Handle string cases:\n\t\t  if (typeof val === 'string') {\n\t\t    if (typeof start === 'string') {\n\t\t      encoding = start\n\t\t      start = 0\n\t\t      end = this.length\n\t\t    } else if (typeof end === 'string') {\n\t\t      encoding = end\n\t\t      end = this.length\n\t\t    }\n\t\t    if (encoding !== undefined && typeof encoding !== 'string') {\n\t\t      throw new TypeError('encoding must be a string')\n\t\t    }\n\t\t    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n\t\t      throw new TypeError('Unknown encoding: ' + encoding)\n\t\t    }\n\t\t    if (val.length === 1) {\n\t\t      var code = val.charCodeAt(0)\n\t\t      if ((encoding === 'utf8' && code < 128) ||\n\t\t          encoding === 'latin1') {\n\t\t        // Fast path: If `val` fits into a single byte, use that numeric value.\n\t\t        val = code\n\t\t      }\n\t\t    }\n\t\t  } else if (typeof val === 'number') {\n\t\t    val = val & 255\n\t\t  }\n\n\t\t  // Invalid ranges are not set to a default, so can range check early.\n\t\t  if (start < 0 || this.length < start || this.length < end) {\n\t\t    throw new RangeError('Out of range index')\n\t\t  }\n\n\t\t  if (end <= start) {\n\t\t    return this\n\t\t  }\n\n\t\t  start = start >>> 0\n\t\t  end = end === undefined ? this.length : end >>> 0\n\n\t\t  if (!val) val = 0\n\n\t\t  var i\n\t\t  if (typeof val === 'number') {\n\t\t    for (i = start; i < end; ++i) {\n\t\t      this[i] = val\n\t\t    }\n\t\t  } else {\n\t\t    var bytes = Buffer.isBuffer(val)\n\t\t      ? val\n\t\t      : new Buffer(val, encoding)\n\t\t    var len = bytes.length\n\t\t    if (len === 0) {\n\t\t      throw new TypeError('The value \"' + val +\n\t\t        '\" is invalid for argument \"value\"')\n\t\t    }\n\t\t    for (i = 0; i < end - start; ++i) {\n\t\t      this[i + start] = bytes[i % len]\n\t\t    }\n\t\t  }\n\n\t\t  return this\n\t\t}\n\n\t\t// HELPER FUNCTIONS\n\t\t// ================\n\n\t\tvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\n\t\tfunction base64clean (str) {\n\t\t  // Node takes equal signs as end of the Base64 encoding\n\t\t  str = str.split('=')[0]\n\t\t  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n\t\t  str = str.trim().replace(INVALID_BASE64_RE, '')\n\t\t  // Node converts strings with length < 2 to ''\n\t\t  if (str.length < 2) return ''\n\t\t  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\t\t  while (str.length % 4 !== 0) {\n\t\t    str = str + '='\n\t\t  }\n\t\t  return str\n\t\t}\n\n\t\tfunction toHex (n) {\n\t\t  if (n < 16) return '0' + n.toString(16)\n\t\t  return n.toString(16)\n\t\t}\n\n\t\tfunction utf8ToBytes (string, units) {\n\t\t  units = units || Infinity\n\t\t  var codePoint\n\t\t  var length = string.length\n\t\t  var leadSurrogate = null\n\t\t  var bytes = []\n\n\t\t  for (var i = 0; i < length; ++i) {\n\t\t    codePoint = string.charCodeAt(i)\n\n\t\t    // is surrogate component\n\t\t    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n\t\t      // last char was a lead\n\t\t      if (!leadSurrogate) {\n\t\t        // no lead yet\n\t\t        if (codePoint > 0xDBFF) {\n\t\t          // unexpected trail\n\t\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t\t          continue\n\t\t        } else if (i + 1 === length) {\n\t\t          // unpaired lead\n\t\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t\t          continue\n\t\t        }\n\n\t\t        // valid lead\n\t\t        leadSurrogate = codePoint\n\n\t\t        continue\n\t\t      }\n\n\t\t      // 2 leads in a row\n\t\t      if (codePoint < 0xDC00) {\n\t\t        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t\t        leadSurrogate = codePoint\n\t\t        continue\n\t\t      }\n\n\t\t      // valid surrogate pair\n\t\t      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n\t\t    } else if (leadSurrogate) {\n\t\t      // valid bmp char, but last char was a lead\n\t\t      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t\t    }\n\n\t\t    leadSurrogate = null\n\n\t\t    // encode utf8\n\t\t    if (codePoint < 0x80) {\n\t\t      if ((units -= 1) < 0) break\n\t\t      bytes.push(codePoint)\n\t\t    } else if (codePoint < 0x800) {\n\t\t      if ((units -= 2) < 0) break\n\t\t      bytes.push(\n\t\t        codePoint >> 0x6 | 0xC0,\n\t\t        codePoint & 0x3F | 0x80\n\t\t      )\n\t\t    } else if (codePoint < 0x10000) {\n\t\t      if ((units -= 3) < 0) break\n\t\t      bytes.push(\n\t\t        codePoint >> 0xC | 0xE0,\n\t\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t\t        codePoint & 0x3F | 0x80\n\t\t      )\n\t\t    } else if (codePoint < 0x110000) {\n\t\t      if ((units -= 4) < 0) break\n\t\t      bytes.push(\n\t\t        codePoint >> 0x12 | 0xF0,\n\t\t        codePoint >> 0xC & 0x3F | 0x80,\n\t\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t\t        codePoint & 0x3F | 0x80\n\t\t      )\n\t\t    } else {\n\t\t      throw new Error('Invalid code point')\n\t\t    }\n\t\t  }\n\n\t\t  return bytes\n\t\t}\n\n\t\tfunction asciiToBytes (str) {\n\t\t  var byteArray = []\n\t\t  for (var i = 0; i < str.length; ++i) {\n\t\t    // Node's code seems to be doing this and not & 0x7F..\n\t\t    byteArray.push(str.charCodeAt(i) & 0xFF)\n\t\t  }\n\t\t  return byteArray\n\t\t}\n\n\t\tfunction utf16leToBytes (str, units) {\n\t\t  var c, hi, lo\n\t\t  var byteArray = []\n\t\t  for (var i = 0; i < str.length; ++i) {\n\t\t    if ((units -= 2) < 0) break\n\n\t\t    c = str.charCodeAt(i)\n\t\t    hi = c >> 8\n\t\t    lo = c % 256\n\t\t    byteArray.push(lo)\n\t\t    byteArray.push(hi)\n\t\t  }\n\n\t\t  return byteArray\n\t\t}\n\n\t\tfunction base64ToBytes (str) {\n\t\t  return base64.toByteArray(base64clean(str))\n\t\t}\n\n\t\tfunction blitBuffer (src, dst, offset, length) {\n\t\t  for (var i = 0; i < length; ++i) {\n\t\t    if ((i + offset >= dst.length) || (i >= src.length)) break\n\t\t    dst[i + offset] = src[i]\n\t\t  }\n\t\t  return i\n\t\t}\n\n\t\t// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check\n\t\t// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166\n\t\tfunction isArrayBuffer (obj) {\n\t\t  return obj instanceof ArrayBuffer ||\n\t\t    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\n\t\t      typeof obj.byteLength === 'number')\n\t\t}\n\n\t\tfunction numberIsNaN (obj) {\n\t\t  return obj !== obj // eslint-disable-line no-self-compare\n\t\t}\n} (buffer));\n\treturn buffer;\n}\n\nexport { requireBuffer as __require };","start":1670465470403,"end":1670465470422,"order":"normal"},{"name":"polyfill-node","result":"/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as buffer } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/buffer@5.1.0/node_modules/buffer/index.js?commonjs-exports\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/base64-js@1.5.1/node_modules/base64-js/index.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/ieee754@1.2.1/node_modules/ieee754/index.js?commonjs-proxy\";\n\nvar hasRequiredBuffer;\n\nfunction requireBuffer () {\n\tif (hasRequiredBuffer) return buffer;\n\thasRequiredBuffer = 1;\n\t(function (exports) {\n\t\t/* eslint-disable no-proto */\n\n\t\t'use strict'\n\n\t\tvar base64 = require$$0\n\t\tvar ieee754 = require$$1\n\n\t\texports.Buffer = Buffer\n\t\texports.SlowBuffer = SlowBuffer\n\t\texports.INSPECT_MAX_BYTES = 50\n\n\t\tvar K_MAX_LENGTH = 0x7fffffff\n\t\texports.kMaxLength = K_MAX_LENGTH\n\n\t\t/**\n\t\t * If `Buffer.TYPED_ARRAY_SUPPORT`:\n\t\t *   === true    Use Uint8Array implementation (fastest)\n\t\t *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n\t\t *               implementation (most compatible, even IE6)\n\t\t *\n\t\t * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n\t\t * Opera 11.6+, iOS 4.2+.\n\t\t *\n\t\t * We report that the browser does not support typed arrays if the are not subclassable\n\t\t * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n\t\t * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n\t\t * for __proto__ and has a buggy typed array implementation.\n\t\t */\n\t\tBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\n\t\tif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n\t\t    typeof console.error === 'function') {\n\t\t  console.error(\n\t\t    'This browser lacks typed array (Uint8Array) support which is required by ' +\n\t\t    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n\t\t  )\n\t\t}\n\n\t\tfunction typedArraySupport () {\n\t\t  // Can typed array instances can be augmented?\n\t\t  try {\n\t\t    var arr = new Uint8Array(1)\n\t\t    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n\t\t    return arr.foo() === 42\n\t\t  } catch (e) {\n\t\t    return false\n\t\t  }\n\t\t}\n\n\t\tObject.defineProperty(Buffer.prototype, 'parent', {\n\t\t  get: function () {\n\t\t    if (!(this instanceof Buffer)) {\n\t\t      return undefined\n\t\t    }\n\t\t    return this.buffer\n\t\t  }\n\t\t})\n\n\t\tObject.defineProperty(Buffer.prototype, 'offset', {\n\t\t  get: function () {\n\t\t    if (!(this instanceof Buffer)) {\n\t\t      return undefined\n\t\t    }\n\t\t    return this.byteOffset\n\t\t  }\n\t\t})\n\n\t\tfunction createBuffer (length) {\n\t\t  if (length > K_MAX_LENGTH) {\n\t\t    throw new RangeError('Invalid typed array length')\n\t\t  }\n\t\t  // Return an augmented `Uint8Array` instance\n\t\t  var buf = new Uint8Array(length)\n\t\t  buf.__proto__ = Buffer.prototype\n\t\t  return buf\n\t\t}\n\n\t\t/**\n\t\t * The Buffer constructor returns instances of `Uint8Array` that have their\n\t\t * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n\t\t * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n\t\t * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n\t\t * returns a single octet.\n\t\t *\n\t\t * The `Uint8Array` prototype remains unmodified.\n\t\t */\n\n\t\tfunction Buffer (arg, encodingOrOffset, length) {\n\t\t  // Common case.\n\t\t  if (typeof arg === 'number') {\n\t\t    if (typeof encodingOrOffset === 'string') {\n\t\t      throw new Error(\n\t\t        'If encoding is specified then the first argument must be a string'\n\t\t      )\n\t\t    }\n\t\t    return allocUnsafe(arg)\n\t\t  }\n\t\t  return from(arg, encodingOrOffset, length)\n\t\t}\n\n\t\t// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n\t\tif (typeof Symbol !== 'undefined' && Symbol.species &&\n\t\t    Buffer[Symbol.species] === Buffer) {\n\t\t  Object.defineProperty(Buffer, Symbol.species, {\n\t\t    value: null,\n\t\t    configurable: true,\n\t\t    enumerable: false,\n\t\t    writable: false\n\t\t  })\n\t\t}\n\n\t\tBuffer.poolSize = 8192 // not used by this implementation\n\n\t\tfunction from (value, encodingOrOffset, length) {\n\t\t  if (typeof value === 'number') {\n\t\t    throw new TypeError('\"value\" argument must not be a number')\n\t\t  }\n\n\t\t  if (isArrayBuffer(value) || (value && isArrayBuffer(value.buffer))) {\n\t\t    return fromArrayBuffer(value, encodingOrOffset, length)\n\t\t  }\n\n\t\t  if (typeof value === 'string') {\n\t\t    return fromString(value, encodingOrOffset)\n\t\t  }\n\n\t\t  return fromObject(value)\n\t\t}\n\n\t\t/**\n\t\t * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n\t\t * if value is a number.\n\t\t * Buffer.from(str[, encoding])\n\t\t * Buffer.from(array)\n\t\t * Buffer.from(buffer)\n\t\t * Buffer.from(arrayBuffer[, byteOffset[, length]])\n\t\t **/\n\t\tBuffer.from = function (value, encodingOrOffset, length) {\n\t\t  return from(value, encodingOrOffset, length)\n\t\t}\n\n\t\t// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n\t\t// https://github.com/feross/buffer/pull/148\n\t\tBuffer.prototype.__proto__ = Uint8Array.prototype\n\t\tBuffer.__proto__ = Uint8Array\n\n\t\tfunction assertSize (size) {\n\t\t  if (typeof size !== 'number') {\n\t\t    throw new TypeError('\"size\" argument must be of type number')\n\t\t  } else if (size < 0) {\n\t\t    throw new RangeError('\"size\" argument must not be negative')\n\t\t  }\n\t\t}\n\n\t\tfunction alloc (size, fill, encoding) {\n\t\t  assertSize(size)\n\t\t  if (size <= 0) {\n\t\t    return createBuffer(size)\n\t\t  }\n\t\t  if (fill !== undefined) {\n\t\t    // Only pay attention to encoding if it's a string. This\n\t\t    // prevents accidentally sending in a number that would\n\t\t    // be interpretted as a start offset.\n\t\t    return typeof encoding === 'string'\n\t\t      ? createBuffer(size).fill(fill, encoding)\n\t\t      : createBuffer(size).fill(fill)\n\t\t  }\n\t\t  return createBuffer(size)\n\t\t}\n\n\t\t/**\n\t\t * Creates a new filled Buffer instance.\n\t\t * alloc(size[, fill[, encoding]])\n\t\t **/\n\t\tBuffer.alloc = function (size, fill, encoding) {\n\t\t  return alloc(size, fill, encoding)\n\t\t}\n\n\t\tfunction allocUnsafe (size) {\n\t\t  assertSize(size)\n\t\t  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n\t\t}\n\n\t\t/**\n\t\t * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n\t\t * */\n\t\tBuffer.allocUnsafe = function (size) {\n\t\t  return allocUnsafe(size)\n\t\t}\n\t\t/**\n\t\t * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n\t\t */\n\t\tBuffer.allocUnsafeSlow = function (size) {\n\t\t  return allocUnsafe(size)\n\t\t}\n\n\t\tfunction fromString (string, encoding) {\n\t\t  if (typeof encoding !== 'string' || encoding === '') {\n\t\t    encoding = 'utf8'\n\t\t  }\n\n\t\t  if (!Buffer.isEncoding(encoding)) {\n\t\t    throw new TypeError('Unknown encoding: ' + encoding)\n\t\t  }\n\n\t\t  var length = byteLength(string, encoding) | 0\n\t\t  var buf = createBuffer(length)\n\n\t\t  var actual = buf.write(string, encoding)\n\n\t\t  if (actual !== length) {\n\t\t    // Writing a hex string, for example, that contains invalid characters will\n\t\t    // cause everything after the first invalid character to be ignored. (e.g.\n\t\t    // 'abxxcd' will be treated as 'ab')\n\t\t    buf = buf.slice(0, actual)\n\t\t  }\n\n\t\t  return buf\n\t\t}\n\n\t\tfunction fromArrayLike (array) {\n\t\t  var length = array.length < 0 ? 0 : checked(array.length) | 0\n\t\t  var buf = createBuffer(length)\n\t\t  for (var i = 0; i < length; i += 1) {\n\t\t    buf[i] = array[i] & 255\n\t\t  }\n\t\t  return buf\n\t\t}\n\n\t\tfunction fromArrayBuffer (array, byteOffset, length) {\n\t\t  if (byteOffset < 0 || array.byteLength < byteOffset) {\n\t\t    throw new RangeError('\"offset\" is outside of buffer bounds')\n\t\t  }\n\n\t\t  if (array.byteLength < byteOffset + (length || 0)) {\n\t\t    throw new RangeError('\"length\" is outside of buffer bounds')\n\t\t  }\n\n\t\t  var buf\n\t\t  if (byteOffset === undefined && length === undefined) {\n\t\t    buf = new Uint8Array(array)\n\t\t  } else if (length === undefined) {\n\t\t    buf = new Uint8Array(array, byteOffset)\n\t\t  } else {\n\t\t    buf = new Uint8Array(array, byteOffset, length)\n\t\t  }\n\n\t\t  // Return an augmented `Uint8Array` instance\n\t\t  buf.__proto__ = Buffer.prototype\n\t\t  return buf\n\t\t}\n\n\t\tfunction fromObject (obj) {\n\t\t  if (Buffer.isBuffer(obj)) {\n\t\t    var len = checked(obj.length) | 0\n\t\t    var buf = createBuffer(len)\n\n\t\t    if (buf.length === 0) {\n\t\t      return buf\n\t\t    }\n\n\t\t    obj.copy(buf, 0, 0, len)\n\t\t    return buf\n\t\t  }\n\n\t\t  if (obj) {\n\t\t    if (ArrayBuffer.isView(obj) || 'length' in obj) {\n\t\t      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n\t\t        return createBuffer(0)\n\t\t      }\n\t\t      return fromArrayLike(obj)\n\t\t    }\n\n\t\t    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n\t\t      return fromArrayLike(obj.data)\n\t\t    }\n\t\t  }\n\n\t\t  throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.')\n\t\t}\n\n\t\tfunction checked (length) {\n\t\t  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n\t\t  // length is NaN (which is otherwise coerced to zero.)\n\t\t  if (length >= K_MAX_LENGTH) {\n\t\t    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n\t\t                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n\t\t  }\n\t\t  return length | 0\n\t\t}\n\n\t\tfunction SlowBuffer (length) {\n\t\t  if (+length != length) { // eslint-disable-line eqeqeq\n\t\t    length = 0\n\t\t  }\n\t\t  return Buffer.alloc(+length)\n\t\t}\n\n\t\tBuffer.isBuffer = function isBuffer (b) {\n\t\t  return b != null && b._isBuffer === true\n\t\t}\n\n\t\tBuffer.compare = function compare (a, b) {\n\t\t  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n\t\t    throw new TypeError('Arguments must be Buffers')\n\t\t  }\n\n\t\t  if (a === b) return 0\n\n\t\t  var x = a.length\n\t\t  var y = b.length\n\n\t\t  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n\t\t    if (a[i] !== b[i]) {\n\t\t      x = a[i]\n\t\t      y = b[i]\n\t\t      break\n\t\t    }\n\t\t  }\n\n\t\t  if (x < y) return -1\n\t\t  if (y < x) return 1\n\t\t  return 0\n\t\t}\n\n\t\tBuffer.isEncoding = function isEncoding (encoding) {\n\t\t  switch (String(encoding).toLowerCase()) {\n\t\t    case 'hex':\n\t\t    case 'utf8':\n\t\t    case 'utf-8':\n\t\t    case 'ascii':\n\t\t    case 'latin1':\n\t\t    case 'binary':\n\t\t    case 'base64':\n\t\t    case 'ucs2':\n\t\t    case 'ucs-2':\n\t\t    case 'utf16le':\n\t\t    case 'utf-16le':\n\t\t      return true\n\t\t    default:\n\t\t      return false\n\t\t  }\n\t\t}\n\n\t\tBuffer.concat = function concat (list, length) {\n\t\t  if (!Array.isArray(list)) {\n\t\t    throw new TypeError('\"list\" argument must be an Array of Buffers')\n\t\t  }\n\n\t\t  if (list.length === 0) {\n\t\t    return Buffer.alloc(0)\n\t\t  }\n\n\t\t  var i\n\t\t  if (length === undefined) {\n\t\t    length = 0\n\t\t    for (i = 0; i < list.length; ++i) {\n\t\t      length += list[i].length\n\t\t    }\n\t\t  }\n\n\t\t  var buffer = Buffer.allocUnsafe(length)\n\t\t  var pos = 0\n\t\t  for (i = 0; i < list.length; ++i) {\n\t\t    var buf = list[i]\n\t\t    if (ArrayBuffer.isView(buf)) {\n\t\t      buf = Buffer.from(buf)\n\t\t    }\n\t\t    if (!Buffer.isBuffer(buf)) {\n\t\t      throw new TypeError('\"list\" argument must be an Array of Buffers')\n\t\t    }\n\t\t    buf.copy(buffer, pos)\n\t\t    pos += buf.length\n\t\t  }\n\t\t  return buffer\n\t\t}\n\n\t\tfunction byteLength (string, encoding) {\n\t\t  if (Buffer.isBuffer(string)) {\n\t\t    return string.length\n\t\t  }\n\t\t  if (ArrayBuffer.isView(string) || isArrayBuffer(string)) {\n\t\t    return string.byteLength\n\t\t  }\n\t\t  if (typeof string !== 'string') {\n\t\t    string = '' + string\n\t\t  }\n\n\t\t  var len = string.length\n\t\t  if (len === 0) return 0\n\n\t\t  // Use a for loop to avoid recursion\n\t\t  var loweredCase = false\n\t\t  for (;;) {\n\t\t    switch (encoding) {\n\t\t      case 'ascii':\n\t\t      case 'latin1':\n\t\t      case 'binary':\n\t\t        return len\n\t\t      case 'utf8':\n\t\t      case 'utf-8':\n\t\t      case undefined:\n\t\t        return utf8ToBytes(string).length\n\t\t      case 'ucs2':\n\t\t      case 'ucs-2':\n\t\t      case 'utf16le':\n\t\t      case 'utf-16le':\n\t\t        return len * 2\n\t\t      case 'hex':\n\t\t        return len >>> 1\n\t\t      case 'base64':\n\t\t        return base64ToBytes(string).length\n\t\t      default:\n\t\t        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n\t\t        encoding = ('' + encoding).toLowerCase()\n\t\t        loweredCase = true\n\t\t    }\n\t\t  }\n\t\t}\n\t\tBuffer.byteLength = byteLength\n\n\t\tfunction slowToString (encoding, start, end) {\n\t\t  var loweredCase = false\n\n\t\t  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n\t\t  // property of a typed array.\n\n\t\t  // This behaves neither like String nor Uint8Array in that we set start/end\n\t\t  // to their upper/lower bounds if the value passed is out of range.\n\t\t  // undefined is handled specially as per ECMA-262 6th Edition,\n\t\t  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n\t\t  if (start === undefined || start < 0) {\n\t\t    start = 0\n\t\t  }\n\t\t  // Return early if start > this.length. Done here to prevent potential uint32\n\t\t  // coercion fail below.\n\t\t  if (start > this.length) {\n\t\t    return ''\n\t\t  }\n\n\t\t  if (end === undefined || end > this.length) {\n\t\t    end = this.length\n\t\t  }\n\n\t\t  if (end <= 0) {\n\t\t    return ''\n\t\t  }\n\n\t\t  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n\t\t  end >>>= 0\n\t\t  start >>>= 0\n\n\t\t  if (end <= start) {\n\t\t    return ''\n\t\t  }\n\n\t\t  if (!encoding) encoding = 'utf8'\n\n\t\t  while (true) {\n\t\t    switch (encoding) {\n\t\t      case 'hex':\n\t\t        return hexSlice(this, start, end)\n\n\t\t      case 'utf8':\n\t\t      case 'utf-8':\n\t\t        return utf8Slice(this, start, end)\n\n\t\t      case 'ascii':\n\t\t        return asciiSlice(this, start, end)\n\n\t\t      case 'latin1':\n\t\t      case 'binary':\n\t\t        return latin1Slice(this, start, end)\n\n\t\t      case 'base64':\n\t\t        return base64Slice(this, start, end)\n\n\t\t      case 'ucs2':\n\t\t      case 'ucs-2':\n\t\t      case 'utf16le':\n\t\t      case 'utf-16le':\n\t\t        return utf16leSlice(this, start, end)\n\n\t\t      default:\n\t\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t\t        encoding = (encoding + '').toLowerCase()\n\t\t        loweredCase = true\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\t// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n\t\t// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n\t\t// reliably in a browserify context because there could be multiple different\n\t\t// copies of the 'buffer' package in use. This method works even for Buffer\n\t\t// instances that were created from another copy of the `buffer` package.\n\t\t// See: https://github.com/feross/buffer/issues/154\n\t\tBuffer.prototype._isBuffer = true\n\n\t\tfunction swap (b, n, m) {\n\t\t  var i = b[n]\n\t\t  b[n] = b[m]\n\t\t  b[m] = i\n\t\t}\n\n\t\tBuffer.prototype.swap16 = function swap16 () {\n\t\t  var len = this.length\n\t\t  if (len % 2 !== 0) {\n\t\t    throw new RangeError('Buffer size must be a multiple of 16-bits')\n\t\t  }\n\t\t  for (var i = 0; i < len; i += 2) {\n\t\t    swap(this, i, i + 1)\n\t\t  }\n\t\t  return this\n\t\t}\n\n\t\tBuffer.prototype.swap32 = function swap32 () {\n\t\t  var len = this.length\n\t\t  if (len % 4 !== 0) {\n\t\t    throw new RangeError('Buffer size must be a multiple of 32-bits')\n\t\t  }\n\t\t  for (var i = 0; i < len; i += 4) {\n\t\t    swap(this, i, i + 3)\n\t\t    swap(this, i + 1, i + 2)\n\t\t  }\n\t\t  return this\n\t\t}\n\n\t\tBuffer.prototype.swap64 = function swap64 () {\n\t\t  var len = this.length\n\t\t  if (len % 8 !== 0) {\n\t\t    throw new RangeError('Buffer size must be a multiple of 64-bits')\n\t\t  }\n\t\t  for (var i = 0; i < len; i += 8) {\n\t\t    swap(this, i, i + 7)\n\t\t    swap(this, i + 1, i + 6)\n\t\t    swap(this, i + 2, i + 5)\n\t\t    swap(this, i + 3, i + 4)\n\t\t  }\n\t\t  return this\n\t\t}\n\n\t\tBuffer.prototype.toString = function toString () {\n\t\t  var length = this.length\n\t\t  if (length === 0) return ''\n\t\t  if (arguments.length === 0) return utf8Slice(this, 0, length)\n\t\t  return slowToString.apply(this, arguments)\n\t\t}\n\n\t\tBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\n\t\tBuffer.prototype.equals = function equals (b) {\n\t\t  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t\t  if (this === b) return true\n\t\t  return Buffer.compare(this, b) === 0\n\t\t}\n\n\t\tBuffer.prototype.inspect = function inspect () {\n\t\t  var str = ''\n\t\t  var max = exports.INSPECT_MAX_BYTES\n\t\t  if (this.length > 0) {\n\t\t    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n\t\t    if (this.length > max) str += ' ... '\n\t\t  }\n\t\t  return '<Buffer ' + str + '>'\n\t\t}\n\n\t\tBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n\t\t  if (!Buffer.isBuffer(target)) {\n\t\t    throw new TypeError('Argument must be a Buffer')\n\t\t  }\n\n\t\t  if (start === undefined) {\n\t\t    start = 0\n\t\t  }\n\t\t  if (end === undefined) {\n\t\t    end = target ? target.length : 0\n\t\t  }\n\t\t  if (thisStart === undefined) {\n\t\t    thisStart = 0\n\t\t  }\n\t\t  if (thisEnd === undefined) {\n\t\t    thisEnd = this.length\n\t\t  }\n\n\t\t  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n\t\t    throw new RangeError('out of range index')\n\t\t  }\n\n\t\t  if (thisStart >= thisEnd && start >= end) {\n\t\t    return 0\n\t\t  }\n\t\t  if (thisStart >= thisEnd) {\n\t\t    return -1\n\t\t  }\n\t\t  if (start >= end) {\n\t\t    return 1\n\t\t  }\n\n\t\t  start >>>= 0\n\t\t  end >>>= 0\n\t\t  thisStart >>>= 0\n\t\t  thisEnd >>>= 0\n\n\t\t  if (this === target) return 0\n\n\t\t  var x = thisEnd - thisStart\n\t\t  var y = end - start\n\t\t  var len = Math.min(x, y)\n\n\t\t  var thisCopy = this.slice(thisStart, thisEnd)\n\t\t  var targetCopy = target.slice(start, end)\n\n\t\t  for (var i = 0; i < len; ++i) {\n\t\t    if (thisCopy[i] !== targetCopy[i]) {\n\t\t      x = thisCopy[i]\n\t\t      y = targetCopy[i]\n\t\t      break\n\t\t    }\n\t\t  }\n\n\t\t  if (x < y) return -1\n\t\t  if (y < x) return 1\n\t\t  return 0\n\t\t}\n\n\t\t// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n\t\t// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n\t\t//\n\t\t// Arguments:\n\t\t// - buffer - a Buffer to search\n\t\t// - val - a string, Buffer, or number\n\t\t// - byteOffset - an index into `buffer`; will be clamped to an int32\n\t\t// - encoding - an optional encoding, relevant is val is a string\n\t\t// - dir - true for indexOf, false for lastIndexOf\n\t\tfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n\t\t  // Empty buffer means no match\n\t\t  if (buffer.length === 0) return -1\n\n\t\t  // Normalize byteOffset\n\t\t  if (typeof byteOffset === 'string') {\n\t\t    encoding = byteOffset\n\t\t    byteOffset = 0\n\t\t  } else if (byteOffset > 0x7fffffff) {\n\t\t    byteOffset = 0x7fffffff\n\t\t  } else if (byteOffset < -0x80000000) {\n\t\t    byteOffset = -0x80000000\n\t\t  }\n\t\t  byteOffset = +byteOffset  // Coerce to Number.\n\t\t  if (numberIsNaN(byteOffset)) {\n\t\t    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n\t\t    byteOffset = dir ? 0 : (buffer.length - 1)\n\t\t  }\n\n\t\t  // Normalize byteOffset: negative offsets start from the end of the buffer\n\t\t  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n\t\t  if (byteOffset >= buffer.length) {\n\t\t    if (dir) return -1\n\t\t    else byteOffset = buffer.length - 1\n\t\t  } else if (byteOffset < 0) {\n\t\t    if (dir) byteOffset = 0\n\t\t    else return -1\n\t\t  }\n\n\t\t  // Normalize val\n\t\t  if (typeof val === 'string') {\n\t\t    val = Buffer.from(val, encoding)\n\t\t  }\n\n\t\t  // Finally, search either indexOf (if dir is true) or lastIndexOf\n\t\t  if (Buffer.isBuffer(val)) {\n\t\t    // Special case: looking for empty string/buffer always fails\n\t\t    if (val.length === 0) {\n\t\t      return -1\n\t\t    }\n\t\t    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n\t\t  } else if (typeof val === 'number') {\n\t\t    val = val & 0xFF // Search for a byte value [0-255]\n\t\t    if (typeof Uint8Array.prototype.indexOf === 'function') {\n\t\t      if (dir) {\n\t\t        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n\t\t      } else {\n\t\t        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n\t\t      }\n\t\t    }\n\t\t    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n\t\t  }\n\n\t\t  throw new TypeError('val must be string, number or Buffer')\n\t\t}\n\n\t\tfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n\t\t  var indexSize = 1\n\t\t  var arrLength = arr.length\n\t\t  var valLength = val.length\n\n\t\t  if (encoding !== undefined) {\n\t\t    encoding = String(encoding).toLowerCase()\n\t\t    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n\t\t        encoding === 'utf16le' || encoding === 'utf-16le') {\n\t\t      if (arr.length < 2 || val.length < 2) {\n\t\t        return -1\n\t\t      }\n\t\t      indexSize = 2\n\t\t      arrLength /= 2\n\t\t      valLength /= 2\n\t\t      byteOffset /= 2\n\t\t    }\n\t\t  }\n\n\t\t  function read (buf, i) {\n\t\t    if (indexSize === 1) {\n\t\t      return buf[i]\n\t\t    } else {\n\t\t      return buf.readUInt16BE(i * indexSize)\n\t\t    }\n\t\t  }\n\n\t\t  var i\n\t\t  if (dir) {\n\t\t    var foundIndex = -1\n\t\t    for (i = byteOffset; i < arrLength; i++) {\n\t\t      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n\t\t        if (foundIndex === -1) foundIndex = i\n\t\t        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n\t\t      } else {\n\t\t        if (foundIndex !== -1) i -= i - foundIndex\n\t\t        foundIndex = -1\n\t\t      }\n\t\t    }\n\t\t  } else {\n\t\t    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n\t\t    for (i = byteOffset; i >= 0; i--) {\n\t\t      var found = true\n\t\t      for (var j = 0; j < valLength; j++) {\n\t\t        if (read(arr, i + j) !== read(val, j)) {\n\t\t          found = false\n\t\t          break\n\t\t        }\n\t\t      }\n\t\t      if (found) return i\n\t\t    }\n\t\t  }\n\n\t\t  return -1\n\t\t}\n\n\t\tBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n\t\t  return this.indexOf(val, byteOffset, encoding) !== -1\n\t\t}\n\n\t\tBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n\t\t  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n\t\t}\n\n\t\tBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n\t\t  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n\t\t}\n\n\t\tfunction hexWrite (buf, string, offset, length) {\n\t\t  offset = Number(offset) || 0\n\t\t  var remaining = buf.length - offset\n\t\t  if (!length) {\n\t\t    length = remaining\n\t\t  } else {\n\t\t    length = Number(length)\n\t\t    if (length > remaining) {\n\t\t      length = remaining\n\t\t    }\n\t\t  }\n\n\t\t  var strLen = string.length\n\n\t\t  if (length > strLen / 2) {\n\t\t    length = strLen / 2\n\t\t  }\n\t\t  for (var i = 0; i < length; ++i) {\n\t\t    var parsed = parseInt(string.substr(i * 2, 2), 16)\n\t\t    if (numberIsNaN(parsed)) return i\n\t\t    buf[offset + i] = parsed\n\t\t  }\n\t\t  return i\n\t\t}\n\n\t\tfunction utf8Write (buf, string, offset, length) {\n\t\t  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n\t\t}\n\n\t\tfunction asciiWrite (buf, string, offset, length) {\n\t\t  return blitBuffer(asciiToBytes(string), buf, offset, length)\n\t\t}\n\n\t\tfunction latin1Write (buf, string, offset, length) {\n\t\t  return asciiWrite(buf, string, offset, length)\n\t\t}\n\n\t\tfunction base64Write (buf, string, offset, length) {\n\t\t  return blitBuffer(base64ToBytes(string), buf, offset, length)\n\t\t}\n\n\t\tfunction ucs2Write (buf, string, offset, length) {\n\t\t  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n\t\t}\n\n\t\tBuffer.prototype.write = function write (string, offset, length, encoding) {\n\t\t  // Buffer#write(string)\n\t\t  if (offset === undefined) {\n\t\t    encoding = 'utf8'\n\t\t    length = this.length\n\t\t    offset = 0\n\t\t  // Buffer#write(string, encoding)\n\t\t  } else if (length === undefined && typeof offset === 'string') {\n\t\t    encoding = offset\n\t\t    length = this.length\n\t\t    offset = 0\n\t\t  // Buffer#write(string, offset[, length][, encoding])\n\t\t  } else if (isFinite(offset)) {\n\t\t    offset = offset >>> 0\n\t\t    if (isFinite(length)) {\n\t\t      length = length >>> 0\n\t\t      if (encoding === undefined) encoding = 'utf8'\n\t\t    } else {\n\t\t      encoding = length\n\t\t      length = undefined\n\t\t    }\n\t\t  } else {\n\t\t    throw new Error(\n\t\t      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n\t\t    )\n\t\t  }\n\n\t\t  var remaining = this.length - offset\n\t\t  if (length === undefined || length > remaining) length = remaining\n\n\t\t  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n\t\t    throw new RangeError('Attempt to write outside buffer bounds')\n\t\t  }\n\n\t\t  if (!encoding) encoding = 'utf8'\n\n\t\t  var loweredCase = false\n\t\t  for (;;) {\n\t\t    switch (encoding) {\n\t\t      case 'hex':\n\t\t        return hexWrite(this, string, offset, length)\n\n\t\t      case 'utf8':\n\t\t      case 'utf-8':\n\t\t        return utf8Write(this, string, offset, length)\n\n\t\t      case 'ascii':\n\t\t        return asciiWrite(this, string, offset, length)\n\n\t\t      case 'latin1':\n\t\t      case 'binary':\n\t\t        return latin1Write(this, string, offset, length)\n\n\t\t      case 'base64':\n\t\t        // Warning: maxLength not taken into account in base64Write\n\t\t        return base64Write(this, string, offset, length)\n\n\t\t      case 'ucs2':\n\t\t      case 'ucs-2':\n\t\t      case 'utf16le':\n\t\t      case 'utf-16le':\n\t\t        return ucs2Write(this, string, offset, length)\n\n\t\t      default:\n\t\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t\t        encoding = ('' + encoding).toLowerCase()\n\t\t        loweredCase = true\n\t\t    }\n\t\t  }\n\t\t}\n\n\t\tBuffer.prototype.toJSON = function toJSON () {\n\t\t  return {\n\t\t    type: 'Buffer',\n\t\t    data: Array.prototype.slice.call(this._arr || this, 0)\n\t\t  }\n\t\t}\n\n\t\tfunction base64Slice (buf, start, end) {\n\t\t  if (start === 0 && end === buf.length) {\n\t\t    return base64.fromByteArray(buf)\n\t\t  } else {\n\t\t    return base64.fromByteArray(buf.slice(start, end))\n\t\t  }\n\t\t}\n\n\t\tfunction utf8Slice (buf, start, end) {\n\t\t  end = Math.min(buf.length, end)\n\t\t  var res = []\n\n\t\t  var i = start\n\t\t  while (i < end) {\n\t\t    var firstByte = buf[i]\n\t\t    var codePoint = null\n\t\t    var bytesPerSequence = (firstByte > 0xEF) ? 4\n\t\t      : (firstByte > 0xDF) ? 3\n\t\t      : (firstByte > 0xBF) ? 2\n\t\t      : 1\n\n\t\t    if (i + bytesPerSequence <= end) {\n\t\t      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n\t\t      switch (bytesPerSequence) {\n\t\t        case 1:\n\t\t          if (firstByte < 0x80) {\n\t\t            codePoint = firstByte\n\t\t          }\n\t\t          break\n\t\t        case 2:\n\t\t          secondByte = buf[i + 1]\n\t\t          if ((secondByte & 0xC0) === 0x80) {\n\t\t            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n\t\t            if (tempCodePoint > 0x7F) {\n\t\t              codePoint = tempCodePoint\n\t\t            }\n\t\t          }\n\t\t          break\n\t\t        case 3:\n\t\t          secondByte = buf[i + 1]\n\t\t          thirdByte = buf[i + 2]\n\t\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n\t\t            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n\t\t            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n\t\t              codePoint = tempCodePoint\n\t\t            }\n\t\t          }\n\t\t          break\n\t\t        case 4:\n\t\t          secondByte = buf[i + 1]\n\t\t          thirdByte = buf[i + 2]\n\t\t          fourthByte = buf[i + 3]\n\t\t          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n\t\t            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n\t\t            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n\t\t              codePoint = tempCodePoint\n\t\t            }\n\t\t          }\n\t\t      }\n\t\t    }\n\n\t\t    if (codePoint === null) {\n\t\t      // we did not generate a valid codePoint so insert a\n\t\t      // replacement char (U+FFFD) and advance only 1 byte\n\t\t      codePoint = 0xFFFD\n\t\t      bytesPerSequence = 1\n\t\t    } else if (codePoint > 0xFFFF) {\n\t\t      // encode to utf16 (surrogate pair dance)\n\t\t      codePoint -= 0x10000\n\t\t      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n\t\t      codePoint = 0xDC00 | codePoint & 0x3FF\n\t\t    }\n\n\t\t    res.push(codePoint)\n\t\t    i += bytesPerSequence\n\t\t  }\n\n\t\t  return decodeCodePointsArray(res)\n\t\t}\n\n\t\t// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n\t\t// the lowest limit is Chrome, with 0x10000 args.\n\t\t// We go 1 magnitude less, for safety\n\t\tvar MAX_ARGUMENTS_LENGTH = 0x1000\n\n\t\tfunction decodeCodePointsArray (codePoints) {\n\t\t  var len = codePoints.length\n\t\t  if (len <= MAX_ARGUMENTS_LENGTH) {\n\t\t    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n\t\t  }\n\n\t\t  // Decode in chunks to avoid \"call stack size exceeded\".\n\t\t  var res = ''\n\t\t  var i = 0\n\t\t  while (i < len) {\n\t\t    res += String.fromCharCode.apply(\n\t\t      String,\n\t\t      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n\t\t    )\n\t\t  }\n\t\t  return res\n\t\t}\n\n\t\tfunction asciiSlice (buf, start, end) {\n\t\t  var ret = ''\n\t\t  end = Math.min(buf.length, end)\n\n\t\t  for (var i = start; i < end; ++i) {\n\t\t    ret += String.fromCharCode(buf[i] & 0x7F)\n\t\t  }\n\t\t  return ret\n\t\t}\n\n\t\tfunction latin1Slice (buf, start, end) {\n\t\t  var ret = ''\n\t\t  end = Math.min(buf.length, end)\n\n\t\t  for (var i = start; i < end; ++i) {\n\t\t    ret += String.fromCharCode(buf[i])\n\t\t  }\n\t\t  return ret\n\t\t}\n\n\t\tfunction hexSlice (buf, start, end) {\n\t\t  var len = buf.length\n\n\t\t  if (!start || start < 0) start = 0\n\t\t  if (!end || end < 0 || end > len) end = len\n\n\t\t  var out = ''\n\t\t  for (var i = start; i < end; ++i) {\n\t\t    out += toHex(buf[i])\n\t\t  }\n\t\t  return out\n\t\t}\n\n\t\tfunction utf16leSlice (buf, start, end) {\n\t\t  var bytes = buf.slice(start, end)\n\t\t  var res = ''\n\t\t  for (var i = 0; i < bytes.length; i += 2) {\n\t\t    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n\t\t  }\n\t\t  return res\n\t\t}\n\n\t\tBuffer.prototype.slice = function slice (start, end) {\n\t\t  var len = this.length\n\t\t  start = ~~start\n\t\t  end = end === undefined ? len : ~~end\n\n\t\t  if (start < 0) {\n\t\t    start += len\n\t\t    if (start < 0) start = 0\n\t\t  } else if (start > len) {\n\t\t    start = len\n\t\t  }\n\n\t\t  if (end < 0) {\n\t\t    end += len\n\t\t    if (end < 0) end = 0\n\t\t  } else if (end > len) {\n\t\t    end = len\n\t\t  }\n\n\t\t  if (end < start) end = start\n\n\t\t  var newBuf = this.subarray(start, end)\n\t\t  // Return an augmented `Uint8Array` instance\n\t\t  newBuf.__proto__ = Buffer.prototype\n\t\t  return newBuf\n\t\t}\n\n\t\t/*\n\t\t * Need to make sure that buffer isn't trying to write out of bounds.\n\t\t */\n\t\tfunction checkOffset (offset, ext, length) {\n\t\t  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n\t\t  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n\t\t}\n\n\t\tBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  byteLength = byteLength >>> 0\n\t\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n\t\t  var val = this[offset]\n\t\t  var mul = 1\n\t\t  var i = 0\n\t\t  while (++i < byteLength && (mul *= 0x100)) {\n\t\t    val += this[offset + i] * mul\n\t\t  }\n\n\t\t  return val\n\t\t}\n\n\t\tBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  byteLength = byteLength >>> 0\n\t\t  if (!noAssert) {\n\t\t    checkOffset(offset, byteLength, this.length)\n\t\t  }\n\n\t\t  var val = this[offset + --byteLength]\n\t\t  var mul = 1\n\t\t  while (byteLength > 0 && (mul *= 0x100)) {\n\t\t    val += this[offset + --byteLength] * mul\n\t\t  }\n\n\t\t  return val\n\t\t}\n\n\t\tBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t\t  return this[offset]\n\t\t}\n\n\t\tBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t\t  return this[offset] | (this[offset + 1] << 8)\n\t\t}\n\n\t\tBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t\t  return (this[offset] << 8) | this[offset + 1]\n\t\t}\n\n\t\tBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\n\t\t  return ((this[offset]) |\n\t\t      (this[offset + 1] << 8) |\n\t\t      (this[offset + 2] << 16)) +\n\t\t      (this[offset + 3] * 0x1000000)\n\t\t}\n\n\t\tBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\n\t\t  return (this[offset] * 0x1000000) +\n\t\t    ((this[offset + 1] << 16) |\n\t\t    (this[offset + 2] << 8) |\n\t\t    this[offset + 3])\n\t\t}\n\n\t\tBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  byteLength = byteLength >>> 0\n\t\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n\t\t  var val = this[offset]\n\t\t  var mul = 1\n\t\t  var i = 0\n\t\t  while (++i < byteLength && (mul *= 0x100)) {\n\t\t    val += this[offset + i] * mul\n\t\t  }\n\t\t  mul *= 0x80\n\n\t\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n\t\t  return val\n\t\t}\n\n\t\tBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  byteLength = byteLength >>> 0\n\t\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n\t\t  var i = byteLength\n\t\t  var mul = 1\n\t\t  var val = this[offset + --i]\n\t\t  while (i > 0 && (mul *= 0x100)) {\n\t\t    val += this[offset + --i] * mul\n\t\t  }\n\t\t  mul *= 0x80\n\n\t\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n\t\t  return val\n\t\t}\n\n\t\tBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t\t  if (!(this[offset] & 0x80)) return (this[offset])\n\t\t  return ((0xff - this[offset] + 1) * -1)\n\t\t}\n\n\t\tBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t\t  var val = this[offset] | (this[offset + 1] << 8)\n\t\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t\t}\n\n\t\tBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t\t  var val = this[offset + 1] | (this[offset] << 8)\n\t\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t\t}\n\n\t\tBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\n\t\t  return (this[offset]) |\n\t\t    (this[offset + 1] << 8) |\n\t\t    (this[offset + 2] << 16) |\n\t\t    (this[offset + 3] << 24)\n\t\t}\n\n\t\tBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\n\t\t  return (this[offset] << 24) |\n\t\t    (this[offset + 1] << 16) |\n\t\t    (this[offset + 2] << 8) |\n\t\t    (this[offset + 3])\n\t\t}\n\n\t\tBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\t  return ieee754.read(this, offset, true, 23, 4)\n\t\t}\n\n\t\tBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\t  return ieee754.read(this, offset, false, 23, 4)\n\t\t}\n\n\t\tBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t\t  return ieee754.read(this, offset, true, 52, 8)\n\t\t}\n\n\t\tBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t\t  return ieee754.read(this, offset, false, 52, 8)\n\t\t}\n\n\t\tfunction checkInt (buf, value, offset, ext, max, min) {\n\t\t  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n\t\t  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n\t\t  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n\t\t}\n\n\t\tBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  byteLength = byteLength >>> 0\n\t\t  if (!noAssert) {\n\t\t    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n\t\t    checkInt(this, value, offset, byteLength, maxBytes, 0)\n\t\t  }\n\n\t\t  var mul = 1\n\t\t  var i = 0\n\t\t  this[offset] = value & 0xFF\n\t\t  while (++i < byteLength && (mul *= 0x100)) {\n\t\t    this[offset + i] = (value / mul) & 0xFF\n\t\t  }\n\n\t\t  return offset + byteLength\n\t\t}\n\n\t\tBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  byteLength = byteLength >>> 0\n\t\t  if (!noAssert) {\n\t\t    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n\t\t    checkInt(this, value, offset, byteLength, maxBytes, 0)\n\t\t  }\n\n\t\t  var i = byteLength - 1\n\t\t  var mul = 1\n\t\t  this[offset + i] = value & 0xFF\n\t\t  while (--i >= 0 && (mul *= 0x100)) {\n\t\t    this[offset + i] = (value / mul) & 0xFF\n\t\t  }\n\n\t\t  return offset + byteLength\n\t\t}\n\n\t\tBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n\t\t  this[offset] = (value & 0xff)\n\t\t  return offset + 1\n\t\t}\n\n\t\tBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t\t  this[offset] = (value & 0xff)\n\t\t  this[offset + 1] = (value >>> 8)\n\t\t  return offset + 2\n\t\t}\n\n\t\tBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t\t  this[offset] = (value >>> 8)\n\t\t  this[offset + 1] = (value & 0xff)\n\t\t  return offset + 2\n\t\t}\n\n\t\tBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t\t  this[offset + 3] = (value >>> 24)\n\t\t  this[offset + 2] = (value >>> 16)\n\t\t  this[offset + 1] = (value >>> 8)\n\t\t  this[offset] = (value & 0xff)\n\t\t  return offset + 4\n\t\t}\n\n\t\tBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t\t  this[offset] = (value >>> 24)\n\t\t  this[offset + 1] = (value >>> 16)\n\t\t  this[offset + 2] = (value >>> 8)\n\t\t  this[offset + 3] = (value & 0xff)\n\t\t  return offset + 4\n\t\t}\n\n\t\tBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) {\n\t\t    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n\t\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t\t  }\n\n\t\t  var i = 0\n\t\t  var mul = 1\n\t\t  var sub = 0\n\t\t  this[offset] = value & 0xFF\n\t\t  while (++i < byteLength && (mul *= 0x100)) {\n\t\t    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n\t\t      sub = 1\n\t\t    }\n\t\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t\t  }\n\n\t\t  return offset + byteLength\n\t\t}\n\n\t\tBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) {\n\t\t    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n\t\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t\t  }\n\n\t\t  var i = byteLength - 1\n\t\t  var mul = 1\n\t\t  var sub = 0\n\t\t  this[offset + i] = value & 0xFF\n\t\t  while (--i >= 0 && (mul *= 0x100)) {\n\t\t    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n\t\t      sub = 1\n\t\t    }\n\t\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t\t  }\n\n\t\t  return offset + byteLength\n\t\t}\n\n\t\tBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n\t\t  if (value < 0) value = 0xff + value + 1\n\t\t  this[offset] = (value & 0xff)\n\t\t  return offset + 1\n\t\t}\n\n\t\tBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t\t  this[offset] = (value & 0xff)\n\t\t  this[offset + 1] = (value >>> 8)\n\t\t  return offset + 2\n\t\t}\n\n\t\tBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t\t  this[offset] = (value >>> 8)\n\t\t  this[offset + 1] = (value & 0xff)\n\t\t  return offset + 2\n\t\t}\n\n\t\tBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t\t  this[offset] = (value & 0xff)\n\t\t  this[offset + 1] = (value >>> 8)\n\t\t  this[offset + 2] = (value >>> 16)\n\t\t  this[offset + 3] = (value >>> 24)\n\t\t  return offset + 4\n\t\t}\n\n\t\tBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t\t  if (value < 0) value = 0xffffffff + value + 1\n\t\t  this[offset] = (value >>> 24)\n\t\t  this[offset + 1] = (value >>> 16)\n\t\t  this[offset + 2] = (value >>> 8)\n\t\t  this[offset + 3] = (value & 0xff)\n\t\t  return offset + 4\n\t\t}\n\n\t\tfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n\t\t  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n\t\t  if (offset < 0) throw new RangeError('Index out of range')\n\t\t}\n\n\t\tfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) {\n\t\t    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n\t\t  }\n\t\t  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n\t\t  return offset + 4\n\t\t}\n\n\t\tBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n\t\t  return writeFloat(this, value, offset, true, noAssert)\n\t\t}\n\n\t\tBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n\t\t  return writeFloat(this, value, offset, false, noAssert)\n\t\t}\n\n\t\tfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n\t\t  value = +value\n\t\t  offset = offset >>> 0\n\t\t  if (!noAssert) {\n\t\t    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n\t\t  }\n\t\t  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n\t\t  return offset + 8\n\t\t}\n\n\t\tBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n\t\t  return writeDouble(this, value, offset, true, noAssert)\n\t\t}\n\n\t\tBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n\t\t  return writeDouble(this, value, offset, false, noAssert)\n\t\t}\n\n\t\t// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\t\tBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n\t\t  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n\t\t  if (!start) start = 0\n\t\t  if (!end && end !== 0) end = this.length\n\t\t  if (targetStart >= target.length) targetStart = target.length\n\t\t  if (!targetStart) targetStart = 0\n\t\t  if (end > 0 && end < start) end = start\n\n\t\t  // Copy 0 bytes; we're done\n\t\t  if (end === start) return 0\n\t\t  if (target.length === 0 || this.length === 0) return 0\n\n\t\t  // Fatal error conditions\n\t\t  if (targetStart < 0) {\n\t\t    throw new RangeError('targetStart out of bounds')\n\t\t  }\n\t\t  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n\t\t  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n\t\t  // Are we oob?\n\t\t  if (end > this.length) end = this.length\n\t\t  if (target.length - targetStart < end - start) {\n\t\t    end = target.length - targetStart + start\n\t\t  }\n\n\t\t  var len = end - start\n\n\t\t  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n\t\t    // Use built-in when available, missing from IE11\n\t\t    this.copyWithin(targetStart, start, end)\n\t\t  } else if (this === target && start < targetStart && targetStart < end) {\n\t\t    // descending copy from end\n\t\t    for (var i = len - 1; i >= 0; --i) {\n\t\t      target[i + targetStart] = this[i + start]\n\t\t    }\n\t\t  } else {\n\t\t    Uint8Array.prototype.set.call(\n\t\t      target,\n\t\t      this.subarray(start, end),\n\t\t      targetStart\n\t\t    )\n\t\t  }\n\n\t\t  return len\n\t\t}\n\n\t\t// Usage:\n\t\t//    buffer.fill(number[, offset[, end]])\n\t\t//    buffer.fill(buffer[, offset[, end]])\n\t\t//    buffer.fill(string[, offset[, end]][, encoding])\n\t\tBuffer.prototype.fill = function fill (val, start, end, encoding) {\n\t\t  // Handle string cases:\n\t\t  if (typeof val === 'string') {\n\t\t    if (typeof start === 'string') {\n\t\t      encoding = start\n\t\t      start = 0\n\t\t      end = this.length\n\t\t    } else if (typeof end === 'string') {\n\t\t      encoding = end\n\t\t      end = this.length\n\t\t    }\n\t\t    if (encoding !== undefined && typeof encoding !== 'string') {\n\t\t      throw new TypeError('encoding must be a string')\n\t\t    }\n\t\t    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n\t\t      throw new TypeError('Unknown encoding: ' + encoding)\n\t\t    }\n\t\t    if (val.length === 1) {\n\t\t      var code = val.charCodeAt(0)\n\t\t      if ((encoding === 'utf8' && code < 128) ||\n\t\t          encoding === 'latin1') {\n\t\t        // Fast path: If `val` fits into a single byte, use that numeric value.\n\t\t        val = code\n\t\t      }\n\t\t    }\n\t\t  } else if (typeof val === 'number') {\n\t\t    val = val & 255\n\t\t  }\n\n\t\t  // Invalid ranges are not set to a default, so can range check early.\n\t\t  if (start < 0 || this.length < start || this.length < end) {\n\t\t    throw new RangeError('Out of range index')\n\t\t  }\n\n\t\t  if (end <= start) {\n\t\t    return this\n\t\t  }\n\n\t\t  start = start >>> 0\n\t\t  end = end === undefined ? this.length : end >>> 0\n\n\t\t  if (!val) val = 0\n\n\t\t  var i\n\t\t  if (typeof val === 'number') {\n\t\t    for (i = start; i < end; ++i) {\n\t\t      this[i] = val\n\t\t    }\n\t\t  } else {\n\t\t    var bytes = Buffer.isBuffer(val)\n\t\t      ? val\n\t\t      : new Buffer(val, encoding)\n\t\t    var len = bytes.length\n\t\t    if (len === 0) {\n\t\t      throw new TypeError('The value \"' + val +\n\t\t        '\" is invalid for argument \"value\"')\n\t\t    }\n\t\t    for (i = 0; i < end - start; ++i) {\n\t\t      this[i + start] = bytes[i % len]\n\t\t    }\n\t\t  }\n\n\t\t  return this\n\t\t}\n\n\t\t// HELPER FUNCTIONS\n\t\t// ================\n\n\t\tvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\n\t\tfunction base64clean (str) {\n\t\t  // Node takes equal signs as end of the Base64 encoding\n\t\t  str = str.split('=')[0]\n\t\t  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n\t\t  str = str.trim().replace(INVALID_BASE64_RE, '')\n\t\t  // Node converts strings with length < 2 to ''\n\t\t  if (str.length < 2) return ''\n\t\t  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\t\t  while (str.length % 4 !== 0) {\n\t\t    str = str + '='\n\t\t  }\n\t\t  return str\n\t\t}\n\n\t\tfunction toHex (n) {\n\t\t  if (n < 16) return '0' + n.toString(16)\n\t\t  return n.toString(16)\n\t\t}\n\n\t\tfunction utf8ToBytes (string, units) {\n\t\t  units = units || Infinity\n\t\t  var codePoint\n\t\t  var length = string.length\n\t\t  var leadSurrogate = null\n\t\t  var bytes = []\n\n\t\t  for (var i = 0; i < length; ++i) {\n\t\t    codePoint = string.charCodeAt(i)\n\n\t\t    // is surrogate component\n\t\t    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n\t\t      // last char was a lead\n\t\t      if (!leadSurrogate) {\n\t\t        // no lead yet\n\t\t        if (codePoint > 0xDBFF) {\n\t\t          // unexpected trail\n\t\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t\t          continue\n\t\t        } else if (i + 1 === length) {\n\t\t          // unpaired lead\n\t\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t\t          continue\n\t\t        }\n\n\t\t        // valid lead\n\t\t        leadSurrogate = codePoint\n\n\t\t        continue\n\t\t      }\n\n\t\t      // 2 leads in a row\n\t\t      if (codePoint < 0xDC00) {\n\t\t        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t\t        leadSurrogate = codePoint\n\t\t        continue\n\t\t      }\n\n\t\t      // valid surrogate pair\n\t\t      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n\t\t    } else if (leadSurrogate) {\n\t\t      // valid bmp char, but last char was a lead\n\t\t      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t\t    }\n\n\t\t    leadSurrogate = null\n\n\t\t    // encode utf8\n\t\t    if (codePoint < 0x80) {\n\t\t      if ((units -= 1) < 0) break\n\t\t      bytes.push(codePoint)\n\t\t    } else if (codePoint < 0x800) {\n\t\t      if ((units -= 2) < 0) break\n\t\t      bytes.push(\n\t\t        codePoint >> 0x6 | 0xC0,\n\t\t        codePoint & 0x3F | 0x80\n\t\t      )\n\t\t    } else if (codePoint < 0x10000) {\n\t\t      if ((units -= 3) < 0) break\n\t\t      bytes.push(\n\t\t        codePoint >> 0xC | 0xE0,\n\t\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t\t        codePoint & 0x3F | 0x80\n\t\t      )\n\t\t    } else if (codePoint < 0x110000) {\n\t\t      if ((units -= 4) < 0) break\n\t\t      bytes.push(\n\t\t        codePoint >> 0x12 | 0xF0,\n\t\t        codePoint >> 0xC & 0x3F | 0x80,\n\t\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t\t        codePoint & 0x3F | 0x80\n\t\t      )\n\t\t    } else {\n\t\t      throw new Error('Invalid code point')\n\t\t    }\n\t\t  }\n\n\t\t  return bytes\n\t\t}\n\n\t\tfunction asciiToBytes (str) {\n\t\t  var byteArray = []\n\t\t  for (var i = 0; i < str.length; ++i) {\n\t\t    // Node's code seems to be doing this and not & 0x7F..\n\t\t    byteArray.push(str.charCodeAt(i) & 0xFF)\n\t\t  }\n\t\t  return byteArray\n\t\t}\n\n\t\tfunction utf16leToBytes (str, units) {\n\t\t  var c, hi, lo\n\t\t  var byteArray = []\n\t\t  for (var i = 0; i < str.length; ++i) {\n\t\t    if ((units -= 2) < 0) break\n\n\t\t    c = str.charCodeAt(i)\n\t\t    hi = c >> 8\n\t\t    lo = c % 256\n\t\t    byteArray.push(lo)\n\t\t    byteArray.push(hi)\n\t\t  }\n\n\t\t  return byteArray\n\t\t}\n\n\t\tfunction base64ToBytes (str) {\n\t\t  return base64.toByteArray(base64clean(str))\n\t\t}\n\n\t\tfunction blitBuffer (src, dst, offset, length) {\n\t\t  for (var i = 0; i < length; ++i) {\n\t\t    if ((i + offset >= dst.length) || (i >= src.length)) break\n\t\t    dst[i + offset] = src[i]\n\t\t  }\n\t\t  return i\n\t\t}\n\n\t\t// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check\n\t\t// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166\n\t\tfunction isArrayBuffer (obj) {\n\t\t  return obj instanceof ArrayBuffer ||\n\t\t    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\n\t\t      typeof obj.byteLength === 'number')\n\t\t}\n\n\t\tfunction numberIsNaN (obj) {\n\t\t  return obj !== obj // eslint-disable-line no-self-compare\n\t\t}\n} (buffer));\n\treturn buffer;\n}\n\nexport { requireBuffer as __require };","start":1670465470423,"end":1670465470445,"order":"normal"}]}
