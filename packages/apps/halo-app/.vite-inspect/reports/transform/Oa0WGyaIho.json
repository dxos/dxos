{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/random-access-storage@1.3.0/node_modules/random-access-storage/index.js","transforms":[{"name":"vite:load-fallback","result":"var events = require('events')\nvar inherits = require('inherits')\n\nvar NOT_READABLE = defaultImpl(new Error('Not readable'))\nvar NOT_WRITABLE = defaultImpl(new Error('Not writable'))\nvar NOT_DELETABLE = defaultImpl(new Error('Not deletable'))\nvar NOT_STATABLE = defaultImpl(new Error('Not statable'))\nvar NO_OPEN_READABLE = defaultImpl(new Error('No readonly open'))\n\nmodule.exports = RandomAccess\n\nfunction RandomAccess (opts) {\n  if (!(this instanceof RandomAccess)) return new RandomAccess(opts)\n  events.EventEmitter.call(this)\n\n  this._queued = []\n  this._pending = 0\n  this._needsOpen = true\n\n  this.opened = false\n  this.closed = false\n  this.destroyed = false\n\n  if (opts) {\n    if (opts.openReadonly) this._openReadonly = opts.openReadonly\n    if (opts.open) this._open = opts.open\n    if (opts.read) this._read = opts.read\n    if (opts.write) this._write = opts.write\n    if (opts.del) this._del = opts.del\n    if (opts.stat) this._stat = opts.stat\n    if (opts.close) this._close = opts.close\n    if (opts.destroy) this._destroy = opts.destroy\n  }\n\n  this.preferReadonly = this._openReadonly !== NO_OPEN_READABLE\n  this.readable = this._read !== NOT_READABLE\n  this.writable = this._write !== NOT_WRITABLE\n  this.deletable = this._del !== NOT_DELETABLE\n  this.statable = this._stat !== NOT_STATABLE\n}\n\ninherits(RandomAccess, events.EventEmitter)\n\nRandomAccess.prototype.open = function (cb) {\n  if (!cb) cb = noop\n  if (this.opened && !this._needsOpen) return process.nextTick(cb, null)\n  queueAndRun(this, new Request(this, 0, 0, 0, null, cb))\n}\n\nRandomAccess.prototype._open = defaultImpl(null)\nRandomAccess.prototype._openReadonly = NO_OPEN_READABLE\n\nRandomAccess.prototype.read = function (offset, size, cb) {\n  this.run(new Request(this, 1, offset, size, null, cb))\n}\n\nRandomAccess.prototype._read = NOT_READABLE\n\nRandomAccess.prototype.write = function (offset, data, cb) {\n  if (!cb) cb = noop\n  openWritable(this)\n  this.run(new Request(this, 2, offset, data.length, data, cb))\n}\n\nRandomAccess.prototype._write = NOT_WRITABLE\n\nRandomAccess.prototype.del = function (offset, size, cb) {\n  if (!cb) cb = noop\n  openWritable(this)\n  this.run(new Request(this, 3, offset, size, null, cb))\n}\n\nRandomAccess.prototype._del = NOT_DELETABLE\n\nRandomAccess.prototype.stat = function (cb) {\n  this.run(new Request(this, 4, 0, 0, null, cb))\n}\n\nRandomAccess.prototype._stat = NOT_STATABLE\n\nRandomAccess.prototype.close = function (cb) {\n  if (!cb) cb = noop\n  if (this.closed) return process.nextTick(cb, null)\n  queueAndRun(this, new Request(this, 5, 0, 0, null, cb))\n}\n\nRandomAccess.prototype._close = defaultImpl(null)\n\nRandomAccess.prototype.destroy = function (cb) {\n  if (!cb) cb = noop\n  if (!this.closed) this.close(noop)\n  queueAndRun(this, new Request(this, 6, 0, 0, null, cb))\n}\n\nRandomAccess.prototype._destroy = defaultImpl(null)\n\nRandomAccess.prototype.run = function (req) {\n  if (this._needsOpen) this.open(noop)\n  if (this._queued.length) this._queued.push(req)\n  else req._run()\n}\n\nfunction noop () {}\n\nfunction Request (self, type, offset, size, data, cb) {\n  this.type = type\n  this.offset = offset\n  this.data = data\n  this.size = size\n  this.storage = self\n\n  this._sync = false\n  this._callback = cb\n  this._openError = null\n}\n\nRequest.prototype._maybeOpenError = function (err) {\n  if (this.type !== 0) return\n  var queued = this.storage._queued\n  for (var i = 0; i < queued.length; i++) queued[i]._openError = err\n}\n\nRequest.prototype._unqueue = function (err) {\n  var ra = this.storage\n  var queued = ra._queued\n\n  if (!err) {\n    switch (this.type) {\n      case 0:\n        if (!ra.opened) {\n          ra.opened = true\n          ra.emit('open')\n        }\n        break\n\n      case 5:\n        if (!ra.closed) {\n          ra.closed = true\n          ra.emit('close')\n        }\n        break\n\n      case 6:\n        if (!ra.destroyed) {\n          ra.destroyed = true\n          ra.emit('destroy')\n        }\n        break\n    }\n  } else {\n    this._maybeOpenError(err)\n  }\n\n  if (queued.length && queued[0] === this) queued.shift()\n  if (!--ra._pending && queued.length) queued[0]._run()\n}\n\nRequest.prototype.callback = function (err, val) {\n  if (this._sync) return nextTick(this, err, val)\n  this._unqueue(err)\n  this._callback(err, val)\n}\n\nRequest.prototype._openAndNotClosed = function () {\n  var ra = this.storage\n  if (ra.opened && !ra.closed) return true\n  if (!ra.opened) nextTick(this, this._openError || new Error('Not opened'))\n  else if (ra.closed) nextTick(this, new Error('Closed'))\n  return false\n}\n\nRequest.prototype._open = function () {\n  var ra = this.storage\n\n  if (ra.opened && !ra._needsOpen) return nextTick(this, null)\n  if (ra.closed) return nextTick(this, new Error('Closed'))\n\n  ra._needsOpen = false\n  if (ra.preferReadonly) ra._openReadonly(this)\n  else ra._open(this)\n}\n\nRequest.prototype._run = function () {\n  var ra = this.storage\n  ra._pending++\n\n  this._sync = true\n\n  switch (this.type) {\n    case 0:\n      this._open()\n      break\n\n    case 1:\n      if (this._openAndNotClosed()) ra._read(this)\n      break\n\n    case 2:\n      if (this._openAndNotClosed()) ra._write(this)\n      break\n\n    case 3:\n      if (this._openAndNotClosed()) ra._del(this)\n      break\n\n    case 4:\n      if (this._openAndNotClosed()) ra._stat(this)\n      break\n\n    case 5:\n      if (ra.closed || !ra.opened) nextTick(this, null)\n      else ra._close(this)\n      break\n\n    case 6:\n      if (ra.destroyed) nextTick(this, null)\n      else ra._destroy(this)\n      break\n  }\n\n  this._sync = false\n}\n\nfunction queueAndRun (self, req) {\n  self._queued.push(req)\n  if (!self._pending) req._run()\n}\n\nfunction openWritable (self) {\n  if (self.preferReadonly) {\n    self._needsOpen = true\n    self.preferReadonly = false\n  }\n}\n\nfunction defaultImpl (err) {\n  return overridable\n\n  function overridable (req) {\n    nextTick(req, err)\n  }\n}\n\nfunction nextTick (req, err, val) {\n  process.nextTick(nextTickCallback, req, err, val)\n}\n\nfunction nextTickCallback (req, err, val) {\n  req.callback(err, val)\n}\n","start":1670465470315,"end":1670465470395},{"name":"vite:react-babel","result":"var events = require('events')\nvar inherits = require('inherits')\n\nvar NOT_READABLE = defaultImpl(new Error('Not readable'))\nvar NOT_WRITABLE = defaultImpl(new Error('Not writable'))\nvar NOT_DELETABLE = defaultImpl(new Error('Not deletable'))\nvar NOT_STATABLE = defaultImpl(new Error('Not statable'))\nvar NO_OPEN_READABLE = defaultImpl(new Error('No readonly open'))\n\nmodule.exports = RandomAccess\n\nfunction RandomAccess (opts) {\n  if (!(this instanceof RandomAccess)) return new RandomAccess(opts)\n  events.EventEmitter.call(this)\n\n  this._queued = []\n  this._pending = 0\n  this._needsOpen = true\n\n  this.opened = false\n  this.closed = false\n  this.destroyed = false\n\n  if (opts) {\n    if (opts.openReadonly) this._openReadonly = opts.openReadonly\n    if (opts.open) this._open = opts.open\n    if (opts.read) this._read = opts.read\n    if (opts.write) this._write = opts.write\n    if (opts.del) this._del = opts.del\n    if (opts.stat) this._stat = opts.stat\n    if (opts.close) this._close = opts.close\n    if (opts.destroy) this._destroy = opts.destroy\n  }\n\n  this.preferReadonly = this._openReadonly !== NO_OPEN_READABLE\n  this.readable = this._read !== NOT_READABLE\n  this.writable = this._write !== NOT_WRITABLE\n  this.deletable = this._del !== NOT_DELETABLE\n  this.statable = this._stat !== NOT_STATABLE\n}\n\ninherits(RandomAccess, events.EventEmitter)\n\nRandomAccess.prototype.open = function (cb) {\n  if (!cb) cb = noop\n  if (this.opened && !this._needsOpen) return process.nextTick(cb, null)\n  queueAndRun(this, new Request(this, 0, 0, 0, null, cb))\n}\n\nRandomAccess.prototype._open = defaultImpl(null)\nRandomAccess.prototype._openReadonly = NO_OPEN_READABLE\n\nRandomAccess.prototype.read = function (offset, size, cb) {\n  this.run(new Request(this, 1, offset, size, null, cb))\n}\n\nRandomAccess.prototype._read = NOT_READABLE\n\nRandomAccess.prototype.write = function (offset, data, cb) {\n  if (!cb) cb = noop\n  openWritable(this)\n  this.run(new Request(this, 2, offset, data.length, data, cb))\n}\n\nRandomAccess.prototype._write = NOT_WRITABLE\n\nRandomAccess.prototype.del = function (offset, size, cb) {\n  if (!cb) cb = noop\n  openWritable(this)\n  this.run(new Request(this, 3, offset, size, null, cb))\n}\n\nRandomAccess.prototype._del = NOT_DELETABLE\n\nRandomAccess.prototype.stat = function (cb) {\n  this.run(new Request(this, 4, 0, 0, null, cb))\n}\n\nRandomAccess.prototype._stat = NOT_STATABLE\n\nRandomAccess.prototype.close = function (cb) {\n  if (!cb) cb = noop\n  if (this.closed) return process.nextTick(cb, null)\n  queueAndRun(this, new Request(this, 5, 0, 0, null, cb))\n}\n\nRandomAccess.prototype._close = defaultImpl(null)\n\nRandomAccess.prototype.destroy = function (cb) {\n  if (!cb) cb = noop\n  if (!this.closed) this.close(noop)\n  queueAndRun(this, new Request(this, 6, 0, 0, null, cb))\n}\n\nRandomAccess.prototype._destroy = defaultImpl(null)\n\nRandomAccess.prototype.run = function (req) {\n  if (this._needsOpen) this.open(noop)\n  if (this._queued.length) this._queued.push(req)\n  else req._run()\n}\n\nfunction noop () {}\n\nfunction Request (self, type, offset, size, data, cb) {\n  this.type = type\n  this.offset = offset\n  this.data = data\n  this.size = size\n  this.storage = self\n\n  this._sync = false\n  this._callback = cb\n  this._openError = null\n}\n\nRequest.prototype._maybeOpenError = function (err) {\n  if (this.type !== 0) return\n  var queued = this.storage._queued\n  for (var i = 0; i < queued.length; i++) queued[i]._openError = err\n}\n\nRequest.prototype._unqueue = function (err) {\n  var ra = this.storage\n  var queued = ra._queued\n\n  if (!err) {\n    switch (this.type) {\n      case 0:\n        if (!ra.opened) {\n          ra.opened = true\n          ra.emit('open')\n        }\n        break\n\n      case 5:\n        if (!ra.closed) {\n          ra.closed = true\n          ra.emit('close')\n        }\n        break\n\n      case 6:\n        if (!ra.destroyed) {\n          ra.destroyed = true\n          ra.emit('destroy')\n        }\n        break\n    }\n  } else {\n    this._maybeOpenError(err)\n  }\n\n  if (queued.length && queued[0] === this) queued.shift()\n  if (!--ra._pending && queued.length) queued[0]._run()\n}\n\nRequest.prototype.callback = function (err, val) {\n  if (this._sync) return nextTick(this, err, val)\n  this._unqueue(err)\n  this._callback(err, val)\n}\n\nRequest.prototype._openAndNotClosed = function () {\n  var ra = this.storage\n  if (ra.opened && !ra.closed) return true\n  if (!ra.opened) nextTick(this, this._openError || new Error('Not opened'))\n  else if (ra.closed) nextTick(this, new Error('Closed'))\n  return false\n}\n\nRequest.prototype._open = function () {\n  var ra = this.storage\n\n  if (ra.opened && !ra._needsOpen) return nextTick(this, null)\n  if (ra.closed) return nextTick(this, new Error('Closed'))\n\n  ra._needsOpen = false\n  if (ra.preferReadonly) ra._openReadonly(this)\n  else ra._open(this)\n}\n\nRequest.prototype._run = function () {\n  var ra = this.storage\n  ra._pending++\n\n  this._sync = true\n\n  switch (this.type) {\n    case 0:\n      this._open()\n      break\n\n    case 1:\n      if (this._openAndNotClosed()) ra._read(this)\n      break\n\n    case 2:\n      if (this._openAndNotClosed()) ra._write(this)\n      break\n\n    case 3:\n      if (this._openAndNotClosed()) ra._del(this)\n      break\n\n    case 4:\n      if (this._openAndNotClosed()) ra._stat(this)\n      break\n\n    case 5:\n      if (ra.closed || !ra.opened) nextTick(this, null)\n      else ra._close(this)\n      break\n\n    case 6:\n      if (ra.destroyed) nextTick(this, null)\n      else ra._destroy(this)\n      break\n  }\n\n  this._sync = false\n}\n\nfunction queueAndRun (self, req) {\n  self._queued.push(req)\n  if (!self._pending) req._run()\n}\n\nfunction openWritable (self) {\n  if (self.preferReadonly) {\n    self._needsOpen = true\n    self.preferReadonly = false\n  }\n}\n\nfunction defaultImpl (err) {\n  return overridable\n\n  function overridable (req) {\n    nextTick(req, err)\n  }\n}\n\nfunction nextTick (req, err, val) {\n  process.nextTick(nextTickCallback, req, err, val)\n}\n\nfunction nextTickCallback (req, err, val) {\n  req.callback(err, val)\n}\n","start":1670465470395,"end":1670465470395,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/events@3.3.0/node_modules/events/events.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js?commonjs-proxy\";\n\nvar randomAccessStorage;\nvar hasRequiredRandomAccessStorage;\n\nfunction requireRandomAccessStorage () {\n\tif (hasRequiredRandomAccessStorage) return randomAccessStorage;\n\thasRequiredRandomAccessStorage = 1;\n\tvar events = require$$0\n\tvar inherits = require$$1\n\n\tvar NOT_READABLE = defaultImpl(new Error('Not readable'))\n\tvar NOT_WRITABLE = defaultImpl(new Error('Not writable'))\n\tvar NOT_DELETABLE = defaultImpl(new Error('Not deletable'))\n\tvar NOT_STATABLE = defaultImpl(new Error('Not statable'))\n\tvar NO_OPEN_READABLE = defaultImpl(new Error('No readonly open'))\n\n\trandomAccessStorage = RandomAccess\n\n\tfunction RandomAccess (opts) {\n\t  if (!(this instanceof RandomAccess)) return new RandomAccess(opts)\n\t  events.EventEmitter.call(this)\n\n\t  this._queued = []\n\t  this._pending = 0\n\t  this._needsOpen = true\n\n\t  this.opened = false\n\t  this.closed = false\n\t  this.destroyed = false\n\n\t  if (opts) {\n\t    if (opts.openReadonly) this._openReadonly = opts.openReadonly\n\t    if (opts.open) this._open = opts.open\n\t    if (opts.read) this._read = opts.read\n\t    if (opts.write) this._write = opts.write\n\t    if (opts.del) this._del = opts.del\n\t    if (opts.stat) this._stat = opts.stat\n\t    if (opts.close) this._close = opts.close\n\t    if (opts.destroy) this._destroy = opts.destroy\n\t  }\n\n\t  this.preferReadonly = this._openReadonly !== NO_OPEN_READABLE\n\t  this.readable = this._read !== NOT_READABLE\n\t  this.writable = this._write !== NOT_WRITABLE\n\t  this.deletable = this._del !== NOT_DELETABLE\n\t  this.statable = this._stat !== NOT_STATABLE\n\t}\n\n\tinherits(RandomAccess, events.EventEmitter)\n\n\tRandomAccess.prototype.open = function (cb) {\n\t  if (!cb) cb = noop\n\t  if (this.opened && !this._needsOpen) return process.nextTick(cb, null)\n\t  queueAndRun(this, new Request(this, 0, 0, 0, null, cb))\n\t}\n\n\tRandomAccess.prototype._open = defaultImpl(null)\n\tRandomAccess.prototype._openReadonly = NO_OPEN_READABLE\n\n\tRandomAccess.prototype.read = function (offset, size, cb) {\n\t  this.run(new Request(this, 1, offset, size, null, cb))\n\t}\n\n\tRandomAccess.prototype._read = NOT_READABLE\n\n\tRandomAccess.prototype.write = function (offset, data, cb) {\n\t  if (!cb) cb = noop\n\t  openWritable(this)\n\t  this.run(new Request(this, 2, offset, data.length, data, cb))\n\t}\n\n\tRandomAccess.prototype._write = NOT_WRITABLE\n\n\tRandomAccess.prototype.del = function (offset, size, cb) {\n\t  if (!cb) cb = noop\n\t  openWritable(this)\n\t  this.run(new Request(this, 3, offset, size, null, cb))\n\t}\n\n\tRandomAccess.prototype._del = NOT_DELETABLE\n\n\tRandomAccess.prototype.stat = function (cb) {\n\t  this.run(new Request(this, 4, 0, 0, null, cb))\n\t}\n\n\tRandomAccess.prototype._stat = NOT_STATABLE\n\n\tRandomAccess.prototype.close = function (cb) {\n\t  if (!cb) cb = noop\n\t  if (this.closed) return process.nextTick(cb, null)\n\t  queueAndRun(this, new Request(this, 5, 0, 0, null, cb))\n\t}\n\n\tRandomAccess.prototype._close = defaultImpl(null)\n\n\tRandomAccess.prototype.destroy = function (cb) {\n\t  if (!cb) cb = noop\n\t  if (!this.closed) this.close(noop)\n\t  queueAndRun(this, new Request(this, 6, 0, 0, null, cb))\n\t}\n\n\tRandomAccess.prototype._destroy = defaultImpl(null)\n\n\tRandomAccess.prototype.run = function (req) {\n\t  if (this._needsOpen) this.open(noop)\n\t  if (this._queued.length) this._queued.push(req)\n\t  else req._run()\n\t}\n\n\tfunction noop () {}\n\n\tfunction Request (self, type, offset, size, data, cb) {\n\t  this.type = type\n\t  this.offset = offset\n\t  this.data = data\n\t  this.size = size\n\t  this.storage = self\n\n\t  this._sync = false\n\t  this._callback = cb\n\t  this._openError = null\n\t}\n\n\tRequest.prototype._maybeOpenError = function (err) {\n\t  if (this.type !== 0) return\n\t  var queued = this.storage._queued\n\t  for (var i = 0; i < queued.length; i++) queued[i]._openError = err\n\t}\n\n\tRequest.prototype._unqueue = function (err) {\n\t  var ra = this.storage\n\t  var queued = ra._queued\n\n\t  if (!err) {\n\t    switch (this.type) {\n\t      case 0:\n\t        if (!ra.opened) {\n\t          ra.opened = true\n\t          ra.emit('open')\n\t        }\n\t        break\n\n\t      case 5:\n\t        if (!ra.closed) {\n\t          ra.closed = true\n\t          ra.emit('close')\n\t        }\n\t        break\n\n\t      case 6:\n\t        if (!ra.destroyed) {\n\t          ra.destroyed = true\n\t          ra.emit('destroy')\n\t        }\n\t        break\n\t    }\n\t  } else {\n\t    this._maybeOpenError(err)\n\t  }\n\n\t  if (queued.length && queued[0] === this) queued.shift()\n\t  if (!--ra._pending && queued.length) queued[0]._run()\n\t}\n\n\tRequest.prototype.callback = function (err, val) {\n\t  if (this._sync) return nextTick(this, err, val)\n\t  this._unqueue(err)\n\t  this._callback(err, val)\n\t}\n\n\tRequest.prototype._openAndNotClosed = function () {\n\t  var ra = this.storage\n\t  if (ra.opened && !ra.closed) return true\n\t  if (!ra.opened) nextTick(this, this._openError || new Error('Not opened'))\n\t  else if (ra.closed) nextTick(this, new Error('Closed'))\n\t  return false\n\t}\n\n\tRequest.prototype._open = function () {\n\t  var ra = this.storage\n\n\t  if (ra.opened && !ra._needsOpen) return nextTick(this, null)\n\t  if (ra.closed) return nextTick(this, new Error('Closed'))\n\n\t  ra._needsOpen = false\n\t  if (ra.preferReadonly) ra._openReadonly(this)\n\t  else ra._open(this)\n\t}\n\n\tRequest.prototype._run = function () {\n\t  var ra = this.storage\n\t  ra._pending++\n\n\t  this._sync = true\n\n\t  switch (this.type) {\n\t    case 0:\n\t      this._open()\n\t      break\n\n\t    case 1:\n\t      if (this._openAndNotClosed()) ra._read(this)\n\t      break\n\n\t    case 2:\n\t      if (this._openAndNotClosed()) ra._write(this)\n\t      break\n\n\t    case 3:\n\t      if (this._openAndNotClosed()) ra._del(this)\n\t      break\n\n\t    case 4:\n\t      if (this._openAndNotClosed()) ra._stat(this)\n\t      break\n\n\t    case 5:\n\t      if (ra.closed || !ra.opened) nextTick(this, null)\n\t      else ra._close(this)\n\t      break\n\n\t    case 6:\n\t      if (ra.destroyed) nextTick(this, null)\n\t      else ra._destroy(this)\n\t      break\n\t  }\n\n\t  this._sync = false\n\t}\n\n\tfunction queueAndRun (self, req) {\n\t  self._queued.push(req)\n\t  if (!self._pending) req._run()\n\t}\n\n\tfunction openWritable (self) {\n\t  if (self.preferReadonly) {\n\t    self._needsOpen = true\n\t    self.preferReadonly = false\n\t  }\n\t}\n\n\tfunction defaultImpl (err) {\n\t  return overridable\n\n\t  function overridable (req) {\n\t    nextTick(req, err)\n\t  }\n\t}\n\n\tfunction nextTick (req, err, val) {\n\t  process.nextTick(nextTickCallback, req, err, val)\n\t}\n\n\tfunction nextTickCallback (req, err, val) {\n\t  req.callback(err, val)\n\t}\n\treturn randomAccessStorage;\n}\n\nexport { requireRandomAccessStorage as __require };","start":1670465470395,"end":1670465470397,"order":"normal"},{"name":"polyfill-node","result":"import { default as process } from '\u0000polyfill-node.process';\n\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/events@3.3.0/node_modules/events/events.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js?commonjs-proxy\";\n\nvar randomAccessStorage;\nvar hasRequiredRandomAccessStorage;\n\nfunction requireRandomAccessStorage () {\n\tif (hasRequiredRandomAccessStorage) return randomAccessStorage;\n\thasRequiredRandomAccessStorage = 1;\n\tvar events = require$$0\n\tvar inherits = require$$1\n\n\tvar NOT_READABLE = defaultImpl(new Error('Not readable'))\n\tvar NOT_WRITABLE = defaultImpl(new Error('Not writable'))\n\tvar NOT_DELETABLE = defaultImpl(new Error('Not deletable'))\n\tvar NOT_STATABLE = defaultImpl(new Error('Not statable'))\n\tvar NO_OPEN_READABLE = defaultImpl(new Error('No readonly open'))\n\n\trandomAccessStorage = RandomAccess\n\n\tfunction RandomAccess (opts) {\n\t  if (!(this instanceof RandomAccess)) return new RandomAccess(opts)\n\t  events.EventEmitter.call(this)\n\n\t  this._queued = []\n\t  this._pending = 0\n\t  this._needsOpen = true\n\n\t  this.opened = false\n\t  this.closed = false\n\t  this.destroyed = false\n\n\t  if (opts) {\n\t    if (opts.openReadonly) this._openReadonly = opts.openReadonly\n\t    if (opts.open) this._open = opts.open\n\t    if (opts.read) this._read = opts.read\n\t    if (opts.write) this._write = opts.write\n\t    if (opts.del) this._del = opts.del\n\t    if (opts.stat) this._stat = opts.stat\n\t    if (opts.close) this._close = opts.close\n\t    if (opts.destroy) this._destroy = opts.destroy\n\t  }\n\n\t  this.preferReadonly = this._openReadonly !== NO_OPEN_READABLE\n\t  this.readable = this._read !== NOT_READABLE\n\t  this.writable = this._write !== NOT_WRITABLE\n\t  this.deletable = this._del !== NOT_DELETABLE\n\t  this.statable = this._stat !== NOT_STATABLE\n\t}\n\n\tinherits(RandomAccess, events.EventEmitter)\n\n\tRandomAccess.prototype.open = function (cb) {\n\t  if (!cb) cb = noop\n\t  if (this.opened && !this._needsOpen) return process.nextTick(cb, null)\n\t  queueAndRun(this, new Request(this, 0, 0, 0, null, cb))\n\t}\n\n\tRandomAccess.prototype._open = defaultImpl(null)\n\tRandomAccess.prototype._openReadonly = NO_OPEN_READABLE\n\n\tRandomAccess.prototype.read = function (offset, size, cb) {\n\t  this.run(new Request(this, 1, offset, size, null, cb))\n\t}\n\n\tRandomAccess.prototype._read = NOT_READABLE\n\n\tRandomAccess.prototype.write = function (offset, data, cb) {\n\t  if (!cb) cb = noop\n\t  openWritable(this)\n\t  this.run(new Request(this, 2, offset, data.length, data, cb))\n\t}\n\n\tRandomAccess.prototype._write = NOT_WRITABLE\n\n\tRandomAccess.prototype.del = function (offset, size, cb) {\n\t  if (!cb) cb = noop\n\t  openWritable(this)\n\t  this.run(new Request(this, 3, offset, size, null, cb))\n\t}\n\n\tRandomAccess.prototype._del = NOT_DELETABLE\n\n\tRandomAccess.prototype.stat = function (cb) {\n\t  this.run(new Request(this, 4, 0, 0, null, cb))\n\t}\n\n\tRandomAccess.prototype._stat = NOT_STATABLE\n\n\tRandomAccess.prototype.close = function (cb) {\n\t  if (!cb) cb = noop\n\t  if (this.closed) return process.nextTick(cb, null)\n\t  queueAndRun(this, new Request(this, 5, 0, 0, null, cb))\n\t}\n\n\tRandomAccess.prototype._close = defaultImpl(null)\n\n\tRandomAccess.prototype.destroy = function (cb) {\n\t  if (!cb) cb = noop\n\t  if (!this.closed) this.close(noop)\n\t  queueAndRun(this, new Request(this, 6, 0, 0, null, cb))\n\t}\n\n\tRandomAccess.prototype._destroy = defaultImpl(null)\n\n\tRandomAccess.prototype.run = function (req) {\n\t  if (this._needsOpen) this.open(noop)\n\t  if (this._queued.length) this._queued.push(req)\n\t  else req._run()\n\t}\n\n\tfunction noop () {}\n\n\tfunction Request (self, type, offset, size, data, cb) {\n\t  this.type = type\n\t  this.offset = offset\n\t  this.data = data\n\t  this.size = size\n\t  this.storage = self\n\n\t  this._sync = false\n\t  this._callback = cb\n\t  this._openError = null\n\t}\n\n\tRequest.prototype._maybeOpenError = function (err) {\n\t  if (this.type !== 0) return\n\t  var queued = this.storage._queued\n\t  for (var i = 0; i < queued.length; i++) queued[i]._openError = err\n\t}\n\n\tRequest.prototype._unqueue = function (err) {\n\t  var ra = this.storage\n\t  var queued = ra._queued\n\n\t  if (!err) {\n\t    switch (this.type) {\n\t      case 0:\n\t        if (!ra.opened) {\n\t          ra.opened = true\n\t          ra.emit('open')\n\t        }\n\t        break\n\n\t      case 5:\n\t        if (!ra.closed) {\n\t          ra.closed = true\n\t          ra.emit('close')\n\t        }\n\t        break\n\n\t      case 6:\n\t        if (!ra.destroyed) {\n\t          ra.destroyed = true\n\t          ra.emit('destroy')\n\t        }\n\t        break\n\t    }\n\t  } else {\n\t    this._maybeOpenError(err)\n\t  }\n\n\t  if (queued.length && queued[0] === this) queued.shift()\n\t  if (!--ra._pending && queued.length) queued[0]._run()\n\t}\n\n\tRequest.prototype.callback = function (err, val) {\n\t  if (this._sync) return nextTick(this, err, val)\n\t  this._unqueue(err)\n\t  this._callback(err, val)\n\t}\n\n\tRequest.prototype._openAndNotClosed = function () {\n\t  var ra = this.storage\n\t  if (ra.opened && !ra.closed) return true\n\t  if (!ra.opened) nextTick(this, this._openError || new Error('Not opened'))\n\t  else if (ra.closed) nextTick(this, new Error('Closed'))\n\t  return false\n\t}\n\n\tRequest.prototype._open = function () {\n\t  var ra = this.storage\n\n\t  if (ra.opened && !ra._needsOpen) return nextTick(this, null)\n\t  if (ra.closed) return nextTick(this, new Error('Closed'))\n\n\t  ra._needsOpen = false\n\t  if (ra.preferReadonly) ra._openReadonly(this)\n\t  else ra._open(this)\n\t}\n\n\tRequest.prototype._run = function () {\n\t  var ra = this.storage\n\t  ra._pending++\n\n\t  this._sync = true\n\n\t  switch (this.type) {\n\t    case 0:\n\t      this._open()\n\t      break\n\n\t    case 1:\n\t      if (this._openAndNotClosed()) ra._read(this)\n\t      break\n\n\t    case 2:\n\t      if (this._openAndNotClosed()) ra._write(this)\n\t      break\n\n\t    case 3:\n\t      if (this._openAndNotClosed()) ra._del(this)\n\t      break\n\n\t    case 4:\n\t      if (this._openAndNotClosed()) ra._stat(this)\n\t      break\n\n\t    case 5:\n\t      if (ra.closed || !ra.opened) nextTick(this, null)\n\t      else ra._close(this)\n\t      break\n\n\t    case 6:\n\t      if (ra.destroyed) nextTick(this, null)\n\t      else ra._destroy(this)\n\t      break\n\t  }\n\n\t  this._sync = false\n\t}\n\n\tfunction queueAndRun (self, req) {\n\t  self._queued.push(req)\n\t  if (!self._pending) req._run()\n\t}\n\n\tfunction openWritable (self) {\n\t  if (self.preferReadonly) {\n\t    self._needsOpen = true\n\t    self.preferReadonly = false\n\t  }\n\t}\n\n\tfunction defaultImpl (err) {\n\t  return overridable\n\n\t  function overridable (req) {\n\t    nextTick(req, err)\n\t  }\n\t}\n\n\tfunction nextTick (req, err, val) {\n\t  process.nextTick(nextTickCallback, req, err, val)\n\t}\n\n\tfunction nextTickCallback (req, err, val) {\n\t  req.callback(err, val)\n\t}\n\treturn randomAccessStorage;\n}\n\nexport { requireRandomAccessStorage as __require };","start":1670465470397,"end":1670465470400,"order":"normal"}]}
