{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/use-code-input@0.0.2_biqbaboplfbrettd7655fr4n2y/node_modules/use-code-input/dist/esm/index.js","transforms":[{"name":"vite:load-fallback","result":"import { useState, useRef, useCallback, useLayoutEffect } from 'react';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\n\nvar transform = function (_a) {\n    var _b;\n    var current = _a.current, previous = _a.previous, value = _a.value;\n    if (current[0] !== current[1])\n        return null;\n    if (typeof current[0] !== 'number')\n        return null;\n    if (typeof current[1] !== 'number')\n        return null;\n    var start = current[0], end = current[1];\n    if (start > 0 && previous[0] === start && previous[1] === start + 1) {\n        return [start - 1, end];\n    }\n    if ((_b = value[start]) === null || _b === void 0 ? void 0 : _b.length) {\n        return [start, end + 1];\n    }\n    // TODO: add switch prop for this behaviour\n    // if (eq(current, [input.maxLength, input.maxLength])) {\n    //  return [input.maxLength -1, input.maxLength]\n    // }\n    return null;\n};\nvar getSelectionState = function (input) {\n    return [+input.selectionStart, +input.selectionEnd];\n};\nvar ZERO = [0, 0];\nvar eq = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n};\nvar useCodeInputHandler = function (_a) {\n    var inputRef = _a.inputRef, previousRef = _a.previousRef, setSelection = _a.setSelection;\n    return useCallback(function (_a) {\n        var type = _a.type;\n        var input = inputRef.current;\n        var previous = previousRef.current;\n        if (!previous || !input)\n            return;\n        var direction = input.selectionDirection, value = input.value;\n        var current = getSelectionState(input);\n        var save = function (selection) {\n            if (eq(selection, previous)) {\n                if (eq(selection, ZERO))\n                    return;\n                if (eq(selection, getSelectionState(input)))\n                    return;\n            }\n            previousRef.current = selection;\n            setSelection(function (state) { return (eq(state, selection) ? state : selection); });\n            input.setSelectionRange.apply(input, __spreadArray(__spreadArray([], selection, false), [direction || undefined], false));\n        };\n        if (type === 'selectionchange' && document.activeElement !== input) {\n            return save([value.length, value.length]);\n        }\n        save(transform({ previous: previous, current: current, direction: direction, value: value }) || current);\n    }, [inputRef, previousRef, setSelection]);\n};\nvar useCodeInputEffect = function (_a) {\n    var inputRef = _a.inputRef, previousRef = _a.previousRef, handler = _a.handler;\n    useLayoutEffect(function () {\n        var input = inputRef.current;\n        if (previousRef.current === undefined && input) {\n            previousRef.current = getSelectionState(input);\n        }\n        var handlerRef = handler; // closure ref to added handler\n        input === null || input === void 0 ? void 0 : input.addEventListener('input', handlerRef);\n        document.addEventListener('selectionchange', handlerRef);\n        return function () {\n            input === null || input === void 0 ? void 0 : input.removeEventListener('input', handlerRef);\n            document.removeEventListener('selectionchange', handlerRef);\n        };\n    }, [inputRef, handler, previousRef]);\n};\nvar useCodeInput = function (inputRef) {\n    var _a = useState(ZERO), selection = _a[0], setSelection = _a[1];\n    var previousRef = useRef();\n    var handler = useCodeInputHandler({ inputRef: inputRef, previousRef: previousRef, setSelection: setSelection });\n    useCodeInputEffect({ inputRef: inputRef, previousRef: previousRef, handler: handler });\n    return selection;\n};\n\nexport { useCodeInput };\n//# sourceMappingURL=index.js.map\n","start":1670465467607,"end":1670465468063},{"name":"vite:react-babel","result":"import { useState, useRef, useCallback, useLayoutEffect } from 'react';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\n\nvar transform = function (_a) {\n    var _b;\n    var current = _a.current, previous = _a.previous, value = _a.value;\n    if (current[0] !== current[1])\n        return null;\n    if (typeof current[0] !== 'number')\n        return null;\n    if (typeof current[1] !== 'number')\n        return null;\n    var start = current[0], end = current[1];\n    if (start > 0 && previous[0] === start && previous[1] === start + 1) {\n        return [start - 1, end];\n    }\n    if ((_b = value[start]) === null || _b === void 0 ? void 0 : _b.length) {\n        return [start, end + 1];\n    }\n    // TODO: add switch prop for this behaviour\n    // if (eq(current, [input.maxLength, input.maxLength])) {\n    //  return [input.maxLength -1, input.maxLength]\n    // }\n    return null;\n};\nvar getSelectionState = function (input) {\n    return [+input.selectionStart, +input.selectionEnd];\n};\nvar ZERO = [0, 0];\nvar eq = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n};\nvar useCodeInputHandler = function (_a) {\n    var inputRef = _a.inputRef, previousRef = _a.previousRef, setSelection = _a.setSelection;\n    return useCallback(function (_a) {\n        var type = _a.type;\n        var input = inputRef.current;\n        var previous = previousRef.current;\n        if (!previous || !input)\n            return;\n        var direction = input.selectionDirection, value = input.value;\n        var current = getSelectionState(input);\n        var save = function (selection) {\n            if (eq(selection, previous)) {\n                if (eq(selection, ZERO))\n                    return;\n                if (eq(selection, getSelectionState(input)))\n                    return;\n            }\n            previousRef.current = selection;\n            setSelection(function (state) { return (eq(state, selection) ? state : selection); });\n            input.setSelectionRange.apply(input, __spreadArray(__spreadArray([], selection, false), [direction || undefined], false));\n        };\n        if (type === 'selectionchange' && document.activeElement !== input) {\n            return save([value.length, value.length]);\n        }\n        save(transform({ previous: previous, current: current, direction: direction, value: value }) || current);\n    }, [inputRef, previousRef, setSelection]);\n};\nvar useCodeInputEffect = function (_a) {\n    var inputRef = _a.inputRef, previousRef = _a.previousRef, handler = _a.handler;\n    useLayoutEffect(function () {\n        var input = inputRef.current;\n        if (previousRef.current === undefined && input) {\n            previousRef.current = getSelectionState(input);\n        }\n        var handlerRef = handler; // closure ref to added handler\n        input === null || input === void 0 ? void 0 : input.addEventListener('input', handlerRef);\n        document.addEventListener('selectionchange', handlerRef);\n        return function () {\n            input === null || input === void 0 ? void 0 : input.removeEventListener('input', handlerRef);\n            document.removeEventListener('selectionchange', handlerRef);\n        };\n    }, [inputRef, handler, previousRef]);\n};\nvar useCodeInput = function (inputRef) {\n    var _a = useState(ZERO), selection = _a[0], setSelection = _a[1];\n    var previousRef = useRef();\n    var handler = useCodeInputHandler({ inputRef: inputRef, previousRef: previousRef, setSelection: setSelection });\n    useCodeInputEffect({ inputRef: inputRef, previousRef: previousRef, handler: handler });\n    return selection;\n};\n\nexport { useCodeInput };\n//# sourceMappingURL=index.js.map\n","start":1670465468063,"end":1670465468063,"order":"pre"}]}
