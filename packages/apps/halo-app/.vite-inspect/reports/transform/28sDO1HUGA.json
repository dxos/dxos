{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_stream.js","transforms":[{"name":"vite:load-fallback","result":"/* eslint-disable camelcase */\nconst xsalsa20 = require('xsalsa20')\n\nif (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')\n\nexports.crypto_stream_KEYBYTES = 32\nexports.crypto_stream_NONCEBYTES = 24\nexports.crypto_stream_PRIMITIVE = 'xsalsa20'\nexports.crypto_stream_xsalsa20_MESSAGEBYTES_MAX = Number.MAX_SAFE_INTEGER\n\nexports.crypto_stream = function (c, nonce, key) {\n  c.fill(0)\n  exports.crypto_stream_xor(c, c, nonce, key)\n}\n\nexports.crypto_stream_xor = function (c, m, nonce, key) {\n  const xor = xsalsa20(nonce, key)\n\n  xor.update(m, c)\n  xor.final()\n}\n\nexports.crypto_stream_xor_instance = function (nonce, key) {\n  return new XOR(nonce, key)\n}\n\nfunction XOR (nonce, key) {\n  this._instance = xsalsa20(nonce, key)\n}\n\nXOR.prototype.update = function (out, inp) {\n  this._instance.update(inp, out)\n}\n\nXOR.prototype.final = function () {\n  this._instance.finalize()\n  this._instance = null\n}\n","start":1670465470761,"end":1670465470875},{"name":"vite:react-babel","result":"/* eslint-disable camelcase */\nconst xsalsa20 = require('xsalsa20')\n\nif (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')\n\nexports.crypto_stream_KEYBYTES = 32\nexports.crypto_stream_NONCEBYTES = 24\nexports.crypto_stream_PRIMITIVE = 'xsalsa20'\nexports.crypto_stream_xsalsa20_MESSAGEBYTES_MAX = Number.MAX_SAFE_INTEGER\n\nexports.crypto_stream = function (c, nonce, key) {\n  c.fill(0)\n  exports.crypto_stream_xor(c, c, nonce, key)\n}\n\nexports.crypto_stream_xor = function (c, m, nonce, key) {\n  const xor = xsalsa20(nonce, key)\n\n  xor.update(m, c)\n  xor.final()\n}\n\nexports.crypto_stream_xor_instance = function (nonce, key) {\n  return new XOR(nonce, key)\n}\n\nfunction XOR (nonce, key) {\n  this._instance = xsalsa20(nonce, key)\n}\n\nXOR.prototype.update = function (out, inp) {\n  this._instance.update(inp, out)\n}\n\nXOR.prototype.final = function () {\n  this._instance.finalize()\n  this._instance = null\n}\n","start":1670465470875,"end":1670465470875,"order":"pre"},{"name":"commonjs","result":"/* eslint-disable camelcase */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as crypto_stream } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_stream.js?commonjs-exports\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/xsalsa20@1.2.0/node_modules/xsalsa20/index.js?commonjs-proxy\";\n\n(function (exports) {\n\tconst xsalsa20 = require$$0\n\n\tif (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')\n\n\texports.crypto_stream_KEYBYTES = 32\n\texports.crypto_stream_NONCEBYTES = 24\n\texports.crypto_stream_PRIMITIVE = 'xsalsa20'\n\texports.crypto_stream_xsalsa20_MESSAGEBYTES_MAX = Number.MAX_SAFE_INTEGER\n\n\texports.crypto_stream = function (c, nonce, key) {\n\t  c.fill(0)\n\t  exports.crypto_stream_xor(c, c, nonce, key)\n\t}\n\n\texports.crypto_stream_xor = function (c, m, nonce, key) {\n\t  const xor = xsalsa20(nonce, key)\n\n\t  xor.update(m, c)\n\t  xor.final()\n\t}\n\n\texports.crypto_stream_xor_instance = function (nonce, key) {\n\t  return new XOR(nonce, key)\n\t}\n\n\tfunction XOR (nonce, key) {\n\t  this._instance = xsalsa20(nonce, key)\n\t}\n\n\tXOR.prototype.update = function (out, inp) {\n\t  this._instance.update(inp, out)\n\t}\n\n\tXOR.prototype.final = function () {\n\t  this._instance.finalize()\n\t  this._instance = null\n\t}\n} (crypto_stream));\n\nexport default crypto_stream;\nexport { crypto_stream as __moduleExports };","start":1670465470875,"end":1670465471592,"order":"normal"}]}
