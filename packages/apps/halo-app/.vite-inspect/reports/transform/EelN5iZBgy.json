{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/buffer-json-encoding@1.0.2/node_modules/buffer-json-encoding/index.js","transforms":[{"name":"vite:load-fallback","result":"const BJSON = require('buffer-json')\n\nfunction encode (obj, buf, offset = 0) {\n  const str = BJSON.stringify(obj)\n  const length = Buffer.byteLength(str, 'utf8')\n  if (typeof buf === 'number') {\n    offset = buf\n    buf = Buffer.alloc(offset + length)\n  } else if (typeof buf === 'undefined') {\n    buf = Buffer.alloc(offset + length)\n  }\n  if (buf.length < offset + length) {\n    throw new Error('provided buffer is too small')\n  }\n  buf.write(str, offset, length, 'utf8')\n  encode.bytes = length\n  return buf\n}\n\nfunction decode (buf, start, end) {\n  start = start || 0\n  end = end || buf.length\n  const sliced = buf.slice(start, end)\n  const str = sliced.toString('utf8')\n  decode.bytes = end - start\n  return BJSON.parse(str)\n}\n\nfunction encodingLength (obj) {\n  return encode(obj).length\n}\n\nmodule.exports = { encode, decode, encodingLength }\n","start":1670465468216,"end":1670465468272},{"name":"vite:react-babel","result":"const BJSON = require('buffer-json')\n\nfunction encode (obj, buf, offset = 0) {\n  const str = BJSON.stringify(obj)\n  const length = Buffer.byteLength(str, 'utf8')\n  if (typeof buf === 'number') {\n    offset = buf\n    buf = Buffer.alloc(offset + length)\n  } else if (typeof buf === 'undefined') {\n    buf = Buffer.alloc(offset + length)\n  }\n  if (buf.length < offset + length) {\n    throw new Error('provided buffer is too small')\n  }\n  buf.write(str, offset, length, 'utf8')\n  encode.bytes = length\n  return buf\n}\n\nfunction decode (buf, start, end) {\n  start = start || 0\n  end = end || buf.length\n  const sliced = buf.slice(start, end)\n  const str = sliced.toString('utf8')\n  decode.bytes = end - start\n  return BJSON.parse(str)\n}\n\nfunction encodingLength (obj) {\n  return encode(obj).length\n}\n\nmodule.exports = { encode, decode, encodingLength }\n","start":1670465468272,"end":1670465468272,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/buffer-json@2.0.0/node_modules/buffer-json/index.js?commonjs-proxy\";\n\nconst BJSON = require$$0\n\nfunction encode (obj, buf, offset = 0) {\n  const str = BJSON.stringify(obj)\n  const length = Buffer.byteLength(str, 'utf8')\n  if (typeof buf === 'number') {\n    offset = buf\n    buf = Buffer.alloc(offset + length)\n  } else if (typeof buf === 'undefined') {\n    buf = Buffer.alloc(offset + length)\n  }\n  if (buf.length < offset + length) {\n    throw new Error('provided buffer is too small')\n  }\n  buf.write(str, offset, length, 'utf8')\n  encode.bytes = length\n  return buf\n}\n\nfunction decode (buf, start, end) {\n  start = start || 0\n  end = end || buf.length\n  const sliced = buf.slice(start, end)\n  const str = sliced.toString('utf8')\n  decode.bytes = end - start\n  return BJSON.parse(str)\n}\n\nfunction encodingLength (obj) {\n  return encode(obj).length\n}\n\nvar bufferJsonEncoding = { encode, decode, encodingLength }\n\nexport default bufferJsonEncoding;\nexport { bufferJsonEncoding as __moduleExports };","start":1670465468273,"end":1670465469651,"order":"normal"},{"name":"polyfill-node","result":"import { Buffer as Buffer } from '\u0000polyfill-node.buffer';\n\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/buffer-json@2.0.0/node_modules/buffer-json/index.js?commonjs-proxy\";\n\nconst BJSON = require$$0\n\nfunction encode (obj, buf, offset = 0) {\n  const str = BJSON.stringify(obj)\n  const length = Buffer.byteLength(str, 'utf8')\n  if (typeof buf === 'number') {\n    offset = buf\n    buf = Buffer.alloc(offset + length)\n  } else if (typeof buf === 'undefined') {\n    buf = Buffer.alloc(offset + length)\n  }\n  if (buf.length < offset + length) {\n    throw new Error('provided buffer is too small')\n  }\n  buf.write(str, offset, length, 'utf8')\n  encode.bytes = length\n  return buf\n}\n\nfunction decode (buf, start, end) {\n  start = start || 0\n  end = end || buf.length\n  const sliced = buf.slice(start, end)\n  const str = sliced.toString('utf8')\n  decode.bytes = end - start\n  return BJSON.parse(str)\n}\n\nfunction encodingLength (obj) {\n  return encode(obj).length\n}\n\nvar bufferJsonEncoding = { encode, decode, encodingLength }\n\nexport default bufferJsonEncoding;\nexport { bufferJsonEncoding as __moduleExports };","start":1670465469651,"end":1670465469652,"order":"normal"}]}
