{"resolvedId":"/home/jdw/Code/dxos/dxos/packages/apps/halo-app/src/pages/RequireIdentity.tsx","transforms":[{"name":"vite:load-fallback","result":"//\n// Copyright 2021 DXOS.org\n//\n\nimport React from 'react';\nimport { Navigate, Outlet, useLocation } from 'react-router-dom';\n\nimport { useIdentity } from '@dxos/react-client';\n\nexport interface RequireProfileProps {\n  redirect: string;\n}\n\n/**\n * Prevents child routes from rendering if identity does not exist.\n * Redirects if identity is not present.\n */\nconst RequireIdentity = ({ redirect: to }: RequireProfileProps) => {\n  const { pathname, search } = useLocation();\n  const identity = useIdentity();\n\n  if (!identity) {\n    return <Navigate to={`${to}?redirect=${pathname}${search}`} />;\n  }\n\n  return <Outlet />;\n};\n\nexport default RequireIdentity;\n","start":1670465438377,"end":1670465438676},{"name":"vite:react-babel","result":"//\n// Copyright 2021 DXOS.org\n//\n\nimport React from 'react';\nimport { Navigate, Outlet, useLocation } from 'react-router-dom';\nimport { useIdentity } from '@dxos/react-client';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport interface RequireProfileProps {\n  redirect: string;\n}\n\n/**\n * Prevents child routes from rendering if identity does not exist.\n * Redirects if identity is not present.\n */\nconst RequireIdentity = ({\n  redirect: to\n}: RequireProfileProps) => {\n  const {\n    pathname,\n    search\n  } = useLocation();\n  const identity = useIdentity();\n  if (!identity) {\n    return /*#__PURE__*/_jsx(Navigate, {\n      to: `${to}?redirect=${pathname}${search}`\n    });\n  }\n  return /*#__PURE__*/_jsx(Outlet, {});\n};\nexport default RequireIdentity;","start":1670465438676,"end":1670465438680,"order":"pre"},{"name":"vite:esbuild","result":"import { Navigate, Outlet, useLocation } from \"react-router-dom\";\nimport { useIdentity } from \"@dxos/react-client\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst RequireIdentity = ({\n  redirect: to\n}) => {\n  const {\n    pathname,\n    search\n  } = useLocation();\n  const identity = useIdentity();\n  if (!identity) {\n    return /* @__PURE__ */ _jsx(Navigate, {\n      to: `${to}?redirect=${pathname}${search}`\n    });\n  }\n  return /* @__PURE__ */ _jsx(Outlet, {});\n};\nexport default RequireIdentity;\n","start":1670465438680,"end":1670465438904,"order":"normal"}]}
