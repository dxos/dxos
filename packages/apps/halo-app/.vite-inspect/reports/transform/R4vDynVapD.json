{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/hypercore-default-storage@1.1.1/node_modules/hypercore-default-storage/index.js","transforms":[{"name":"vite:load-fallback","result":"const RAF = require('random-access-file')\n\nlet lock = null\nlet sparse = null\n\ntry {\n  const fsctl = require('fsctl')\n  lock = fsctl.lock\n  sparse = null // fsctl.sparse, disable until we investigate the regression on windows\n} catch (_) {}\n\nmodule.exports = defaultStorage\n\nfunction defaultStorage (name, opts) {\n  // make it easier to cache tree nodes without the big unsafe arraybuffer attached\n  if (isTree(name)) return new RAF(name, { sparse, alloc: Buffer.alloc, ...opts })\n  if (!isBitfield(name)) return new RAF(name, { sparse, ...opts })\n  return new RAF(name, { lock, sparse, ...opts })\n}\n\nfunction isTree (name) {\n  return name === 'tree' || name.endsWith('/tree')\n}\n\nfunction isBitfield (name) {\n  return name === 'bitfield' || name.endsWith('/bitfield')\n}\n","start":1670465469235,"end":1670465469387},{"name":"vite:react-babel","result":"const RAF = require('random-access-file')\n\nlet lock = null\nlet sparse = null\n\ntry {\n  const fsctl = require('fsctl')\n  lock = fsctl.lock\n  sparse = null // fsctl.sparse, disable until we investigate the regression on windows\n} catch (_) {}\n\nmodule.exports = defaultStorage\n\nfunction defaultStorage (name, opts) {\n  // make it easier to cache tree nodes without the big unsafe arraybuffer attached\n  if (isTree(name)) return new RAF(name, { sparse, alloc: Buffer.alloc, ...opts })\n  if (!isBitfield(name)) return new RAF(name, { sparse, ...opts })\n  return new RAF(name, { lock, sparse, ...opts })\n}\n\nfunction isTree (name) {\n  return name === 'tree' || name.endsWith('/tree')\n}\n\nfunction isBitfield (name) {\n  return name === 'bitfield' || name.endsWith('/bitfield')\n}\n","start":1670465469387,"end":1670465469387,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/random-access-file@2.2.1/node_modules/random-access-file/browser.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000__vite-browser-external?commonjs-proxy\";\n\nconst RAF = require$$0\n\nlet lock = null\nlet sparse = null\n\ntry {\n  const fsctl = require$$1\n  lock = fsctl.lock\n  sparse = null // fsctl.sparse, disable until we investigate the regression on windows\n} catch (_) {}\n\nvar hypercoreDefaultStorage = defaultStorage\n\nfunction defaultStorage (name, opts) {\n  // make it easier to cache tree nodes without the big unsafe arraybuffer attached\n  if (isTree(name)) return new RAF(name, { sparse, alloc: Buffer.alloc, ...opts })\n  if (!isBitfield(name)) return new RAF(name, { sparse, ...opts })\n  return new RAF(name, { lock, sparse, ...opts })\n}\n\nfunction isTree (name) {\n  return name === 'tree' || name.endsWith('/tree')\n}\n\nfunction isBitfield (name) {\n  return name === 'bitfield' || name.endsWith('/bitfield')\n}\n\nexport default hypercoreDefaultStorage;\nexport { hypercoreDefaultStorage as __moduleExports };","start":1670465469387,"end":1670465470138,"order":"normal"},{"name":"polyfill-node","result":"import { Buffer as Buffer } from '\u0000polyfill-node.buffer';\n\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/random-access-file@2.2.1/node_modules/random-access-file/browser.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000__vite-browser-external?commonjs-proxy\";\n\nconst RAF = require$$0\n\nlet lock = null\nlet sparse = null\n\ntry {\n  const fsctl = require$$1\n  lock = fsctl.lock\n  sparse = null // fsctl.sparse, disable until we investigate the regression on windows\n} catch (_) {}\n\nvar hypercoreDefaultStorage = defaultStorage\n\nfunction defaultStorage (name, opts) {\n  // make it easier to cache tree nodes without the big unsafe arraybuffer attached\n  if (isTree(name)) return new RAF(name, { sparse, alloc: Buffer.alloc, ...opts })\n  if (!isBitfield(name)) return new RAF(name, { sparse, ...opts })\n  return new RAF(name, { lock, sparse, ...opts })\n}\n\nfunction isTree (name) {\n  return name === 'tree' || name.endsWith('/tree')\n}\n\nfunction isBitfield (name) {\n  return name === 'bitfield' || name.endsWith('/bitfield')\n}\n\nexport default hypercoreDefaultStorage;\nexport { hypercoreDefaultStorage as __moduleExports };","start":1670465470138,"end":1670465470139,"order":"normal"}]}
