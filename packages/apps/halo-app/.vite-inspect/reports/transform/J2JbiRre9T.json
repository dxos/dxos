{"resolvedId":"/home/jdw/Code/dxos/dxos/packages/apps/halo-app/src/components/DeviceList/DeviceList.tsx","transforms":[{"name":"vite:load-fallback","result":"//\n// Copyright 2022 DXOS.org\n//\n\nimport React, { useMemo } from 'react';\n\nimport { PublicKey } from '@dxos/client';\n\nimport { Device, DeviceProps } from './Device';\n\nexport interface DeviceListProps {\n  devices: DeviceProps[];\n  currentDevice?: PublicKey;\n}\n\nexport const DeviceList = ({ devices, currentDevice }: DeviceListProps) => {\n  const currentDeviceIndex = useMemo(\n    () => currentDevice && devices.findIndex((device) => device.publicKey.equals(currentDevice)),\n    [devices, currentDevice]\n  );\n\n  return (\n    <>\n      {devices.map((device, index) => (\n        <Device key={device.publicKey.toHex()} {...device} isCurrentDevice={index === currentDeviceIndex} />\n      ))}\n    </>\n  );\n};\n","start":1670465465920,"end":1670465466310},{"name":"vite:react-babel","result":"//\n// Copyright 2022 DXOS.org\n//\n\nimport React, { useMemo } from 'react';\nimport { PublicKey } from '@dxos/client';\nimport { Device, DeviceProps } from './Device';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport interface DeviceListProps {\n  devices: DeviceProps[];\n  currentDevice?: PublicKey;\n}\nexport const DeviceList = ({\n  devices,\n  currentDevice\n}: DeviceListProps) => {\n  const currentDeviceIndex = useMemo(() => currentDevice && devices.findIndex(device => device.publicKey.equals(currentDevice)), [devices, currentDevice]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: devices.map((device, index) => /*#__PURE__*/_jsx(Device, {\n      ...device,\n      isCurrentDevice: index === currentDeviceIndex\n    }, device.publicKey.toHex()))\n  });\n};","start":1670465466310,"end":1670465466314,"order":"pre"},{"name":"vite:esbuild","result":"import { useMemo } from \"react\";\nimport { Device } from \"./Device\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const DeviceList = ({\n  devices,\n  currentDevice\n}) => {\n  const currentDeviceIndex = useMemo(() => currentDevice && devices.findIndex((device) => device.publicKey.equals(currentDevice)), [devices, currentDevice]);\n  return /* @__PURE__ */ _jsx(_Fragment, {\n    children: devices.map((device, index) => /* @__PURE__ */ _jsx(Device, {\n      ...device,\n      isCurrentDevice: index === currentDeviceIndex\n    }, device.publicKey.toHex()))\n  });\n};\n","start":1670465466314,"end":1670465466395,"order":"normal"}]}
