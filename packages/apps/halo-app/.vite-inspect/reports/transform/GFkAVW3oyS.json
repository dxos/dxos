{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_generichash.js","transforms":[{"name":"vite:load-fallback","result":"var blake2b = require('blake2b')\n\nif (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')\n\nmodule.exports.crypto_generichash_PRIMITIVE = 'blake2b'\nmodule.exports.crypto_generichash_BYTES_MIN = blake2b.BYTES_MIN\nmodule.exports.crypto_generichash_BYTES_MAX = blake2b.BYTES_MAX\nmodule.exports.crypto_generichash_BYTES = blake2b.BYTES\nmodule.exports.crypto_generichash_KEYBYTES_MIN = blake2b.KEYBYTES_MIN\nmodule.exports.crypto_generichash_KEYBYTES_MAX = blake2b.KEYBYTES_MAX\nmodule.exports.crypto_generichash_KEYBYTES = blake2b.KEYBYTES\nmodule.exports.crypto_generichash_WASM_SUPPORTED = blake2b.WASM_SUPPORTED\nmodule.exports.crypto_generichash_WASM_LOADED = false\n\nmodule.exports.crypto_generichash = function (output, input, key) {\n  blake2b(output.length, key).update(input).final(output)\n}\n\nmodule.exports.crypto_generichash_ready = blake2b.ready\n\nmodule.exports.crypto_generichash_batch = function (output, inputArray, key) {\n  var ctx = blake2b(output.length, key)\n  for (var i = 0; i < inputArray.length; i++) {\n    ctx.update(inputArray[i])\n  }\n  ctx.final(output)\n}\n\nmodule.exports.crypto_generichash_instance = function (key, outlen) {\n  if (outlen == null) outlen = module.exports.crypto_generichash_BYTES\n  return blake2b(outlen, key)\n}\n\nblake2b.ready(function (_) {\n  module.exports.crypto_generichash_WASM_LOADED = blake2b.WASM_LOADED\n})\n","start":1670465470681,"end":1670465470846},{"name":"vite:react-babel","result":"var blake2b = require('blake2b')\n\nif (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')\n\nmodule.exports.crypto_generichash_PRIMITIVE = 'blake2b'\nmodule.exports.crypto_generichash_BYTES_MIN = blake2b.BYTES_MIN\nmodule.exports.crypto_generichash_BYTES_MAX = blake2b.BYTES_MAX\nmodule.exports.crypto_generichash_BYTES = blake2b.BYTES\nmodule.exports.crypto_generichash_KEYBYTES_MIN = blake2b.KEYBYTES_MIN\nmodule.exports.crypto_generichash_KEYBYTES_MAX = blake2b.KEYBYTES_MAX\nmodule.exports.crypto_generichash_KEYBYTES = blake2b.KEYBYTES\nmodule.exports.crypto_generichash_WASM_SUPPORTED = blake2b.WASM_SUPPORTED\nmodule.exports.crypto_generichash_WASM_LOADED = false\n\nmodule.exports.crypto_generichash = function (output, input, key) {\n  blake2b(output.length, key).update(input).final(output)\n}\n\nmodule.exports.crypto_generichash_ready = blake2b.ready\n\nmodule.exports.crypto_generichash_batch = function (output, inputArray, key) {\n  var ctx = blake2b(output.length, key)\n  for (var i = 0; i < inputArray.length; i++) {\n    ctx.update(inputArray[i])\n  }\n  ctx.final(output)\n}\n\nmodule.exports.crypto_generichash_instance = function (key, outlen) {\n  if (outlen == null) outlen = module.exports.crypto_generichash_BYTES\n  return blake2b(outlen, key)\n}\n\nblake2b.ready(function (_) {\n  module.exports.crypto_generichash_WASM_LOADED = blake2b.WASM_LOADED\n})\n","start":1670465470846,"end":1670465470846,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as crypto_generichashModule, exports as crypto_generichash } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_generichash.js?commonjs-module\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/blake2b@2.1.4/node_modules/blake2b/index.js?commonjs-proxy\";\n\n(function (module) {\n\tvar blake2b = require$$0\n\n\tif (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')\n\n\tmodule.exports.crypto_generichash_PRIMITIVE = 'blake2b'\n\tmodule.exports.crypto_generichash_BYTES_MIN = blake2b.BYTES_MIN\n\tmodule.exports.crypto_generichash_BYTES_MAX = blake2b.BYTES_MAX\n\tmodule.exports.crypto_generichash_BYTES = blake2b.BYTES\n\tmodule.exports.crypto_generichash_KEYBYTES_MIN = blake2b.KEYBYTES_MIN\n\tmodule.exports.crypto_generichash_KEYBYTES_MAX = blake2b.KEYBYTES_MAX\n\tmodule.exports.crypto_generichash_KEYBYTES = blake2b.KEYBYTES\n\tmodule.exports.crypto_generichash_WASM_SUPPORTED = blake2b.WASM_SUPPORTED\n\tmodule.exports.crypto_generichash_WASM_LOADED = false\n\n\tmodule.exports.crypto_generichash = function (output, input, key) {\n\t  blake2b(output.length, key).update(input).final(output)\n\t}\n\n\tmodule.exports.crypto_generichash_ready = blake2b.ready\n\n\tmodule.exports.crypto_generichash_batch = function (output, inputArray, key) {\n\t  var ctx = blake2b(output.length, key)\n\t  for (var i = 0; i < inputArray.length; i++) {\n\t    ctx.update(inputArray[i])\n\t  }\n\t  ctx.final(output)\n\t}\n\n\tmodule.exports.crypto_generichash_instance = function (key, outlen) {\n\t  if (outlen == null) outlen = module.exports.crypto_generichash_BYTES\n\t  return blake2b(outlen, key)\n\t}\n\n\tblake2b.ready(function (_) {\n\t  module.exports.crypto_generichash_WASM_LOADED = blake2b.WASM_LOADED\n\t})\n} (crypto_generichashModule));\n\nexport default crypto_generichash;\nexport { crypto_generichash as __moduleExports };","start":1670465470846,"end":1670465471713,"order":"normal"}]}
