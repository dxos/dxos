{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoresource-promise@2.0.0/node_modules/nanoresource-promise/emitter.js","transforms":[{"name":"vite:load-fallback","result":"const { EventEmitter } = require('events')\nconst nanoresource = require('.')\n\nconst kNanoresource = Symbol('nanoresource')\n\nclass NanoresourcePromise extends EventEmitter {\n  constructor (opts = {}) {\n    super()\n\n    this[kNanoresource] = nanoresource({\n      open: opts.open || this._open.bind(this),\n      close: opts.close || this._close.bind(this),\n      reopen: opts.reopen\n    })\n  }\n\n  get opened () {\n    return this[kNanoresource].opened\n  }\n\n  get opening () {\n    return this[kNanoresource].opening\n  }\n\n  get closed () {\n    return this[kNanoresource].closed\n  }\n\n  get closing () {\n    return this[kNanoresource].closing\n  }\n\n  get actives () {\n    return this[kNanoresource].actives\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  async open () {\n    await this[kNanoresource].open()\n    this.emit('opened')\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  async close (allowActive) {\n    await this[kNanoresource].close(allowActive)\n    this.emit('closed')\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  active (cb) {\n    return this[kNanoresource].active(cb)\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  inactive (cb, err, value) {\n    return this[kNanoresource].inactive(cb, err, value)\n  }\n\n  /**\n   * @abstract\n   */\n  async _open () {}\n\n  /**\n   * @abstract\n   */\n  async _close () {}\n}\n\nmodule.exports = (opts) => new NanoresourcePromise(opts)\nmodule.exports.NanoresourcePromise = NanoresourcePromise\n","start":1670465470134,"end":1670465470324},{"name":"vite:react-babel","result":"const { EventEmitter } = require('events')\nconst nanoresource = require('.')\n\nconst kNanoresource = Symbol('nanoresource')\n\nclass NanoresourcePromise extends EventEmitter {\n  constructor (opts = {}) {\n    super()\n\n    this[kNanoresource] = nanoresource({\n      open: opts.open || this._open.bind(this),\n      close: opts.close || this._close.bind(this),\n      reopen: opts.reopen\n    })\n  }\n\n  get opened () {\n    return this[kNanoresource].opened\n  }\n\n  get opening () {\n    return this[kNanoresource].opening\n  }\n\n  get closed () {\n    return this[kNanoresource].closed\n  }\n\n  get closing () {\n    return this[kNanoresource].closing\n  }\n\n  get actives () {\n    return this[kNanoresource].actives\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  async open () {\n    await this[kNanoresource].open()\n    this.emit('opened')\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  async close (allowActive) {\n    await this[kNanoresource].close(allowActive)\n    this.emit('closed')\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  active (cb) {\n    return this[kNanoresource].active(cb)\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  inactive (cb, err, value) {\n    return this[kNanoresource].inactive(cb, err, value)\n  }\n\n  /**\n   * @abstract\n   */\n  async _open () {}\n\n  /**\n   * @abstract\n   */\n  async _close () {}\n}\n\nmodule.exports = (opts) => new NanoresourcePromise(opts)\nmodule.exports.NanoresourcePromise = NanoresourcePromise\n","start":1670465470324,"end":1670465470324,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as emitterModule, exports as emitter } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoresource-promise@2.0.0/node_modules/nanoresource-promise/emitter.js?commonjs-module\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/events@3.3.0/node_modules/events/events.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoresource-promise@2.0.0/node_modules/nanoresource-promise/index.js?commonjs-proxy\";\n\nconst { EventEmitter } = require$$0\nconst nanoresource = require$$1\n\nconst kNanoresource = Symbol('nanoresource')\n\nclass NanoresourcePromise extends EventEmitter {\n  constructor (opts = {}) {\n    super()\n\n    this[kNanoresource] = nanoresource({\n      open: opts.open || this._open.bind(this),\n      close: opts.close || this._close.bind(this),\n      reopen: opts.reopen\n    })\n  }\n\n  get opened () {\n    return this[kNanoresource].opened\n  }\n\n  get opening () {\n    return this[kNanoresource].opening\n  }\n\n  get closed () {\n    return this[kNanoresource].closed\n  }\n\n  get closing () {\n    return this[kNanoresource].closing\n  }\n\n  get actives () {\n    return this[kNanoresource].actives\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  async open () {\n    await this[kNanoresource].open()\n    this.emit('opened')\n  }\n\n  /**\n   * @returns {Promise}\n   */\n  async close (allowActive) {\n    await this[kNanoresource].close(allowActive)\n    this.emit('closed')\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  active (cb) {\n    return this[kNanoresource].active(cb)\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  inactive (cb, err, value) {\n    return this[kNanoresource].inactive(cb, err, value)\n  }\n\n  /**\n   * @abstract\n   */\n  async _open () {}\n\n  /**\n   * @abstract\n   */\n  async _close () {}\n}\n\nemitterModule.exports = (opts) => new NanoresourcePromise(opts)\nvar NanoresourcePromise_1 = emitter.NanoresourcePromise = NanoresourcePromise\n\nexport { emitter as __moduleExports, NanoresourcePromise_1 as NanoresourcePromise, emitter as default };","start":1670465470324,"end":1670465471222,"order":"normal"}]}
