{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/random-access-memory@4.1.0/node_modules/random-access-memory/index.js","transforms":[{"name":"vite:load-fallback","result":"const RandomAccess = require('random-access-storage')\nconst isOptions = require('is-options')\nconst inherits = require('inherits')\nconst b4a = require('b4a')\n\nconst DEFAULT_PAGE_SIZE = 1024 * 1024\n\nmodule.exports = RAM\n\nfunction RAM (opts) {\n  if (!(this instanceof RAM)) return new RAM(opts)\n  if (typeof opts === 'number') opts = {length: opts}\n  if (!opts) opts = {}\n\n  RandomAccess.call(this)\n\n  if (b4a.isBuffer(opts)) {\n    opts = {length: opts.length, buffer: opts}\n  }\n  if (!isOptions(opts)) opts = {}\n\n  this.length = opts.length || 0\n  this.pageSize = opts.length || opts.pageSize || DEFAULT_PAGE_SIZE\n  this.buffers = []\n\n  if (opts.buffer) this.buffers.push(opts.buffer)\n}\n\ninherits(RAM, RandomAccess)\n\nRAM.prototype._stat = function (req) {\n  req.callback(null, {size: this.length})\n}\n\nRAM.prototype._write = function (req) {\n  var i = Math.floor(req.offset / this.pageSize)\n  var rel = req.offset - i * this.pageSize\n  var start = 0\n\n  const len = req.offset + req.size\n  if (len > this.length) this.length = len\n\n  while (start < req.size) {\n    const page = this._page(i++, true)\n    const free = this.pageSize - rel\n    const end = free < (req.size - start)\n      ? start + free\n      : req.size\n\n    b4a.copy(req.data, page, rel, start, end)\n    start = end\n    rel = 0\n  }\n\n  req.callback(null, null)\n}\n\nRAM.prototype._read = function (req) {\n  var i = Math.floor(req.offset / this.pageSize)\n  var rel = req.offset - i * this.pageSize\n  var start = 0\n\n  if (req.offset + req.size > this.length) {\n    return req.callback(new Error('Could not satisfy length'), null)\n  }\n\n  const data = b4a.alloc(req.size)\n\n  while (start < req.size) {\n    const page = this._page(i++, false)\n    const avail = this.pageSize - rel\n    const wanted = req.size - start\n    const len = avail < wanted ? avail : wanted\n\n    if (page) b4a.copy(page, data, start, rel, rel + len)\n    start += len\n    rel = 0\n  }\n\n  req.callback(null, data)\n}\n\nRAM.prototype._del = function (req) {\n  var i = Math.floor(req.offset / this.pageSize)\n  var rel = req.offset - i * this.pageSize\n  var start = 0\n\n  if (rel && req.offset + req.size >= this.length) {\n    var buf = this.buffers[i]\n    if (buf) buf.fill(0, rel)\n  }\n\n  if (req.offset + req.size > this.length) {\n    req.size = Math.max(0, this.length - req.offset)\n  }\n\n  while (start < req.size) {\n    if (rel === 0 && req.size - start >= this.pageSize) {\n      this.buffers[i] = undefined\n    }\n\n    rel = 0\n    i += 1\n    start += this.pageSize - rel\n  }\n\n  if (req.offset + req.size >= this.length) {\n    this.length = req.offset\n  }\n\n  req.callback(null, null)\n}\n\nRAM.prototype._destroy = function (req) {\n  this._buffers = []\n  this.length = 0\n  req.callback(null, null)\n}\n\nRAM.prototype._page = function (i, upsert) {\n  var page = this.buffers[i]\n  if (page || !upsert) return page\n  page = this.buffers[i] = b4a.alloc(this.pageSize)\n  return page\n}\n\nRAM.prototype.toBuffer = function () {\n  const buf = b4a.alloc(this.length)\n\n  for (var i = 0; i < this.buffers.length; i++) {\n    if (this.buffers[i]) b4a.copy(this.buffers[i], buf, i * this.pageSize)\n  }\n\n  return buf\n}\n\nRAM.prototype.clone = function () {\n  const ram = new RAM()\n  ram.length = this.length\n  ram.pageSize = this.pageSize\n  ram.buffers = this.buffers.map((buffer) => Buffer.from(buffer))\n  return ram\n}\n","start":1670465468278,"end":1670465468355},{"name":"vite:react-babel","result":"const RandomAccess = require('random-access-storage')\nconst isOptions = require('is-options')\nconst inherits = require('inherits')\nconst b4a = require('b4a')\n\nconst DEFAULT_PAGE_SIZE = 1024 * 1024\n\nmodule.exports = RAM\n\nfunction RAM (opts) {\n  if (!(this instanceof RAM)) return new RAM(opts)\n  if (typeof opts === 'number') opts = {length: opts}\n  if (!opts) opts = {}\n\n  RandomAccess.call(this)\n\n  if (b4a.isBuffer(opts)) {\n    opts = {length: opts.length, buffer: opts}\n  }\n  if (!isOptions(opts)) opts = {}\n\n  this.length = opts.length || 0\n  this.pageSize = opts.length || opts.pageSize || DEFAULT_PAGE_SIZE\n  this.buffers = []\n\n  if (opts.buffer) this.buffers.push(opts.buffer)\n}\n\ninherits(RAM, RandomAccess)\n\nRAM.prototype._stat = function (req) {\n  req.callback(null, {size: this.length})\n}\n\nRAM.prototype._write = function (req) {\n  var i = Math.floor(req.offset / this.pageSize)\n  var rel = req.offset - i * this.pageSize\n  var start = 0\n\n  const len = req.offset + req.size\n  if (len > this.length) this.length = len\n\n  while (start < req.size) {\n    const page = this._page(i++, true)\n    const free = this.pageSize - rel\n    const end = free < (req.size - start)\n      ? start + free\n      : req.size\n\n    b4a.copy(req.data, page, rel, start, end)\n    start = end\n    rel = 0\n  }\n\n  req.callback(null, null)\n}\n\nRAM.prototype._read = function (req) {\n  var i = Math.floor(req.offset / this.pageSize)\n  var rel = req.offset - i * this.pageSize\n  var start = 0\n\n  if (req.offset + req.size > this.length) {\n    return req.callback(new Error('Could not satisfy length'), null)\n  }\n\n  const data = b4a.alloc(req.size)\n\n  while (start < req.size) {\n    const page = this._page(i++, false)\n    const avail = this.pageSize - rel\n    const wanted = req.size - start\n    const len = avail < wanted ? avail : wanted\n\n    if (page) b4a.copy(page, data, start, rel, rel + len)\n    start += len\n    rel = 0\n  }\n\n  req.callback(null, data)\n}\n\nRAM.prototype._del = function (req) {\n  var i = Math.floor(req.offset / this.pageSize)\n  var rel = req.offset - i * this.pageSize\n  var start = 0\n\n  if (rel && req.offset + req.size >= this.length) {\n    var buf = this.buffers[i]\n    if (buf) buf.fill(0, rel)\n  }\n\n  if (req.offset + req.size > this.length) {\n    req.size = Math.max(0, this.length - req.offset)\n  }\n\n  while (start < req.size) {\n    if (rel === 0 && req.size - start >= this.pageSize) {\n      this.buffers[i] = undefined\n    }\n\n    rel = 0\n    i += 1\n    start += this.pageSize - rel\n  }\n\n  if (req.offset + req.size >= this.length) {\n    this.length = req.offset\n  }\n\n  req.callback(null, null)\n}\n\nRAM.prototype._destroy = function (req) {\n  this._buffers = []\n  this.length = 0\n  req.callback(null, null)\n}\n\nRAM.prototype._page = function (i, upsert) {\n  var page = this.buffers[i]\n  if (page || !upsert) return page\n  page = this.buffers[i] = b4a.alloc(this.pageSize)\n  return page\n}\n\nRAM.prototype.toBuffer = function () {\n  const buf = b4a.alloc(this.length)\n\n  for (var i = 0; i < this.buffers.length; i++) {\n    if (this.buffers[i]) b4a.copy(this.buffers[i], buf, i * this.pageSize)\n  }\n\n  return buf\n}\n\nRAM.prototype.clone = function () {\n  const ram = new RAM()\n  ram.length = this.length\n  ram.pageSize = this.pageSize\n  ram.buffers = this.buffers.map((buffer) => Buffer.from(buffer))\n  return ram\n}\n","start":1670465468355,"end":1670465468355,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/random-access-storage@1.4.3/node_modules/random-access-storage/index.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/is-options@1.0.2/node_modules/is-options/index.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js?commonjs-proxy\";\nimport require$$3 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/b4a@1.6.1/node_modules/b4a/browser.js?commonjs-proxy\";\n\nconst RandomAccess = require$$0\nconst isOptions = require$$1\nconst inherits = require$$2\nconst b4a = require$$3\n\nconst DEFAULT_PAGE_SIZE = 1024 * 1024\n\nvar randomAccessMemory = RAM\n\nfunction RAM (opts) {\n  if (!(this instanceof RAM)) return new RAM(opts)\n  if (typeof opts === 'number') opts = {length: opts}\n  if (!opts) opts = {}\n\n  RandomAccess.call(this)\n\n  if (b4a.isBuffer(opts)) {\n    opts = {length: opts.length, buffer: opts}\n  }\n  if (!isOptions(opts)) opts = {}\n\n  this.length = opts.length || 0\n  this.pageSize = opts.length || opts.pageSize || DEFAULT_PAGE_SIZE\n  this.buffers = []\n\n  if (opts.buffer) this.buffers.push(opts.buffer)\n}\n\ninherits(RAM, RandomAccess)\n\nRAM.prototype._stat = function (req) {\n  req.callback(null, {size: this.length})\n}\n\nRAM.prototype._write = function (req) {\n  var i = Math.floor(req.offset / this.pageSize)\n  var rel = req.offset - i * this.pageSize\n  var start = 0\n\n  const len = req.offset + req.size\n  if (len > this.length) this.length = len\n\n  while (start < req.size) {\n    const page = this._page(i++, true)\n    const free = this.pageSize - rel\n    const end = free < (req.size - start)\n      ? start + free\n      : req.size\n\n    b4a.copy(req.data, page, rel, start, end)\n    start = end\n    rel = 0\n  }\n\n  req.callback(null, null)\n}\n\nRAM.prototype._read = function (req) {\n  var i = Math.floor(req.offset / this.pageSize)\n  var rel = req.offset - i * this.pageSize\n  var start = 0\n\n  if (req.offset + req.size > this.length) {\n    return req.callback(new Error('Could not satisfy length'), null)\n  }\n\n  const data = b4a.alloc(req.size)\n\n  while (start < req.size) {\n    const page = this._page(i++, false)\n    const avail = this.pageSize - rel\n    const wanted = req.size - start\n    const len = avail < wanted ? avail : wanted\n\n    if (page) b4a.copy(page, data, start, rel, rel + len)\n    start += len\n    rel = 0\n  }\n\n  req.callback(null, data)\n}\n\nRAM.prototype._del = function (req) {\n  var i = Math.floor(req.offset / this.pageSize)\n  var rel = req.offset - i * this.pageSize\n  var start = 0\n\n  if (rel && req.offset + req.size >= this.length) {\n    var buf = this.buffers[i]\n    if (buf) buf.fill(0, rel)\n  }\n\n  if (req.offset + req.size > this.length) {\n    req.size = Math.max(0, this.length - req.offset)\n  }\n\n  while (start < req.size) {\n    if (rel === 0 && req.size - start >= this.pageSize) {\n      this.buffers[i] = undefined\n    }\n\n    rel = 0\n    i += 1\n    start += this.pageSize - rel\n  }\n\n  if (req.offset + req.size >= this.length) {\n    this.length = req.offset\n  }\n\n  req.callback(null, null)\n}\n\nRAM.prototype._destroy = function (req) {\n  this._buffers = []\n  this.length = 0\n  req.callback(null, null)\n}\n\nRAM.prototype._page = function (i, upsert) {\n  var page = this.buffers[i]\n  if (page || !upsert) return page\n  page = this.buffers[i] = b4a.alloc(this.pageSize)\n  return page\n}\n\nRAM.prototype.toBuffer = function () {\n  const buf = b4a.alloc(this.length)\n\n  for (var i = 0; i < this.buffers.length; i++) {\n    if (this.buffers[i]) b4a.copy(this.buffers[i], buf, i * this.pageSize)\n  }\n\n  return buf\n}\n\nRAM.prototype.clone = function () {\n  const ram = new RAM()\n  ram.length = this.length\n  ram.pageSize = this.pageSize\n  ram.buffers = this.buffers.map((buffer) => Buffer.from(buffer))\n  return ram\n}\n\nexport default randomAccessMemory;\nexport { randomAccessMemory as __moduleExports };","start":1670465468356,"end":1670465470390,"order":"normal"},{"name":"polyfill-node","result":"import { Buffer as Buffer } from '\u0000polyfill-node.buffer';\n\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/random-access-storage@1.4.3/node_modules/random-access-storage/index.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/is-options@1.0.2/node_modules/is-options/index.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js?commonjs-proxy\";\nimport require$$3 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/b4a@1.6.1/node_modules/b4a/browser.js?commonjs-proxy\";\n\nconst RandomAccess = require$$0\nconst isOptions = require$$1\nconst inherits = require$$2\nconst b4a = require$$3\n\nconst DEFAULT_PAGE_SIZE = 1024 * 1024\n\nvar randomAccessMemory = RAM\n\nfunction RAM (opts) {\n  if (!(this instanceof RAM)) return new RAM(opts)\n  if (typeof opts === 'number') opts = {length: opts}\n  if (!opts) opts = {}\n\n  RandomAccess.call(this)\n\n  if (b4a.isBuffer(opts)) {\n    opts = {length: opts.length, buffer: opts}\n  }\n  if (!isOptions(opts)) opts = {}\n\n  this.length = opts.length || 0\n  this.pageSize = opts.length || opts.pageSize || DEFAULT_PAGE_SIZE\n  this.buffers = []\n\n  if (opts.buffer) this.buffers.push(opts.buffer)\n}\n\ninherits(RAM, RandomAccess)\n\nRAM.prototype._stat = function (req) {\n  req.callback(null, {size: this.length})\n}\n\nRAM.prototype._write = function (req) {\n  var i = Math.floor(req.offset / this.pageSize)\n  var rel = req.offset - i * this.pageSize\n  var start = 0\n\n  const len = req.offset + req.size\n  if (len > this.length) this.length = len\n\n  while (start < req.size) {\n    const page = this._page(i++, true)\n    const free = this.pageSize - rel\n    const end = free < (req.size - start)\n      ? start + free\n      : req.size\n\n    b4a.copy(req.data, page, rel, start, end)\n    start = end\n    rel = 0\n  }\n\n  req.callback(null, null)\n}\n\nRAM.prototype._read = function (req) {\n  var i = Math.floor(req.offset / this.pageSize)\n  var rel = req.offset - i * this.pageSize\n  var start = 0\n\n  if (req.offset + req.size > this.length) {\n    return req.callback(new Error('Could not satisfy length'), null)\n  }\n\n  const data = b4a.alloc(req.size)\n\n  while (start < req.size) {\n    const page = this._page(i++, false)\n    const avail = this.pageSize - rel\n    const wanted = req.size - start\n    const len = avail < wanted ? avail : wanted\n\n    if (page) b4a.copy(page, data, start, rel, rel + len)\n    start += len\n    rel = 0\n  }\n\n  req.callback(null, data)\n}\n\nRAM.prototype._del = function (req) {\n  var i = Math.floor(req.offset / this.pageSize)\n  var rel = req.offset - i * this.pageSize\n  var start = 0\n\n  if (rel && req.offset + req.size >= this.length) {\n    var buf = this.buffers[i]\n    if (buf) buf.fill(0, rel)\n  }\n\n  if (req.offset + req.size > this.length) {\n    req.size = Math.max(0, this.length - req.offset)\n  }\n\n  while (start < req.size) {\n    if (rel === 0 && req.size - start >= this.pageSize) {\n      this.buffers[i] = undefined\n    }\n\n    rel = 0\n    i += 1\n    start += this.pageSize - rel\n  }\n\n  if (req.offset + req.size >= this.length) {\n    this.length = req.offset\n  }\n\n  req.callback(null, null)\n}\n\nRAM.prototype._destroy = function (req) {\n  this._buffers = []\n  this.length = 0\n  req.callback(null, null)\n}\n\nRAM.prototype._page = function (i, upsert) {\n  var page = this.buffers[i]\n  if (page || !upsert) return page\n  page = this.buffers[i] = b4a.alloc(this.pageSize)\n  return page\n}\n\nRAM.prototype.toBuffer = function () {\n  const buf = b4a.alloc(this.length)\n\n  for (var i = 0; i < this.buffers.length; i++) {\n    if (this.buffers[i]) b4a.copy(this.buffers[i], buf, i * this.pageSize)\n  }\n\n  return buf\n}\n\nRAM.prototype.clone = function () {\n  const ram = new RAM()\n  ram.length = this.length\n  ram.pageSize = this.pageSize\n  ram.buffers = this.buffers.map((buffer) => Buffer.from(buffer))\n  return ram\n}\n\nexport default randomAccessMemory;\nexport { randomAccessMemory as __moduleExports };","start":1670465470390,"end":1670465470391,"order":"normal"}]}
