{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/oneof.js","transforms":[{"name":"vite:load-fallback","result":"\"use strict\";\nmodule.exports = OneOf;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\n\nvar Field = require(\"./field\"),\n    util  = require(\"./util\");\n\n/**\n * Constructs a new oneof instance.\n * @classdesc Reflected oneof.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Oneof name\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction OneOf(name, fieldNames, options, comment) {\n    if (!Array.isArray(fieldNames)) {\n        options = fieldNames;\n        fieldNames = undefined;\n    }\n    ReflectionObject.call(this, name, options);\n\n    /* istanbul ignore if */\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\n        throw TypeError(\"fieldNames must be an Array\");\n\n    /**\n     * Field names that belong to this oneof.\n     * @type {string[]}\n     */\n    this.oneof = fieldNames || []; // toJSON, marker\n\n    /**\n     * Fields that belong to this oneof as an array for iteration.\n     * @type {Field[]}\n     * @readonly\n     */\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Oneof descriptor.\n * @interface IOneOf\n * @property {Array.<string>} oneof Oneof field names\n * @property {Object.<string,*>} [options] Oneof options\n */\n\n/**\n * Constructs a oneof from a oneof descriptor.\n * @param {string} name Oneof name\n * @param {IOneOf} json Oneof descriptor\n * @returns {OneOf} Created oneof\n * @throws {TypeError} If arguments are invalid\n */\nOneOf.fromJSON = function fromJSON(name, json) {\n    return new OneOf(name, json.oneof, json.options, json.comment);\n};\n\n/**\n * Converts this oneof to a oneof descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IOneOf} Oneof descriptor\n */\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\" , this.options,\n        \"oneof\"   , this.oneof,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Adds the fields of the specified oneof to the parent if not already done so.\n * @param {OneOf} oneof The oneof\n * @returns {undefined}\n * @inner\n * @ignore\n */\nfunction addFieldsToParent(oneof) {\n    if (oneof.parent)\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\n            if (!oneof.fieldsArray[i].parent)\n                oneof.parent.add(oneof.fieldsArray[i]);\n}\n\n/**\n * Adds a field to this oneof and removes it from its current parent, if any.\n * @param {Field} field Field to add\n * @returns {OneOf} `this`\n */\nOneOf.prototype.add = function add(field) {\n\n    /* istanbul ignore if */\n    if (!(field instanceof Field))\n        throw TypeError(\"field must be a Field\");\n\n    if (field.parent && field.parent !== this.parent)\n        field.parent.remove(field);\n    this.oneof.push(field.name);\n    this.fieldsArray.push(field);\n    field.partOf = this; // field.parent remains null\n    addFieldsToParent(this);\n    return this;\n};\n\n/**\n * Removes a field from this oneof and puts it back to the oneof's parent.\n * @param {Field} field Field to remove\n * @returns {OneOf} `this`\n */\nOneOf.prototype.remove = function remove(field) {\n\n    /* istanbul ignore if */\n    if (!(field instanceof Field))\n        throw TypeError(\"field must be a Field\");\n\n    var index = this.fieldsArray.indexOf(field);\n\n    /* istanbul ignore if */\n    if (index < 0)\n        throw Error(field + \" is not a member of \" + this);\n\n    this.fieldsArray.splice(index, 1);\n    index = this.oneof.indexOf(field.name);\n\n    /* istanbul ignore else */\n    if (index > -1) // theoretical\n        this.oneof.splice(index, 1);\n\n    field.partOf = null;\n    return this;\n};\n\n/**\n * @override\n */\nOneOf.prototype.onAdd = function onAdd(parent) {\n    ReflectionObject.prototype.onAdd.call(this, parent);\n    var self = this;\n    // Collect present fields\n    for (var i = 0; i < this.oneof.length; ++i) {\n        var field = parent.get(this.oneof[i]);\n        if (field && !field.partOf) {\n            field.partOf = self;\n            self.fieldsArray.push(field);\n        }\n    }\n    // Add not yet present fields\n    addFieldsToParent(this);\n};\n\n/**\n * @override\n */\nOneOf.prototype.onRemove = function onRemove(parent) {\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\n        if ((field = this.fieldsArray[i]).parent)\n            field.parent.remove(field);\n    ReflectionObject.prototype.onRemove.call(this, parent);\n};\n\n/**\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\n * @typedef OneOfDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} oneofName OneOf name\n * @returns {undefined}\n */\n\n/**\n * OneOf decorator (TypeScript).\n * @function\n * @param {...string} fieldNames Field names\n * @returns {OneOfDecorator} Decorator function\n * @template T extends string\n */\nOneOf.d = function decorateOneOf() {\n    var fieldNames = new Array(arguments.length),\n        index = 0;\n    while (index < arguments.length)\n        fieldNames[index] = arguments[index++];\n    return function oneOfDecorator(prototype, oneofName) {\n        util.decorateType(prototype.constructor)\n            .add(new OneOf(oneofName, fieldNames));\n        Object.defineProperty(prototype, oneofName, {\n            get: util.oneOfGetter(fieldNames),\n            set: util.oneOfSetter(fieldNames)\n        });\n    };\n};\n","start":1670465470604,"end":1670465470665},{"name":"vite:react-babel","result":"\"use strict\";\nmodule.exports = OneOf;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\n\nvar Field = require(\"./field\"),\n    util  = require(\"./util\");\n\n/**\n * Constructs a new oneof instance.\n * @classdesc Reflected oneof.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Oneof name\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction OneOf(name, fieldNames, options, comment) {\n    if (!Array.isArray(fieldNames)) {\n        options = fieldNames;\n        fieldNames = undefined;\n    }\n    ReflectionObject.call(this, name, options);\n\n    /* istanbul ignore if */\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\n        throw TypeError(\"fieldNames must be an Array\");\n\n    /**\n     * Field names that belong to this oneof.\n     * @type {string[]}\n     */\n    this.oneof = fieldNames || []; // toJSON, marker\n\n    /**\n     * Fields that belong to this oneof as an array for iteration.\n     * @type {Field[]}\n     * @readonly\n     */\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Oneof descriptor.\n * @interface IOneOf\n * @property {Array.<string>} oneof Oneof field names\n * @property {Object.<string,*>} [options] Oneof options\n */\n\n/**\n * Constructs a oneof from a oneof descriptor.\n * @param {string} name Oneof name\n * @param {IOneOf} json Oneof descriptor\n * @returns {OneOf} Created oneof\n * @throws {TypeError} If arguments are invalid\n */\nOneOf.fromJSON = function fromJSON(name, json) {\n    return new OneOf(name, json.oneof, json.options, json.comment);\n};\n\n/**\n * Converts this oneof to a oneof descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IOneOf} Oneof descriptor\n */\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\" , this.options,\n        \"oneof\"   , this.oneof,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Adds the fields of the specified oneof to the parent if not already done so.\n * @param {OneOf} oneof The oneof\n * @returns {undefined}\n * @inner\n * @ignore\n */\nfunction addFieldsToParent(oneof) {\n    if (oneof.parent)\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\n            if (!oneof.fieldsArray[i].parent)\n                oneof.parent.add(oneof.fieldsArray[i]);\n}\n\n/**\n * Adds a field to this oneof and removes it from its current parent, if any.\n * @param {Field} field Field to add\n * @returns {OneOf} `this`\n */\nOneOf.prototype.add = function add(field) {\n\n    /* istanbul ignore if */\n    if (!(field instanceof Field))\n        throw TypeError(\"field must be a Field\");\n\n    if (field.parent && field.parent !== this.parent)\n        field.parent.remove(field);\n    this.oneof.push(field.name);\n    this.fieldsArray.push(field);\n    field.partOf = this; // field.parent remains null\n    addFieldsToParent(this);\n    return this;\n};\n\n/**\n * Removes a field from this oneof and puts it back to the oneof's parent.\n * @param {Field} field Field to remove\n * @returns {OneOf} `this`\n */\nOneOf.prototype.remove = function remove(field) {\n\n    /* istanbul ignore if */\n    if (!(field instanceof Field))\n        throw TypeError(\"field must be a Field\");\n\n    var index = this.fieldsArray.indexOf(field);\n\n    /* istanbul ignore if */\n    if (index < 0)\n        throw Error(field + \" is not a member of \" + this);\n\n    this.fieldsArray.splice(index, 1);\n    index = this.oneof.indexOf(field.name);\n\n    /* istanbul ignore else */\n    if (index > -1) // theoretical\n        this.oneof.splice(index, 1);\n\n    field.partOf = null;\n    return this;\n};\n\n/**\n * @override\n */\nOneOf.prototype.onAdd = function onAdd(parent) {\n    ReflectionObject.prototype.onAdd.call(this, parent);\n    var self = this;\n    // Collect present fields\n    for (var i = 0; i < this.oneof.length; ++i) {\n        var field = parent.get(this.oneof[i]);\n        if (field && !field.partOf) {\n            field.partOf = self;\n            self.fieldsArray.push(field);\n        }\n    }\n    // Add not yet present fields\n    addFieldsToParent(this);\n};\n\n/**\n * @override\n */\nOneOf.prototype.onRemove = function onRemove(parent) {\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\n        if ((field = this.fieldsArray[i]).parent)\n            field.parent.remove(field);\n    ReflectionObject.prototype.onRemove.call(this, parent);\n};\n\n/**\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\n * @typedef OneOfDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} oneofName OneOf name\n * @returns {undefined}\n */\n\n/**\n * OneOf decorator (TypeScript).\n * @function\n * @param {...string} fieldNames Field names\n * @returns {OneOfDecorator} Decorator function\n * @template T extends string\n */\nOneOf.d = function decorateOneOf() {\n    var fieldNames = new Array(arguments.length),\n        index = 0;\n    while (index < arguments.length)\n        fieldNames[index] = arguments[index++];\n    return function oneOfDecorator(prototype, oneofName) {\n        util.decorateType(prototype.constructor)\n            .add(new OneOf(oneofName, fieldNames));\n        Object.defineProperty(prototype, oneofName, {\n            get: util.oneOfGetter(fieldNames),\n            set: util.oneOfSetter(fieldNames)\n        });\n    };\n};\n","start":1670465470665,"end":1670465470665,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/object.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/field.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/util.js?commonjs-wrapped\";\n\nvar oneof;\nvar hasRequiredOneof;\n\nfunction requireOneof () {\n\tif (hasRequiredOneof) return oneof;\n\thasRequiredOneof = 1;\n\t\"use strict\";\n\toneof = OneOf;\n\n\t// extends ReflectionObject\n\tvar ReflectionObject = require$$0();\n\t((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\n\n\tvar Field = require$$1(),\n\t    util  = require$$2();\n\n\t/**\n\t * Constructs a new oneof instance.\n\t * @classdesc Reflected oneof.\n\t * @extends ReflectionObject\n\t * @constructor\n\t * @param {string} name Oneof name\n\t * @param {string[]|Object.<string,*>} [fieldNames] Field names\n\t * @param {Object.<string,*>} [options] Declared options\n\t * @param {string} [comment] Comment associated with this field\n\t */\n\tfunction OneOf(name, fieldNames, options, comment) {\n\t    if (!Array.isArray(fieldNames)) {\n\t        options = fieldNames;\n\t        fieldNames = undefined;\n\t    }\n\t    ReflectionObject.call(this, name, options);\n\n\t    /* istanbul ignore if */\n\t    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\n\t        throw TypeError(\"fieldNames must be an Array\");\n\n\t    /**\n\t     * Field names that belong to this oneof.\n\t     * @type {string[]}\n\t     */\n\t    this.oneof = fieldNames || []; // toJSON, marker\n\n\t    /**\n\t     * Fields that belong to this oneof as an array for iteration.\n\t     * @type {Field[]}\n\t     * @readonly\n\t     */\n\t    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\n\n\t    /**\n\t     * Comment for this field.\n\t     * @type {string|null}\n\t     */\n\t    this.comment = comment;\n\t}\n\n\t/**\n\t * Oneof descriptor.\n\t * @interface IOneOf\n\t * @property {Array.<string>} oneof Oneof field names\n\t * @property {Object.<string,*>} [options] Oneof options\n\t */\n\n\t/**\n\t * Constructs a oneof from a oneof descriptor.\n\t * @param {string} name Oneof name\n\t * @param {IOneOf} json Oneof descriptor\n\t * @returns {OneOf} Created oneof\n\t * @throws {TypeError} If arguments are invalid\n\t */\n\tOneOf.fromJSON = function fromJSON(name, json) {\n\t    return new OneOf(name, json.oneof, json.options, json.comment);\n\t};\n\n\t/**\n\t * Converts this oneof to a oneof descriptor.\n\t * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n\t * @returns {IOneOf} Oneof descriptor\n\t */\n\tOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\n\t    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n\t    return util.toObject([\n\t        \"options\" , this.options,\n\t        \"oneof\"   , this.oneof,\n\t        \"comment\" , keepComments ? this.comment : undefined\n\t    ]);\n\t};\n\n\t/**\n\t * Adds the fields of the specified oneof to the parent if not already done so.\n\t * @param {OneOf} oneof The oneof\n\t * @returns {undefined}\n\t * @inner\n\t * @ignore\n\t */\n\tfunction addFieldsToParent(oneof) {\n\t    if (oneof.parent)\n\t        for (var i = 0; i < oneof.fieldsArray.length; ++i)\n\t            if (!oneof.fieldsArray[i].parent)\n\t                oneof.parent.add(oneof.fieldsArray[i]);\n\t}\n\n\t/**\n\t * Adds a field to this oneof and removes it from its current parent, if any.\n\t * @param {Field} field Field to add\n\t * @returns {OneOf} `this`\n\t */\n\tOneOf.prototype.add = function add(field) {\n\n\t    /* istanbul ignore if */\n\t    if (!(field instanceof Field))\n\t        throw TypeError(\"field must be a Field\");\n\n\t    if (field.parent && field.parent !== this.parent)\n\t        field.parent.remove(field);\n\t    this.oneof.push(field.name);\n\t    this.fieldsArray.push(field);\n\t    field.partOf = this; // field.parent remains null\n\t    addFieldsToParent(this);\n\t    return this;\n\t};\n\n\t/**\n\t * Removes a field from this oneof and puts it back to the oneof's parent.\n\t * @param {Field} field Field to remove\n\t * @returns {OneOf} `this`\n\t */\n\tOneOf.prototype.remove = function remove(field) {\n\n\t    /* istanbul ignore if */\n\t    if (!(field instanceof Field))\n\t        throw TypeError(\"field must be a Field\");\n\n\t    var index = this.fieldsArray.indexOf(field);\n\n\t    /* istanbul ignore if */\n\t    if (index < 0)\n\t        throw Error(field + \" is not a member of \" + this);\n\n\t    this.fieldsArray.splice(index, 1);\n\t    index = this.oneof.indexOf(field.name);\n\n\t    /* istanbul ignore else */\n\t    if (index > -1) // theoretical\n\t        this.oneof.splice(index, 1);\n\n\t    field.partOf = null;\n\t    return this;\n\t};\n\n\t/**\n\t * @override\n\t */\n\tOneOf.prototype.onAdd = function onAdd(parent) {\n\t    ReflectionObject.prototype.onAdd.call(this, parent);\n\t    var self = this;\n\t    // Collect present fields\n\t    for (var i = 0; i < this.oneof.length; ++i) {\n\t        var field = parent.get(this.oneof[i]);\n\t        if (field && !field.partOf) {\n\t            field.partOf = self;\n\t            self.fieldsArray.push(field);\n\t        }\n\t    }\n\t    // Add not yet present fields\n\t    addFieldsToParent(this);\n\t};\n\n\t/**\n\t * @override\n\t */\n\tOneOf.prototype.onRemove = function onRemove(parent) {\n\t    for (var i = 0, field; i < this.fieldsArray.length; ++i)\n\t        if ((field = this.fieldsArray[i]).parent)\n\t            field.parent.remove(field);\n\t    ReflectionObject.prototype.onRemove.call(this, parent);\n\t};\n\n\t/**\n\t * Decorator function as returned by {@link OneOf.d} (TypeScript).\n\t * @typedef OneOfDecorator\n\t * @type {function}\n\t * @param {Object} prototype Target prototype\n\t * @param {string} oneofName OneOf name\n\t * @returns {undefined}\n\t */\n\n\t/**\n\t * OneOf decorator (TypeScript).\n\t * @function\n\t * @param {...string} fieldNames Field names\n\t * @returns {OneOfDecorator} Decorator function\n\t * @template T extends string\n\t */\n\tOneOf.d = function decorateOneOf() {\n\t    var fieldNames = new Array(arguments.length),\n\t        index = 0;\n\t    while (index < arguments.length)\n\t        fieldNames[index] = arguments[index++];\n\t    return function oneOfDecorator(prototype, oneofName) {\n\t        util.decorateType(prototype.constructor)\n\t            .add(new OneOf(oneofName, fieldNames));\n\t        Object.defineProperty(prototype, oneofName, {\n\t            get: util.oneOfGetter(fieldNames),\n\t            set: util.oneOfSetter(fieldNames)\n\t        });\n\t    };\n\t};\n\treturn oneof;\n}\n\nexport { requireOneof as __require };","start":1670465470665,"end":1670465471380,"order":"normal"}]}
