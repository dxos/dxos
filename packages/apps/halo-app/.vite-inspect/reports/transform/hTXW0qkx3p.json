{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/level-js@5.0.2/node_modules/level-js/index.js","transforms":[{"name":"vite:load-fallback","result":"/* global indexedDB */\n\n'use strict'\n\nmodule.exports = Level\n\nvar AbstractLevelDOWN = require('abstract-leveldown').AbstractLevelDOWN\nvar inherits = require('inherits')\nvar Iterator = require('./iterator')\nvar serialize = require('./util/serialize')\nvar deserialize = require('./util/deserialize')\nvar support = require('./util/support')\nvar clear = require('./util/clear')\nvar createKeyRange = require('./util/key-range')\n\nvar DEFAULT_PREFIX = 'level-js-'\n\nfunction Level (location, opts) {\n  if (!(this instanceof Level)) return new Level(location, opts)\n\n  AbstractLevelDOWN.call(this, {\n    bufferKeys: support.bufferKeys(indexedDB),\n    snapshots: true,\n    permanence: true,\n    clear: true\n  })\n\n  opts = opts || {}\n\n  if (typeof location !== 'string') {\n    throw new Error('constructor requires a location string argument')\n  }\n\n  this.location = location\n  this.prefix = opts.prefix == null ? DEFAULT_PREFIX : opts.prefix\n  this.version = parseInt(opts.version || 1, 10)\n}\n\ninherits(Level, AbstractLevelDOWN)\n\nLevel.prototype.type = 'level-js'\n\nLevel.prototype._open = function (options, callback) {\n  var req = indexedDB.open(this.prefix + this.location, this.version)\n  var self = this\n\n  req.onerror = function () {\n    callback(req.error || new Error('unknown error'))\n  }\n\n  req.onsuccess = function () {\n    self.db = req.result\n    callback()\n  }\n\n  req.onupgradeneeded = function (ev) {\n    var db = ev.target.result\n\n    if (!db.objectStoreNames.contains(self.location)) {\n      db.createObjectStore(self.location)\n    }\n  }\n}\n\nLevel.prototype.store = function (mode) {\n  var transaction = this.db.transaction([this.location], mode)\n  return transaction.objectStore(this.location)\n}\n\nLevel.prototype.await = function (request, callback) {\n  var transaction = request.transaction\n\n  // Take advantage of the fact that a non-canceled request error aborts\n  // the transaction. I.e. no need to listen for \"request.onerror\".\n  transaction.onabort = function () {\n    callback(transaction.error || new Error('aborted by user'))\n  }\n\n  transaction.oncomplete = function () {\n    callback(null, request.result)\n  }\n}\n\nLevel.prototype._get = function (key, options, callback) {\n  var store = this.store('readonly')\n\n  try {\n    var req = store.get(key)\n  } catch (err) {\n    return this._nextTick(callback, err)\n  }\n\n  this.await(req, function (err, value) {\n    if (err) return callback(err)\n\n    if (value === undefined) {\n      // 'NotFound' error, consistent with LevelDOWN API\n      return callback(new Error('NotFound'))\n    }\n\n    callback(null, deserialize(value, options.asBuffer))\n  })\n}\n\nLevel.prototype._del = function (key, options, callback) {\n  var store = this.store('readwrite')\n\n  try {\n    var req = store.delete(key)\n  } catch (err) {\n    return this._nextTick(callback, err)\n  }\n\n  this.await(req, callback)\n}\n\nLevel.prototype._put = function (key, value, options, callback) {\n  var store = this.store('readwrite')\n\n  try {\n    // Will throw a DataError or DataCloneError if the environment\n    // does not support serializing the key or value respectively.\n    var req = store.put(value, key)\n  } catch (err) {\n    return this._nextTick(callback, err)\n  }\n\n  this.await(req, callback)\n}\n\nLevel.prototype._serializeKey = function (key) {\n  return serialize(key, this.supports.bufferKeys)\n}\n\nLevel.prototype._serializeValue = function (value) {\n  return serialize(value, true)\n}\n\nLevel.prototype._iterator = function (options) {\n  return new Iterator(this, this.location, options)\n}\n\nLevel.prototype._batch = function (operations, options, callback) {\n  if (operations.length === 0) return this._nextTick(callback)\n\n  var store = this.store('readwrite')\n  var transaction = store.transaction\n  var index = 0\n  var error\n\n  transaction.onabort = function () {\n    callback(error || transaction.error || new Error('aborted by user'))\n  }\n\n  transaction.oncomplete = function () {\n    callback()\n  }\n\n  // Wait for a request to complete before making the next, saving CPU.\n  function loop () {\n    var op = operations[index++]\n    var key = op.key\n\n    try {\n      var req = op.type === 'del' ? store.delete(key) : store.put(op.value, key)\n    } catch (err) {\n      error = err\n      transaction.abort()\n      return\n    }\n\n    if (index < operations.length) {\n      req.onsuccess = loop\n    }\n  }\n\n  loop()\n}\n\nLevel.prototype._clear = function (options, callback) {\n  try {\n    var keyRange = createKeyRange(options)\n  } catch (e) {\n    // The lower key is greater than the upper key.\n    // IndexedDB throws an error, but we'll just do nothing.\n    return this._nextTick(callback)\n  }\n\n  if (options.limit >= 0) {\n    // IDBObjectStore#delete(range) doesn't have such an option.\n    // Fall back to cursor-based implementation.\n    return clear(this, this.location, keyRange, options, callback)\n  }\n\n  try {\n    var store = this.store('readwrite')\n    var req = keyRange ? store.delete(keyRange) : store.clear()\n  } catch (err) {\n    return this._nextTick(callback, err)\n  }\n\n  this.await(req, callback)\n}\n\nLevel.prototype._close = function (callback) {\n  this.db.close()\n  this._nextTick(callback)\n}\n\n// NOTE: remove in a next major release\nLevel.prototype.upgrade = function (callback) {\n  if (this.status !== 'open') {\n    return this._nextTick(callback, new Error('cannot upgrade() before open()'))\n  }\n\n  var it = this.iterator()\n  var batchOptions = {}\n  var self = this\n\n  it._deserializeKey = it._deserializeValue = identity\n  next()\n\n  function next (err) {\n    if (err) return finish(err)\n    it.next(each)\n  }\n\n  function each (err, key, value) {\n    if (err || key === undefined) {\n      return finish(err)\n    }\n\n    var newKey = self._serializeKey(deserialize(key, true))\n    var newValue = self._serializeValue(deserialize(value, true))\n\n    // To bypass serialization on the old key, use _batch() instead of batch().\n    // NOTE: if we disable snapshotting (#86) this could lead to a loop of\n    // inserting and then iterating those same entries, because the new keys\n    // possibly sort after the old keys.\n    self._batch([\n      { type: 'del', key: key },\n      { type: 'put', key: newKey, value: newValue }\n    ], batchOptions, next)\n  }\n\n  function finish (err) {\n    it.end(function (err2) {\n      callback(err || err2)\n    })\n  }\n\n  function identity (data) {\n    return data\n  }\n}\n\nLevel.destroy = function (location, prefix, callback) {\n  if (typeof prefix === 'function') {\n    callback = prefix\n    prefix = DEFAULT_PREFIX\n  }\n  var request = indexedDB.deleteDatabase(prefix + location)\n  request.onsuccess = function () {\n    callback()\n  }\n  request.onerror = function (err) {\n    callback(err)\n  }\n}\n","start":1670465466985,"end":1670465467168},{"name":"vite:react-babel","result":"/* global indexedDB */\n\n'use strict'\n\nmodule.exports = Level\n\nvar AbstractLevelDOWN = require('abstract-leveldown').AbstractLevelDOWN\nvar inherits = require('inherits')\nvar Iterator = require('./iterator')\nvar serialize = require('./util/serialize')\nvar deserialize = require('./util/deserialize')\nvar support = require('./util/support')\nvar clear = require('./util/clear')\nvar createKeyRange = require('./util/key-range')\n\nvar DEFAULT_PREFIX = 'level-js-'\n\nfunction Level (location, opts) {\n  if (!(this instanceof Level)) return new Level(location, opts)\n\n  AbstractLevelDOWN.call(this, {\n    bufferKeys: support.bufferKeys(indexedDB),\n    snapshots: true,\n    permanence: true,\n    clear: true\n  })\n\n  opts = opts || {}\n\n  if (typeof location !== 'string') {\n    throw new Error('constructor requires a location string argument')\n  }\n\n  this.location = location\n  this.prefix = opts.prefix == null ? DEFAULT_PREFIX : opts.prefix\n  this.version = parseInt(opts.version || 1, 10)\n}\n\ninherits(Level, AbstractLevelDOWN)\n\nLevel.prototype.type = 'level-js'\n\nLevel.prototype._open = function (options, callback) {\n  var req = indexedDB.open(this.prefix + this.location, this.version)\n  var self = this\n\n  req.onerror = function () {\n    callback(req.error || new Error('unknown error'))\n  }\n\n  req.onsuccess = function () {\n    self.db = req.result\n    callback()\n  }\n\n  req.onupgradeneeded = function (ev) {\n    var db = ev.target.result\n\n    if (!db.objectStoreNames.contains(self.location)) {\n      db.createObjectStore(self.location)\n    }\n  }\n}\n\nLevel.prototype.store = function (mode) {\n  var transaction = this.db.transaction([this.location], mode)\n  return transaction.objectStore(this.location)\n}\n\nLevel.prototype.await = function (request, callback) {\n  var transaction = request.transaction\n\n  // Take advantage of the fact that a non-canceled request error aborts\n  // the transaction. I.e. no need to listen for \"request.onerror\".\n  transaction.onabort = function () {\n    callback(transaction.error || new Error('aborted by user'))\n  }\n\n  transaction.oncomplete = function () {\n    callback(null, request.result)\n  }\n}\n\nLevel.prototype._get = function (key, options, callback) {\n  var store = this.store('readonly')\n\n  try {\n    var req = store.get(key)\n  } catch (err) {\n    return this._nextTick(callback, err)\n  }\n\n  this.await(req, function (err, value) {\n    if (err) return callback(err)\n\n    if (value === undefined) {\n      // 'NotFound' error, consistent with LevelDOWN API\n      return callback(new Error('NotFound'))\n    }\n\n    callback(null, deserialize(value, options.asBuffer))\n  })\n}\n\nLevel.prototype._del = function (key, options, callback) {\n  var store = this.store('readwrite')\n\n  try {\n    var req = store.delete(key)\n  } catch (err) {\n    return this._nextTick(callback, err)\n  }\n\n  this.await(req, callback)\n}\n\nLevel.prototype._put = function (key, value, options, callback) {\n  var store = this.store('readwrite')\n\n  try {\n    // Will throw a DataError or DataCloneError if the environment\n    // does not support serializing the key or value respectively.\n    var req = store.put(value, key)\n  } catch (err) {\n    return this._nextTick(callback, err)\n  }\n\n  this.await(req, callback)\n}\n\nLevel.prototype._serializeKey = function (key) {\n  return serialize(key, this.supports.bufferKeys)\n}\n\nLevel.prototype._serializeValue = function (value) {\n  return serialize(value, true)\n}\n\nLevel.prototype._iterator = function (options) {\n  return new Iterator(this, this.location, options)\n}\n\nLevel.prototype._batch = function (operations, options, callback) {\n  if (operations.length === 0) return this._nextTick(callback)\n\n  var store = this.store('readwrite')\n  var transaction = store.transaction\n  var index = 0\n  var error\n\n  transaction.onabort = function () {\n    callback(error || transaction.error || new Error('aborted by user'))\n  }\n\n  transaction.oncomplete = function () {\n    callback()\n  }\n\n  // Wait for a request to complete before making the next, saving CPU.\n  function loop () {\n    var op = operations[index++]\n    var key = op.key\n\n    try {\n      var req = op.type === 'del' ? store.delete(key) : store.put(op.value, key)\n    } catch (err) {\n      error = err\n      transaction.abort()\n      return\n    }\n\n    if (index < operations.length) {\n      req.onsuccess = loop\n    }\n  }\n\n  loop()\n}\n\nLevel.prototype._clear = function (options, callback) {\n  try {\n    var keyRange = createKeyRange(options)\n  } catch (e) {\n    // The lower key is greater than the upper key.\n    // IndexedDB throws an error, but we'll just do nothing.\n    return this._nextTick(callback)\n  }\n\n  if (options.limit >= 0) {\n    // IDBObjectStore#delete(range) doesn't have such an option.\n    // Fall back to cursor-based implementation.\n    return clear(this, this.location, keyRange, options, callback)\n  }\n\n  try {\n    var store = this.store('readwrite')\n    var req = keyRange ? store.delete(keyRange) : store.clear()\n  } catch (err) {\n    return this._nextTick(callback, err)\n  }\n\n  this.await(req, callback)\n}\n\nLevel.prototype._close = function (callback) {\n  this.db.close()\n  this._nextTick(callback)\n}\n\n// NOTE: remove in a next major release\nLevel.prototype.upgrade = function (callback) {\n  if (this.status !== 'open') {\n    return this._nextTick(callback, new Error('cannot upgrade() before open()'))\n  }\n\n  var it = this.iterator()\n  var batchOptions = {}\n  var self = this\n\n  it._deserializeKey = it._deserializeValue = identity\n  next()\n\n  function next (err) {\n    if (err) return finish(err)\n    it.next(each)\n  }\n\n  function each (err, key, value) {\n    if (err || key === undefined) {\n      return finish(err)\n    }\n\n    var newKey = self._serializeKey(deserialize(key, true))\n    var newValue = self._serializeValue(deserialize(value, true))\n\n    // To bypass serialization on the old key, use _batch() instead of batch().\n    // NOTE: if we disable snapshotting (#86) this could lead to a loop of\n    // inserting and then iterating those same entries, because the new keys\n    // possibly sort after the old keys.\n    self._batch([\n      { type: 'del', key: key },\n      { type: 'put', key: newKey, value: newValue }\n    ], batchOptions, next)\n  }\n\n  function finish (err) {\n    it.end(function (err2) {\n      callback(err || err2)\n    })\n  }\n\n  function identity (data) {\n    return data\n  }\n}\n\nLevel.destroy = function (location, prefix, callback) {\n  if (typeof prefix === 'function') {\n    callback = prefix\n    prefix = DEFAULT_PREFIX\n  }\n  var request = indexedDB.deleteDatabase(prefix + location)\n  request.onsuccess = function () {\n    callback()\n  }\n  request.onerror = function (err) {\n    callback(err)\n  }\n}\n","start":1670465467168,"end":1670465467168,"order":"pre"},{"name":"commonjs","result":"/* global indexedDB */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/abstract-leveldown@6.2.3/node_modules/abstract-leveldown/index.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/level-js@5.0.2/node_modules/level-js/iterator.js?commonjs-proxy\";\nimport require$$3 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/level-js@5.0.2/node_modules/level-js/util/serialize.js?commonjs-proxy\";\nimport require$$4 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/level-js@5.0.2/node_modules/level-js/util/deserialize.js?commonjs-proxy\";\nimport require$$5 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/level-js@5.0.2/node_modules/level-js/util/support.js?commonjs-proxy\";\nimport require$$6 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/level-js@5.0.2/node_modules/level-js/util/clear.js?commonjs-proxy\";\nimport require$$7 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/level-js@5.0.2/node_modules/level-js/util/key-range.js?commonjs-proxy\";\n\n'use strict'\n\nvar levelJs = Level\n\nvar AbstractLevelDOWN = require$$0.AbstractLevelDOWN\nvar inherits = require$$1\nvar Iterator = require$$2\nvar serialize = require$$3\nvar deserialize = require$$4\nvar support = require$$5\nvar clear = require$$6\nvar createKeyRange = require$$7\n\nvar DEFAULT_PREFIX = 'level-js-'\n\nfunction Level (location, opts) {\n  if (!(this instanceof Level)) return new Level(location, opts)\n\n  AbstractLevelDOWN.call(this, {\n    bufferKeys: support.bufferKeys(indexedDB),\n    snapshots: true,\n    permanence: true,\n    clear: true\n  })\n\n  opts = opts || {}\n\n  if (typeof location !== 'string') {\n    throw new Error('constructor requires a location string argument')\n  }\n\n  this.location = location\n  this.prefix = opts.prefix == null ? DEFAULT_PREFIX : opts.prefix\n  this.version = parseInt(opts.version || 1, 10)\n}\n\ninherits(Level, AbstractLevelDOWN)\n\nLevel.prototype.type = 'level-js'\n\nLevel.prototype._open = function (options, callback) {\n  var req = indexedDB.open(this.prefix + this.location, this.version)\n  var self = this\n\n  req.onerror = function () {\n    callback(req.error || new Error('unknown error'))\n  }\n\n  req.onsuccess = function () {\n    self.db = req.result\n    callback()\n  }\n\n  req.onupgradeneeded = function (ev) {\n    var db = ev.target.result\n\n    if (!db.objectStoreNames.contains(self.location)) {\n      db.createObjectStore(self.location)\n    }\n  }\n}\n\nLevel.prototype.store = function (mode) {\n  var transaction = this.db.transaction([this.location], mode)\n  return transaction.objectStore(this.location)\n}\n\nLevel.prototype.await = function (request, callback) {\n  var transaction = request.transaction\n\n  // Take advantage of the fact that a non-canceled request error aborts\n  // the transaction. I.e. no need to listen for \"request.onerror\".\n  transaction.onabort = function () {\n    callback(transaction.error || new Error('aborted by user'))\n  }\n\n  transaction.oncomplete = function () {\n    callback(null, request.result)\n  }\n}\n\nLevel.prototype._get = function (key, options, callback) {\n  var store = this.store('readonly')\n\n  try {\n    var req = store.get(key)\n  } catch (err) {\n    return this._nextTick(callback, err)\n  }\n\n  this.await(req, function (err, value) {\n    if (err) return callback(err)\n\n    if (value === undefined) {\n      // 'NotFound' error, consistent with LevelDOWN API\n      return callback(new Error('NotFound'))\n    }\n\n    callback(null, deserialize(value, options.asBuffer))\n  })\n}\n\nLevel.prototype._del = function (key, options, callback) {\n  var store = this.store('readwrite')\n\n  try {\n    var req = store.delete(key)\n  } catch (err) {\n    return this._nextTick(callback, err)\n  }\n\n  this.await(req, callback)\n}\n\nLevel.prototype._put = function (key, value, options, callback) {\n  var store = this.store('readwrite')\n\n  try {\n    // Will throw a DataError or DataCloneError if the environment\n    // does not support serializing the key or value respectively.\n    var req = store.put(value, key)\n  } catch (err) {\n    return this._nextTick(callback, err)\n  }\n\n  this.await(req, callback)\n}\n\nLevel.prototype._serializeKey = function (key) {\n  return serialize(key, this.supports.bufferKeys)\n}\n\nLevel.prototype._serializeValue = function (value) {\n  return serialize(value, true)\n}\n\nLevel.prototype._iterator = function (options) {\n  return new Iterator(this, this.location, options)\n}\n\nLevel.prototype._batch = function (operations, options, callback) {\n  if (operations.length === 0) return this._nextTick(callback)\n\n  var store = this.store('readwrite')\n  var transaction = store.transaction\n  var index = 0\n  var error\n\n  transaction.onabort = function () {\n    callback(error || transaction.error || new Error('aborted by user'))\n  }\n\n  transaction.oncomplete = function () {\n    callback()\n  }\n\n  // Wait for a request to complete before making the next, saving CPU.\n  function loop () {\n    var op = operations[index++]\n    var key = op.key\n\n    try {\n      var req = op.type === 'del' ? store.delete(key) : store.put(op.value, key)\n    } catch (err) {\n      error = err\n      transaction.abort()\n      return\n    }\n\n    if (index < operations.length) {\n      req.onsuccess = loop\n    }\n  }\n\n  loop()\n}\n\nLevel.prototype._clear = function (options, callback) {\n  try {\n    var keyRange = createKeyRange(options)\n  } catch (e) {\n    // The lower key is greater than the upper key.\n    // IndexedDB throws an error, but we'll just do nothing.\n    return this._nextTick(callback)\n  }\n\n  if (options.limit >= 0) {\n    // IDBObjectStore#delete(range) doesn't have such an option.\n    // Fall back to cursor-based implementation.\n    return clear(this, this.location, keyRange, options, callback)\n  }\n\n  try {\n    var store = this.store('readwrite')\n    var req = keyRange ? store.delete(keyRange) : store.clear()\n  } catch (err) {\n    return this._nextTick(callback, err)\n  }\n\n  this.await(req, callback)\n}\n\nLevel.prototype._close = function (callback) {\n  this.db.close()\n  this._nextTick(callback)\n}\n\n// NOTE: remove in a next major release\nLevel.prototype.upgrade = function (callback) {\n  if (this.status !== 'open') {\n    return this._nextTick(callback, new Error('cannot upgrade() before open()'))\n  }\n\n  var it = this.iterator()\n  var batchOptions = {}\n  var self = this\n\n  it._deserializeKey = it._deserializeValue = identity\n  next()\n\n  function next (err) {\n    if (err) return finish(err)\n    it.next(each)\n  }\n\n  function each (err, key, value) {\n    if (err || key === undefined) {\n      return finish(err)\n    }\n\n    var newKey = self._serializeKey(deserialize(key, true))\n    var newValue = self._serializeValue(deserialize(value, true))\n\n    // To bypass serialization on the old key, use _batch() instead of batch().\n    // NOTE: if we disable snapshotting (#86) this could lead to a loop of\n    // inserting and then iterating those same entries, because the new keys\n    // possibly sort after the old keys.\n    self._batch([\n      { type: 'del', key: key },\n      { type: 'put', key: newKey, value: newValue }\n    ], batchOptions, next)\n  }\n\n  function finish (err) {\n    it.end(function (err2) {\n      callback(err || err2)\n    })\n  }\n\n  function identity (data) {\n    return data\n  }\n}\n\nLevel.destroy = function (location, prefix, callback) {\n  if (typeof prefix === 'function') {\n    callback = prefix\n    prefix = DEFAULT_PREFIX\n  }\n  var request = indexedDB.deleteDatabase(prefix + location)\n  request.onsuccess = function () {\n    callback()\n  }\n  request.onerror = function (err) {\n    callback(err)\n  }\n}\n\nexport default levelJs;\nexport { levelJs as __moduleExports };","start":1670465467168,"end":1670465471271,"order":"normal"},{"name":"polyfill-node","result":"/* global indexedDB */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/abstract-leveldown@6.2.3/node_modules/abstract-leveldown/index.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/level-js@5.0.2/node_modules/level-js/iterator.js?commonjs-proxy\";\nimport require$$3 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/level-js@5.0.2/node_modules/level-js/util/serialize.js?commonjs-proxy\";\nimport require$$4 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/level-js@5.0.2/node_modules/level-js/util/deserialize.js?commonjs-proxy\";\nimport require$$5 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/level-js@5.0.2/node_modules/level-js/util/support.js?commonjs-proxy\";\nimport require$$6 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/level-js@5.0.2/node_modules/level-js/util/clear.js?commonjs-proxy\";\nimport require$$7 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/level-js@5.0.2/node_modules/level-js/util/key-range.js?commonjs-proxy\";\n\n'use strict'\n\nvar levelJs = Level\n\nvar AbstractLevelDOWN = require$$0.AbstractLevelDOWN\nvar inherits = require$$1\nvar Iterator = require$$2\nvar serialize = require$$3\nvar deserialize = require$$4\nvar support = require$$5\nvar clear = require$$6\nvar createKeyRange = require$$7\n\nvar DEFAULT_PREFIX = 'level-js-'\n\nfunction Level (location, opts) {\n  if (!(this instanceof Level)) return new Level(location, opts)\n\n  AbstractLevelDOWN.call(this, {\n    bufferKeys: support.bufferKeys(indexedDB),\n    snapshots: true,\n    permanence: true,\n    clear: true\n  })\n\n  opts = opts || {}\n\n  if (typeof location !== 'string') {\n    throw new Error('constructor requires a location string argument')\n  }\n\n  this.location = location\n  this.prefix = opts.prefix == null ? DEFAULT_PREFIX : opts.prefix\n  this.version = parseInt(opts.version || 1, 10)\n}\n\ninherits(Level, AbstractLevelDOWN)\n\nLevel.prototype.type = 'level-js'\n\nLevel.prototype._open = function (options, callback) {\n  var req = indexedDB.open(this.prefix + this.location, this.version)\n  var self = this\n\n  req.onerror = function () {\n    callback(req.error || new Error('unknown error'))\n  }\n\n  req.onsuccess = function () {\n    self.db = req.result\n    callback()\n  }\n\n  req.onupgradeneeded = function (ev) {\n    var db = ev.target.result\n\n    if (!db.objectStoreNames.contains(self.location)) {\n      db.createObjectStore(self.location)\n    }\n  }\n}\n\nLevel.prototype.store = function (mode) {\n  var transaction = this.db.transaction([this.location], mode)\n  return transaction.objectStore(this.location)\n}\n\nLevel.prototype.await = function (request, callback) {\n  var transaction = request.transaction\n\n  // Take advantage of the fact that a non-canceled request error aborts\n  // the transaction. I.e. no need to listen for \"request.onerror\".\n  transaction.onabort = function () {\n    callback(transaction.error || new Error('aborted by user'))\n  }\n\n  transaction.oncomplete = function () {\n    callback(null, request.result)\n  }\n}\n\nLevel.prototype._get = function (key, options, callback) {\n  var store = this.store('readonly')\n\n  try {\n    var req = store.get(key)\n  } catch (err) {\n    return this._nextTick(callback, err)\n  }\n\n  this.await(req, function (err, value) {\n    if (err) return callback(err)\n\n    if (value === undefined) {\n      // 'NotFound' error, consistent with LevelDOWN API\n      return callback(new Error('NotFound'))\n    }\n\n    callback(null, deserialize(value, options.asBuffer))\n  })\n}\n\nLevel.prototype._del = function (key, options, callback) {\n  var store = this.store('readwrite')\n\n  try {\n    var req = store.delete(key)\n  } catch (err) {\n    return this._nextTick(callback, err)\n  }\n\n  this.await(req, callback)\n}\n\nLevel.prototype._put = function (key, value, options, callback) {\n  var store = this.store('readwrite')\n\n  try {\n    // Will throw a DataError or DataCloneError if the environment\n    // does not support serializing the key or value respectively.\n    var req = store.put(value, key)\n  } catch (err) {\n    return this._nextTick(callback, err)\n  }\n\n  this.await(req, callback)\n}\n\nLevel.prototype._serializeKey = function (key) {\n  return serialize(key, this.supports.bufferKeys)\n}\n\nLevel.prototype._serializeValue = function (value) {\n  return serialize(value, true)\n}\n\nLevel.prototype._iterator = function (options) {\n  return new Iterator(this, this.location, options)\n}\n\nLevel.prototype._batch = function (operations, options, callback) {\n  if (operations.length === 0) return this._nextTick(callback)\n\n  var store = this.store('readwrite')\n  var transaction = store.transaction\n  var index = 0\n  var error\n\n  transaction.onabort = function () {\n    callback(error || transaction.error || new Error('aborted by user'))\n  }\n\n  transaction.oncomplete = function () {\n    callback()\n  }\n\n  // Wait for a request to complete before making the next, saving CPU.\n  function loop () {\n    var op = operations[index++]\n    var key = op.key\n\n    try {\n      var req = op.type === 'del' ? store.delete(key) : store.put(op.value, key)\n    } catch (err) {\n      error = err\n      transaction.abort()\n      return\n    }\n\n    if (index < operations.length) {\n      req.onsuccess = loop\n    }\n  }\n\n  loop()\n}\n\nLevel.prototype._clear = function (options, callback) {\n  try {\n    var keyRange = createKeyRange(options)\n  } catch (e) {\n    // The lower key is greater than the upper key.\n    // IndexedDB throws an error, but we'll just do nothing.\n    return this._nextTick(callback)\n  }\n\n  if (options.limit >= 0) {\n    // IDBObjectStore#delete(range) doesn't have such an option.\n    // Fall back to cursor-based implementation.\n    return clear(this, this.location, keyRange, options, callback)\n  }\n\n  try {\n    var store = this.store('readwrite')\n    var req = keyRange ? store.delete(keyRange) : store.clear()\n  } catch (err) {\n    return this._nextTick(callback, err)\n  }\n\n  this.await(req, callback)\n}\n\nLevel.prototype._close = function (callback) {\n  this.db.close()\n  this._nextTick(callback)\n}\n\n// NOTE: remove in a next major release\nLevel.prototype.upgrade = function (callback) {\n  if (this.status !== 'open') {\n    return this._nextTick(callback, new Error('cannot upgrade() before open()'))\n  }\n\n  var it = this.iterator()\n  var batchOptions = {}\n  var self = this\n\n  it._deserializeKey = it._deserializeValue = identity\n  next()\n\n  function next (err) {\n    if (err) return finish(err)\n    it.next(each)\n  }\n\n  function each (err, key, value) {\n    if (err || key === undefined) {\n      return finish(err)\n    }\n\n    var newKey = self._serializeKey(deserialize(key, true))\n    var newValue = self._serializeValue(deserialize(value, true))\n\n    // To bypass serialization on the old key, use _batch() instead of batch().\n    // NOTE: if we disable snapshotting (#86) this could lead to a loop of\n    // inserting and then iterating those same entries, because the new keys\n    // possibly sort after the old keys.\n    self._batch([\n      { type: 'del', key: key },\n      { type: 'put', key: newKey, value: newValue }\n    ], batchOptions, next)\n  }\n\n  function finish (err) {\n    it.end(function (err2) {\n      callback(err || err2)\n    })\n  }\n\n  function identity (data) {\n    return data\n  }\n}\n\nLevel.destroy = function (location, prefix, callback) {\n  if (typeof prefix === 'function') {\n    callback = prefix\n    prefix = DEFAULT_PREFIX\n  }\n  var request = indexedDB.deleteDatabase(prefix + location)\n  request.onsuccess = function () {\n    callback()\n  }\n  request.onerror = function (err) {\n    callback(err)\n  }\n}\n\nexport default levelJs;\nexport { levelJs as __moduleExports };","start":1670465471271,"end":1670465471274,"order":"normal"}]}
