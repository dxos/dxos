{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@sentry+utils@7.20.0/node_modules/@sentry/utils/esm/buildPolyfills/_asyncNullishCoalesce.js","transforms":[{"name":"vite:load-fallback","result":"import { _nullishCoalesce } from './_nullishCoalesce.js';\n\n// adapted from Sucrase (https://github.com/alangpierce/sucrase)\n\n/**\n * Polyfill for the nullish coalescing operator (`??`), when used in situations where at least one of the values is the\n * result of an async operation.\n *\n * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param lhs The value of the expression to the left of the `??`\n * @param rhsFn A function returning the value of the expression to the right of the `??`\n * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n */\n// eslint-disable-next-line @sentry-internal/sdk/no-async-await\nasync function _asyncNullishCoalesce(lhs, rhsFn) {\n  return _nullishCoalesce(lhs, rhsFn);\n}\n\n// Sucrase version:\n// async function _asyncNullishCoalesce(lhs, rhsFn) {\n//   if (lhs != null) {\n//     return lhs;\n//   } else {\n//     return await rhsFn();\n//   }\n// }\n\nexport { _asyncNullishCoalesce };\n//# sourceMappingURL=_asyncNullishCoalesce.js.map\n","start":1670465470367,"end":1670465470594},{"name":"vite:react-babel","result":"import { _nullishCoalesce } from './_nullishCoalesce.js';\n\n// adapted from Sucrase (https://github.com/alangpierce/sucrase)\n\n/**\n * Polyfill for the nullish coalescing operator (`??`), when used in situations where at least one of the values is the\n * result of an async operation.\n *\n * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param lhs The value of the expression to the left of the `??`\n * @param rhsFn A function returning the value of the expression to the right of the `??`\n * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n */\n// eslint-disable-next-line @sentry-internal/sdk/no-async-await\nasync function _asyncNullishCoalesce(lhs, rhsFn) {\n  return _nullishCoalesce(lhs, rhsFn);\n}\n\n// Sucrase version:\n// async function _asyncNullishCoalesce(lhs, rhsFn) {\n//   if (lhs != null) {\n//     return lhs;\n//   } else {\n//     return await rhsFn();\n//   }\n// }\n\nexport { _asyncNullishCoalesce };\n//# sourceMappingURL=_asyncNullishCoalesce.js.map\n","start":1670465470594,"end":1670465470594,"order":"pre"}]}
