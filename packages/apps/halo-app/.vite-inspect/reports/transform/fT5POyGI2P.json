{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/root.js","transforms":[{"name":"vite:load-fallback","result":"\"use strict\";\nmodule.exports = Root;\n\n// extends Namespace\nvar Namespace = require(\"./namespace\");\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\n\nvar Field   = require(\"./field\"),\n    Enum    = require(\"./enum\"),\n    OneOf   = require(\"./oneof\"),\n    util    = require(\"./util\");\n\nvar Type,   // cyclic\n    parse,  // might be excluded\n    common; // \"\n\n/**\n * Constructs a new root namespace instance.\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\n * @extends NamespaceBase\n * @constructor\n * @param {Object.<string,*>} [options] Top level options\n */\nfunction Root(options) {\n    Namespace.call(this, \"\", options);\n\n    /**\n     * Deferred extension fields.\n     * @type {Field[]}\n     */\n    this.deferred = [];\n\n    /**\n     * Resolved file names of loaded files.\n     * @type {string[]}\n     */\n    this.files = [];\n}\n\n/**\n * Loads a namespace descriptor into a root namespace.\n * @param {INamespace} json Nameespace descriptor\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\n * @returns {Root} Root namespace\n */\nRoot.fromJSON = function fromJSON(json, root) {\n    if (!root)\n        root = new Root();\n    if (json.options)\n        root.setOptions(json.options);\n    return root.addJSON(json.nested);\n};\n\n/**\n * Resolves the path of an imported file, relative to the importing origin.\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\n * @function\n * @param {string} origin The file name of the importing file\n * @param {string} target The file name being imported\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\n */\nRoot.prototype.resolvePath = util.path.resolve;\n\n/**\n * Fetch content from file path or url\n * This method exists so you can override it with your own logic.\n * @function\n * @param {string} path File path or url\n * @param {FetchCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.fetch = util.fetch;\n\n// A symbol-like function to safely signal synchronous loading\n/* istanbul ignore next */\nfunction SYNC() {} // eslint-disable-line no-empty-function\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} options Parse options\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.load = function load(filename, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = undefined;\n    }\n    var self = this;\n    if (!callback)\n        return util.asPromise(load, self, filename, options);\n\n    var sync = callback === SYNC; // undocumented\n\n    // Finishes loading by calling the callback (exactly once)\n    function finish(err, root) {\n        /* istanbul ignore if */\n        if (!callback)\n            return;\n        var cb = callback;\n        callback = null;\n        if (sync)\n            throw err;\n        cb(err, root);\n    }\n\n    // Bundled definition existence checking\n    function getBundledFileName(filename) {\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\n        if (idx > -1) {\n            var altname = filename.substring(idx);\n            if (altname in common) return altname;\n        }\n        return null;\n    }\n\n    // Processes a single file\n    function process(filename, source) {\n        try {\n            if (util.isString(source) && source.charAt(0) === \"{\")\n                source = JSON.parse(source);\n            if (!util.isString(source))\n                self.setOptions(source.options).addJSON(source.nested);\n            else {\n                parse.filename = filename;\n                var parsed = parse(source, self, options),\n                    resolved,\n                    i = 0;\n                if (parsed.imports)\n                    for (; i < parsed.imports.length; ++i)\n                        if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i]))\n                            fetch(resolved);\n                if (parsed.weakImports)\n                    for (i = 0; i < parsed.weakImports.length; ++i)\n                        if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i]))\n                            fetch(resolved, true);\n            }\n        } catch (err) {\n            finish(err);\n        }\n        if (!sync && !queued)\n            finish(null, self); // only once anyway\n    }\n\n    // Fetches a single file\n    function fetch(filename, weak) {\n\n        // Skip if already loaded / attempted\n        if (self.files.indexOf(filename) > -1)\n            return;\n        self.files.push(filename);\n\n        // Shortcut bundled definitions\n        if (filename in common) {\n            if (sync)\n                process(filename, common[filename]);\n            else {\n                ++queued;\n                setTimeout(function() {\n                    --queued;\n                    process(filename, common[filename]);\n                });\n            }\n            return;\n        }\n\n        // Otherwise fetch from disk or network\n        if (sync) {\n            var source;\n            try {\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\n            } catch (err) {\n                if (!weak)\n                    finish(err);\n                return;\n            }\n            process(filename, source);\n        } else {\n            ++queued;\n            self.fetch(filename, function(err, source) {\n                --queued;\n                /* istanbul ignore if */\n                if (!callback)\n                    return; // terminated meanwhile\n                if (err) {\n                    /* istanbul ignore else */\n                    if (!weak)\n                        finish(err);\n                    else if (!queued) // can't be covered reliably\n                        finish(null, self);\n                    return;\n                }\n                process(filename, source);\n            });\n        }\n    }\n    var queued = 0;\n\n    // Assembling the root namespace doesn't require working type\n    // references anymore, so we can load everything in parallel\n    if (util.isString(filename))\n        filename = [ filename ];\n    for (var i = 0, resolved; i < filename.length; ++i)\n        if (resolved = self.resolvePath(\"\", filename[i]))\n            fetch(resolved);\n\n    if (sync)\n        return self;\n    if (!queued)\n        finish(null, self);\n    return undefined;\n};\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Promise<Root>} Promise\n * @variation 3\n */\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\n * @function Root#loadSync\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n */\nRoot.prototype.loadSync = function loadSync(filename, options) {\n    if (!util.isNode)\n        throw Error(\"not supported\");\n    return this.load(filename, options, SYNC);\n};\n\n/**\n * @override\n */\nRoot.prototype.resolveAll = function resolveAll() {\n    if (this.deferred.length)\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n        }).join(\", \"));\n    return Namespace.prototype.resolveAll.call(this);\n};\n\n// only uppercased (and thus conflict-free) children are exposed, see below\nvar exposeRe = /^[A-Z]/;\n\n/**\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\n * @param {Root} root Root instance\n * @param {Field} field Declaring extension field witin the declaring type\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\n * @inner\n * @ignore\n */\nfunction tryHandleExtension(root, field) {\n    var extendedType = field.parent.lookup(field.extend);\n    if (extendedType) {\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n        sisterField.declaringField = field;\n        field.extensionField = sisterField;\n        extendedType.add(sisterField);\n        return true;\n    }\n    return false;\n}\n\n/**\n * Called when any object is added to this root or its sub-namespaces.\n * @param {ReflectionObject} object Object added\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleAdd = function _handleAdd(object) {\n    if (object instanceof Field) {\n\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\n            if (!tryHandleExtension(this, object))\n                this.deferred.push(object);\n\n    } else if (object instanceof Enum) {\n\n        if (exposeRe.test(object.name))\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\n\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\n\n        if (object instanceof Type) // Try to handle any deferred extensions\n            for (var i = 0; i < this.deferred.length;)\n                if (tryHandleExtension(this, this.deferred[i]))\n                    this.deferred.splice(i, 1);\n                else\n                    ++i;\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\n            this._handleAdd(object._nestedArray[j]);\n        if (exposeRe.test(object.name))\n            object.parent[object.name] = object; // expose namespace as property of its parent\n    }\n\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\n    // a static module with reflection-based solutions where the condition is met.\n};\n\n/**\n * Called when any object is removed from this root or its sub-namespaces.\n * @param {ReflectionObject} object Object removed\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleRemove = function _handleRemove(object) {\n    if (object instanceof Field) {\n\n        if (/* an extension field */ object.extend !== undefined) {\n            if (/* already handled */ object.extensionField) { // remove its sister field\n                object.extensionField.parent.remove(object.extensionField);\n                object.extensionField = null;\n            } else { // cancel the extension\n                var index = this.deferred.indexOf(object);\n                /* istanbul ignore else */\n                if (index > -1)\n                    this.deferred.splice(index, 1);\n            }\n        }\n\n    } else if (object instanceof Enum) {\n\n        if (exposeRe.test(object.name))\n            delete object.parent[object.name]; // unexpose enum values\n\n    } else if (object instanceof Namespace) {\n\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\n            this._handleRemove(object._nestedArray[i]);\n\n        if (exposeRe.test(object.name))\n            delete object.parent[object.name]; // unexpose namespaces\n\n    }\n};\n\n// Sets up cyclic dependencies (called in index-light)\nRoot._configure = function(Type_, parse_, common_) {\n    Type   = Type_;\n    parse  = parse_;\n    common = common_;\n};\n","start":1670465470595,"end":1670465470647},{"name":"vite:react-babel","result":"\"use strict\";\nmodule.exports = Root;\n\n// extends Namespace\nvar Namespace = require(\"./namespace\");\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\n\nvar Field   = require(\"./field\"),\n    Enum    = require(\"./enum\"),\n    OneOf   = require(\"./oneof\"),\n    util    = require(\"./util\");\n\nvar Type,   // cyclic\n    parse,  // might be excluded\n    common; // \"\n\n/**\n * Constructs a new root namespace instance.\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\n * @extends NamespaceBase\n * @constructor\n * @param {Object.<string,*>} [options] Top level options\n */\nfunction Root(options) {\n    Namespace.call(this, \"\", options);\n\n    /**\n     * Deferred extension fields.\n     * @type {Field[]}\n     */\n    this.deferred = [];\n\n    /**\n     * Resolved file names of loaded files.\n     * @type {string[]}\n     */\n    this.files = [];\n}\n\n/**\n * Loads a namespace descriptor into a root namespace.\n * @param {INamespace} json Nameespace descriptor\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\n * @returns {Root} Root namespace\n */\nRoot.fromJSON = function fromJSON(json, root) {\n    if (!root)\n        root = new Root();\n    if (json.options)\n        root.setOptions(json.options);\n    return root.addJSON(json.nested);\n};\n\n/**\n * Resolves the path of an imported file, relative to the importing origin.\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\n * @function\n * @param {string} origin The file name of the importing file\n * @param {string} target The file name being imported\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\n */\nRoot.prototype.resolvePath = util.path.resolve;\n\n/**\n * Fetch content from file path or url\n * This method exists so you can override it with your own logic.\n * @function\n * @param {string} path File path or url\n * @param {FetchCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.fetch = util.fetch;\n\n// A symbol-like function to safely signal synchronous loading\n/* istanbul ignore next */\nfunction SYNC() {} // eslint-disable-line no-empty-function\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} options Parse options\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.load = function load(filename, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = undefined;\n    }\n    var self = this;\n    if (!callback)\n        return util.asPromise(load, self, filename, options);\n\n    var sync = callback === SYNC; // undocumented\n\n    // Finishes loading by calling the callback (exactly once)\n    function finish(err, root) {\n        /* istanbul ignore if */\n        if (!callback)\n            return;\n        var cb = callback;\n        callback = null;\n        if (sync)\n            throw err;\n        cb(err, root);\n    }\n\n    // Bundled definition existence checking\n    function getBundledFileName(filename) {\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\n        if (idx > -1) {\n            var altname = filename.substring(idx);\n            if (altname in common) return altname;\n        }\n        return null;\n    }\n\n    // Processes a single file\n    function process(filename, source) {\n        try {\n            if (util.isString(source) && source.charAt(0) === \"{\")\n                source = JSON.parse(source);\n            if (!util.isString(source))\n                self.setOptions(source.options).addJSON(source.nested);\n            else {\n                parse.filename = filename;\n                var parsed = parse(source, self, options),\n                    resolved,\n                    i = 0;\n                if (parsed.imports)\n                    for (; i < parsed.imports.length; ++i)\n                        if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i]))\n                            fetch(resolved);\n                if (parsed.weakImports)\n                    for (i = 0; i < parsed.weakImports.length; ++i)\n                        if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i]))\n                            fetch(resolved, true);\n            }\n        } catch (err) {\n            finish(err);\n        }\n        if (!sync && !queued)\n            finish(null, self); // only once anyway\n    }\n\n    // Fetches a single file\n    function fetch(filename, weak) {\n\n        // Skip if already loaded / attempted\n        if (self.files.indexOf(filename) > -1)\n            return;\n        self.files.push(filename);\n\n        // Shortcut bundled definitions\n        if (filename in common) {\n            if (sync)\n                process(filename, common[filename]);\n            else {\n                ++queued;\n                setTimeout(function() {\n                    --queued;\n                    process(filename, common[filename]);\n                });\n            }\n            return;\n        }\n\n        // Otherwise fetch from disk or network\n        if (sync) {\n            var source;\n            try {\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\n            } catch (err) {\n                if (!weak)\n                    finish(err);\n                return;\n            }\n            process(filename, source);\n        } else {\n            ++queued;\n            self.fetch(filename, function(err, source) {\n                --queued;\n                /* istanbul ignore if */\n                if (!callback)\n                    return; // terminated meanwhile\n                if (err) {\n                    /* istanbul ignore else */\n                    if (!weak)\n                        finish(err);\n                    else if (!queued) // can't be covered reliably\n                        finish(null, self);\n                    return;\n                }\n                process(filename, source);\n            });\n        }\n    }\n    var queued = 0;\n\n    // Assembling the root namespace doesn't require working type\n    // references anymore, so we can load everything in parallel\n    if (util.isString(filename))\n        filename = [ filename ];\n    for (var i = 0, resolved; i < filename.length; ++i)\n        if (resolved = self.resolvePath(\"\", filename[i]))\n            fetch(resolved);\n\n    if (sync)\n        return self;\n    if (!queued)\n        finish(null, self);\n    return undefined;\n};\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Promise<Root>} Promise\n * @variation 3\n */\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\n * @function Root#loadSync\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n */\nRoot.prototype.loadSync = function loadSync(filename, options) {\n    if (!util.isNode)\n        throw Error(\"not supported\");\n    return this.load(filename, options, SYNC);\n};\n\n/**\n * @override\n */\nRoot.prototype.resolveAll = function resolveAll() {\n    if (this.deferred.length)\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n        }).join(\", \"));\n    return Namespace.prototype.resolveAll.call(this);\n};\n\n// only uppercased (and thus conflict-free) children are exposed, see below\nvar exposeRe = /^[A-Z]/;\n\n/**\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\n * @param {Root} root Root instance\n * @param {Field} field Declaring extension field witin the declaring type\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\n * @inner\n * @ignore\n */\nfunction tryHandleExtension(root, field) {\n    var extendedType = field.parent.lookup(field.extend);\n    if (extendedType) {\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n        sisterField.declaringField = field;\n        field.extensionField = sisterField;\n        extendedType.add(sisterField);\n        return true;\n    }\n    return false;\n}\n\n/**\n * Called when any object is added to this root or its sub-namespaces.\n * @param {ReflectionObject} object Object added\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleAdd = function _handleAdd(object) {\n    if (object instanceof Field) {\n\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\n            if (!tryHandleExtension(this, object))\n                this.deferred.push(object);\n\n    } else if (object instanceof Enum) {\n\n        if (exposeRe.test(object.name))\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\n\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\n\n        if (object instanceof Type) // Try to handle any deferred extensions\n            for (var i = 0; i < this.deferred.length;)\n                if (tryHandleExtension(this, this.deferred[i]))\n                    this.deferred.splice(i, 1);\n                else\n                    ++i;\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\n            this._handleAdd(object._nestedArray[j]);\n        if (exposeRe.test(object.name))\n            object.parent[object.name] = object; // expose namespace as property of its parent\n    }\n\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\n    // a static module with reflection-based solutions where the condition is met.\n};\n\n/**\n * Called when any object is removed from this root or its sub-namespaces.\n * @param {ReflectionObject} object Object removed\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleRemove = function _handleRemove(object) {\n    if (object instanceof Field) {\n\n        if (/* an extension field */ object.extend !== undefined) {\n            if (/* already handled */ object.extensionField) { // remove its sister field\n                object.extensionField.parent.remove(object.extensionField);\n                object.extensionField = null;\n            } else { // cancel the extension\n                var index = this.deferred.indexOf(object);\n                /* istanbul ignore else */\n                if (index > -1)\n                    this.deferred.splice(index, 1);\n            }\n        }\n\n    } else if (object instanceof Enum) {\n\n        if (exposeRe.test(object.name))\n            delete object.parent[object.name]; // unexpose enum values\n\n    } else if (object instanceof Namespace) {\n\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\n            this._handleRemove(object._nestedArray[i]);\n\n        if (exposeRe.test(object.name))\n            delete object.parent[object.name]; // unexpose namespaces\n\n    }\n};\n\n// Sets up cyclic dependencies (called in index-light)\nRoot._configure = function(Type_, parse_, common_) {\n    Type   = Type_;\n    parse  = parse_;\n    common = common_;\n};\n","start":1670465470647,"end":1670465470647,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/namespace.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/field.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/enum.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/oneof.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/util.js?commonjs-wrapped\";\n\nvar root;\nvar hasRequiredRoot;\n\nfunction requireRoot () {\n\tif (hasRequiredRoot) return root;\n\thasRequiredRoot = 1;\n\t\"use strict\";\n\troot = Root;\n\n\t// extends Namespace\n\tvar Namespace = require$$0();\n\t((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\n\n\tvar Field   = require$$1(),\n\t    Enum    = require$$2(),\n\t    OneOf   = require$$3(),\n\t    util    = require$$4();\n\n\tvar Type,   // cyclic\n\t    parse,  // might be excluded\n\t    common; // \"\n\n\t/**\n\t * Constructs a new root namespace instance.\n\t * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\n\t * @extends NamespaceBase\n\t * @constructor\n\t * @param {Object.<string,*>} [options] Top level options\n\t */\n\tfunction Root(options) {\n\t    Namespace.call(this, \"\", options);\n\n\t    /**\n\t     * Deferred extension fields.\n\t     * @type {Field[]}\n\t     */\n\t    this.deferred = [];\n\n\t    /**\n\t     * Resolved file names of loaded files.\n\t     * @type {string[]}\n\t     */\n\t    this.files = [];\n\t}\n\n\t/**\n\t * Loads a namespace descriptor into a root namespace.\n\t * @param {INamespace} json Nameespace descriptor\n\t * @param {Root} [root] Root namespace, defaults to create a new one if omitted\n\t * @returns {Root} Root namespace\n\t */\n\tRoot.fromJSON = function fromJSON(json, root) {\n\t    if (!root)\n\t        root = new Root();\n\t    if (json.options)\n\t        root.setOptions(json.options);\n\t    return root.addJSON(json.nested);\n\t};\n\n\t/**\n\t * Resolves the path of an imported file, relative to the importing origin.\n\t * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\n\t * @function\n\t * @param {string} origin The file name of the importing file\n\t * @param {string} target The file name being imported\n\t * @returns {string|null} Resolved path to `target` or `null` to skip the file\n\t */\n\tRoot.prototype.resolvePath = util.path.resolve;\n\n\t/**\n\t * Fetch content from file path or url\n\t * This method exists so you can override it with your own logic.\n\t * @function\n\t * @param {string} path File path or url\n\t * @param {FetchCallback} callback Callback function\n\t * @returns {undefined}\n\t */\n\tRoot.prototype.fetch = util.fetch;\n\n\t// A symbol-like function to safely signal synchronous loading\n\t/* istanbul ignore next */\n\tfunction SYNC() {} // eslint-disable-line no-empty-function\n\n\t/**\n\t * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n\t * @param {string|string[]} filename Names of one or multiple files to load\n\t * @param {IParseOptions} options Parse options\n\t * @param {LoadCallback} callback Callback function\n\t * @returns {undefined}\n\t */\n\tRoot.prototype.load = function load(filename, options, callback) {\n\t    if (typeof options === \"function\") {\n\t        callback = options;\n\t        options = undefined;\n\t    }\n\t    var self = this;\n\t    if (!callback)\n\t        return util.asPromise(load, self, filename, options);\n\n\t    var sync = callback === SYNC; // undocumented\n\n\t    // Finishes loading by calling the callback (exactly once)\n\t    function finish(err, root) {\n\t        /* istanbul ignore if */\n\t        if (!callback)\n\t            return;\n\t        var cb = callback;\n\t        callback = null;\n\t        if (sync)\n\t            throw err;\n\t        cb(err, root);\n\t    }\n\n\t    // Bundled definition existence checking\n\t    function getBundledFileName(filename) {\n\t        var idx = filename.lastIndexOf(\"google/protobuf/\");\n\t        if (idx > -1) {\n\t            var altname = filename.substring(idx);\n\t            if (altname in common) return altname;\n\t        }\n\t        return null;\n\t    }\n\n\t    // Processes a single file\n\t    function process(filename, source) {\n\t        try {\n\t            if (util.isString(source) && source.charAt(0) === \"{\")\n\t                source = JSON.parse(source);\n\t            if (!util.isString(source))\n\t                self.setOptions(source.options).addJSON(source.nested);\n\t            else {\n\t                parse.filename = filename;\n\t                var parsed = parse(source, self, options),\n\t                    resolved,\n\t                    i = 0;\n\t                if (parsed.imports)\n\t                    for (; i < parsed.imports.length; ++i)\n\t                        if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i]))\n\t                            fetch(resolved);\n\t                if (parsed.weakImports)\n\t                    for (i = 0; i < parsed.weakImports.length; ++i)\n\t                        if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i]))\n\t                            fetch(resolved, true);\n\t            }\n\t        } catch (err) {\n\t            finish(err);\n\t        }\n\t        if (!sync && !queued)\n\t            finish(null, self); // only once anyway\n\t    }\n\n\t    // Fetches a single file\n\t    function fetch(filename, weak) {\n\n\t        // Skip if already loaded / attempted\n\t        if (self.files.indexOf(filename) > -1)\n\t            return;\n\t        self.files.push(filename);\n\n\t        // Shortcut bundled definitions\n\t        if (filename in common) {\n\t            if (sync)\n\t                process(filename, common[filename]);\n\t            else {\n\t                ++queued;\n\t                setTimeout(function() {\n\t                    --queued;\n\t                    process(filename, common[filename]);\n\t                });\n\t            }\n\t            return;\n\t        }\n\n\t        // Otherwise fetch from disk or network\n\t        if (sync) {\n\t            var source;\n\t            try {\n\t                source = util.fs.readFileSync(filename).toString(\"utf8\");\n\t            } catch (err) {\n\t                if (!weak)\n\t                    finish(err);\n\t                return;\n\t            }\n\t            process(filename, source);\n\t        } else {\n\t            ++queued;\n\t            self.fetch(filename, function(err, source) {\n\t                --queued;\n\t                /* istanbul ignore if */\n\t                if (!callback)\n\t                    return; // terminated meanwhile\n\t                if (err) {\n\t                    /* istanbul ignore else */\n\t                    if (!weak)\n\t                        finish(err);\n\t                    else if (!queued) // can't be covered reliably\n\t                        finish(null, self);\n\t                    return;\n\t                }\n\t                process(filename, source);\n\t            });\n\t        }\n\t    }\n\t    var queued = 0;\n\n\t    // Assembling the root namespace doesn't require working type\n\t    // references anymore, so we can load everything in parallel\n\t    if (util.isString(filename))\n\t        filename = [ filename ];\n\t    for (var i = 0, resolved; i < filename.length; ++i)\n\t        if (resolved = self.resolvePath(\"\", filename[i]))\n\t            fetch(resolved);\n\n\t    if (sync)\n\t        return self;\n\t    if (!queued)\n\t        finish(null, self);\n\t    return undefined;\n\t};\n\t// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n\t/**\n\t * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n\t * @function Root#load\n\t * @param {string|string[]} filename Names of one or multiple files to load\n\t * @param {LoadCallback} callback Callback function\n\t * @returns {undefined}\n\t * @variation 2\n\t */\n\t// function load(filename:string, callback:LoadCallback):undefined\n\n\t/**\n\t * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\n\t * @function Root#load\n\t * @param {string|string[]} filename Names of one or multiple files to load\n\t * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n\t * @returns {Promise<Root>} Promise\n\t * @variation 3\n\t */\n\t// function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n\t/**\n\t * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\n\t * @function Root#loadSync\n\t * @param {string|string[]} filename Names of one or multiple files to load\n\t * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n\t * @returns {Root} Root namespace\n\t * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n\t */\n\tRoot.prototype.loadSync = function loadSync(filename, options) {\n\t    if (!util.isNode)\n\t        throw Error(\"not supported\");\n\t    return this.load(filename, options, SYNC);\n\t};\n\n\t/**\n\t * @override\n\t */\n\tRoot.prototype.resolveAll = function resolveAll() {\n\t    if (this.deferred.length)\n\t        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\n\t            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n\t        }).join(\", \"));\n\t    return Namespace.prototype.resolveAll.call(this);\n\t};\n\n\t// only uppercased (and thus conflict-free) children are exposed, see below\n\tvar exposeRe = /^[A-Z]/;\n\n\t/**\n\t * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\n\t * @param {Root} root Root instance\n\t * @param {Field} field Declaring extension field witin the declaring type\n\t * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\n\t * @inner\n\t * @ignore\n\t */\n\tfunction tryHandleExtension(root, field) {\n\t    var extendedType = field.parent.lookup(field.extend);\n\t    if (extendedType) {\n\t        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n\t        sisterField.declaringField = field;\n\t        field.extensionField = sisterField;\n\t        extendedType.add(sisterField);\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\n\t/**\n\t * Called when any object is added to this root or its sub-namespaces.\n\t * @param {ReflectionObject} object Object added\n\t * @returns {undefined}\n\t * @private\n\t */\n\tRoot.prototype._handleAdd = function _handleAdd(object) {\n\t    if (object instanceof Field) {\n\n\t        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\n\t            if (!tryHandleExtension(this, object))\n\t                this.deferred.push(object);\n\n\t    } else if (object instanceof Enum) {\n\n\t        if (exposeRe.test(object.name))\n\t            object.parent[object.name] = object.values; // expose enum values as property of its parent\n\n\t    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\n\n\t        if (object instanceof Type) // Try to handle any deferred extensions\n\t            for (var i = 0; i < this.deferred.length;)\n\t                if (tryHandleExtension(this, this.deferred[i]))\n\t                    this.deferred.splice(i, 1);\n\t                else\n\t                    ++i;\n\t        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\n\t            this._handleAdd(object._nestedArray[j]);\n\t        if (exposeRe.test(object.name))\n\t            object.parent[object.name] = object; // expose namespace as property of its parent\n\t    }\n\n\t    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n\t    // properties of namespaces just like static code does. This allows using a .d.ts generated for\n\t    // a static module with reflection-based solutions where the condition is met.\n\t};\n\n\t/**\n\t * Called when any object is removed from this root or its sub-namespaces.\n\t * @param {ReflectionObject} object Object removed\n\t * @returns {undefined}\n\t * @private\n\t */\n\tRoot.prototype._handleRemove = function _handleRemove(object) {\n\t    if (object instanceof Field) {\n\n\t        if (/* an extension field */ object.extend !== undefined) {\n\t            if (/* already handled */ object.extensionField) { // remove its sister field\n\t                object.extensionField.parent.remove(object.extensionField);\n\t                object.extensionField = null;\n\t            } else { // cancel the extension\n\t                var index = this.deferred.indexOf(object);\n\t                /* istanbul ignore else */\n\t                if (index > -1)\n\t                    this.deferred.splice(index, 1);\n\t            }\n\t        }\n\n\t    } else if (object instanceof Enum) {\n\n\t        if (exposeRe.test(object.name))\n\t            delete object.parent[object.name]; // unexpose enum values\n\n\t    } else if (object instanceof Namespace) {\n\n\t        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\n\t            this._handleRemove(object._nestedArray[i]);\n\n\t        if (exposeRe.test(object.name))\n\t            delete object.parent[object.name]; // unexpose namespaces\n\n\t    }\n\t};\n\n\t// Sets up cyclic dependencies (called in index-light)\n\tRoot._configure = function(Type_, parse_, common_) {\n\t    Type   = Type_;\n\t    parse  = parse_;\n\t    common = common_;\n\t};\n\treturn root;\n}\n\nexport { requireRoot as __require };","start":1670465470648,"end":1670465471407,"order":"normal"},{"name":"polyfill-node","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/namespace.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/field.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/enum.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/oneof.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/util.js?commonjs-wrapped\";\n\nvar root;\nvar hasRequiredRoot;\n\nfunction requireRoot () {\n\tif (hasRequiredRoot) return root;\n\thasRequiredRoot = 1;\n\t\"use strict\";\n\troot = Root;\n\n\t// extends Namespace\n\tvar Namespace = require$$0();\n\t((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\n\n\tvar Field   = require$$1(),\n\t    Enum    = require$$2(),\n\t    OneOf   = require$$3(),\n\t    util    = require$$4();\n\n\tvar Type,   // cyclic\n\t    parse,  // might be excluded\n\t    common; // \"\n\n\t/**\n\t * Constructs a new root namespace instance.\n\t * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\n\t * @extends NamespaceBase\n\t * @constructor\n\t * @param {Object.<string,*>} [options] Top level options\n\t */\n\tfunction Root(options) {\n\t    Namespace.call(this, \"\", options);\n\n\t    /**\n\t     * Deferred extension fields.\n\t     * @type {Field[]}\n\t     */\n\t    this.deferred = [];\n\n\t    /**\n\t     * Resolved file names of loaded files.\n\t     * @type {string[]}\n\t     */\n\t    this.files = [];\n\t}\n\n\t/**\n\t * Loads a namespace descriptor into a root namespace.\n\t * @param {INamespace} json Nameespace descriptor\n\t * @param {Root} [root] Root namespace, defaults to create a new one if omitted\n\t * @returns {Root} Root namespace\n\t */\n\tRoot.fromJSON = function fromJSON(json, root) {\n\t    if (!root)\n\t        root = new Root();\n\t    if (json.options)\n\t        root.setOptions(json.options);\n\t    return root.addJSON(json.nested);\n\t};\n\n\t/**\n\t * Resolves the path of an imported file, relative to the importing origin.\n\t * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\n\t * @function\n\t * @param {string} origin The file name of the importing file\n\t * @param {string} target The file name being imported\n\t * @returns {string|null} Resolved path to `target` or `null` to skip the file\n\t */\n\tRoot.prototype.resolvePath = util.path.resolve;\n\n\t/**\n\t * Fetch content from file path or url\n\t * This method exists so you can override it with your own logic.\n\t * @function\n\t * @param {string} path File path or url\n\t * @param {FetchCallback} callback Callback function\n\t * @returns {undefined}\n\t */\n\tRoot.prototype.fetch = util.fetch;\n\n\t// A symbol-like function to safely signal synchronous loading\n\t/* istanbul ignore next */\n\tfunction SYNC() {} // eslint-disable-line no-empty-function\n\n\t/**\n\t * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n\t * @param {string|string[]} filename Names of one or multiple files to load\n\t * @param {IParseOptions} options Parse options\n\t * @param {LoadCallback} callback Callback function\n\t * @returns {undefined}\n\t */\n\tRoot.prototype.load = function load(filename, options, callback) {\n\t    if (typeof options === \"function\") {\n\t        callback = options;\n\t        options = undefined;\n\t    }\n\t    var self = this;\n\t    if (!callback)\n\t        return util.asPromise(load, self, filename, options);\n\n\t    var sync = callback === SYNC; // undocumented\n\n\t    // Finishes loading by calling the callback (exactly once)\n\t    function finish(err, root) {\n\t        /* istanbul ignore if */\n\t        if (!callback)\n\t            return;\n\t        var cb = callback;\n\t        callback = null;\n\t        if (sync)\n\t            throw err;\n\t        cb(err, root);\n\t    }\n\n\t    // Bundled definition existence checking\n\t    function getBundledFileName(filename) {\n\t        var idx = filename.lastIndexOf(\"google/protobuf/\");\n\t        if (idx > -1) {\n\t            var altname = filename.substring(idx);\n\t            if (altname in common) return altname;\n\t        }\n\t        return null;\n\t    }\n\n\t    // Processes a single file\n\t    function process(filename, source) {\n\t        try {\n\t            if (util.isString(source) && source.charAt(0) === \"{\")\n\t                source = JSON.parse(source);\n\t            if (!util.isString(source))\n\t                self.setOptions(source.options).addJSON(source.nested);\n\t            else {\n\t                parse.filename = filename;\n\t                var parsed = parse(source, self, options),\n\t                    resolved,\n\t                    i = 0;\n\t                if (parsed.imports)\n\t                    for (; i < parsed.imports.length; ++i)\n\t                        if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i]))\n\t                            fetch(resolved);\n\t                if (parsed.weakImports)\n\t                    for (i = 0; i < parsed.weakImports.length; ++i)\n\t                        if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i]))\n\t                            fetch(resolved, true);\n\t            }\n\t        } catch (err) {\n\t            finish(err);\n\t        }\n\t        if (!sync && !queued)\n\t            finish(null, self); // only once anyway\n\t    }\n\n\t    // Fetches a single file\n\t    function fetch(filename, weak) {\n\n\t        // Skip if already loaded / attempted\n\t        if (self.files.indexOf(filename) > -1)\n\t            return;\n\t        self.files.push(filename);\n\n\t        // Shortcut bundled definitions\n\t        if (filename in common) {\n\t            if (sync)\n\t                process(filename, common[filename]);\n\t            else {\n\t                ++queued;\n\t                setTimeout(function() {\n\t                    --queued;\n\t                    process(filename, common[filename]);\n\t                });\n\t            }\n\t            return;\n\t        }\n\n\t        // Otherwise fetch from disk or network\n\t        if (sync) {\n\t            var source;\n\t            try {\n\t                source = util.fs.readFileSync(filename).toString(\"utf8\");\n\t            } catch (err) {\n\t                if (!weak)\n\t                    finish(err);\n\t                return;\n\t            }\n\t            process(filename, source);\n\t        } else {\n\t            ++queued;\n\t            self.fetch(filename, function(err, source) {\n\t                --queued;\n\t                /* istanbul ignore if */\n\t                if (!callback)\n\t                    return; // terminated meanwhile\n\t                if (err) {\n\t                    /* istanbul ignore else */\n\t                    if (!weak)\n\t                        finish(err);\n\t                    else if (!queued) // can't be covered reliably\n\t                        finish(null, self);\n\t                    return;\n\t                }\n\t                process(filename, source);\n\t            });\n\t        }\n\t    }\n\t    var queued = 0;\n\n\t    // Assembling the root namespace doesn't require working type\n\t    // references anymore, so we can load everything in parallel\n\t    if (util.isString(filename))\n\t        filename = [ filename ];\n\t    for (var i = 0, resolved; i < filename.length; ++i)\n\t        if (resolved = self.resolvePath(\"\", filename[i]))\n\t            fetch(resolved);\n\n\t    if (sync)\n\t        return self;\n\t    if (!queued)\n\t        finish(null, self);\n\t    return undefined;\n\t};\n\t// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n\t/**\n\t * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n\t * @function Root#load\n\t * @param {string|string[]} filename Names of one or multiple files to load\n\t * @param {LoadCallback} callback Callback function\n\t * @returns {undefined}\n\t * @variation 2\n\t */\n\t// function load(filename:string, callback:LoadCallback):undefined\n\n\t/**\n\t * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\n\t * @function Root#load\n\t * @param {string|string[]} filename Names of one or multiple files to load\n\t * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n\t * @returns {Promise<Root>} Promise\n\t * @variation 3\n\t */\n\t// function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n\t/**\n\t * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\n\t * @function Root#loadSync\n\t * @param {string|string[]} filename Names of one or multiple files to load\n\t * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n\t * @returns {Root} Root namespace\n\t * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n\t */\n\tRoot.prototype.loadSync = function loadSync(filename, options) {\n\t    if (!util.isNode)\n\t        throw Error(\"not supported\");\n\t    return this.load(filename, options, SYNC);\n\t};\n\n\t/**\n\t * @override\n\t */\n\tRoot.prototype.resolveAll = function resolveAll() {\n\t    if (this.deferred.length)\n\t        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\n\t            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n\t        }).join(\", \"));\n\t    return Namespace.prototype.resolveAll.call(this);\n\t};\n\n\t// only uppercased (and thus conflict-free) children are exposed, see below\n\tvar exposeRe = /^[A-Z]/;\n\n\t/**\n\t * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\n\t * @param {Root} root Root instance\n\t * @param {Field} field Declaring extension field witin the declaring type\n\t * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\n\t * @inner\n\t * @ignore\n\t */\n\tfunction tryHandleExtension(root, field) {\n\t    var extendedType = field.parent.lookup(field.extend);\n\t    if (extendedType) {\n\t        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n\t        sisterField.declaringField = field;\n\t        field.extensionField = sisterField;\n\t        extendedType.add(sisterField);\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\n\t/**\n\t * Called when any object is added to this root or its sub-namespaces.\n\t * @param {ReflectionObject} object Object added\n\t * @returns {undefined}\n\t * @private\n\t */\n\tRoot.prototype._handleAdd = function _handleAdd(object) {\n\t    if (object instanceof Field) {\n\n\t        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\n\t            if (!tryHandleExtension(this, object))\n\t                this.deferred.push(object);\n\n\t    } else if (object instanceof Enum) {\n\n\t        if (exposeRe.test(object.name))\n\t            object.parent[object.name] = object.values; // expose enum values as property of its parent\n\n\t    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\n\n\t        if (object instanceof Type) // Try to handle any deferred extensions\n\t            for (var i = 0; i < this.deferred.length;)\n\t                if (tryHandleExtension(this, this.deferred[i]))\n\t                    this.deferred.splice(i, 1);\n\t                else\n\t                    ++i;\n\t        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\n\t            this._handleAdd(object._nestedArray[j]);\n\t        if (exposeRe.test(object.name))\n\t            object.parent[object.name] = object; // expose namespace as property of its parent\n\t    }\n\n\t    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n\t    // properties of namespaces just like static code does. This allows using a .d.ts generated for\n\t    // a static module with reflection-based solutions where the condition is met.\n\t};\n\n\t/**\n\t * Called when any object is removed from this root or its sub-namespaces.\n\t * @param {ReflectionObject} object Object removed\n\t * @returns {undefined}\n\t * @private\n\t */\n\tRoot.prototype._handleRemove = function _handleRemove(object) {\n\t    if (object instanceof Field) {\n\n\t        if (/* an extension field */ object.extend !== undefined) {\n\t            if (/* already handled */ object.extensionField) { // remove its sister field\n\t                object.extensionField.parent.remove(object.extensionField);\n\t                object.extensionField = null;\n\t            } else { // cancel the extension\n\t                var index = this.deferred.indexOf(object);\n\t                /* istanbul ignore else */\n\t                if (index > -1)\n\t                    this.deferred.splice(index, 1);\n\t            }\n\t        }\n\n\t    } else if (object instanceof Enum) {\n\n\t        if (exposeRe.test(object.name))\n\t            delete object.parent[object.name]; // unexpose enum values\n\n\t    } else if (object instanceof Namespace) {\n\n\t        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\n\t            this._handleRemove(object._nestedArray[i]);\n\n\t        if (exposeRe.test(object.name))\n\t            delete object.parent[object.name]; // unexpose namespaces\n\n\t    }\n\t};\n\n\t// Sets up cyclic dependencies (called in index-light)\n\tRoot._configure = function(Type_, parse_, common_) {\n\t    Type   = Type_;\n\t    parse  = parse_;\n\t    common = common_;\n\t};\n\treturn root;\n}\n\nexport { requireRoot as __require };","start":1670465471411,"end":1670465471415,"order":"normal"}]}
