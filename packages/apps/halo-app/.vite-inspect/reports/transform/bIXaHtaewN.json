{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/simple-hypercore-protocol@2.1.2/node_modules/simple-hypercore-protocol/lib/xor.js","transforms":[{"name":"vite:load-fallback","result":"const XSalsa20 = require('xsalsa20-universal')\nconst crypto = require('hypercore-crypto')\n\nmodule.exports = class XOR {\n  constructor (nonces, split) {\n    this.rnonce = nonces.rnonce\n    this.tnonce = nonces.tnonce\n    this.rx = new XSalsa20(this.rnonce, split.rx.slice(0, 32))\n    this.tx = new XSalsa20(this.tnonce, split.tx.slice(0, 32))\n  }\n\n  encrypt (data) {\n    this.tx.update(data, data)\n    return data\n  }\n\n  decrypt (data) {\n    this.rx.update(data, data)\n    return data\n  }\n\n  destroy () {\n    this.tx.final()\n    this.rx.final()\n  }\n\n  static nonce () {\n    return crypto.randomBytes(24)\n  }\n}\n","start":1670465470114,"end":1670465470286},{"name":"vite:react-babel","result":"const XSalsa20 = require('xsalsa20-universal')\nconst crypto = require('hypercore-crypto')\n\nmodule.exports = class XOR {\n  constructor (nonces, split) {\n    this.rnonce = nonces.rnonce\n    this.tnonce = nonces.tnonce\n    this.rx = new XSalsa20(this.rnonce, split.rx.slice(0, 32))\n    this.tx = new XSalsa20(this.tnonce, split.tx.slice(0, 32))\n  }\n\n  encrypt (data) {\n    this.tx.update(data, data)\n    return data\n  }\n\n  decrypt (data) {\n    this.rx.update(data, data)\n    return data\n  }\n\n  destroy () {\n    this.tx.final()\n    this.rx.final()\n  }\n\n  static nonce () {\n    return crypto.randomBytes(24)\n  }\n}\n","start":1670465470286,"end":1670465470287,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/xsalsa20-universal@1.0.0/node_modules/xsalsa20-universal/browser.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/hypercore-crypto@2.3.2/node_modules/hypercore-crypto/index.js?commonjs-proxy\";\n\nconst XSalsa20 = require$$0\nconst crypto = require$$1\n\nvar xor = class XOR {\n  constructor (nonces, split) {\n    this.rnonce = nonces.rnonce\n    this.tnonce = nonces.tnonce\n    this.rx = new XSalsa20(this.rnonce, split.rx.slice(0, 32))\n    this.tx = new XSalsa20(this.tnonce, split.tx.slice(0, 32))\n  }\n\n  encrypt (data) {\n    this.tx.update(data, data)\n    return data\n  }\n\n  decrypt (data) {\n    this.rx.update(data, data)\n    return data\n  }\n\n  destroy () {\n    this.tx.final()\n    this.rx.final()\n  }\n\n  static nonce () {\n    return crypto.randomBytes(24)\n  }\n}\n\nexport default xor;\nexport { xor as __moduleExports };","start":1670465470287,"end":1670465471748,"order":"normal"}]}
