{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@ndhoule+map@2.0.1/node_modules/@ndhoule/map/index.js","transforms":[{"name":"vite:load-fallback","result":"'use strict';\n\n/*\n * Module dependencies.\n */\n\nvar each = require('@ndhoule/each');\n\n/**\n * Produce a new array by passing each value in the input `collection` through a transformative\n * `iterator` function. The `iterator` function is passed three arguments:\n * `(value, index, collection)`.\n *\n * @name map\n * @api public\n * @param {Function} iterator The transformer function to invoke per iteration.\n * @param {Array} collection The collection to iterate over.\n * @return {Array} A new array containing the results of each `iterator` invocation.\n * @example\n * var square = function(x) { return x * x; };\n *\n * map(square, [1, 2, 3]);\n * //=> [1, 4, 9]\n */\nvar map = function map(iterator, collection) {\n  if (typeof iterator !== 'function') {\n    throw new TypeError('Expected a function but received a ' + typeof iterator);\n  }\n\n  var result = [];\n\n  each(function(val, i, collection) {\n    result.push(iterator(val, i, collection));\n  }, collection);\n\n  return result;\n};\n\n/*\n * Exports.\n */\n\nmodule.exports = map;\n","start":1670465466909,"end":1670465466975},{"name":"vite:react-babel","result":"'use strict';\n\n/*\n * Module dependencies.\n */\n\nvar each = require('@ndhoule/each');\n\n/**\n * Produce a new array by passing each value in the input `collection` through a transformative\n * `iterator` function. The `iterator` function is passed three arguments:\n * `(value, index, collection)`.\n *\n * @name map\n * @api public\n * @param {Function} iterator The transformer function to invoke per iteration.\n * @param {Array} collection The collection to iterate over.\n * @return {Array} A new array containing the results of each `iterator` invocation.\n * @example\n * var square = function(x) { return x * x; };\n *\n * map(square, [1, 2, 3]);\n * //=> [1, 4, 9]\n */\nvar map = function map(iterator, collection) {\n  if (typeof iterator !== 'function') {\n    throw new TypeError('Expected a function but received a ' + typeof iterator);\n  }\n\n  var result = [];\n\n  each(function(val, i, collection) {\n    result.push(iterator(val, i, collection));\n  }, collection);\n\n  return result;\n};\n\n/*\n * Exports.\n */\n\nmodule.exports = map;\n","start":1670465466975,"end":1670465466975,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@ndhoule+each@2.0.1/node_modules/@ndhoule/each/index.js?commonjs-proxy\";\n\n'use strict';\n\n/*\n * Module dependencies.\n */\n\nvar each = require$$0;\n\n/**\n * Produce a new array by passing each value in the input `collection` through a transformative\n * `iterator` function. The `iterator` function is passed three arguments:\n * `(value, index, collection)`.\n *\n * @name map\n * @api public\n * @param {Function} iterator The transformer function to invoke per iteration.\n * @param {Array} collection The collection to iterate over.\n * @return {Array} A new array containing the results of each `iterator` invocation.\n * @example\n * var square = function(x) { return x * x; };\n *\n * map(square, [1, 2, 3]);\n * //=> [1, 4, 9]\n */\nvar map = function map(iterator, collection) {\n  if (typeof iterator !== 'function') {\n    throw new TypeError('Expected a function but received a ' + typeof iterator);\n  }\n\n  var result = [];\n\n  each(function(val, i, collection) {\n    result.push(iterator(val, i, collection));\n  }, collection);\n\n  return result;\n};\n\n/*\n * Exports.\n */\n\nvar map_1 = map;\n\nexport default map_1;\nexport { map_1 as __moduleExports };","start":1670465466975,"end":1670465468881,"order":"normal"}]}
