{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/service.js","transforms":[{"name":"vite:load-fallback","result":"\"use strict\";\nmodule.exports = Service;\n\n// extends Namespace\nvar Namespace = require(\"./namespace\");\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\n\nvar Method = require(\"./method\"),\n    util   = require(\"./util\"),\n    rpc    = require(\"./rpc\");\n\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */\nfunction Service(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Service methods.\n     * @type {Object.<string,Method>}\n     */\n    this.methods = {}; // toJSON, marker\n\n    /**\n     * Cached methods as an array.\n     * @type {Method[]|null}\n     * @private\n     */\n    this._methodsArray = null;\n}\n\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */\n\n/**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */\nService.fromJSON = function fromJSON(name, json) {\n    var service = new Service(name, json.options);\n    /* istanbul ignore else */\n    if (json.methods)\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n    if (json.nested)\n        service.addJSON(json.nested);\n    service.comment = json.comment;\n    return service;\n};\n\n/**\n * Converts this service to a service descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IService} Service descriptor\n */\nService.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\" , inherited && inherited.options || undefined,\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\n        \"nested\"  , inherited && inherited.nested || undefined,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n    get: function() {\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n    }\n});\n\nfunction clearCache(service) {\n    service._methodsArray = null;\n    return service;\n}\n\n/**\n * @override\n */\nService.prototype.get = function get(name) {\n    return this.methods[name]\n        || Namespace.prototype.get.call(this, name);\n};\n\n/**\n * @override\n */\nService.prototype.resolveAll = function resolveAll() {\n    var methods = this.methodsArray;\n    for (var i = 0; i < methods.length; ++i)\n        methods[i].resolve();\n    return Namespace.prototype.resolve.call(this);\n};\n\n/**\n * @override\n */\nService.prototype.add = function add(object) {\n\n    /* istanbul ignore if */\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Method) {\n        this.methods[object.name] = object;\n        object.parent = this;\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * @override\n */\nService.prototype.remove = function remove(object) {\n    if (object instanceof Method) {\n\n        /* istanbul ignore if */\n        if (this.methods[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.methods[object.name];\n        object.parent = null;\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n            m: method,\n            q: method.resolvedRequestType.ctor,\n            s: method.resolvedResponseType.ctor\n        });\n    }\n    return rpcService;\n};\n","start":1670465470606,"end":1670465470669},{"name":"vite:react-babel","result":"\"use strict\";\nmodule.exports = Service;\n\n// extends Namespace\nvar Namespace = require(\"./namespace\");\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\n\nvar Method = require(\"./method\"),\n    util   = require(\"./util\"),\n    rpc    = require(\"./rpc\");\n\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */\nfunction Service(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Service methods.\n     * @type {Object.<string,Method>}\n     */\n    this.methods = {}; // toJSON, marker\n\n    /**\n     * Cached methods as an array.\n     * @type {Method[]|null}\n     * @private\n     */\n    this._methodsArray = null;\n}\n\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */\n\n/**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */\nService.fromJSON = function fromJSON(name, json) {\n    var service = new Service(name, json.options);\n    /* istanbul ignore else */\n    if (json.methods)\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n    if (json.nested)\n        service.addJSON(json.nested);\n    service.comment = json.comment;\n    return service;\n};\n\n/**\n * Converts this service to a service descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IService} Service descriptor\n */\nService.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\" , inherited && inherited.options || undefined,\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\n        \"nested\"  , inherited && inherited.nested || undefined,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n    get: function() {\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n    }\n});\n\nfunction clearCache(service) {\n    service._methodsArray = null;\n    return service;\n}\n\n/**\n * @override\n */\nService.prototype.get = function get(name) {\n    return this.methods[name]\n        || Namespace.prototype.get.call(this, name);\n};\n\n/**\n * @override\n */\nService.prototype.resolveAll = function resolveAll() {\n    var methods = this.methodsArray;\n    for (var i = 0; i < methods.length; ++i)\n        methods[i].resolve();\n    return Namespace.prototype.resolve.call(this);\n};\n\n/**\n * @override\n */\nService.prototype.add = function add(object) {\n\n    /* istanbul ignore if */\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Method) {\n        this.methods[object.name] = object;\n        object.parent = this;\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * @override\n */\nService.prototype.remove = function remove(object) {\n    if (object instanceof Method) {\n\n        /* istanbul ignore if */\n        if (this.methods[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.methods[object.name];\n        object.parent = null;\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n            m: method,\n            q: method.resolvedRequestType.ctor,\n            s: method.resolvedResponseType.ctor\n        });\n    }\n    return rpcService;\n};\n","start":1670465470669,"end":1670465470669,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/namespace.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/method.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/util.js?commonjs-wrapped\";\nimport require$$3 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/rpc.js?commonjs-proxy\";\n\nvar service;\nvar hasRequiredService;\n\nfunction requireService () {\n\tif (hasRequiredService) return service;\n\thasRequiredService = 1;\n\t\"use strict\";\n\tservice = Service;\n\n\t// extends Namespace\n\tvar Namespace = require$$0();\n\t((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\n\n\tvar Method = require$$1(),\n\t    util   = require$$2(),\n\t    rpc    = require$$3;\n\n\t/**\n\t * Constructs a new service instance.\n\t * @classdesc Reflected service.\n\t * @extends NamespaceBase\n\t * @constructor\n\t * @param {string} name Service name\n\t * @param {Object.<string,*>} [options] Service options\n\t * @throws {TypeError} If arguments are invalid\n\t */\n\tfunction Service(name, options) {\n\t    Namespace.call(this, name, options);\n\n\t    /**\n\t     * Service methods.\n\t     * @type {Object.<string,Method>}\n\t     */\n\t    this.methods = {}; // toJSON, marker\n\n\t    /**\n\t     * Cached methods as an array.\n\t     * @type {Method[]|null}\n\t     * @private\n\t     */\n\t    this._methodsArray = null;\n\t}\n\n\t/**\n\t * Service descriptor.\n\t * @interface IService\n\t * @extends INamespace\n\t * @property {Object.<string,IMethod>} methods Method descriptors\n\t */\n\n\t/**\n\t * Constructs a service from a service descriptor.\n\t * @param {string} name Service name\n\t * @param {IService} json Service descriptor\n\t * @returns {Service} Created service\n\t * @throws {TypeError} If arguments are invalid\n\t */\n\tService.fromJSON = function fromJSON(name, json) {\n\t    var service = new Service(name, json.options);\n\t    /* istanbul ignore else */\n\t    if (json.methods)\n\t        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\n\t            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n\t    if (json.nested)\n\t        service.addJSON(json.nested);\n\t    service.comment = json.comment;\n\t    return service;\n\t};\n\n\t/**\n\t * Converts this service to a service descriptor.\n\t * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n\t * @returns {IService} Service descriptor\n\t */\n\tService.prototype.toJSON = function toJSON(toJSONOptions) {\n\t    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n\t    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n\t    return util.toObject([\n\t        \"options\" , inherited && inherited.options || undefined,\n\t        \"methods\" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\n\t        \"nested\"  , inherited && inherited.nested || undefined,\n\t        \"comment\" , keepComments ? this.comment : undefined\n\t    ]);\n\t};\n\n\t/**\n\t * Methods of this service as an array for iteration.\n\t * @name Service#methodsArray\n\t * @type {Method[]}\n\t * @readonly\n\t */\n\tObject.defineProperty(Service.prototype, \"methodsArray\", {\n\t    get: function() {\n\t        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n\t    }\n\t});\n\n\tfunction clearCache(service) {\n\t    service._methodsArray = null;\n\t    return service;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tService.prototype.get = function get(name) {\n\t    return this.methods[name]\n\t        || Namespace.prototype.get.call(this, name);\n\t};\n\n\t/**\n\t * @override\n\t */\n\tService.prototype.resolveAll = function resolveAll() {\n\t    var methods = this.methodsArray;\n\t    for (var i = 0; i < methods.length; ++i)\n\t        methods[i].resolve();\n\t    return Namespace.prototype.resolve.call(this);\n\t};\n\n\t/**\n\t * @override\n\t */\n\tService.prototype.add = function add(object) {\n\n\t    /* istanbul ignore if */\n\t    if (this.get(object.name))\n\t        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n\t    if (object instanceof Method) {\n\t        this.methods[object.name] = object;\n\t        object.parent = this;\n\t        return clearCache(this);\n\t    }\n\t    return Namespace.prototype.add.call(this, object);\n\t};\n\n\t/**\n\t * @override\n\t */\n\tService.prototype.remove = function remove(object) {\n\t    if (object instanceof Method) {\n\n\t        /* istanbul ignore if */\n\t        if (this.methods[object.name] !== object)\n\t            throw Error(object + \" is not a member of \" + this);\n\n\t        delete this.methods[object.name];\n\t        object.parent = null;\n\t        return clearCache(this);\n\t    }\n\t    return Namespace.prototype.remove.call(this, object);\n\t};\n\n\t/**\n\t * Creates a runtime service using the specified rpc implementation.\n\t * @param {RPCImpl} rpcImpl RPC implementation\n\t * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n\t * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n\t * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n\t */\n\tService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n\t    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n\t    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\n\t        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n\t        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n\t            m: method,\n\t            q: method.resolvedRequestType.ctor,\n\t            s: method.resolvedResponseType.ctor\n\t        });\n\t    }\n\t    return rpcService;\n\t};\n\treturn service;\n}\n\nexport { requireService as __require };","start":1670465470678,"end":1670465471437,"order":"normal"}]}
