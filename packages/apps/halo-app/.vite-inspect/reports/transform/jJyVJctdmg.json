{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoresource@1.3.0/node_modules/nanoresource/emitter.js","transforms":[{"name":"vite:load-fallback","result":"// Copy of index.js that extends from EventEmitter\n\nconst events = require('events')\nconst inherits = require('inherits')\n\nconst opening = Symbol('opening queue')\nconst preclosing = Symbol('closing when inactive')\nconst closing = Symbol('closing queue')\nconst sync = Symbol('sync')\nconst fastClose = Symbol('fast close')\n\nmodule.exports = Nanoresource\n\nfunction Nanoresource (opts) {\n  if (!(this instanceof Nanoresource)) return new Nanoresource(opts)\n  events.EventEmitter.call(this)\n\n  if (!opts) opts = {}\n  if (opts.open) this._open = opts.open\n  if (opts.close) this._close = opts.close\n\n  this.opening = false\n  this.opened = false\n  this.closing = false\n  this.closed = false\n  this.actives = 0\n\n  this[opening] = null\n  this[preclosing] = null\n  this[closing] = null\n  this[sync] = false\n  this[fastClose] = true\n}\n\ninherits(Nanoresource, events.EventEmitter)\n\nNanoresource.prototype._open = function (cb) {\n  cb(null)\n}\n\nNanoresource.prototype._close = function (cb) {\n  cb(null)\n}\n\nNanoresource.prototype.open = function (cb) {\n  if (!cb) cb = noop\n\n  if (this[closing] || this.closed) return process.nextTick(cb, new Error('Resource is closed'))\n  if (this.opened) return process.nextTick(cb)\n\n  if (this[opening]) {\n    this[opening].push(cb)\n    return\n  }\n\n  this.opening = true\n  this[opening] = [cb]\n  this[sync] = true\n  this._open(onopen.bind(this))\n  this[sync] = false\n}\n\nNanoresource.prototype.active = function (cb) {\n  if ((this[fastClose] && this[preclosing]) || this[closing] || this.closed) {\n    if (cb) process.nextTick(cb, new Error('Resource is closed'))\n    return false\n  }\n  this.actives++\n  return true\n}\n\nNanoresource.prototype.inactive = function (cb, err, val) {\n  if (!--this.actives) {\n    const queue = this[preclosing]\n    if (queue) {\n      this[preclosing] = null\n      while (queue.length) this.close(queue.shift())\n    }\n  }\n\n  if (cb) cb(err, val)\n}\n\nNanoresource.prototype.close = function (allowActive, cb) {\n  if (typeof allowActive === 'function') return this.close(false, allowActive)\n  if (!cb) cb = noop\n\n  if (allowActive) this[fastClose] = false\n\n  if (this.closed) return process.nextTick(cb)\n\n  if (this.actives || this[opening]) {\n    if (!this[preclosing]) this[preclosing] = []\n    this[preclosing].push(cb)\n    return\n  }\n\n  if (!this.opened) {\n    this.closed = true\n    process.nextTick(cb)\n    return\n  }\n\n  if (this[closing]) {\n    this[closing].push(cb)\n    return\n  }\n\n  this.closing = true\n  this[closing] = [cb]\n  this[sync] = true\n  this._close(onclose.bind(this))\n  this[sync] = false\n}\n\nfunction onopen (err) {\n  if (this[sync]) return process.nextTick(onopen.bind(this), err)\n\n  const oqueue = this[opening]\n  this[opening] = null\n  this.opening = false\n  this.opened = !err\n\n  while (oqueue.length) oqueue.shift()(err)\n\n  const cqueue = this[preclosing]\n  if (cqueue && !this.actives) {\n    this[preclosing] = null\n    while (cqueue.length) this.close(cqueue.shift())\n  }\n}\n\nfunction onclose (err) {\n  if (this[sync]) return process.nextTick(onclose.bind(this), err)\n  const queue = this[closing]\n  this.closing = false\n  this[closing] = null\n  this.closed = !err\n  while (queue.length) queue.shift()(err)\n}\n\nfunction noop () {}\n","start":1670465469229,"end":1670465469355},{"name":"vite:react-babel","result":"// Copy of index.js that extends from EventEmitter\n\nconst events = require('events')\nconst inherits = require('inherits')\n\nconst opening = Symbol('opening queue')\nconst preclosing = Symbol('closing when inactive')\nconst closing = Symbol('closing queue')\nconst sync = Symbol('sync')\nconst fastClose = Symbol('fast close')\n\nmodule.exports = Nanoresource\n\nfunction Nanoresource (opts) {\n  if (!(this instanceof Nanoresource)) return new Nanoresource(opts)\n  events.EventEmitter.call(this)\n\n  if (!opts) opts = {}\n  if (opts.open) this._open = opts.open\n  if (opts.close) this._close = opts.close\n\n  this.opening = false\n  this.opened = false\n  this.closing = false\n  this.closed = false\n  this.actives = 0\n\n  this[opening] = null\n  this[preclosing] = null\n  this[closing] = null\n  this[sync] = false\n  this[fastClose] = true\n}\n\ninherits(Nanoresource, events.EventEmitter)\n\nNanoresource.prototype._open = function (cb) {\n  cb(null)\n}\n\nNanoresource.prototype._close = function (cb) {\n  cb(null)\n}\n\nNanoresource.prototype.open = function (cb) {\n  if (!cb) cb = noop\n\n  if (this[closing] || this.closed) return process.nextTick(cb, new Error('Resource is closed'))\n  if (this.opened) return process.nextTick(cb)\n\n  if (this[opening]) {\n    this[opening].push(cb)\n    return\n  }\n\n  this.opening = true\n  this[opening] = [cb]\n  this[sync] = true\n  this._open(onopen.bind(this))\n  this[sync] = false\n}\n\nNanoresource.prototype.active = function (cb) {\n  if ((this[fastClose] && this[preclosing]) || this[closing] || this.closed) {\n    if (cb) process.nextTick(cb, new Error('Resource is closed'))\n    return false\n  }\n  this.actives++\n  return true\n}\n\nNanoresource.prototype.inactive = function (cb, err, val) {\n  if (!--this.actives) {\n    const queue = this[preclosing]\n    if (queue) {\n      this[preclosing] = null\n      while (queue.length) this.close(queue.shift())\n    }\n  }\n\n  if (cb) cb(err, val)\n}\n\nNanoresource.prototype.close = function (allowActive, cb) {\n  if (typeof allowActive === 'function') return this.close(false, allowActive)\n  if (!cb) cb = noop\n\n  if (allowActive) this[fastClose] = false\n\n  if (this.closed) return process.nextTick(cb)\n\n  if (this.actives || this[opening]) {\n    if (!this[preclosing]) this[preclosing] = []\n    this[preclosing].push(cb)\n    return\n  }\n\n  if (!this.opened) {\n    this.closed = true\n    process.nextTick(cb)\n    return\n  }\n\n  if (this[closing]) {\n    this[closing].push(cb)\n    return\n  }\n\n  this.closing = true\n  this[closing] = [cb]\n  this[sync] = true\n  this._close(onclose.bind(this))\n  this[sync] = false\n}\n\nfunction onopen (err) {\n  if (this[sync]) return process.nextTick(onopen.bind(this), err)\n\n  const oqueue = this[opening]\n  this[opening] = null\n  this.opening = false\n  this.opened = !err\n\n  while (oqueue.length) oqueue.shift()(err)\n\n  const cqueue = this[preclosing]\n  if (cqueue && !this.actives) {\n    this[preclosing] = null\n    while (cqueue.length) this.close(cqueue.shift())\n  }\n}\n\nfunction onclose (err) {\n  if (this[sync]) return process.nextTick(onclose.bind(this), err)\n  const queue = this[closing]\n  this.closing = false\n  this[closing] = null\n  this.closed = !err\n  while (queue.length) queue.shift()(err)\n}\n\nfunction noop () {}\n","start":1670465469355,"end":1670465469355,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/events@3.3.0/node_modules/events/events.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js?commonjs-proxy\";\n\n// Copy of index.js that extends from EventEmitter\n\nconst events = require$$0\nconst inherits = require$$1\n\nconst opening = Symbol('opening queue')\nconst preclosing = Symbol('closing when inactive')\nconst closing = Symbol('closing queue')\nconst sync = Symbol('sync')\nconst fastClose = Symbol('fast close')\n\nvar emitter = Nanoresource\n\nfunction Nanoresource (opts) {\n  if (!(this instanceof Nanoresource)) return new Nanoresource(opts)\n  events.EventEmitter.call(this)\n\n  if (!opts) opts = {}\n  if (opts.open) this._open = opts.open\n  if (opts.close) this._close = opts.close\n\n  this.opening = false\n  this.opened = false\n  this.closing = false\n  this.closed = false\n  this.actives = 0\n\n  this[opening] = null\n  this[preclosing] = null\n  this[closing] = null\n  this[sync] = false\n  this[fastClose] = true\n}\n\ninherits(Nanoresource, events.EventEmitter)\n\nNanoresource.prototype._open = function (cb) {\n  cb(null)\n}\n\nNanoresource.prototype._close = function (cb) {\n  cb(null)\n}\n\nNanoresource.prototype.open = function (cb) {\n  if (!cb) cb = noop\n\n  if (this[closing] || this.closed) return process.nextTick(cb, new Error('Resource is closed'))\n  if (this.opened) return process.nextTick(cb)\n\n  if (this[opening]) {\n    this[opening].push(cb)\n    return\n  }\n\n  this.opening = true\n  this[opening] = [cb]\n  this[sync] = true\n  this._open(onopen.bind(this))\n  this[sync] = false\n}\n\nNanoresource.prototype.active = function (cb) {\n  if ((this[fastClose] && this[preclosing]) || this[closing] || this.closed) {\n    if (cb) process.nextTick(cb, new Error('Resource is closed'))\n    return false\n  }\n  this.actives++\n  return true\n}\n\nNanoresource.prototype.inactive = function (cb, err, val) {\n  if (!--this.actives) {\n    const queue = this[preclosing]\n    if (queue) {\n      this[preclosing] = null\n      while (queue.length) this.close(queue.shift())\n    }\n  }\n\n  if (cb) cb(err, val)\n}\n\nNanoresource.prototype.close = function (allowActive, cb) {\n  if (typeof allowActive === 'function') return this.close(false, allowActive)\n  if (!cb) cb = noop\n\n  if (allowActive) this[fastClose] = false\n\n  if (this.closed) return process.nextTick(cb)\n\n  if (this.actives || this[opening]) {\n    if (!this[preclosing]) this[preclosing] = []\n    this[preclosing].push(cb)\n    return\n  }\n\n  if (!this.opened) {\n    this.closed = true\n    process.nextTick(cb)\n    return\n  }\n\n  if (this[closing]) {\n    this[closing].push(cb)\n    return\n  }\n\n  this.closing = true\n  this[closing] = [cb]\n  this[sync] = true\n  this._close(onclose.bind(this))\n  this[sync] = false\n}\n\nfunction onopen (err) {\n  if (this[sync]) return process.nextTick(onopen.bind(this), err)\n\n  const oqueue = this[opening]\n  this[opening] = null\n  this.opening = false\n  this.opened = !err\n\n  while (oqueue.length) oqueue.shift()(err)\n\n  const cqueue = this[preclosing]\n  if (cqueue && !this.actives) {\n    this[preclosing] = null\n    while (cqueue.length) this.close(cqueue.shift())\n  }\n}\n\nfunction onclose (err) {\n  if (this[sync]) return process.nextTick(onclose.bind(this), err)\n  const queue = this[closing]\n  this.closing = false\n  this[closing] = null\n  this.closed = !err\n  while (queue.length) queue.shift()(err)\n}\n\nfunction noop () {}\n\nexport default emitter;\nexport { emitter as __moduleExports };","start":1670465469360,"end":1670465469577,"order":"normal"},{"name":"polyfill-node","result":"import { default as process } from '\u0000polyfill-node.process';\n\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/events@3.3.0/node_modules/events/events.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js?commonjs-proxy\";\n\n// Copy of index.js that extends from EventEmitter\n\nconst events = require$$0\nconst inherits = require$$1\n\nconst opening = Symbol('opening queue')\nconst preclosing = Symbol('closing when inactive')\nconst closing = Symbol('closing queue')\nconst sync = Symbol('sync')\nconst fastClose = Symbol('fast close')\n\nvar emitter = Nanoresource\n\nfunction Nanoresource (opts) {\n  if (!(this instanceof Nanoresource)) return new Nanoresource(opts)\n  events.EventEmitter.call(this)\n\n  if (!opts) opts = {}\n  if (opts.open) this._open = opts.open\n  if (opts.close) this._close = opts.close\n\n  this.opening = false\n  this.opened = false\n  this.closing = false\n  this.closed = false\n  this.actives = 0\n\n  this[opening] = null\n  this[preclosing] = null\n  this[closing] = null\n  this[sync] = false\n  this[fastClose] = true\n}\n\ninherits(Nanoresource, events.EventEmitter)\n\nNanoresource.prototype._open = function (cb) {\n  cb(null)\n}\n\nNanoresource.prototype._close = function (cb) {\n  cb(null)\n}\n\nNanoresource.prototype.open = function (cb) {\n  if (!cb) cb = noop\n\n  if (this[closing] || this.closed) return process.nextTick(cb, new Error('Resource is closed'))\n  if (this.opened) return process.nextTick(cb)\n\n  if (this[opening]) {\n    this[opening].push(cb)\n    return\n  }\n\n  this.opening = true\n  this[opening] = [cb]\n  this[sync] = true\n  this._open(onopen.bind(this))\n  this[sync] = false\n}\n\nNanoresource.prototype.active = function (cb) {\n  if ((this[fastClose] && this[preclosing]) || this[closing] || this.closed) {\n    if (cb) process.nextTick(cb, new Error('Resource is closed'))\n    return false\n  }\n  this.actives++\n  return true\n}\n\nNanoresource.prototype.inactive = function (cb, err, val) {\n  if (!--this.actives) {\n    const queue = this[preclosing]\n    if (queue) {\n      this[preclosing] = null\n      while (queue.length) this.close(queue.shift())\n    }\n  }\n\n  if (cb) cb(err, val)\n}\n\nNanoresource.prototype.close = function (allowActive, cb) {\n  if (typeof allowActive === 'function') return this.close(false, allowActive)\n  if (!cb) cb = noop\n\n  if (allowActive) this[fastClose] = false\n\n  if (this.closed) return process.nextTick(cb)\n\n  if (this.actives || this[opening]) {\n    if (!this[preclosing]) this[preclosing] = []\n    this[preclosing].push(cb)\n    return\n  }\n\n  if (!this.opened) {\n    this.closed = true\n    process.nextTick(cb)\n    return\n  }\n\n  if (this[closing]) {\n    this[closing].push(cb)\n    return\n  }\n\n  this.closing = true\n  this[closing] = [cb]\n  this[sync] = true\n  this._close(onclose.bind(this))\n  this[sync] = false\n}\n\nfunction onopen (err) {\n  if (this[sync]) return process.nextTick(onopen.bind(this), err)\n\n  const oqueue = this[opening]\n  this[opening] = null\n  this.opening = false\n  this.opened = !err\n\n  while (oqueue.length) oqueue.shift()(err)\n\n  const cqueue = this[preclosing]\n  if (cqueue && !this.actives) {\n    this[preclosing] = null\n    while (cqueue.length) this.close(cqueue.shift())\n  }\n}\n\nfunction onclose (err) {\n  if (this[sync]) return process.nextTick(onclose.bind(this), err)\n  const queue = this[closing]\n  this.closing = false\n  this[closing] = null\n  this.closed = !err\n  while (queue.length) queue.shift()(err)\n}\n\nfunction noop () {}\n\nexport default emitter;\nexport { emitter as __moduleExports };","start":1670465469577,"end":1670465469583,"order":"normal"}]}
