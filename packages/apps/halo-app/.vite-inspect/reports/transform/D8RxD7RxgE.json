{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/mode-ctr-gladman.js","transforms":[{"name":"vite:load-fallback","result":";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n\t * derived from CryptoJS.mode.CTR\n\t * Jan Hruby jhruby.web@gmail.com\n\t */\n\tCryptoJS.mode.CTRGladman = (function () {\n\t    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n\t\tfunction incWord(word)\n\t\t{\n\t\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow\n\t\t\tvar b1 = (word >> 16)&0xff;\n\t\t\tvar b2 = (word >> 8)&0xff;\n\t\t\tvar b3 = word & 0xff;\n\n\t\t\tif (b1 === 0xff) // overflow b1\n\t\t\t{\n\t\t\tb1 = 0;\n\t\t\tif (b2 === 0xff)\n\t\t\t{\n\t\t\t\tb2 = 0;\n\t\t\t\tif (b3 === 0xff)\n\t\t\t\t{\n\t\t\t\t\tb3 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t++b3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t++b2;\n\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t++b1;\n\t\t\t}\n\n\t\t\tword = 0;\n\t\t\tword += (b1 << 16);\n\t\t\tword += (b2 << 8);\n\t\t\tword += b3;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tword += (0x01 << 24);\n\t\t\t}\n\t\t\treturn word;\n\t\t}\n\n\t\tfunction incCounter(counter)\n\t\t{\n\t\t\tif ((counter[0] = incWord(counter[0])) === 0)\n\t\t\t{\n\t\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n\t\t\t\tcounter[1] = incWord(counter[1]);\n\t\t\t}\n\t\t\treturn counter;\n\t\t}\n\n\t    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\n\t\t\t\tincCounter(counter);\n\n\t\t\t\tvar keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTRGladman.Decryptor = Encryptor;\n\n\t    return CTRGladman;\n\t}());\n\n\n\n\n\treturn CryptoJS.mode.CTRGladman;\n\n}));","start":1670465469032,"end":1670465469174},{"name":"vite:react-babel","result":";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./cipher-core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n\t * derived from CryptoJS.mode.CTR\n\t * Jan Hruby jhruby.web@gmail.com\n\t */\n\tCryptoJS.mode.CTRGladman = (function () {\n\t    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n\t\tfunction incWord(word)\n\t\t{\n\t\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow\n\t\t\tvar b1 = (word >> 16)&0xff;\n\t\t\tvar b2 = (word >> 8)&0xff;\n\t\t\tvar b3 = word & 0xff;\n\n\t\t\tif (b1 === 0xff) // overflow b1\n\t\t\t{\n\t\t\tb1 = 0;\n\t\t\tif (b2 === 0xff)\n\t\t\t{\n\t\t\t\tb2 = 0;\n\t\t\t\tif (b3 === 0xff)\n\t\t\t\t{\n\t\t\t\t\tb3 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t++b3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t++b2;\n\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t++b1;\n\t\t\t}\n\n\t\t\tword = 0;\n\t\t\tword += (b1 << 16);\n\t\t\tword += (b2 << 8);\n\t\t\tword += b3;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tword += (0x01 << 24);\n\t\t\t}\n\t\t\treturn word;\n\t\t}\n\n\t\tfunction incCounter(counter)\n\t\t{\n\t\t\tif ((counter[0] = incWord(counter[0])) === 0)\n\t\t\t{\n\t\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n\t\t\t\tcounter[1] = incWord(counter[1]);\n\t\t\t}\n\t\t\treturn counter;\n\t\t}\n\n\t    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\n\t\t\t\tincCounter(counter);\n\n\t\t\t\tvar keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTRGladman.Decryptor = Encryptor;\n\n\t    return CTRGladman;\n\t}());\n\n\n\n\n\treturn CryptoJS.mode.CTRGladman;\n\n}));","start":1670465469174,"end":1670465469174,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as modeCtrGladmanModule, exports as modeCtrGladman } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/mode-ctr-gladman.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/core.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/cipher-core.js?commonjs-wrapped\";\n\nvar hasRequiredModeCtrGladman;\n\nfunction requireModeCtrGladman () {\n\tif (hasRequiredModeCtrGladman) return modeCtrGladman;\n\thasRequiredModeCtrGladman = 1;\n\t(function (module, exports) {\n\t\t;(function (root, factory, undef) {\n\t\t\tif ('object' === \"object\") {\n\t\t\t\t// CommonJS\n\t\t\t\tmodule.exports = exports = factory(require$$0(), require$$1());\n\t\t\t}\n\t\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t\t// AMD\n\t\t\t\tundefined([\"./core\", \"./cipher-core\"], factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Global (browser)\n\t\t\t\tfactory(root.CryptoJS);\n\t\t\t}\n\t\t}(commonjsHelpers.commonjsGlobal, function (CryptoJS) {\n\n\t\t\t/** @preserve\n\t\t\t * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n\t\t\t * derived from CryptoJS.mode.CTR\n\t\t\t * Jan Hruby jhruby.web@gmail.com\n\t\t\t */\n\t\t\tCryptoJS.mode.CTRGladman = (function () {\n\t\t\t    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n\t\t\t\tfunction incWord(word)\n\t\t\t\t{\n\t\t\t\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow\n\t\t\t\t\tvar b1 = (word >> 16)&0xff;\n\t\t\t\t\tvar b2 = (word >> 8)&0xff;\n\t\t\t\t\tvar b3 = word & 0xff;\n\n\t\t\t\t\tif (b1 === 0xff) // overflow b1\n\t\t\t\t\t{\n\t\t\t\t\tb1 = 0;\n\t\t\t\t\tif (b2 === 0xff)\n\t\t\t\t\t{\n\t\t\t\t\t\tb2 = 0;\n\t\t\t\t\t\tif (b3 === 0xff)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tb3 = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t++b3;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t++b2;\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t++b1;\n\t\t\t\t\t}\n\n\t\t\t\t\tword = 0;\n\t\t\t\t\tword += (b1 << 16);\n\t\t\t\t\tword += (b2 << 8);\n\t\t\t\t\tword += b3;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\tword += (0x01 << 24);\n\t\t\t\t\t}\n\t\t\t\t\treturn word;\n\t\t\t\t}\n\n\t\t\t\tfunction incCounter(counter)\n\t\t\t\t{\n\t\t\t\t\tif ((counter[0] = incWord(counter[0])) === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n\t\t\t\t\t\tcounter[1] = incWord(counter[1]);\n\t\t\t\t\t}\n\t\t\t\t\treturn counter;\n\t\t\t\t}\n\n\t\t\t    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n\t\t\t        processBlock: function (words, offset) {\n\t\t\t            // Shortcuts\n\t\t\t            var cipher = this._cipher\n\t\t\t            var blockSize = cipher.blockSize;\n\t\t\t            var iv = this._iv;\n\t\t\t            var counter = this._counter;\n\n\t\t\t            // Generate keystream\n\t\t\t            if (iv) {\n\t\t\t                counter = this._counter = iv.slice(0);\n\n\t\t\t                // Remove IV for subsequent blocks\n\t\t\t                this._iv = undefined;\n\t\t\t            }\n\n\t\t\t\t\t\tincCounter(counter);\n\n\t\t\t\t\t\tvar keystream = counter.slice(0);\n\t\t\t            cipher.encryptBlock(keystream, 0);\n\n\t\t\t            // Encrypt\n\t\t\t            for (var i = 0; i < blockSize; i++) {\n\t\t\t                words[offset + i] ^= keystream[i];\n\t\t\t            }\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    CTRGladman.Decryptor = Encryptor;\n\n\t\t\t    return CTRGladman;\n\t\t\t}());\n\n\n\n\n\t\t\treturn CryptoJS.mode.CTRGladman;\n\n\t\t}));\n} (modeCtrGladmanModule, modeCtrGladman));\n\treturn modeCtrGladman;\n}\n\nexport { requireModeCtrGladman as __require };","start":1670465469174,"end":1670465469175,"order":"normal"},{"name":"polyfill-node","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as modeCtrGladmanModule, exports as modeCtrGladman } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/mode-ctr-gladman.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/core.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/cipher-core.js?commonjs-wrapped\";\n\nvar hasRequiredModeCtrGladman;\n\nfunction requireModeCtrGladman () {\n\tif (hasRequiredModeCtrGladman) return modeCtrGladman;\n\thasRequiredModeCtrGladman = 1;\n\t(function (module, exports) {\n\t\t;(function (root, factory, undef) {\n\t\t\tif ('object' === \"object\") {\n\t\t\t\t// CommonJS\n\t\t\t\tmodule.exports = exports = factory(require$$0(), require$$1());\n\t\t\t}\n\t\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t\t// AMD\n\t\t\t\tundefined([\"./core\", \"./cipher-core\"], factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Global (browser)\n\t\t\t\tfactory(root.CryptoJS);\n\t\t\t}\n\t\t}(commonjsHelpers.commonjsGlobal, function (CryptoJS) {\n\n\t\t\t/** @preserve\n\t\t\t * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n\t\t\t * derived from CryptoJS.mode.CTR\n\t\t\t * Jan Hruby jhruby.web@gmail.com\n\t\t\t */\n\t\t\tCryptoJS.mode.CTRGladman = (function () {\n\t\t\t    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n\t\t\t\tfunction incWord(word)\n\t\t\t\t{\n\t\t\t\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow\n\t\t\t\t\tvar b1 = (word >> 16)&0xff;\n\t\t\t\t\tvar b2 = (word >> 8)&0xff;\n\t\t\t\t\tvar b3 = word & 0xff;\n\n\t\t\t\t\tif (b1 === 0xff) // overflow b1\n\t\t\t\t\t{\n\t\t\t\t\tb1 = 0;\n\t\t\t\t\tif (b2 === 0xff)\n\t\t\t\t\t{\n\t\t\t\t\t\tb2 = 0;\n\t\t\t\t\t\tif (b3 === 0xff)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tb3 = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t++b3;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t++b2;\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t++b1;\n\t\t\t\t\t}\n\n\t\t\t\t\tword = 0;\n\t\t\t\t\tword += (b1 << 16);\n\t\t\t\t\tword += (b2 << 8);\n\t\t\t\t\tword += b3;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\tword += (0x01 << 24);\n\t\t\t\t\t}\n\t\t\t\t\treturn word;\n\t\t\t\t}\n\n\t\t\t\tfunction incCounter(counter)\n\t\t\t\t{\n\t\t\t\t\tif ((counter[0] = incWord(counter[0])) === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n\t\t\t\t\t\tcounter[1] = incWord(counter[1]);\n\t\t\t\t\t}\n\t\t\t\t\treturn counter;\n\t\t\t\t}\n\n\t\t\t    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n\t\t\t        processBlock: function (words, offset) {\n\t\t\t            // Shortcuts\n\t\t\t            var cipher = this._cipher\n\t\t\t            var blockSize = cipher.blockSize;\n\t\t\t            var iv = this._iv;\n\t\t\t            var counter = this._counter;\n\n\t\t\t            // Generate keystream\n\t\t\t            if (iv) {\n\t\t\t                counter = this._counter = iv.slice(0);\n\n\t\t\t                // Remove IV for subsequent blocks\n\t\t\t                this._iv = undefined;\n\t\t\t            }\n\n\t\t\t\t\t\tincCounter(counter);\n\n\t\t\t\t\t\tvar keystream = counter.slice(0);\n\t\t\t            cipher.encryptBlock(keystream, 0);\n\n\t\t\t            // Encrypt\n\t\t\t            for (var i = 0; i < blockSize; i++) {\n\t\t\t                words[offset + i] ^= keystream[i];\n\t\t\t            }\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    CTRGladman.Decryptor = Encryptor;\n\n\t\t\t    return CTRGladman;\n\t\t\t}());\n\n\n\n\n\t\t\treturn CryptoJS.mode.CTRGladman;\n\n\t\t}));\n} (modeCtrGladmanModule, modeCtrGladman));\n\treturn modeCtrGladman;\n}\n\nexport { requireModeCtrGladman as __require };","start":1670465469175,"end":1670465469176,"order":"normal"}]}
