{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/uint64be@2.0.2/node_modules/uint64be/index.js","transforms":[{"name":"vite:load-fallback","result":"var bufferAlloc = require('buffer-alloc')\n\nvar UINT_32_MAX = Math.pow(2, 32)\n\nexports.encodingLength = function () {\n  return 8\n}\n\nexports.encode = function (num, buf, offset) {\n  if (!buf) buf = bufferAlloc(8)\n  if (!offset) offset = 0\n\n  var top = Math.floor(num / UINT_32_MAX)\n  var rem = num - top * UINT_32_MAX\n\n  buf.writeUInt32BE(top, offset)\n  buf.writeUInt32BE(rem, offset + 4)\n  return buf\n}\n\nexports.decode = function (buf, offset) {\n  if (!offset) offset = 0\n\n  var top = buf.readUInt32BE(offset)\n  var rem = buf.readUInt32BE(offset + 4)\n\n  return top * UINT_32_MAX + rem\n}\n\nexports.encode.bytes = 8\nexports.decode.bytes = 8\n","start":1670465470052,"end":1670465470133},{"name":"vite:react-babel","result":"var bufferAlloc = require('buffer-alloc')\n\nvar UINT_32_MAX = Math.pow(2, 32)\n\nexports.encodingLength = function () {\n  return 8\n}\n\nexports.encode = function (num, buf, offset) {\n  if (!buf) buf = bufferAlloc(8)\n  if (!offset) offset = 0\n\n  var top = Math.floor(num / UINT_32_MAX)\n  var rem = num - top * UINT_32_MAX\n\n  buf.writeUInt32BE(top, offset)\n  buf.writeUInt32BE(rem, offset + 4)\n  return buf\n}\n\nexports.decode = function (buf, offset) {\n  if (!offset) offset = 0\n\n  var top = buf.readUInt32BE(offset)\n  var rem = buf.readUInt32BE(offset + 4)\n\n  return top * UINT_32_MAX + rem\n}\n\nexports.encode.bytes = 8\nexports.decode.bytes = 8\n","start":1670465470133,"end":1670465470133,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as uint64be } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/uint64be@2.0.2/node_modules/uint64be/index.js?commonjs-exports\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/buffer-alloc@1.2.0/node_modules/buffer-alloc/index.js?commonjs-proxy\";\n\n(function (exports) {\n\tvar bufferAlloc = require$$0\n\n\tvar UINT_32_MAX = Math.pow(2, 32)\n\n\texports.encodingLength = function () {\n\t  return 8\n\t}\n\n\texports.encode = function (num, buf, offset) {\n\t  if (!buf) buf = bufferAlloc(8)\n\t  if (!offset) offset = 0\n\n\t  var top = Math.floor(num / UINT_32_MAX)\n\t  var rem = num - top * UINT_32_MAX\n\n\t  buf.writeUInt32BE(top, offset)\n\t  buf.writeUInt32BE(rem, offset + 4)\n\t  return buf\n\t}\n\n\texports.decode = function (buf, offset) {\n\t  if (!offset) offset = 0\n\n\t  var top = buf.readUInt32BE(offset)\n\t  var rem = buf.readUInt32BE(offset + 4)\n\n\t  return top * UINT_32_MAX + rem\n\t}\n\n\texports.encode.bytes = 8\n\texports.decode.bytes = 8\n} (uint64be));\n\nexport default uint64be;\nexport { uint64be as __moduleExports };","start":1670465470134,"end":1670465470548,"order":"normal"}]}
