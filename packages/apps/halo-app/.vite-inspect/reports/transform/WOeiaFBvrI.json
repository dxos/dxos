{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/types.js","transforms":[{"name":"vite:load-fallback","result":"\"use strict\";\n\n/**\n * Common type constants.\n * @namespace\n */\nvar types = exports;\n\nvar util = require(\"./util\");\n\nvar s = [\n    \"double\",   // 0\n    \"float\",    // 1\n    \"int32\",    // 2\n    \"uint32\",   // 3\n    \"sint32\",   // 4\n    \"fixed32\",  // 5\n    \"sfixed32\", // 6\n    \"int64\",    // 7\n    \"uint64\",   // 8\n    \"sint64\",   // 9\n    \"fixed64\",  // 10\n    \"sfixed64\", // 11\n    \"bool\",     // 12\n    \"string\",   // 13\n    \"bytes\"     // 14\n];\n\nfunction bake(values, offset) {\n    var i = 0, o = {};\n    offset |= 0;\n    while (i < values.length) o[s[i + offset]] = values[i++];\n    return o;\n}\n\n/**\n * Basic type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n * @property {number} bytes=2 Ldelim wire type\n */\ntypes.basic = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2,\n    /* bytes    */ 2\n]);\n\n/**\n * Basic type defaults.\n * @type {Object.<string,*>}\n * @const\n * @property {number} double=0 Double default\n * @property {number} float=0 Float default\n * @property {number} int32=0 Int32 default\n * @property {number} uint32=0 Uint32 default\n * @property {number} sint32=0 Sint32 default\n * @property {number} fixed32=0 Fixed32 default\n * @property {number} sfixed32=0 Sfixed32 default\n * @property {number} int64=0 Int64 default\n * @property {number} uint64=0 Uint64 default\n * @property {number} sint64=0 Sint32 default\n * @property {number} fixed64=0 Fixed64 default\n * @property {number} sfixed64=0 Sfixed64 default\n * @property {boolean} bool=false Bool default\n * @property {string} string=\"\" String default\n * @property {Array.<number>} bytes=Array(0) Bytes default\n * @property {null} message=null Message default\n */\ntypes.defaults = bake([\n    /* double   */ 0,\n    /* float    */ 0,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 0,\n    /* sfixed32 */ 0,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 0,\n    /* sfixed64 */ 0,\n    /* bool     */ false,\n    /* string   */ \"\",\n    /* bytes    */ util.emptyArray,\n    /* message  */ null\n]);\n\n/**\n * Basic long type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n */\ntypes.long = bake([\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1\n], 7);\n\n/**\n * Allowed types for map keys with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n */\ntypes.mapKey = bake([\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2\n], 2);\n\n/**\n * Allowed types for packed repeated fields with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n */\ntypes.packed = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0\n]);\n","start":1670465470612,"end":1670465470686},{"name":"vite:react-babel","result":"\"use strict\";\n\n/**\n * Common type constants.\n * @namespace\n */\nvar types = exports;\n\nvar util = require(\"./util\");\n\nvar s = [\n    \"double\",   // 0\n    \"float\",    // 1\n    \"int32\",    // 2\n    \"uint32\",   // 3\n    \"sint32\",   // 4\n    \"fixed32\",  // 5\n    \"sfixed32\", // 6\n    \"int64\",    // 7\n    \"uint64\",   // 8\n    \"sint64\",   // 9\n    \"fixed64\",  // 10\n    \"sfixed64\", // 11\n    \"bool\",     // 12\n    \"string\",   // 13\n    \"bytes\"     // 14\n];\n\nfunction bake(values, offset) {\n    var i = 0, o = {};\n    offset |= 0;\n    while (i < values.length) o[s[i + offset]] = values[i++];\n    return o;\n}\n\n/**\n * Basic type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n * @property {number} bytes=2 Ldelim wire type\n */\ntypes.basic = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2,\n    /* bytes    */ 2\n]);\n\n/**\n * Basic type defaults.\n * @type {Object.<string,*>}\n * @const\n * @property {number} double=0 Double default\n * @property {number} float=0 Float default\n * @property {number} int32=0 Int32 default\n * @property {number} uint32=0 Uint32 default\n * @property {number} sint32=0 Sint32 default\n * @property {number} fixed32=0 Fixed32 default\n * @property {number} sfixed32=0 Sfixed32 default\n * @property {number} int64=0 Int64 default\n * @property {number} uint64=0 Uint64 default\n * @property {number} sint64=0 Sint32 default\n * @property {number} fixed64=0 Fixed64 default\n * @property {number} sfixed64=0 Sfixed64 default\n * @property {boolean} bool=false Bool default\n * @property {string} string=\"\" String default\n * @property {Array.<number>} bytes=Array(0) Bytes default\n * @property {null} message=null Message default\n */\ntypes.defaults = bake([\n    /* double   */ 0,\n    /* float    */ 0,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 0,\n    /* sfixed32 */ 0,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 0,\n    /* sfixed64 */ 0,\n    /* bool     */ false,\n    /* string   */ \"\",\n    /* bytes    */ util.emptyArray,\n    /* message  */ null\n]);\n\n/**\n * Basic long type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n */\ntypes.long = bake([\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1\n], 7);\n\n/**\n * Allowed types for map keys with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n */\ntypes.mapKey = bake([\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2\n], 2);\n\n/**\n * Allowed types for packed repeated fields with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n */\ntypes.packed = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0\n]);\n","start":1670465470686,"end":1670465470686,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as types_1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/types.js?commonjs-exports\"\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/util.js?commonjs-wrapped\";\n\nvar hasRequiredTypes;\n\nfunction requireTypes () {\n\tif (hasRequiredTypes) return types_1;\n\thasRequiredTypes = 1;\n\t(function (exports) {\n\t\t\"use strict\";\n\n\t\t/**\n\t\t * Common type constants.\n\t\t * @namespace\n\t\t */\n\t\tvar types = exports;\n\n\t\tvar util = require$$0();\n\n\t\tvar s = [\n\t\t    \"double\",   // 0\n\t\t    \"float\",    // 1\n\t\t    \"int32\",    // 2\n\t\t    \"uint32\",   // 3\n\t\t    \"sint32\",   // 4\n\t\t    \"fixed32\",  // 5\n\t\t    \"sfixed32\", // 6\n\t\t    \"int64\",    // 7\n\t\t    \"uint64\",   // 8\n\t\t    \"sint64\",   // 9\n\t\t    \"fixed64\",  // 10\n\t\t    \"sfixed64\", // 11\n\t\t    \"bool\",     // 12\n\t\t    \"string\",   // 13\n\t\t    \"bytes\"     // 14\n\t\t];\n\n\t\tfunction bake(values, offset) {\n\t\t    var i = 0, o = {};\n\t\t    offset |= 0;\n\t\t    while (i < values.length) o[s[i + offset]] = values[i++];\n\t\t    return o;\n\t\t}\n\n\t\t/**\n\t\t * Basic type wire types.\n\t\t * @type {Object.<string,number>}\n\t\t * @const\n\t\t * @property {number} double=1 Fixed64 wire type\n\t\t * @property {number} float=5 Fixed32 wire type\n\t\t * @property {number} int32=0 Varint wire type\n\t\t * @property {number} uint32=0 Varint wire type\n\t\t * @property {number} sint32=0 Varint wire type\n\t\t * @property {number} fixed32=5 Fixed32 wire type\n\t\t * @property {number} sfixed32=5 Fixed32 wire type\n\t\t * @property {number} int64=0 Varint wire type\n\t\t * @property {number} uint64=0 Varint wire type\n\t\t * @property {number} sint64=0 Varint wire type\n\t\t * @property {number} fixed64=1 Fixed64 wire type\n\t\t * @property {number} sfixed64=1 Fixed64 wire type\n\t\t * @property {number} bool=0 Varint wire type\n\t\t * @property {number} string=2 Ldelim wire type\n\t\t * @property {number} bytes=2 Ldelim wire type\n\t\t */\n\t\ttypes.basic = bake([\n\t\t    /* double   */ 1,\n\t\t    /* float    */ 5,\n\t\t    /* int32    */ 0,\n\t\t    /* uint32   */ 0,\n\t\t    /* sint32   */ 0,\n\t\t    /* fixed32  */ 5,\n\t\t    /* sfixed32 */ 5,\n\t\t    /* int64    */ 0,\n\t\t    /* uint64   */ 0,\n\t\t    /* sint64   */ 0,\n\t\t    /* fixed64  */ 1,\n\t\t    /* sfixed64 */ 1,\n\t\t    /* bool     */ 0,\n\t\t    /* string   */ 2,\n\t\t    /* bytes    */ 2\n\t\t]);\n\n\t\t/**\n\t\t * Basic type defaults.\n\t\t * @type {Object.<string,*>}\n\t\t * @const\n\t\t * @property {number} double=0 Double default\n\t\t * @property {number} float=0 Float default\n\t\t * @property {number} int32=0 Int32 default\n\t\t * @property {number} uint32=0 Uint32 default\n\t\t * @property {number} sint32=0 Sint32 default\n\t\t * @property {number} fixed32=0 Fixed32 default\n\t\t * @property {number} sfixed32=0 Sfixed32 default\n\t\t * @property {number} int64=0 Int64 default\n\t\t * @property {number} uint64=0 Uint64 default\n\t\t * @property {number} sint64=0 Sint32 default\n\t\t * @property {number} fixed64=0 Fixed64 default\n\t\t * @property {number} sfixed64=0 Sfixed64 default\n\t\t * @property {boolean} bool=false Bool default\n\t\t * @property {string} string=\"\" String default\n\t\t * @property {Array.<number>} bytes=Array(0) Bytes default\n\t\t * @property {null} message=null Message default\n\t\t */\n\t\ttypes.defaults = bake([\n\t\t    /* double   */ 0,\n\t\t    /* float    */ 0,\n\t\t    /* int32    */ 0,\n\t\t    /* uint32   */ 0,\n\t\t    /* sint32   */ 0,\n\t\t    /* fixed32  */ 0,\n\t\t    /* sfixed32 */ 0,\n\t\t    /* int64    */ 0,\n\t\t    /* uint64   */ 0,\n\t\t    /* sint64   */ 0,\n\t\t    /* fixed64  */ 0,\n\t\t    /* sfixed64 */ 0,\n\t\t    /* bool     */ false,\n\t\t    /* string   */ \"\",\n\t\t    /* bytes    */ util.emptyArray,\n\t\t    /* message  */ null\n\t\t]);\n\n\t\t/**\n\t\t * Basic long type wire types.\n\t\t * @type {Object.<string,number>}\n\t\t * @const\n\t\t * @property {number} int64=0 Varint wire type\n\t\t * @property {number} uint64=0 Varint wire type\n\t\t * @property {number} sint64=0 Varint wire type\n\t\t * @property {number} fixed64=1 Fixed64 wire type\n\t\t * @property {number} sfixed64=1 Fixed64 wire type\n\t\t */\n\t\ttypes.long = bake([\n\t\t    /* int64    */ 0,\n\t\t    /* uint64   */ 0,\n\t\t    /* sint64   */ 0,\n\t\t    /* fixed64  */ 1,\n\t\t    /* sfixed64 */ 1\n\t\t], 7);\n\n\t\t/**\n\t\t * Allowed types for map keys with their associated wire type.\n\t\t * @type {Object.<string,number>}\n\t\t * @const\n\t\t * @property {number} int32=0 Varint wire type\n\t\t * @property {number} uint32=0 Varint wire type\n\t\t * @property {number} sint32=0 Varint wire type\n\t\t * @property {number} fixed32=5 Fixed32 wire type\n\t\t * @property {number} sfixed32=5 Fixed32 wire type\n\t\t * @property {number} int64=0 Varint wire type\n\t\t * @property {number} uint64=0 Varint wire type\n\t\t * @property {number} sint64=0 Varint wire type\n\t\t * @property {number} fixed64=1 Fixed64 wire type\n\t\t * @property {number} sfixed64=1 Fixed64 wire type\n\t\t * @property {number} bool=0 Varint wire type\n\t\t * @property {number} string=2 Ldelim wire type\n\t\t */\n\t\ttypes.mapKey = bake([\n\t\t    /* int32    */ 0,\n\t\t    /* uint32   */ 0,\n\t\t    /* sint32   */ 0,\n\t\t    /* fixed32  */ 5,\n\t\t    /* sfixed32 */ 5,\n\t\t    /* int64    */ 0,\n\t\t    /* uint64   */ 0,\n\t\t    /* sint64   */ 0,\n\t\t    /* fixed64  */ 1,\n\t\t    /* sfixed64 */ 1,\n\t\t    /* bool     */ 0,\n\t\t    /* string   */ 2\n\t\t], 2);\n\n\t\t/**\n\t\t * Allowed types for packed repeated fields with their associated wire type.\n\t\t * @type {Object.<string,number>}\n\t\t * @const\n\t\t * @property {number} double=1 Fixed64 wire type\n\t\t * @property {number} float=5 Fixed32 wire type\n\t\t * @property {number} int32=0 Varint wire type\n\t\t * @property {number} uint32=0 Varint wire type\n\t\t * @property {number} sint32=0 Varint wire type\n\t\t * @property {number} fixed32=5 Fixed32 wire type\n\t\t * @property {number} sfixed32=5 Fixed32 wire type\n\t\t * @property {number} int64=0 Varint wire type\n\t\t * @property {number} uint64=0 Varint wire type\n\t\t * @property {number} sint64=0 Varint wire type\n\t\t * @property {number} fixed64=1 Fixed64 wire type\n\t\t * @property {number} sfixed64=1 Fixed64 wire type\n\t\t * @property {number} bool=0 Varint wire type\n\t\t */\n\t\ttypes.packed = bake([\n\t\t    /* double   */ 1,\n\t\t    /* float    */ 5,\n\t\t    /* int32    */ 0,\n\t\t    /* uint32   */ 0,\n\t\t    /* sint32   */ 0,\n\t\t    /* fixed32  */ 5,\n\t\t    /* sfixed32 */ 5,\n\t\t    /* int64    */ 0,\n\t\t    /* uint64   */ 0,\n\t\t    /* sint64   */ 0,\n\t\t    /* fixed64  */ 1,\n\t\t    /* sfixed64 */ 1,\n\t\t    /* bool     */ 0\n\t\t]);\n} (types_1));\n\treturn types_1;\n}\n\nexport { requireTypes as __require };","start":1670465470686,"end":1670465471364,"order":"normal"}]}
