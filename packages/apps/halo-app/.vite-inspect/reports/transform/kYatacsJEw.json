{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/flat-tree@1.9.0/node_modules/flat-tree/index.js","transforms":[{"name":"vite:load-fallback","result":"exports.fullRoots = function (index, result) {\n  if (index & 1) throw new Error('You can only look up roots for depth(0) blocks')\n  if (!result) result = []\n\n  index /= 2\n\n  var offset = 0\n  var factor = 1\n\n  while (true) {\n    if (!index) return result\n    while (factor * 2 <= index) factor *= 2\n    result.push(offset + factor - 1)\n    offset = offset + 2 * factor\n    index -= factor\n    factor = 1\n  }\n}\n\nexports.depth = function (index) {\n  var depth = 0\n\n  index += 1\n  while (!(index & 1)) {\n    depth++\n    index = rightShift(index)\n  }\n\n  return depth\n}\n\nexports.sibling = function (index, depth) {\n  if (!depth) depth = exports.depth(index)\n  var offset = exports.offset(index, depth)\n\n  return exports.index(depth, offset & 1 ? offset - 1 : offset + 1)\n}\n\nexports.parent = function (index, depth) {\n  if (!depth) depth = exports.depth(index)\n  var offset = exports.offset(index, depth)\n\n  return exports.index(depth + 1, rightShift(offset))\n}\n\nexports.leftChild = function (index, depth) {\n  if (!(index & 1)) return -1\n  if (!depth) depth = exports.depth(index)\n  return exports.index(depth - 1, exports.offset(index, depth) * 2)\n}\n\nexports.rightChild = function (index, depth) {\n  if (!(index & 1)) return -1\n  if (!depth) depth = exports.depth(index)\n  return exports.index(depth - 1, 1 + (exports.offset(index, depth) * 2))\n}\n\nexports.children = function (index, depth) {\n  if (!(index & 1)) return null\n\n  if (!depth) depth = exports.depth(index)\n  var offset = exports.offset(index, depth) * 2\n\n  return [\n    exports.index(depth - 1, offset),\n    exports.index(depth - 1, offset + 1)\n  ]\n}\n\nexports.leftSpan = function (index, depth) {\n  if (!(index & 1)) return index\n  if (!depth) depth = exports.depth(index)\n  return exports.offset(index, depth) * twoPow(depth + 1)\n}\n\nexports.rightSpan = function (index, depth) {\n  if (!(index & 1)) return index\n  if (!depth) depth = exports.depth(index)\n  return (exports.offset(index, depth) + 1) * twoPow(depth + 1) - 2\n}\n\nexports.count = function (index, depth) {\n  if (!(index & 1)) return 1\n  if (!depth) depth = exports.depth(index)\n  return twoPow(depth + 1) - 1\n}\n\nexports.countLeaves = function (index) {\n  return (exports.count(index) + 1) / 2\n}\n\nexports.spans = function (index, depth) {\n  if (!(index & 1)) return [index, index]\n  if (!depth) depth = exports.depth(index)\n\n  var offset = exports.offset(index, depth)\n  var width = twoPow(depth + 1)\n\n  return [offset * width, (offset + 1) * width - 2]\n}\n\nexports.index = function (depth, offset) {\n  return (1 + 2 * offset) * twoPow(depth) - 1\n}\n\nexports.offset = function (index, depth) {\n  if (!(index & 1)) return index / 2\n  if (!depth) depth = exports.depth(index)\n\n  return ((index + 1) / twoPow(depth) - 1) / 2\n}\n\nexports.iterator = function (index) {\n  var ite = new Iterator()\n  ite.seek(index || 0)\n  return ite\n}\n\nfunction twoPow (n) {\n  return n < 31 ? 1 << n : ((1 << 30) * (1 << (n - 30)))\n}\n\nfunction rightShift (n) {\n  return (n - (n & 1)) / 2\n}\n\nfunction Iterator () {\n  this.index = 0\n  this.offset = 0\n  this.factor = 0\n}\n\nIterator.prototype.seek = function (index) {\n  this.index = index\n  if (this.index & 1) {\n    this.offset = exports.offset(index)\n    this.factor = twoPow(exports.depth(index) + 1)\n  } else {\n    this.offset = index / 2\n    this.factor = 2\n  }\n}\n\nIterator.prototype.isLeft = function () {\n  return (this.offset & 1) === 0\n}\n\nIterator.prototype.isRight = function () {\n  return (this.offset & 1) === 1\n}\n\nIterator.prototype.contains = function (index) {\n  return index > this.index\n    ? index < (this.index + this.factor / 2)\n    : index < this.index\n      ? index > (this.index - this.factor / 2)\n      : true\n}\n\nIterator.prototype.prev = function () {\n  if (!this.offset) return this.index\n  this.offset--\n  this.index -= this.factor\n  return this.index\n}\n\nIterator.prototype.next = function () {\n  this.offset++\n  this.index += this.factor\n  return this.index\n}\n\nIterator.prototype.count = function () {\n  if (!(this.index & 1)) return 1\n  return this.factor - 1\n}\n\nIterator.prototype.countLeaves = function () {\n  return (this.count() + 1) / 2\n}\n\nIterator.prototype.sibling = function () {\n  return this.isLeft() ? this.next() : this.prev()\n}\n\nIterator.prototype.parent = function () {\n  if (this.offset & 1) {\n    this.index -= this.factor / 2\n    this.offset = (this.offset - 1) / 2\n  } else {\n    this.index += this.factor / 2\n    this.offset /= 2\n  }\n  this.factor *= 2\n  return this.index\n}\n\nIterator.prototype.leftSpan = function () {\n  this.index = this.index - this.factor / 2 + 1\n  this.offset = this.index / 2\n  this.factor = 2\n  return this.index\n}\n\nIterator.prototype.rightSpan = function () {\n  this.index = this.index + this.factor / 2 - 1\n  this.offset = this.index / 2\n  this.factor = 2\n  return this.index\n}\n\nIterator.prototype.leftChild = function () {\n  if (this.factor === 2) return this.index\n  this.factor /= 2\n  this.index -= this.factor / 2\n  this.offset *= 2\n  return this.index\n}\n\nIterator.prototype.rightChild = function () {\n  if (this.factor === 2) return this.index\n  this.factor /= 2\n  this.index += this.factor / 2\n  this.offset = 2 * this.offset + 1\n  return this.index\n}\n\nIterator.prototype.nextTree = function () {\n  this.index = this.index + this.factor / 2 + 1\n  this.offset = this.index / 2\n  this.factor = 2\n  return this.index\n}\n\nIterator.prototype.prevTree = function () {\n  if (!this.offset) {\n    this.index = 0\n    this.factor = 2\n  } else {\n    this.index = this.index - this.factor / 2 - 1\n    this.offset = this.index / 2\n    this.factor = 2\n  }\n  return this.index\n}\n\nIterator.prototype.fullRoot = function (index) {\n  if (index <= this.index || (this.index & 1) > 0) return false\n  while (index > this.index + this.factor + this.factor / 2) {\n    this.index += this.factor / 2\n    this.factor *= 2\n    this.offset /= 2\n  }\n  return true\n}\n","start":1670465469189,"end":1670465469268},{"name":"vite:react-babel","result":"exports.fullRoots = function (index, result) {\n  if (index & 1) throw new Error('You can only look up roots for depth(0) blocks')\n  if (!result) result = []\n\n  index /= 2\n\n  var offset = 0\n  var factor = 1\n\n  while (true) {\n    if (!index) return result\n    while (factor * 2 <= index) factor *= 2\n    result.push(offset + factor - 1)\n    offset = offset + 2 * factor\n    index -= factor\n    factor = 1\n  }\n}\n\nexports.depth = function (index) {\n  var depth = 0\n\n  index += 1\n  while (!(index & 1)) {\n    depth++\n    index = rightShift(index)\n  }\n\n  return depth\n}\n\nexports.sibling = function (index, depth) {\n  if (!depth) depth = exports.depth(index)\n  var offset = exports.offset(index, depth)\n\n  return exports.index(depth, offset & 1 ? offset - 1 : offset + 1)\n}\n\nexports.parent = function (index, depth) {\n  if (!depth) depth = exports.depth(index)\n  var offset = exports.offset(index, depth)\n\n  return exports.index(depth + 1, rightShift(offset))\n}\n\nexports.leftChild = function (index, depth) {\n  if (!(index & 1)) return -1\n  if (!depth) depth = exports.depth(index)\n  return exports.index(depth - 1, exports.offset(index, depth) * 2)\n}\n\nexports.rightChild = function (index, depth) {\n  if (!(index & 1)) return -1\n  if (!depth) depth = exports.depth(index)\n  return exports.index(depth - 1, 1 + (exports.offset(index, depth) * 2))\n}\n\nexports.children = function (index, depth) {\n  if (!(index & 1)) return null\n\n  if (!depth) depth = exports.depth(index)\n  var offset = exports.offset(index, depth) * 2\n\n  return [\n    exports.index(depth - 1, offset),\n    exports.index(depth - 1, offset + 1)\n  ]\n}\n\nexports.leftSpan = function (index, depth) {\n  if (!(index & 1)) return index\n  if (!depth) depth = exports.depth(index)\n  return exports.offset(index, depth) * twoPow(depth + 1)\n}\n\nexports.rightSpan = function (index, depth) {\n  if (!(index & 1)) return index\n  if (!depth) depth = exports.depth(index)\n  return (exports.offset(index, depth) + 1) * twoPow(depth + 1) - 2\n}\n\nexports.count = function (index, depth) {\n  if (!(index & 1)) return 1\n  if (!depth) depth = exports.depth(index)\n  return twoPow(depth + 1) - 1\n}\n\nexports.countLeaves = function (index) {\n  return (exports.count(index) + 1) / 2\n}\n\nexports.spans = function (index, depth) {\n  if (!(index & 1)) return [index, index]\n  if (!depth) depth = exports.depth(index)\n\n  var offset = exports.offset(index, depth)\n  var width = twoPow(depth + 1)\n\n  return [offset * width, (offset + 1) * width - 2]\n}\n\nexports.index = function (depth, offset) {\n  return (1 + 2 * offset) * twoPow(depth) - 1\n}\n\nexports.offset = function (index, depth) {\n  if (!(index & 1)) return index / 2\n  if (!depth) depth = exports.depth(index)\n\n  return ((index + 1) / twoPow(depth) - 1) / 2\n}\n\nexports.iterator = function (index) {\n  var ite = new Iterator()\n  ite.seek(index || 0)\n  return ite\n}\n\nfunction twoPow (n) {\n  return n < 31 ? 1 << n : ((1 << 30) * (1 << (n - 30)))\n}\n\nfunction rightShift (n) {\n  return (n - (n & 1)) / 2\n}\n\nfunction Iterator () {\n  this.index = 0\n  this.offset = 0\n  this.factor = 0\n}\n\nIterator.prototype.seek = function (index) {\n  this.index = index\n  if (this.index & 1) {\n    this.offset = exports.offset(index)\n    this.factor = twoPow(exports.depth(index) + 1)\n  } else {\n    this.offset = index / 2\n    this.factor = 2\n  }\n}\n\nIterator.prototype.isLeft = function () {\n  return (this.offset & 1) === 0\n}\n\nIterator.prototype.isRight = function () {\n  return (this.offset & 1) === 1\n}\n\nIterator.prototype.contains = function (index) {\n  return index > this.index\n    ? index < (this.index + this.factor / 2)\n    : index < this.index\n      ? index > (this.index - this.factor / 2)\n      : true\n}\n\nIterator.prototype.prev = function () {\n  if (!this.offset) return this.index\n  this.offset--\n  this.index -= this.factor\n  return this.index\n}\n\nIterator.prototype.next = function () {\n  this.offset++\n  this.index += this.factor\n  return this.index\n}\n\nIterator.prototype.count = function () {\n  if (!(this.index & 1)) return 1\n  return this.factor - 1\n}\n\nIterator.prototype.countLeaves = function () {\n  return (this.count() + 1) / 2\n}\n\nIterator.prototype.sibling = function () {\n  return this.isLeft() ? this.next() : this.prev()\n}\n\nIterator.prototype.parent = function () {\n  if (this.offset & 1) {\n    this.index -= this.factor / 2\n    this.offset = (this.offset - 1) / 2\n  } else {\n    this.index += this.factor / 2\n    this.offset /= 2\n  }\n  this.factor *= 2\n  return this.index\n}\n\nIterator.prototype.leftSpan = function () {\n  this.index = this.index - this.factor / 2 + 1\n  this.offset = this.index / 2\n  this.factor = 2\n  return this.index\n}\n\nIterator.prototype.rightSpan = function () {\n  this.index = this.index + this.factor / 2 - 1\n  this.offset = this.index / 2\n  this.factor = 2\n  return this.index\n}\n\nIterator.prototype.leftChild = function () {\n  if (this.factor === 2) return this.index\n  this.factor /= 2\n  this.index -= this.factor / 2\n  this.offset *= 2\n  return this.index\n}\n\nIterator.prototype.rightChild = function () {\n  if (this.factor === 2) return this.index\n  this.factor /= 2\n  this.index += this.factor / 2\n  this.offset = 2 * this.offset + 1\n  return this.index\n}\n\nIterator.prototype.nextTree = function () {\n  this.index = this.index + this.factor / 2 + 1\n  this.offset = this.index / 2\n  this.factor = 2\n  return this.index\n}\n\nIterator.prototype.prevTree = function () {\n  if (!this.offset) {\n    this.index = 0\n    this.factor = 2\n  } else {\n    this.index = this.index - this.factor / 2 - 1\n    this.offset = this.index / 2\n    this.factor = 2\n  }\n  return this.index\n}\n\nIterator.prototype.fullRoot = function (index) {\n  if (index <= this.index || (this.index & 1) > 0) return false\n  while (index > this.index + this.factor + this.factor / 2) {\n    this.index += this.factor / 2\n    this.factor *= 2\n    this.offset /= 2\n  }\n  return true\n}\n","start":1670465469268,"end":1670465469268,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as flatTree } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/flat-tree@1.9.0/node_modules/flat-tree/index.js?commonjs-exports\"\n\n(function (exports) {\n\texports.fullRoots = function (index, result) {\n\t  if (index & 1) throw new Error('You can only look up roots for depth(0) blocks')\n\t  if (!result) result = []\n\n\t  index /= 2\n\n\t  var offset = 0\n\t  var factor = 1\n\n\t  while (true) {\n\t    if (!index) return result\n\t    while (factor * 2 <= index) factor *= 2\n\t    result.push(offset + factor - 1)\n\t    offset = offset + 2 * factor\n\t    index -= factor\n\t    factor = 1\n\t  }\n\t}\n\n\texports.depth = function (index) {\n\t  var depth = 0\n\n\t  index += 1\n\t  while (!(index & 1)) {\n\t    depth++\n\t    index = rightShift(index)\n\t  }\n\n\t  return depth\n\t}\n\n\texports.sibling = function (index, depth) {\n\t  if (!depth) depth = exports.depth(index)\n\t  var offset = exports.offset(index, depth)\n\n\t  return exports.index(depth, offset & 1 ? offset - 1 : offset + 1)\n\t}\n\n\texports.parent = function (index, depth) {\n\t  if (!depth) depth = exports.depth(index)\n\t  var offset = exports.offset(index, depth)\n\n\t  return exports.index(depth + 1, rightShift(offset))\n\t}\n\n\texports.leftChild = function (index, depth) {\n\t  if (!(index & 1)) return -1\n\t  if (!depth) depth = exports.depth(index)\n\t  return exports.index(depth - 1, exports.offset(index, depth) * 2)\n\t}\n\n\texports.rightChild = function (index, depth) {\n\t  if (!(index & 1)) return -1\n\t  if (!depth) depth = exports.depth(index)\n\t  return exports.index(depth - 1, 1 + (exports.offset(index, depth) * 2))\n\t}\n\n\texports.children = function (index, depth) {\n\t  if (!(index & 1)) return null\n\n\t  if (!depth) depth = exports.depth(index)\n\t  var offset = exports.offset(index, depth) * 2\n\n\t  return [\n\t    exports.index(depth - 1, offset),\n\t    exports.index(depth - 1, offset + 1)\n\t  ]\n\t}\n\n\texports.leftSpan = function (index, depth) {\n\t  if (!(index & 1)) return index\n\t  if (!depth) depth = exports.depth(index)\n\t  return exports.offset(index, depth) * twoPow(depth + 1)\n\t}\n\n\texports.rightSpan = function (index, depth) {\n\t  if (!(index & 1)) return index\n\t  if (!depth) depth = exports.depth(index)\n\t  return (exports.offset(index, depth) + 1) * twoPow(depth + 1) - 2\n\t}\n\n\texports.count = function (index, depth) {\n\t  if (!(index & 1)) return 1\n\t  if (!depth) depth = exports.depth(index)\n\t  return twoPow(depth + 1) - 1\n\t}\n\n\texports.countLeaves = function (index) {\n\t  return (exports.count(index) + 1) / 2\n\t}\n\n\texports.spans = function (index, depth) {\n\t  if (!(index & 1)) return [index, index]\n\t  if (!depth) depth = exports.depth(index)\n\n\t  var offset = exports.offset(index, depth)\n\t  var width = twoPow(depth + 1)\n\n\t  return [offset * width, (offset + 1) * width - 2]\n\t}\n\n\texports.index = function (depth, offset) {\n\t  return (1 + 2 * offset) * twoPow(depth) - 1\n\t}\n\n\texports.offset = function (index, depth) {\n\t  if (!(index & 1)) return index / 2\n\t  if (!depth) depth = exports.depth(index)\n\n\t  return ((index + 1) / twoPow(depth) - 1) / 2\n\t}\n\n\texports.iterator = function (index) {\n\t  var ite = new Iterator()\n\t  ite.seek(index || 0)\n\t  return ite\n\t}\n\n\tfunction twoPow (n) {\n\t  return n < 31 ? 1 << n : ((1 << 30) * (1 << (n - 30)))\n\t}\n\n\tfunction rightShift (n) {\n\t  return (n - (n & 1)) / 2\n\t}\n\n\tfunction Iterator () {\n\t  this.index = 0\n\t  this.offset = 0\n\t  this.factor = 0\n\t}\n\n\tIterator.prototype.seek = function (index) {\n\t  this.index = index\n\t  if (this.index & 1) {\n\t    this.offset = exports.offset(index)\n\t    this.factor = twoPow(exports.depth(index) + 1)\n\t  } else {\n\t    this.offset = index / 2\n\t    this.factor = 2\n\t  }\n\t}\n\n\tIterator.prototype.isLeft = function () {\n\t  return (this.offset & 1) === 0\n\t}\n\n\tIterator.prototype.isRight = function () {\n\t  return (this.offset & 1) === 1\n\t}\n\n\tIterator.prototype.contains = function (index) {\n\t  return index > this.index\n\t    ? index < (this.index + this.factor / 2)\n\t    : index < this.index\n\t      ? index > (this.index - this.factor / 2)\n\t      : true\n\t}\n\n\tIterator.prototype.prev = function () {\n\t  if (!this.offset) return this.index\n\t  this.offset--\n\t  this.index -= this.factor\n\t  return this.index\n\t}\n\n\tIterator.prototype.next = function () {\n\t  this.offset++\n\t  this.index += this.factor\n\t  return this.index\n\t}\n\n\tIterator.prototype.count = function () {\n\t  if (!(this.index & 1)) return 1\n\t  return this.factor - 1\n\t}\n\n\tIterator.prototype.countLeaves = function () {\n\t  return (this.count() + 1) / 2\n\t}\n\n\tIterator.prototype.sibling = function () {\n\t  return this.isLeft() ? this.next() : this.prev()\n\t}\n\n\tIterator.prototype.parent = function () {\n\t  if (this.offset & 1) {\n\t    this.index -= this.factor / 2\n\t    this.offset = (this.offset - 1) / 2\n\t  } else {\n\t    this.index += this.factor / 2\n\t    this.offset /= 2\n\t  }\n\t  this.factor *= 2\n\t  return this.index\n\t}\n\n\tIterator.prototype.leftSpan = function () {\n\t  this.index = this.index - this.factor / 2 + 1\n\t  this.offset = this.index / 2\n\t  this.factor = 2\n\t  return this.index\n\t}\n\n\tIterator.prototype.rightSpan = function () {\n\t  this.index = this.index + this.factor / 2 - 1\n\t  this.offset = this.index / 2\n\t  this.factor = 2\n\t  return this.index\n\t}\n\n\tIterator.prototype.leftChild = function () {\n\t  if (this.factor === 2) return this.index\n\t  this.factor /= 2\n\t  this.index -= this.factor / 2\n\t  this.offset *= 2\n\t  return this.index\n\t}\n\n\tIterator.prototype.rightChild = function () {\n\t  if (this.factor === 2) return this.index\n\t  this.factor /= 2\n\t  this.index += this.factor / 2\n\t  this.offset = 2 * this.offset + 1\n\t  return this.index\n\t}\n\n\tIterator.prototype.nextTree = function () {\n\t  this.index = this.index + this.factor / 2 + 1\n\t  this.offset = this.index / 2\n\t  this.factor = 2\n\t  return this.index\n\t}\n\n\tIterator.prototype.prevTree = function () {\n\t  if (!this.offset) {\n\t    this.index = 0\n\t    this.factor = 2\n\t  } else {\n\t    this.index = this.index - this.factor / 2 - 1\n\t    this.offset = this.index / 2\n\t    this.factor = 2\n\t  }\n\t  return this.index\n\t}\n\n\tIterator.prototype.fullRoot = function (index) {\n\t  if (index <= this.index || (this.index & 1) > 0) return false\n\t  while (index > this.index + this.factor + this.factor / 2) {\n\t    this.index += this.factor / 2\n\t    this.factor *= 2\n\t    this.offset /= 2\n\t  }\n\t  return true\n\t}\n} (flatTree));\n\nexport default flatTree;\nexport { flatTree as __moduleExports };","start":1670465469268,"end":1670465469272,"order":"normal"}]}
