{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/rpc.js","transforms":[{"name":"vite:load-fallback","result":"\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","start":1670465470905,"end":1670465470973},{"name":"vite:react-babel","result":"\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","start":1670465470974,"end":1670465470974,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as rpc_1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/rpc.js?commonjs-exports\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/protobufjs@6.11.3/node_modules/protobufjs/src/rpc/service.js?commonjs-proxy\";\n\n(function (exports) {\n\t\"use strict\";\n\n\t/**\n\t * Streaming RPC helpers.\n\t * @namespace\n\t */\n\tvar rpc = exports;\n\n\t/**\n\t * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n\t * @typedef RPCImpl\n\t * @type {function}\n\t * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n\t * @param {Uint8Array} requestData Request data\n\t * @param {RPCImplCallback} callback Callback function\n\t * @returns {undefined}\n\t * @example\n\t * function rpcImpl(method, requestData, callback) {\n\t *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n\t *         throw Error(\"no such method\");\n\t *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n\t *         callback(err, responseData);\n\t *     });\n\t * }\n\t */\n\n\t/**\n\t * Node-style callback as used by {@link RPCImpl}.\n\t * @typedef RPCImplCallback\n\t * @type {function}\n\t * @param {Error|null} error Error, if any, otherwise `null`\n\t * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n\t * @returns {undefined}\n\t */\n\n\trpc.Service = require$$0;\n} (rpc_1));\n\nexport default rpc_1;\nexport { rpc_1 as __moduleExports };","start":1670465470974,"end":1670465471436,"order":"normal"}]}
