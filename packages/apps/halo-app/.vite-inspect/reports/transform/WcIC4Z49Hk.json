{"resolvedId":"/home/jdw/Code/dxos/dxos/packages/experimental/metagraph/dist/lib/browser/index.mjs","transforms":[{"name":"vite:load-fallback","result":"// packages/experimental/metagraph/src/metagraph.ts\nimport fetch from \"cross-fetch\";\nimport { ObservableProvider } from \"@dxos/async\";\nimport { raise } from \"@dxos/debug\";\nimport { ApiError } from \"@dxos/errors\";\nvar QueryObservableProvider = class extends ObservableProvider {\n  constructor(_callback) {\n    super();\n    this._callback = _callback;\n    this._results = [];\n  }\n  get results() {\n    return this._results;\n  }\n  set results(results) {\n    this._results = results != null ? results : [];\n    this.callback.onUpdate(this._results);\n  }\n  async fetch() {\n    await this._callback();\n  }\n};\nvar Metagraph = class {\n  constructor(_config) {\n    var _a;\n    this._config = _config;\n    this._serverUrl = (_a = this._config.get(\"runtime.services.dxns.server\")) != null ? _a : raise(new ApiError(\"Invalid DXNS server.\"));\n  }\n  get modules() {\n    return {\n      query: async (query) => {\n        const observable = new QueryObservableProvider(async () => {\n          var _a;\n          const response = await fetch(this._serverUrl);\n          const { modules = [] } = (_a = await response.json()) != null ? _a : {};\n          observable.results = modules.filter(({ tags }) => {\n            var _a2, _b;\n            if (!((_a2 = query == null ? void 0 : query.tags) == null ? void 0 : _a2.length)) {\n              return true;\n            }\n            return ((_b = query == null ? void 0 : query.tags) == null ? void 0 : _b.filter((tag) => tags == null ? void 0 : tags.includes(tag)).length) > 0;\n          });\n        });\n        await observable.fetch();\n        return observable;\n      }\n    };\n  }\n};\nexport {\n  Metagraph,\n  QueryObservableProvider\n};\n//# sourceMappingURL=index.mjs.map\n","start":1670465467784,"end":1670465468108},{"name":"vite:react-babel","result":"// packages/experimental/metagraph/src/metagraph.ts\nimport fetch from \"cross-fetch\";\nimport { ObservableProvider } from \"@dxos/async\";\nimport { raise } from \"@dxos/debug\";\nimport { ApiError } from \"@dxos/errors\";\nvar QueryObservableProvider = class extends ObservableProvider {\n  constructor(_callback) {\n    super();\n    this._callback = _callback;\n    this._results = [];\n  }\n  get results() {\n    return this._results;\n  }\n  set results(results) {\n    this._results = results != null ? results : [];\n    this.callback.onUpdate(this._results);\n  }\n  async fetch() {\n    await this._callback();\n  }\n};\nvar Metagraph = class {\n  constructor(_config) {\n    var _a;\n    this._config = _config;\n    this._serverUrl = (_a = this._config.get(\"runtime.services.dxns.server\")) != null ? _a : raise(new ApiError(\"Invalid DXNS server.\"));\n  }\n  get modules() {\n    return {\n      query: async (query) => {\n        const observable = new QueryObservableProvider(async () => {\n          var _a;\n          const response = await fetch(this._serverUrl);\n          const { modules = [] } = (_a = await response.json()) != null ? _a : {};\n          observable.results = modules.filter(({ tags }) => {\n            var _a2, _b;\n            if (!((_a2 = query == null ? void 0 : query.tags) == null ? void 0 : _a2.length)) {\n              return true;\n            }\n            return ((_b = query == null ? void 0 : query.tags) == null ? void 0 : _b.filter((tag) => tags == null ? void 0 : tags.includes(tag)).length) > 0;\n          });\n        });\n        await observable.fetch();\n        return observable;\n      }\n    };\n  }\n};\nexport {\n  Metagraph,\n  QueryObservableProvider\n};\n//# sourceMappingURL=index.mjs.map\n","start":1670465468108,"end":1670465468108,"order":"pre"}]}
