{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/fast-bitfield@1.2.2/node_modules/fast-bitfield/index.js","transforms":[{"name":"vite:load-fallback","result":"'use strict'\n\nconst ctz = require('count-trailing-zeros')\n\nmodule.exports = () => new Bitfield()\n\nclass Page {\n  constructor (level) {\n    const buf = new Uint8Array(level ? 8456 : 4360)\n    const b = buf.byteOffset\n\n    this.buffer = buf\n    this.bits = level ? null : new Uint32Array(buf.buffer, b, 1024)\n    this.children = level ? new Array(32768) : null\n    this.level = level\n\n    this.allOne = level\n      ? [\n        new Uint32Array(buf.buffer, b, 1024),\n        new Uint32Array(buf.buffer, b + 4096, 32),\n        new Uint32Array(buf.buffer, b + 4224, 1)\n      ]\n      : [\n        this.bits,\n        new Uint32Array(buf.buffer, b + 4096, 32),\n        new Uint32Array(buf.buffer, b + 4224, 1)\n      ]\n\n    this.oneOne = level\n      ? [\n        new Uint32Array(buf.buffer, b + 4228, 1024),\n        new Uint32Array(buf.buffer, b + 8324, 32),\n        new Uint32Array(buf.buffer, b + 8452, 1)\n      ]\n      : [\n        this.bits,\n        new Uint32Array(buf.buffer, b + 4228, 32),\n        new Uint32Array(buf.buffer, b + 4356, 1)\n      ]\n  }\n}\n\nconst ZEROS = [new Page(0), new Page(1), new Page(2), new Page(3)]\nconst MASK = new Uint32Array(32)\nconst MASK_INCL = new Uint32Array(32)\n\nfor (var i = 0; i < 32; i++) {\n  MASK[i] = Math.pow(2, 31 - i) - 1\n  MASK_INCL[i] = Math.pow(2, 32 - i) - 1\n}\n\nconst LITTLE_ENDIAN = new Uint8Array(MASK.buffer, MASK.byteOffset, 1)[0] === 0xff\n\nclass Bitfield {\n  constructor () {\n    this.length = 32768\n    this.littleEndian = LITTLE_ENDIAN\n\n    this._path = new Uint16Array(5)\n    this._offsets = new Uint16Array(this._path.buffer, this._path.byteOffset + 2, 4)\n    this._parents = new Array(4).fill(null)\n    this._page = new Page(0)\n    this._allocs = 1\n  }\n\n  last () {\n    var page = this._page\n    var b = 0\n\n    while (true) {\n      for (var i = 2; i >= 0; i--) {\n        const c = ctz(page.oneOne[i][b])\n        if (c === 32) return -1\n        b = (b << 5) + (31 - c)\n      }\n\n      this._path[page.level] = b\n      if (!page.level) return defactor(this._path)\n      page = page.children[b]\n      b = 0\n    }\n  }\n\n  set (index, bit) {\n    const page = this._getPage(index, bit)\n    if (!page) return false\n\n    const i = this._path[0]\n    const r = i & 31\n    const b = i >>> 5\n    const prev = page.bits[b]\n\n    page.bits[b] = bit\n      ? (prev | (0x80000000 >>> r))\n      : (prev & ~(0x80000000 >>> r))\n\n    const upd = page.bits[b]\n    if (upd === prev) return false\n\n    this._updateAllOne(page, b, upd)\n    this._updateOneOne(page, b, upd)\n\n    return true\n  }\n\n  get (index) {\n    const page = this._getPage(index, false)\n    if (!page) return false\n\n    const i = this._path[0]\n    const r = i & 31\n\n    return (page.bits[i >>> 5] & (0x80000000 >>> r)) !== 0\n  }\n\n  iterator () {\n    return new Iterator(this)\n  }\n\n  fill (val, start, end) {\n    if (!start) start = 0\n    if (val === true) return this._fillBit(true, start, end === 0 ? end : (end || this.length))\n    if (val === false) return this._fillBit(false, start, end === 0 ? end : (end || this.length))\n    this._fillBuffer(val, start, end === 0 ? end : (end || (start + 8 * val.length)))\n  }\n\n  grow () {\n    if (this._page.level === 3) throw new Error('Cannot grow beyond ' + this.length)\n    const page = this._page\n    this._page = new Page(page.level + 1)\n    this._page.children[0] = page\n    if (this._page.level === 3) this.length = Number.MAX_SAFE_INTEGER\n    else this.length *= 32768\n  }\n\n  _fillBuffer (buf, start, end) {\n    if ((start & 7) || (end & 7)) throw new Error('Offsets must be a multiple of 8')\n\n    start /= 8\n    while (end > this.length) this.grow()\n    end /= 8\n\n    const offset = start\n    var page = this._getPage(8 * start, true)\n\n    while (start < end) {\n      const delta = end - start < 4096 ? end - start : 4096\n      const s = start - offset\n\n      start += this._setPageBuffer(page, buf.subarray(s, s + delta), start & 1023)\n      if (start !== end) page = this._nextPage(page, 8 * start)\n    }\n  }\n\n  _fillBit (bit, start, end) {\n    var page = this._getPage(start, bit)\n\n    // TODO: this can be optimised a lot in the case of end - start > 32768\n    // in that case clear levels of 32768 ** 2 instead etc\n\n    while (start < end) {\n      const delta = end - start < 32768 ? end - start : 32768\n      start += this._setPageBits(page, bit, start & 32767, delta)\n      if (start !== end) page = this._nextPage(page, start)\n    }\n  }\n\n  _nextPage (page, start) {\n    const i = ++this._offsets[page.level]\n    return i === 32768\n      ? this._getPage(start, true)\n      : this._parents[page.level].children[i] || this._addPage(this._parents[page.level], i)\n  }\n\n  _setPageBuffer (page, buf, start) {\n    new Uint8Array(page.bits.buffer, page.bits.byteOffset, page.bits.length * 4).set(buf, start)\n    start >>>= 2\n    this._update(page, start, start + (buf.length >>> 2) + (buf.length & 3 ? 1 : 0))\n    return buf.length\n  }\n\n  _setPageBits (page, bit, start, end) {\n    const s = start >>> 5\n    const e = end >>> 5\n    const sm = 0xffffffff >>> (start & 31)\n    const em = ~(0xffffffff >>> (end & 31))\n\n    if (s === e) {\n      page.bits[s] = bit\n        ? page.bits[s] | (sm & em)\n        : page.bits[s] & ~(sm & em)\n      this._update(page, s, s + 1)\n      return end - start\n    }\n\n    page.bits[s] = bit\n      ? page.bits[s] | sm\n      : page.bits[s] & (~sm)\n\n    if (e - s > 2) page.bits.fill(bit ? 0xffffffff : 0, s + 1, e - 1)\n\n    if (e === 1024) {\n      page.bits[e - 1] = bit ? 0xffffffff : 0\n      this._update(page, s, e)\n      return end - start\n    }\n\n    page.bits[e] = bit\n      ? page.bits[e] | em\n      : page.bits[e] & (~em)\n\n    this._update(page, s, e + 1)\n    return end - start\n  }\n\n  _update (page, start, end) {\n    for (; start < end; start++) {\n      const upd = page.bits[start]\n      this._updateAllOne(page, start, upd)\n      this._updateOneOne(page, start, upd)\n    }\n  }\n\n  _updateAllOne (page, b, upd) {\n    var i = 1\n\n    do {\n      for (; i < 3; i++) {\n        const buf = page.allOne[i]\n        const r = b & 31\n        const prev = buf[b >>>= 5]\n        buf[b] = upd === 0xffffffff\n          ? (prev | (0x80000000 >>> r))\n          : (prev & ~(0x80000000 >>> r))\n        upd = buf[b]\n        if (upd === prev) return\n      }\n\n      b += this._offsets[page.level]\n      page = this._parents[page.level]\n      i = 0\n    } while (page)\n  }\n\n  _updateOneOne (page, b, upd) {\n    var i = 1\n\n    do {\n      for (; i < 3; i++) {\n        const buf = page.oneOne[i]\n        const r = b & 31\n        const prev = buf[b >>>= 5]\n        buf[b] = upd !== 0\n          ? (prev | (0x80000000 >>> r))\n          : (prev & ~(0x80000000 >>> r))\n        upd = buf[b]\n        if (upd === prev) return\n      }\n\n      b += this._offsets[page.level]\n      page = this._parents[page.level]\n      i = 0\n\n      if (upd === 0 && page) {\n        // all zeros, non root -> free page\n        page.children[this._offsets[page.level - 1]] = undefined\n      }\n    } while (page)\n  }\n\n  _getPage (index, createIfMissing) {\n    factor(index, this._path)\n\n    while (index >= this.length) {\n      if (!createIfMissing) return null\n      this.grow()\n    }\n\n    var page = this._page\n\n    for (var i = page.level; i > 0 && page; i--) {\n      const p = this._path[i]\n      this._parents[i - 1] = page\n      page = page.children[p] || (createIfMissing ? this._addPage(page, p) : null)\n    }\n\n    return page\n  }\n\n  _addPage (page, i) {\n    this._allocs++\n    page = page.children[i] = new Page(page.level - 1)\n    return page\n  }\n}\n\nclass Iterator {\n  constructor (bitfield) {\n    this._bitfield = bitfield\n    this._path = new Uint16Array(5)\n    this._offsets = new Uint16Array(this._path.buffer, this._path.byteOffset + 2, 4)\n    this._parents = new Array(4).fill(null)\n    this._page = null\n    this._allocs = bitfield._allocs\n\n    this.seek(0)\n  }\n\n  seek (index) {\n    this._allocs = this._bitfield._allocs\n\n    if (index >= this._bitfield.length) {\n      this._page = null\n      return this\n    }\n\n    factor(index, this._path)\n\n    this._page = this._bitfield._page\n    for (var i = this._page.level; i > 0; i--) {\n      this._parents[i - 1] = this._page\n      this._page = this._page.children[this._path[i]] || ZEROS[i - 1]\n    }\n\n    return this\n  }\n\n  next (bit) {\n    return bit ? this.nextTrue() : this.nextFalse()\n  }\n\n  nextFalse () {\n    if (this._allocs !== this._bitfield._allocs) {\n      // If a page has been alloced while we are iterating\n      // and we have a zero page in our path we need to reseek\n      // in case that page has been overwritten\n      this.seek(defactor(this._path))\n    }\n\n    var page = this._page\n    var b = this._path[0]\n    var mask = MASK_INCL\n\n    while (page) {\n      for (var i = 0; i < 3; i++) {\n        const r = b & 31\n        const clz = Math.clz32((~page.allOne[i][b >>>= 5]) & mask[r])\n        if (clz !== 32) return this._downLeftFalse(page, i, b, clz)\n        mask = MASK\n      }\n\n      b = this._offsets[page.level]\n      page = this._parents[page.level]\n    }\n\n    return -1\n  }\n\n  _downLeftFalse (page, i, b, clz) {\n    while (true) {\n      while (i) {\n        b = (b << 5) + clz\n        clz = Math.clz32(~page.allOne[--i][b])\n      }\n\n      b = (b << 5) + clz\n\n      if (!page.level) break\n\n      this._parents[page.level - 1] = page\n      this._path[page.level] = b\n\n      page = page.children[b]\n      i = 3\n      clz = b = 0\n    }\n\n    this._page = page\n    this._path[0] = b\n\n    return this._inc()\n  }\n\n  nextTrue () {\n    var page = this._page\n    var b = this._path[0]\n    var mask = MASK_INCL\n\n    while (page) {\n      for (var i = 0; i < 3; i++) {\n        const r = b & 31\n        const clz = Math.clz32(page.oneOne[i][b >>>= 5] & mask[r])\n        if (clz !== 32) return this._downLeftTrue(page, i, b, clz)\n        mask = MASK\n      }\n\n      b = this._offsets[page.level]\n      page = this._parents[page.level]\n    }\n\n    return -1\n  }\n\n  _downLeftTrue (page, i, b, clz) {\n    while (true) {\n      while (i) {\n        b = (b << 5) + clz\n        clz = Math.clz32(page.oneOne[--i][b])\n      }\n\n      b = (b << 5) + clz\n\n      if (!page.level) break\n\n      this._parents[page.level - 1] = page\n      this._path[page.level] = b\n\n      page = page.children[b]\n      i = 3\n      clz = b = 0\n    }\n\n    this._page = page\n    this._path[0] = b\n\n    return this._inc()\n  }\n\n  _inc () {\n    const n = defactor(this._path)\n    if (this._path[0] < 32767) this._path[0]++\n    else this.seek(n + 1)\n    return n\n  }\n}\n\nfunction defactor (out) {\n  return ((((out[3] * 32768 + out[2]) * 32768) + out[1]) * 32768) + out[0]\n}\n\nfunction factor (n, out) {\n  n = (n - (out[0] = (n & 32767))) / 32768\n  n = (n - (out[1] = (n & 32767))) / 32768\n  out[3] = ((n - (out[2] = (n & 32767))) / 32768) & 32767\n}\n","start":1670465470054,"end":1670465470134},{"name":"vite:react-babel","result":"'use strict'\n\nconst ctz = require('count-trailing-zeros')\n\nmodule.exports = () => new Bitfield()\n\nclass Page {\n  constructor (level) {\n    const buf = new Uint8Array(level ? 8456 : 4360)\n    const b = buf.byteOffset\n\n    this.buffer = buf\n    this.bits = level ? null : new Uint32Array(buf.buffer, b, 1024)\n    this.children = level ? new Array(32768) : null\n    this.level = level\n\n    this.allOne = level\n      ? [\n        new Uint32Array(buf.buffer, b, 1024),\n        new Uint32Array(buf.buffer, b + 4096, 32),\n        new Uint32Array(buf.buffer, b + 4224, 1)\n      ]\n      : [\n        this.bits,\n        new Uint32Array(buf.buffer, b + 4096, 32),\n        new Uint32Array(buf.buffer, b + 4224, 1)\n      ]\n\n    this.oneOne = level\n      ? [\n        new Uint32Array(buf.buffer, b + 4228, 1024),\n        new Uint32Array(buf.buffer, b + 8324, 32),\n        new Uint32Array(buf.buffer, b + 8452, 1)\n      ]\n      : [\n        this.bits,\n        new Uint32Array(buf.buffer, b + 4228, 32),\n        new Uint32Array(buf.buffer, b + 4356, 1)\n      ]\n  }\n}\n\nconst ZEROS = [new Page(0), new Page(1), new Page(2), new Page(3)]\nconst MASK = new Uint32Array(32)\nconst MASK_INCL = new Uint32Array(32)\n\nfor (var i = 0; i < 32; i++) {\n  MASK[i] = Math.pow(2, 31 - i) - 1\n  MASK_INCL[i] = Math.pow(2, 32 - i) - 1\n}\n\nconst LITTLE_ENDIAN = new Uint8Array(MASK.buffer, MASK.byteOffset, 1)[0] === 0xff\n\nclass Bitfield {\n  constructor () {\n    this.length = 32768\n    this.littleEndian = LITTLE_ENDIAN\n\n    this._path = new Uint16Array(5)\n    this._offsets = new Uint16Array(this._path.buffer, this._path.byteOffset + 2, 4)\n    this._parents = new Array(4).fill(null)\n    this._page = new Page(0)\n    this._allocs = 1\n  }\n\n  last () {\n    var page = this._page\n    var b = 0\n\n    while (true) {\n      for (var i = 2; i >= 0; i--) {\n        const c = ctz(page.oneOne[i][b])\n        if (c === 32) return -1\n        b = (b << 5) + (31 - c)\n      }\n\n      this._path[page.level] = b\n      if (!page.level) return defactor(this._path)\n      page = page.children[b]\n      b = 0\n    }\n  }\n\n  set (index, bit) {\n    const page = this._getPage(index, bit)\n    if (!page) return false\n\n    const i = this._path[0]\n    const r = i & 31\n    const b = i >>> 5\n    const prev = page.bits[b]\n\n    page.bits[b] = bit\n      ? (prev | (0x80000000 >>> r))\n      : (prev & ~(0x80000000 >>> r))\n\n    const upd = page.bits[b]\n    if (upd === prev) return false\n\n    this._updateAllOne(page, b, upd)\n    this._updateOneOne(page, b, upd)\n\n    return true\n  }\n\n  get (index) {\n    const page = this._getPage(index, false)\n    if (!page) return false\n\n    const i = this._path[0]\n    const r = i & 31\n\n    return (page.bits[i >>> 5] & (0x80000000 >>> r)) !== 0\n  }\n\n  iterator () {\n    return new Iterator(this)\n  }\n\n  fill (val, start, end) {\n    if (!start) start = 0\n    if (val === true) return this._fillBit(true, start, end === 0 ? end : (end || this.length))\n    if (val === false) return this._fillBit(false, start, end === 0 ? end : (end || this.length))\n    this._fillBuffer(val, start, end === 0 ? end : (end || (start + 8 * val.length)))\n  }\n\n  grow () {\n    if (this._page.level === 3) throw new Error('Cannot grow beyond ' + this.length)\n    const page = this._page\n    this._page = new Page(page.level + 1)\n    this._page.children[0] = page\n    if (this._page.level === 3) this.length = Number.MAX_SAFE_INTEGER\n    else this.length *= 32768\n  }\n\n  _fillBuffer (buf, start, end) {\n    if ((start & 7) || (end & 7)) throw new Error('Offsets must be a multiple of 8')\n\n    start /= 8\n    while (end > this.length) this.grow()\n    end /= 8\n\n    const offset = start\n    var page = this._getPage(8 * start, true)\n\n    while (start < end) {\n      const delta = end - start < 4096 ? end - start : 4096\n      const s = start - offset\n\n      start += this._setPageBuffer(page, buf.subarray(s, s + delta), start & 1023)\n      if (start !== end) page = this._nextPage(page, 8 * start)\n    }\n  }\n\n  _fillBit (bit, start, end) {\n    var page = this._getPage(start, bit)\n\n    // TODO: this can be optimised a lot in the case of end - start > 32768\n    // in that case clear levels of 32768 ** 2 instead etc\n\n    while (start < end) {\n      const delta = end - start < 32768 ? end - start : 32768\n      start += this._setPageBits(page, bit, start & 32767, delta)\n      if (start !== end) page = this._nextPage(page, start)\n    }\n  }\n\n  _nextPage (page, start) {\n    const i = ++this._offsets[page.level]\n    return i === 32768\n      ? this._getPage(start, true)\n      : this._parents[page.level].children[i] || this._addPage(this._parents[page.level], i)\n  }\n\n  _setPageBuffer (page, buf, start) {\n    new Uint8Array(page.bits.buffer, page.bits.byteOffset, page.bits.length * 4).set(buf, start)\n    start >>>= 2\n    this._update(page, start, start + (buf.length >>> 2) + (buf.length & 3 ? 1 : 0))\n    return buf.length\n  }\n\n  _setPageBits (page, bit, start, end) {\n    const s = start >>> 5\n    const e = end >>> 5\n    const sm = 0xffffffff >>> (start & 31)\n    const em = ~(0xffffffff >>> (end & 31))\n\n    if (s === e) {\n      page.bits[s] = bit\n        ? page.bits[s] | (sm & em)\n        : page.bits[s] & ~(sm & em)\n      this._update(page, s, s + 1)\n      return end - start\n    }\n\n    page.bits[s] = bit\n      ? page.bits[s] | sm\n      : page.bits[s] & (~sm)\n\n    if (e - s > 2) page.bits.fill(bit ? 0xffffffff : 0, s + 1, e - 1)\n\n    if (e === 1024) {\n      page.bits[e - 1] = bit ? 0xffffffff : 0\n      this._update(page, s, e)\n      return end - start\n    }\n\n    page.bits[e] = bit\n      ? page.bits[e] | em\n      : page.bits[e] & (~em)\n\n    this._update(page, s, e + 1)\n    return end - start\n  }\n\n  _update (page, start, end) {\n    for (; start < end; start++) {\n      const upd = page.bits[start]\n      this._updateAllOne(page, start, upd)\n      this._updateOneOne(page, start, upd)\n    }\n  }\n\n  _updateAllOne (page, b, upd) {\n    var i = 1\n\n    do {\n      for (; i < 3; i++) {\n        const buf = page.allOne[i]\n        const r = b & 31\n        const prev = buf[b >>>= 5]\n        buf[b] = upd === 0xffffffff\n          ? (prev | (0x80000000 >>> r))\n          : (prev & ~(0x80000000 >>> r))\n        upd = buf[b]\n        if (upd === prev) return\n      }\n\n      b += this._offsets[page.level]\n      page = this._parents[page.level]\n      i = 0\n    } while (page)\n  }\n\n  _updateOneOne (page, b, upd) {\n    var i = 1\n\n    do {\n      for (; i < 3; i++) {\n        const buf = page.oneOne[i]\n        const r = b & 31\n        const prev = buf[b >>>= 5]\n        buf[b] = upd !== 0\n          ? (prev | (0x80000000 >>> r))\n          : (prev & ~(0x80000000 >>> r))\n        upd = buf[b]\n        if (upd === prev) return\n      }\n\n      b += this._offsets[page.level]\n      page = this._parents[page.level]\n      i = 0\n\n      if (upd === 0 && page) {\n        // all zeros, non root -> free page\n        page.children[this._offsets[page.level - 1]] = undefined\n      }\n    } while (page)\n  }\n\n  _getPage (index, createIfMissing) {\n    factor(index, this._path)\n\n    while (index >= this.length) {\n      if (!createIfMissing) return null\n      this.grow()\n    }\n\n    var page = this._page\n\n    for (var i = page.level; i > 0 && page; i--) {\n      const p = this._path[i]\n      this._parents[i - 1] = page\n      page = page.children[p] || (createIfMissing ? this._addPage(page, p) : null)\n    }\n\n    return page\n  }\n\n  _addPage (page, i) {\n    this._allocs++\n    page = page.children[i] = new Page(page.level - 1)\n    return page\n  }\n}\n\nclass Iterator {\n  constructor (bitfield) {\n    this._bitfield = bitfield\n    this._path = new Uint16Array(5)\n    this._offsets = new Uint16Array(this._path.buffer, this._path.byteOffset + 2, 4)\n    this._parents = new Array(4).fill(null)\n    this._page = null\n    this._allocs = bitfield._allocs\n\n    this.seek(0)\n  }\n\n  seek (index) {\n    this._allocs = this._bitfield._allocs\n\n    if (index >= this._bitfield.length) {\n      this._page = null\n      return this\n    }\n\n    factor(index, this._path)\n\n    this._page = this._bitfield._page\n    for (var i = this._page.level; i > 0; i--) {\n      this._parents[i - 1] = this._page\n      this._page = this._page.children[this._path[i]] || ZEROS[i - 1]\n    }\n\n    return this\n  }\n\n  next (bit) {\n    return bit ? this.nextTrue() : this.nextFalse()\n  }\n\n  nextFalse () {\n    if (this._allocs !== this._bitfield._allocs) {\n      // If a page has been alloced while we are iterating\n      // and we have a zero page in our path we need to reseek\n      // in case that page has been overwritten\n      this.seek(defactor(this._path))\n    }\n\n    var page = this._page\n    var b = this._path[0]\n    var mask = MASK_INCL\n\n    while (page) {\n      for (var i = 0; i < 3; i++) {\n        const r = b & 31\n        const clz = Math.clz32((~page.allOne[i][b >>>= 5]) & mask[r])\n        if (clz !== 32) return this._downLeftFalse(page, i, b, clz)\n        mask = MASK\n      }\n\n      b = this._offsets[page.level]\n      page = this._parents[page.level]\n    }\n\n    return -1\n  }\n\n  _downLeftFalse (page, i, b, clz) {\n    while (true) {\n      while (i) {\n        b = (b << 5) + clz\n        clz = Math.clz32(~page.allOne[--i][b])\n      }\n\n      b = (b << 5) + clz\n\n      if (!page.level) break\n\n      this._parents[page.level - 1] = page\n      this._path[page.level] = b\n\n      page = page.children[b]\n      i = 3\n      clz = b = 0\n    }\n\n    this._page = page\n    this._path[0] = b\n\n    return this._inc()\n  }\n\n  nextTrue () {\n    var page = this._page\n    var b = this._path[0]\n    var mask = MASK_INCL\n\n    while (page) {\n      for (var i = 0; i < 3; i++) {\n        const r = b & 31\n        const clz = Math.clz32(page.oneOne[i][b >>>= 5] & mask[r])\n        if (clz !== 32) return this._downLeftTrue(page, i, b, clz)\n        mask = MASK\n      }\n\n      b = this._offsets[page.level]\n      page = this._parents[page.level]\n    }\n\n    return -1\n  }\n\n  _downLeftTrue (page, i, b, clz) {\n    while (true) {\n      while (i) {\n        b = (b << 5) + clz\n        clz = Math.clz32(page.oneOne[--i][b])\n      }\n\n      b = (b << 5) + clz\n\n      if (!page.level) break\n\n      this._parents[page.level - 1] = page\n      this._path[page.level] = b\n\n      page = page.children[b]\n      i = 3\n      clz = b = 0\n    }\n\n    this._page = page\n    this._path[0] = b\n\n    return this._inc()\n  }\n\n  _inc () {\n    const n = defactor(this._path)\n    if (this._path[0] < 32767) this._path[0]++\n    else this.seek(n + 1)\n    return n\n  }\n}\n\nfunction defactor (out) {\n  return ((((out[3] * 32768 + out[2]) * 32768) + out[1]) * 32768) + out[0]\n}\n\nfunction factor (n, out) {\n  n = (n - (out[0] = (n & 32767))) / 32768\n  n = (n - (out[1] = (n & 32767))) / 32768\n  out[3] = ((n - (out[2] = (n & 32767))) / 32768) & 32767\n}\n","start":1670465470134,"end":1670465470134,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/count-trailing-zeros@1.0.1/node_modules/count-trailing-zeros/ctz.js?commonjs-proxy\";\n\n'use strict'\n\nconst ctz = require$$0\n\nvar fastBitfield = () => new Bitfield()\n\nclass Page {\n  constructor (level) {\n    const buf = new Uint8Array(level ? 8456 : 4360)\n    const b = buf.byteOffset\n\n    this.buffer = buf\n    this.bits = level ? null : new Uint32Array(buf.buffer, b, 1024)\n    this.children = level ? new Array(32768) : null\n    this.level = level\n\n    this.allOne = level\n      ? [\n        new Uint32Array(buf.buffer, b, 1024),\n        new Uint32Array(buf.buffer, b + 4096, 32),\n        new Uint32Array(buf.buffer, b + 4224, 1)\n      ]\n      : [\n        this.bits,\n        new Uint32Array(buf.buffer, b + 4096, 32),\n        new Uint32Array(buf.buffer, b + 4224, 1)\n      ]\n\n    this.oneOne = level\n      ? [\n        new Uint32Array(buf.buffer, b + 4228, 1024),\n        new Uint32Array(buf.buffer, b + 8324, 32),\n        new Uint32Array(buf.buffer, b + 8452, 1)\n      ]\n      : [\n        this.bits,\n        new Uint32Array(buf.buffer, b + 4228, 32),\n        new Uint32Array(buf.buffer, b + 4356, 1)\n      ]\n  }\n}\n\nconst ZEROS = [new Page(0), new Page(1), new Page(2), new Page(3)]\nconst MASK = new Uint32Array(32)\nconst MASK_INCL = new Uint32Array(32)\n\nfor (var i = 0; i < 32; i++) {\n  MASK[i] = Math.pow(2, 31 - i) - 1\n  MASK_INCL[i] = Math.pow(2, 32 - i) - 1\n}\n\nconst LITTLE_ENDIAN = new Uint8Array(MASK.buffer, MASK.byteOffset, 1)[0] === 0xff\n\nclass Bitfield {\n  constructor () {\n    this.length = 32768\n    this.littleEndian = LITTLE_ENDIAN\n\n    this._path = new Uint16Array(5)\n    this._offsets = new Uint16Array(this._path.buffer, this._path.byteOffset + 2, 4)\n    this._parents = new Array(4).fill(null)\n    this._page = new Page(0)\n    this._allocs = 1\n  }\n\n  last () {\n    var page = this._page\n    var b = 0\n\n    while (true) {\n      for (var i = 2; i >= 0; i--) {\n        const c = ctz(page.oneOne[i][b])\n        if (c === 32) return -1\n        b = (b << 5) + (31 - c)\n      }\n\n      this._path[page.level] = b\n      if (!page.level) return defactor(this._path)\n      page = page.children[b]\n      b = 0\n    }\n  }\n\n  set (index, bit) {\n    const page = this._getPage(index, bit)\n    if (!page) return false\n\n    const i = this._path[0]\n    const r = i & 31\n    const b = i >>> 5\n    const prev = page.bits[b]\n\n    page.bits[b] = bit\n      ? (prev | (0x80000000 >>> r))\n      : (prev & ~(0x80000000 >>> r))\n\n    const upd = page.bits[b]\n    if (upd === prev) return false\n\n    this._updateAllOne(page, b, upd)\n    this._updateOneOne(page, b, upd)\n\n    return true\n  }\n\n  get (index) {\n    const page = this._getPage(index, false)\n    if (!page) return false\n\n    const i = this._path[0]\n    const r = i & 31\n\n    return (page.bits[i >>> 5] & (0x80000000 >>> r)) !== 0\n  }\n\n  iterator () {\n    return new Iterator(this)\n  }\n\n  fill (val, start, end) {\n    if (!start) start = 0\n    if (val === true) return this._fillBit(true, start, end === 0 ? end : (end || this.length))\n    if (val === false) return this._fillBit(false, start, end === 0 ? end : (end || this.length))\n    this._fillBuffer(val, start, end === 0 ? end : (end || (start + 8 * val.length)))\n  }\n\n  grow () {\n    if (this._page.level === 3) throw new Error('Cannot grow beyond ' + this.length)\n    const page = this._page\n    this._page = new Page(page.level + 1)\n    this._page.children[0] = page\n    if (this._page.level === 3) this.length = Number.MAX_SAFE_INTEGER\n    else this.length *= 32768\n  }\n\n  _fillBuffer (buf, start, end) {\n    if ((start & 7) || (end & 7)) throw new Error('Offsets must be a multiple of 8')\n\n    start /= 8\n    while (end > this.length) this.grow()\n    end /= 8\n\n    const offset = start\n    var page = this._getPage(8 * start, true)\n\n    while (start < end) {\n      const delta = end - start < 4096 ? end - start : 4096\n      const s = start - offset\n\n      start += this._setPageBuffer(page, buf.subarray(s, s + delta), start & 1023)\n      if (start !== end) page = this._nextPage(page, 8 * start)\n    }\n  }\n\n  _fillBit (bit, start, end) {\n    var page = this._getPage(start, bit)\n\n    // TODO: this can be optimised a lot in the case of end - start > 32768\n    // in that case clear levels of 32768 ** 2 instead etc\n\n    while (start < end) {\n      const delta = end - start < 32768 ? end - start : 32768\n      start += this._setPageBits(page, bit, start & 32767, delta)\n      if (start !== end) page = this._nextPage(page, start)\n    }\n  }\n\n  _nextPage (page, start) {\n    const i = ++this._offsets[page.level]\n    return i === 32768\n      ? this._getPage(start, true)\n      : this._parents[page.level].children[i] || this._addPage(this._parents[page.level], i)\n  }\n\n  _setPageBuffer (page, buf, start) {\n    new Uint8Array(page.bits.buffer, page.bits.byteOffset, page.bits.length * 4).set(buf, start)\n    start >>>= 2\n    this._update(page, start, start + (buf.length >>> 2) + (buf.length & 3 ? 1 : 0))\n    return buf.length\n  }\n\n  _setPageBits (page, bit, start, end) {\n    const s = start >>> 5\n    const e = end >>> 5\n    const sm = 0xffffffff >>> (start & 31)\n    const em = ~(0xffffffff >>> (end & 31))\n\n    if (s === e) {\n      page.bits[s] = bit\n        ? page.bits[s] | (sm & em)\n        : page.bits[s] & ~(sm & em)\n      this._update(page, s, s + 1)\n      return end - start\n    }\n\n    page.bits[s] = bit\n      ? page.bits[s] | sm\n      : page.bits[s] & (~sm)\n\n    if (e - s > 2) page.bits.fill(bit ? 0xffffffff : 0, s + 1, e - 1)\n\n    if (e === 1024) {\n      page.bits[e - 1] = bit ? 0xffffffff : 0\n      this._update(page, s, e)\n      return end - start\n    }\n\n    page.bits[e] = bit\n      ? page.bits[e] | em\n      : page.bits[e] & (~em)\n\n    this._update(page, s, e + 1)\n    return end - start\n  }\n\n  _update (page, start, end) {\n    for (; start < end; start++) {\n      const upd = page.bits[start]\n      this._updateAllOne(page, start, upd)\n      this._updateOneOne(page, start, upd)\n    }\n  }\n\n  _updateAllOne (page, b, upd) {\n    var i = 1\n\n    do {\n      for (; i < 3; i++) {\n        const buf = page.allOne[i]\n        const r = b & 31\n        const prev = buf[b >>>= 5]\n        buf[b] = upd === 0xffffffff\n          ? (prev | (0x80000000 >>> r))\n          : (prev & ~(0x80000000 >>> r))\n        upd = buf[b]\n        if (upd === prev) return\n      }\n\n      b += this._offsets[page.level]\n      page = this._parents[page.level]\n      i = 0\n    } while (page)\n  }\n\n  _updateOneOne (page, b, upd) {\n    var i = 1\n\n    do {\n      for (; i < 3; i++) {\n        const buf = page.oneOne[i]\n        const r = b & 31\n        const prev = buf[b >>>= 5]\n        buf[b] = upd !== 0\n          ? (prev | (0x80000000 >>> r))\n          : (prev & ~(0x80000000 >>> r))\n        upd = buf[b]\n        if (upd === prev) return\n      }\n\n      b += this._offsets[page.level]\n      page = this._parents[page.level]\n      i = 0\n\n      if (upd === 0 && page) {\n        // all zeros, non root -> free page\n        page.children[this._offsets[page.level - 1]] = undefined\n      }\n    } while (page)\n  }\n\n  _getPage (index, createIfMissing) {\n    factor(index, this._path)\n\n    while (index >= this.length) {\n      if (!createIfMissing) return null\n      this.grow()\n    }\n\n    var page = this._page\n\n    for (var i = page.level; i > 0 && page; i--) {\n      const p = this._path[i]\n      this._parents[i - 1] = page\n      page = page.children[p] || (createIfMissing ? this._addPage(page, p) : null)\n    }\n\n    return page\n  }\n\n  _addPage (page, i) {\n    this._allocs++\n    page = page.children[i] = new Page(page.level - 1)\n    return page\n  }\n}\n\nclass Iterator {\n  constructor (bitfield) {\n    this._bitfield = bitfield\n    this._path = new Uint16Array(5)\n    this._offsets = new Uint16Array(this._path.buffer, this._path.byteOffset + 2, 4)\n    this._parents = new Array(4).fill(null)\n    this._page = null\n    this._allocs = bitfield._allocs\n\n    this.seek(0)\n  }\n\n  seek (index) {\n    this._allocs = this._bitfield._allocs\n\n    if (index >= this._bitfield.length) {\n      this._page = null\n      return this\n    }\n\n    factor(index, this._path)\n\n    this._page = this._bitfield._page\n    for (var i = this._page.level; i > 0; i--) {\n      this._parents[i - 1] = this._page\n      this._page = this._page.children[this._path[i]] || ZEROS[i - 1]\n    }\n\n    return this\n  }\n\n  next (bit) {\n    return bit ? this.nextTrue() : this.nextFalse()\n  }\n\n  nextFalse () {\n    if (this._allocs !== this._bitfield._allocs) {\n      // If a page has been alloced while we are iterating\n      // and we have a zero page in our path we need to reseek\n      // in case that page has been overwritten\n      this.seek(defactor(this._path))\n    }\n\n    var page = this._page\n    var b = this._path[0]\n    var mask = MASK_INCL\n\n    while (page) {\n      for (var i = 0; i < 3; i++) {\n        const r = b & 31\n        const clz = Math.clz32((~page.allOne[i][b >>>= 5]) & mask[r])\n        if (clz !== 32) return this._downLeftFalse(page, i, b, clz)\n        mask = MASK\n      }\n\n      b = this._offsets[page.level]\n      page = this._parents[page.level]\n    }\n\n    return -1\n  }\n\n  _downLeftFalse (page, i, b, clz) {\n    while (true) {\n      while (i) {\n        b = (b << 5) + clz\n        clz = Math.clz32(~page.allOne[--i][b])\n      }\n\n      b = (b << 5) + clz\n\n      if (!page.level) break\n\n      this._parents[page.level - 1] = page\n      this._path[page.level] = b\n\n      page = page.children[b]\n      i = 3\n      clz = b = 0\n    }\n\n    this._page = page\n    this._path[0] = b\n\n    return this._inc()\n  }\n\n  nextTrue () {\n    var page = this._page\n    var b = this._path[0]\n    var mask = MASK_INCL\n\n    while (page) {\n      for (var i = 0; i < 3; i++) {\n        const r = b & 31\n        const clz = Math.clz32(page.oneOne[i][b >>>= 5] & mask[r])\n        if (clz !== 32) return this._downLeftTrue(page, i, b, clz)\n        mask = MASK\n      }\n\n      b = this._offsets[page.level]\n      page = this._parents[page.level]\n    }\n\n    return -1\n  }\n\n  _downLeftTrue (page, i, b, clz) {\n    while (true) {\n      while (i) {\n        b = (b << 5) + clz\n        clz = Math.clz32(page.oneOne[--i][b])\n      }\n\n      b = (b << 5) + clz\n\n      if (!page.level) break\n\n      this._parents[page.level - 1] = page\n      this._path[page.level] = b\n\n      page = page.children[b]\n      i = 3\n      clz = b = 0\n    }\n\n    this._page = page\n    this._path[0] = b\n\n    return this._inc()\n  }\n\n  _inc () {\n    const n = defactor(this._path)\n    if (this._path[0] < 32767) this._path[0]++\n    else this.seek(n + 1)\n    return n\n  }\n}\n\nfunction defactor (out) {\n  return ((((out[3] * 32768 + out[2]) * 32768) + out[1]) * 32768) + out[0]\n}\n\nfunction factor (n, out) {\n  n = (n - (out[0] = (n & 32767))) / 32768\n  n = (n - (out[1] = (n & 32767))) / 32768\n  out[3] = ((n - (out[2] = (n & 32767))) / 32768) & 32767\n}\n\nexport default fastBitfield;\nexport { fastBitfield as __moduleExports };","start":1670465470134,"end":1670465470906,"order":"normal"},{"name":"polyfill-node","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/count-trailing-zeros@1.0.1/node_modules/count-trailing-zeros/ctz.js?commonjs-proxy\";\n\n'use strict'\n\nconst ctz = require$$0\n\nvar fastBitfield = () => new Bitfield()\n\nclass Page {\n  constructor (level) {\n    const buf = new Uint8Array(level ? 8456 : 4360)\n    const b = buf.byteOffset\n\n    this.buffer = buf\n    this.bits = level ? null : new Uint32Array(buf.buffer, b, 1024)\n    this.children = level ? new Array(32768) : null\n    this.level = level\n\n    this.allOne = level\n      ? [\n        new Uint32Array(buf.buffer, b, 1024),\n        new Uint32Array(buf.buffer, b + 4096, 32),\n        new Uint32Array(buf.buffer, b + 4224, 1)\n      ]\n      : [\n        this.bits,\n        new Uint32Array(buf.buffer, b + 4096, 32),\n        new Uint32Array(buf.buffer, b + 4224, 1)\n      ]\n\n    this.oneOne = level\n      ? [\n        new Uint32Array(buf.buffer, b + 4228, 1024),\n        new Uint32Array(buf.buffer, b + 8324, 32),\n        new Uint32Array(buf.buffer, b + 8452, 1)\n      ]\n      : [\n        this.bits,\n        new Uint32Array(buf.buffer, b + 4228, 32),\n        new Uint32Array(buf.buffer, b + 4356, 1)\n      ]\n  }\n}\n\nconst ZEROS = [new Page(0), new Page(1), new Page(2), new Page(3)]\nconst MASK = new Uint32Array(32)\nconst MASK_INCL = new Uint32Array(32)\n\nfor (var i = 0; i < 32; i++) {\n  MASK[i] = Math.pow(2, 31 - i) - 1\n  MASK_INCL[i] = Math.pow(2, 32 - i) - 1\n}\n\nconst LITTLE_ENDIAN = new Uint8Array(MASK.buffer, MASK.byteOffset, 1)[0] === 0xff\n\nclass Bitfield {\n  constructor () {\n    this.length = 32768\n    this.littleEndian = LITTLE_ENDIAN\n\n    this._path = new Uint16Array(5)\n    this._offsets = new Uint16Array(this._path.buffer, this._path.byteOffset + 2, 4)\n    this._parents = new Array(4).fill(null)\n    this._page = new Page(0)\n    this._allocs = 1\n  }\n\n  last () {\n    var page = this._page\n    var b = 0\n\n    while (true) {\n      for (var i = 2; i >= 0; i--) {\n        const c = ctz(page.oneOne[i][b])\n        if (c === 32) return -1\n        b = (b << 5) + (31 - c)\n      }\n\n      this._path[page.level] = b\n      if (!page.level) return defactor(this._path)\n      page = page.children[b]\n      b = 0\n    }\n  }\n\n  set (index, bit) {\n    const page = this._getPage(index, bit)\n    if (!page) return false\n\n    const i = this._path[0]\n    const r = i & 31\n    const b = i >>> 5\n    const prev = page.bits[b]\n\n    page.bits[b] = bit\n      ? (prev | (0x80000000 >>> r))\n      : (prev & ~(0x80000000 >>> r))\n\n    const upd = page.bits[b]\n    if (upd === prev) return false\n\n    this._updateAllOne(page, b, upd)\n    this._updateOneOne(page, b, upd)\n\n    return true\n  }\n\n  get (index) {\n    const page = this._getPage(index, false)\n    if (!page) return false\n\n    const i = this._path[0]\n    const r = i & 31\n\n    return (page.bits[i >>> 5] & (0x80000000 >>> r)) !== 0\n  }\n\n  iterator () {\n    return new Iterator(this)\n  }\n\n  fill (val, start, end) {\n    if (!start) start = 0\n    if (val === true) return this._fillBit(true, start, end === 0 ? end : (end || this.length))\n    if (val === false) return this._fillBit(false, start, end === 0 ? end : (end || this.length))\n    this._fillBuffer(val, start, end === 0 ? end : (end || (start + 8 * val.length)))\n  }\n\n  grow () {\n    if (this._page.level === 3) throw new Error('Cannot grow beyond ' + this.length)\n    const page = this._page\n    this._page = new Page(page.level + 1)\n    this._page.children[0] = page\n    if (this._page.level === 3) this.length = Number.MAX_SAFE_INTEGER\n    else this.length *= 32768\n  }\n\n  _fillBuffer (buf, start, end) {\n    if ((start & 7) || (end & 7)) throw new Error('Offsets must be a multiple of 8')\n\n    start /= 8\n    while (end > this.length) this.grow()\n    end /= 8\n\n    const offset = start\n    var page = this._getPage(8 * start, true)\n\n    while (start < end) {\n      const delta = end - start < 4096 ? end - start : 4096\n      const s = start - offset\n\n      start += this._setPageBuffer(page, buf.subarray(s, s + delta), start & 1023)\n      if (start !== end) page = this._nextPage(page, 8 * start)\n    }\n  }\n\n  _fillBit (bit, start, end) {\n    var page = this._getPage(start, bit)\n\n    // TODO: this can be optimised a lot in the case of end - start > 32768\n    // in that case clear levels of 32768 ** 2 instead etc\n\n    while (start < end) {\n      const delta = end - start < 32768 ? end - start : 32768\n      start += this._setPageBits(page, bit, start & 32767, delta)\n      if (start !== end) page = this._nextPage(page, start)\n    }\n  }\n\n  _nextPage (page, start) {\n    const i = ++this._offsets[page.level]\n    return i === 32768\n      ? this._getPage(start, true)\n      : this._parents[page.level].children[i] || this._addPage(this._parents[page.level], i)\n  }\n\n  _setPageBuffer (page, buf, start) {\n    new Uint8Array(page.bits.buffer, page.bits.byteOffset, page.bits.length * 4).set(buf, start)\n    start >>>= 2\n    this._update(page, start, start + (buf.length >>> 2) + (buf.length & 3 ? 1 : 0))\n    return buf.length\n  }\n\n  _setPageBits (page, bit, start, end) {\n    const s = start >>> 5\n    const e = end >>> 5\n    const sm = 0xffffffff >>> (start & 31)\n    const em = ~(0xffffffff >>> (end & 31))\n\n    if (s === e) {\n      page.bits[s] = bit\n        ? page.bits[s] | (sm & em)\n        : page.bits[s] & ~(sm & em)\n      this._update(page, s, s + 1)\n      return end - start\n    }\n\n    page.bits[s] = bit\n      ? page.bits[s] | sm\n      : page.bits[s] & (~sm)\n\n    if (e - s > 2) page.bits.fill(bit ? 0xffffffff : 0, s + 1, e - 1)\n\n    if (e === 1024) {\n      page.bits[e - 1] = bit ? 0xffffffff : 0\n      this._update(page, s, e)\n      return end - start\n    }\n\n    page.bits[e] = bit\n      ? page.bits[e] | em\n      : page.bits[e] & (~em)\n\n    this._update(page, s, e + 1)\n    return end - start\n  }\n\n  _update (page, start, end) {\n    for (; start < end; start++) {\n      const upd = page.bits[start]\n      this._updateAllOne(page, start, upd)\n      this._updateOneOne(page, start, upd)\n    }\n  }\n\n  _updateAllOne (page, b, upd) {\n    var i = 1\n\n    do {\n      for (; i < 3; i++) {\n        const buf = page.allOne[i]\n        const r = b & 31\n        const prev = buf[b >>>= 5]\n        buf[b] = upd === 0xffffffff\n          ? (prev | (0x80000000 >>> r))\n          : (prev & ~(0x80000000 >>> r))\n        upd = buf[b]\n        if (upd === prev) return\n      }\n\n      b += this._offsets[page.level]\n      page = this._parents[page.level]\n      i = 0\n    } while (page)\n  }\n\n  _updateOneOne (page, b, upd) {\n    var i = 1\n\n    do {\n      for (; i < 3; i++) {\n        const buf = page.oneOne[i]\n        const r = b & 31\n        const prev = buf[b >>>= 5]\n        buf[b] = upd !== 0\n          ? (prev | (0x80000000 >>> r))\n          : (prev & ~(0x80000000 >>> r))\n        upd = buf[b]\n        if (upd === prev) return\n      }\n\n      b += this._offsets[page.level]\n      page = this._parents[page.level]\n      i = 0\n\n      if (upd === 0 && page) {\n        // all zeros, non root -> free page\n        page.children[this._offsets[page.level - 1]] = undefined\n      }\n    } while (page)\n  }\n\n  _getPage (index, createIfMissing) {\n    factor(index, this._path)\n\n    while (index >= this.length) {\n      if (!createIfMissing) return null\n      this.grow()\n    }\n\n    var page = this._page\n\n    for (var i = page.level; i > 0 && page; i--) {\n      const p = this._path[i]\n      this._parents[i - 1] = page\n      page = page.children[p] || (createIfMissing ? this._addPage(page, p) : null)\n    }\n\n    return page\n  }\n\n  _addPage (page, i) {\n    this._allocs++\n    page = page.children[i] = new Page(page.level - 1)\n    return page\n  }\n}\n\nclass Iterator {\n  constructor (bitfield) {\n    this._bitfield = bitfield\n    this._path = new Uint16Array(5)\n    this._offsets = new Uint16Array(this._path.buffer, this._path.byteOffset + 2, 4)\n    this._parents = new Array(4).fill(null)\n    this._page = null\n    this._allocs = bitfield._allocs\n\n    this.seek(0)\n  }\n\n  seek (index) {\n    this._allocs = this._bitfield._allocs\n\n    if (index >= this._bitfield.length) {\n      this._page = null\n      return this\n    }\n\n    factor(index, this._path)\n\n    this._page = this._bitfield._page\n    for (var i = this._page.level; i > 0; i--) {\n      this._parents[i - 1] = this._page\n      this._page = this._page.children[this._path[i]] || ZEROS[i - 1]\n    }\n\n    return this\n  }\n\n  next (bit) {\n    return bit ? this.nextTrue() : this.nextFalse()\n  }\n\n  nextFalse () {\n    if (this._allocs !== this._bitfield._allocs) {\n      // If a page has been alloced while we are iterating\n      // and we have a zero page in our path we need to reseek\n      // in case that page has been overwritten\n      this.seek(defactor(this._path))\n    }\n\n    var page = this._page\n    var b = this._path[0]\n    var mask = MASK_INCL\n\n    while (page) {\n      for (var i = 0; i < 3; i++) {\n        const r = b & 31\n        const clz = Math.clz32((~page.allOne[i][b >>>= 5]) & mask[r])\n        if (clz !== 32) return this._downLeftFalse(page, i, b, clz)\n        mask = MASK\n      }\n\n      b = this._offsets[page.level]\n      page = this._parents[page.level]\n    }\n\n    return -1\n  }\n\n  _downLeftFalse (page, i, b, clz) {\n    while (true) {\n      while (i) {\n        b = (b << 5) + clz\n        clz = Math.clz32(~page.allOne[--i][b])\n      }\n\n      b = (b << 5) + clz\n\n      if (!page.level) break\n\n      this._parents[page.level - 1] = page\n      this._path[page.level] = b\n\n      page = page.children[b]\n      i = 3\n      clz = b = 0\n    }\n\n    this._page = page\n    this._path[0] = b\n\n    return this._inc()\n  }\n\n  nextTrue () {\n    var page = this._page\n    var b = this._path[0]\n    var mask = MASK_INCL\n\n    while (page) {\n      for (var i = 0; i < 3; i++) {\n        const r = b & 31\n        const clz = Math.clz32(page.oneOne[i][b >>>= 5] & mask[r])\n        if (clz !== 32) return this._downLeftTrue(page, i, b, clz)\n        mask = MASK\n      }\n\n      b = this._offsets[page.level]\n      page = this._parents[page.level]\n    }\n\n    return -1\n  }\n\n  _downLeftTrue (page, i, b, clz) {\n    while (true) {\n      while (i) {\n        b = (b << 5) + clz\n        clz = Math.clz32(page.oneOne[--i][b])\n      }\n\n      b = (b << 5) + clz\n\n      if (!page.level) break\n\n      this._parents[page.level - 1] = page\n      this._path[page.level] = b\n\n      page = page.children[b]\n      i = 3\n      clz = b = 0\n    }\n\n    this._page = page\n    this._path[0] = b\n\n    return this._inc()\n  }\n\n  _inc () {\n    const n = defactor(this._path)\n    if (this._path[0] < 32767) this._path[0]++\n    else this.seek(n + 1)\n    return n\n  }\n}\n\nfunction defactor (out) {\n  return ((((out[3] * 32768 + out[2]) * 32768) + out[1]) * 32768) + out[0]\n}\n\nfunction factor (n, out) {\n  n = (n - (out[0] = (n & 32767))) / 32768\n  n = (n - (out[1] = (n & 32767))) / 32768\n  out[3] = ((n - (out[2] = (n & 32767))) / 32768) & 32767\n}\n\nexport default fastBitfield;\nexport { fastBitfield as __moduleExports };","start":1670465470906,"end":1670465470911,"order":"normal"}]}
