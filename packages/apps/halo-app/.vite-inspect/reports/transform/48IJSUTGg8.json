{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/randombytes.js","transforms":[{"name":"vite:load-fallback","result":"var assert = require('nanoassert')\n\nvar randombytes = (function () {\n  var QUOTA = 65536 // limit for QuotaExceededException\n  var crypto = globalThis.crypto || globalThis.msCrypto\n\n  function browserBytes (out, n) {\n    for (let i = 0; i < n; i += QUOTA) {\n      crypto.getRandomValues(new Uint8Array(out.buffer, i + out.byteOffset, Math.min(n - i, QUOTA)))\n    }\n  }\n\n  function nodeBytes (out, n) {\n    new Uint8Array(out.buffer, out.byteOffset, n).set(crypto.randomBytes(n))\n  }\n\n  function noImpl () {\n    throw new Error('No secure random number generator available')\n  }\n\n  if (crypto && crypto.getRandomValues) return browserBytes\n\n  if (require != null) {\n    // Node.js. Bust Browserify\n    crypto = require('cry' + 'pto')\n    if (crypto && crypto.randomBytes) return nodeBytes\n  }\n\n  return noImpl\n})()\n\n// Make non enumerable as this is an internal function\nObject.defineProperty(module.exports, 'randombytes', {\n  value: randombytes\n})\n\nmodule.exports.randombytes_buf = function (out) {\n  assert(out, 'out must be given')\n  randombytes(out, out.byteLength)\n}\n","start":1670465470650,"end":1670465470823},{"name":"vite:react-babel","result":"var assert = require('nanoassert')\n\nvar randombytes = (function () {\n  var QUOTA = 65536 // limit for QuotaExceededException\n  var crypto = globalThis.crypto || globalThis.msCrypto\n\n  function browserBytes (out, n) {\n    for (let i = 0; i < n; i += QUOTA) {\n      crypto.getRandomValues(new Uint8Array(out.buffer, i + out.byteOffset, Math.min(n - i, QUOTA)))\n    }\n  }\n\n  function nodeBytes (out, n) {\n    new Uint8Array(out.buffer, out.byteOffset, n).set(crypto.randomBytes(n))\n  }\n\n  function noImpl () {\n    throw new Error('No secure random number generator available')\n  }\n\n  if (crypto && crypto.getRandomValues) return browserBytes\n\n  if (require != null) {\n    // Node.js. Bust Browserify\n    crypto = require('cry' + 'pto')\n    if (crypto && crypto.randomBytes) return nodeBytes\n  }\n\n  return noImpl\n})()\n\n// Make non enumerable as this is an internal function\nObject.defineProperty(module.exports, 'randombytes', {\n  value: randombytes\n})\n\nmodule.exports.randombytes_buf = function (out) {\n  assert(out, 'out must be given')\n  randombytes(out, out.byteLength)\n}\n","start":1670465470823,"end":1670465470823,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { commonjsRequire as commonjsRequire } from \"\u0000commonjs-dynamic-modules\";\nimport { __module as randombytesModule, exports as randombytes_1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/randombytes.js?commonjs-module\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoassert@2.0.0/node_modules/nanoassert/index.js?commonjs-proxy\";\n\n(function (module) {\n\tvar assert = require$$0\n\n\tvar randombytes = (function () {\n\t  var QUOTA = 65536 // limit for QuotaExceededException\n\t  var crypto = globalThis.crypto || globalThis.msCrypto\n\n\t  function browserBytes (out, n) {\n\t    for (let i = 0; i < n; i += QUOTA) {\n\t      crypto.getRandomValues(new Uint8Array(out.buffer, i + out.byteOffset, Math.min(n - i, QUOTA)))\n\t    }\n\t  }\n\n\t  function nodeBytes (out, n) {\n\t    new Uint8Array(out.buffer, out.byteOffset, n).set(crypto.randomBytes(n))\n\t  }\n\n\t  function noImpl () {\n\t    throw new Error('No secure random number generator available')\n\t  }\n\n\t  if (crypto && crypto.getRandomValues) return browserBytes\n\n\t  if (commonjsRequire != null) {\n\t    // Node.js. Bust Browserify\n\t    crypto = commonjsRequire('cry' + 'pto')\n\t    if (crypto && crypto.randomBytes) return nodeBytes\n\t  }\n\n\t  return noImpl\n\t})()\n\n\t// Make non enumerable as this is an internal function\n\tObject.defineProperty(module.exports, 'randombytes', {\n\t  value: randombytes\n\t})\n\n\tmodule.exports.randombytes_buf = function (out) {\n\t  assert(out, 'out must be given')\n\t  randombytes(out, out.byteLength)\n\t}\n} (randombytesModule));\n\nexport default randombytes_1;\nexport { randombytes_1 as __moduleExports };","start":1670465470824,"end":1670465471057,"order":"normal"},{"name":"polyfill-node","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { commonjsRequire as commonjsRequire } from \"\u0000commonjs-dynamic-modules\";\nimport { __module as randombytesModule, exports as randombytes_1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/randombytes.js?commonjs-module\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoassert@2.0.0/node_modules/nanoassert/index.js?commonjs-proxy\";\n\n(function (module) {\n\tvar assert = require$$0\n\n\tvar randombytes = (function () {\n\t  var QUOTA = 65536 // limit for QuotaExceededException\n\t  var crypto = globalThis.crypto || globalThis.msCrypto\n\n\t  function browserBytes (out, n) {\n\t    for (let i = 0; i < n; i += QUOTA) {\n\t      crypto.getRandomValues(new Uint8Array(out.buffer, i + out.byteOffset, Math.min(n - i, QUOTA)))\n\t    }\n\t  }\n\n\t  function nodeBytes (out, n) {\n\t    new Uint8Array(out.buffer, out.byteOffset, n).set(crypto.randomBytes(n))\n\t  }\n\n\t  function noImpl () {\n\t    throw new Error('No secure random number generator available')\n\t  }\n\n\t  if (crypto && crypto.getRandomValues) return browserBytes\n\n\t  if (commonjsRequire != null) {\n\t    // Node.js. Bust Browserify\n\t    crypto = commonjsRequire('cry' + 'pto')\n\t    if (crypto && crypto.randomBytes) return nodeBytes\n\t  }\n\n\t  return noImpl\n\t})()\n\n\t// Make non enumerable as this is an internal function\n\tObject.defineProperty(module.exports, 'randombytes', {\n\t  value: randombytes\n\t})\n\n\tmodule.exports.randombytes_buf = function (out) {\n\t  assert(out, 'out must be given')\n\t  randombytes(out, out.byteLength)\n\t}\n} (randombytesModule));\n\nexport default randombytes_1;\nexport { randombytes_1 as __moduleExports };","start":1670465471057,"end":1670465471058,"order":"normal"}]}
