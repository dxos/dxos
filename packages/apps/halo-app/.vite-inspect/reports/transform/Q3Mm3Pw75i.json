{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_aead.js","transforms":[{"name":"vite:load-fallback","result":"/* eslint-disable camelcase */\nconst { crypto_stream_chacha20_ietf, crypto_stream_chacha20_ietf_xor_ic } = require('./crypto_stream_chacha20')\nconst { crypto_verify_16 } = require('./crypto_verify')\nconst Poly1305 = require('./internal/poly1305')\nconst assert = require('nanoassert')\n\nconst crypto_aead_chacha20poly1305_ietf_KEYBYTES = 32\nconst crypto_aead_chacha20poly1305_ietf_NSECBYTES = 0\nconst crypto_aead_chacha20poly1305_ietf_NPUBBYTES = 12\nconst crypto_aead_chacha20poly1305_ietf_ABYTES = 16\nconst crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX = Number.MAX_SAFE_INTEGER\n\nconst _pad0 = new Uint8Array(16)\n\nfunction crypto_aead_chacha20poly1305_ietf_encrypt (c, m, ad, nsec, npub, k) {\n  if (ad === null) return crypto_aead_chacha20poly1305_ietf_encrypt(c, m, new Uint8Array(0), nsec, npub, k)\n\n  assert(c.byteLength === m.byteLength + crypto_aead_chacha20poly1305_ietf_ABYTES,\n    \"ciphertext should be 'crypto_aead_chacha20poly1305_ietf_ABYTES' longer than message\")\n  assert(npub.byteLength === crypto_aead_chacha20poly1305_ietf_NPUBBYTES,\n    \"npub should be 'crypto_aead_chacha20poly1305_ietf_NPUBBYTES' long\")\n  assert(k.byteLength === crypto_aead_chacha20poly1305_ietf_KEYBYTES,\n    \"k should be 'crypto_aead_chacha20poly1305_ietf_KEYBYTES' long\")\n  assert(m.byteLength <= crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX, 'message is too large')\n\n  const ret = crypto_aead_chacha20poly1305_ietf_encrypt_detached(c.subarray(0, m.byteLength),\n    c.subarray(m.byteLength), m, ad, nsec, npub, k)\n\n  return m.byteLength + ret\n}\n\nfunction crypto_aead_chacha20poly1305_ietf_encrypt_detached (c, mac, m, ad, nsec, npub, k) {\n  if (ad === null) return crypto_aead_chacha20poly1305_ietf_encrypt_detached(c, mac, m, new Uint8Array(0), nsec, npub, k)\n\n  assert(c.byteLength === m.byteLength, 'ciphertext should be same length than message')\n  assert(npub.byteLength === crypto_aead_chacha20poly1305_ietf_NPUBBYTES,\n    \"npub should be 'crypto_aead_chacha20poly1305_ietf_NPUBBYTES' long\")\n  assert(k.byteLength === crypto_aead_chacha20poly1305_ietf_KEYBYTES,\n    \"k should be 'crypto_aead_chacha20poly1305_ietf_KEYBYTES' long\")\n  assert(m.byteLength <= crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX, 'message is too large')\n  assert(mac.byteLength <= crypto_aead_chacha20poly1305_ietf_ABYTES,\n    \"mac should be 'crypto_aead_chacha20poly1305_ietf_ABYTES' long\")\n\n  const block0 = new Uint8Array(64)\n  var slen = new Uint8Array(8)\n\n  crypto_stream_chacha20_ietf(block0, npub, k)\n  const poly = new Poly1305(block0)\n  block0.fill(0)\n\n  poly.update(ad, 0, ad.byteLength)\n  poly.update(_pad0, 0, (0x10 - ad.byteLength) & 0xf)\n\n  crypto_stream_chacha20_ietf_xor_ic(c, m, npub, 1, k)\n\n  poly.update(c, 0, m.byteLength)\n  poly.update(_pad0, 0, (0x10 - m.byteLength) & 0xf)\n\n  write64LE(slen, 0, ad.byteLength)\n  poly.update(slen, 0, slen.byteLength)\n\n  write64LE(slen, 0, m.byteLength)\n  poly.update(slen, 0, slen.byteLength)\n\n  poly.finish(mac, 0)\n  slen.fill(0)\n\n  return crypto_aead_chacha20poly1305_ietf_ABYTES\n}\n\nfunction crypto_aead_chacha20poly1305_ietf_decrypt (m, nsec, c, ad, npub, k) {\n  if (ad === null) return crypto_aead_chacha20poly1305_ietf_decrypt(m, nsec, c, new Uint8Array(0), npub, k)\n\n  assert(m.byteLength === c.byteLength - crypto_aead_chacha20poly1305_ietf_ABYTES,\n    \"message should be 'crypto_aead_chacha20poly1305_ietf_ABYTES' shorter than ciphertext\")\n  assert(npub.byteLength === crypto_aead_chacha20poly1305_ietf_NPUBBYTES,\n    \"npub should be 'crypto_aead_chacha20poly1305_ietf_NPUBBYTES' long\")\n  assert(k.byteLength === crypto_aead_chacha20poly1305_ietf_KEYBYTES,\n    \"k should be 'crypto_aead_chacha20poly1305_ietf_KEYBYTES' long\")\n  assert(m.byteLength <= crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX, 'message is too large')\n\n  if (c.byteLength < crypto_aead_chacha20poly1305_ietf_ABYTES) throw new Error('could not verify data')\n\n  crypto_aead_chacha20poly1305_ietf_decrypt_detached(\n    m, nsec,\n    c.subarray(0, c.byteLength - crypto_aead_chacha20poly1305_ietf_ABYTES),\n    c.subarray(c.byteLength - crypto_aead_chacha20poly1305_ietf_ABYTES),\n    ad, npub, k)\n\n  return c.byteLength - crypto_aead_chacha20poly1305_ietf_ABYTES\n}\n\nfunction crypto_aead_chacha20poly1305_ietf_decrypt_detached (m, nsec, c, mac, ad, npub, k) {\n  if (ad === null) return crypto_aead_chacha20poly1305_ietf_decrypt_detached(m, nsec, c, mac, new Uint8Array(0), npub, k)\n\n  assert(c.byteLength === m.byteLength, 'message should be same length than ciphertext')\n  assert(npub.byteLength === crypto_aead_chacha20poly1305_ietf_NPUBBYTES,\n    \"npub should be 'crypto_aead_chacha20poly1305_ietf_NPUBBYTES' long\")\n  assert(k.byteLength === crypto_aead_chacha20poly1305_ietf_KEYBYTES,\n    \"k should be 'crypto_aead_chacha20poly1305_ietf_KEYBYTES' long\")\n  assert(m.byteLength <= crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX, 'message is too large')\n  assert(mac.byteLength <= crypto_aead_chacha20poly1305_ietf_ABYTES,\n    \"mac should be 'crypto_aead_chacha20poly1305_ietf_ABYTES' long\")\n\n  const block0 = new Uint8Array(64)\n  const slen = new Uint8Array(8)\n  const computed_mac = new Uint8Array(crypto_aead_chacha20poly1305_ietf_ABYTES)\n\n  crypto_stream_chacha20_ietf(block0, npub, k)\n  const poly = new Poly1305(block0)\n  block0.fill(0)\n\n  poly.update(ad, 0, ad.byteLength)\n  poly.update(_pad0, 0, (0x10 - ad.byteLength) & 0xf)\n\n  const mlen = c.byteLength\n  poly.update(c, 0, mlen)\n  poly.update(_pad0, 0, (0x10 - mlen) & 0xf)\n\n  write64LE(slen, 0, ad.byteLength)\n  poly.update(slen, 0, slen.byteLength)\n\n  write64LE(slen, 0, mlen)\n  poly.update(slen, 0, slen.byteLength)\n\n  poly.finish(computed_mac, 0)\n\n  assert(computed_mac.byteLength === 16)\n  const ret = crypto_verify_16(computed_mac, 0, mac, 0)\n\n  computed_mac.fill(0)\n  slen.fill(0)\n\n  if (!ret) {\n    m.fill(0)\n    throw new Error('could not verify data')\n  }\n\n  crypto_stream_chacha20_ietf_xor_ic(m, c, npub, 1, k)\n}\n\nfunction write64LE (buf, offset, int) {\n  buf.fill(0, 0, 8)\n\n  const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n  view.setUint32(offset, int & 0xffffffff, true)\n  view.setUint32(offset + 4, (int / 2 ** 32) & 0xffffffff, true)\n}\n\nmodule.exports = {\n  crypto_aead_chacha20poly1305_ietf_encrypt,\n  crypto_aead_chacha20poly1305_ietf_encrypt_detached,\n  crypto_aead_chacha20poly1305_ietf_decrypt,\n  crypto_aead_chacha20poly1305_ietf_decrypt_detached,\n  crypto_aead_chacha20poly1305_ietf_ABYTES,\n  crypto_aead_chacha20poly1305_ietf_KEYBYTES,\n  crypto_aead_chacha20poly1305_ietf_NPUBBYTES,\n  crypto_aead_chacha20poly1305_ietf_NSECBYTES,\n  crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX\n}\n","start":1670465470690,"end":1670465470851},{"name":"vite:react-babel","result":"/* eslint-disable camelcase */\nconst { crypto_stream_chacha20_ietf, crypto_stream_chacha20_ietf_xor_ic } = require('./crypto_stream_chacha20')\nconst { crypto_verify_16 } = require('./crypto_verify')\nconst Poly1305 = require('./internal/poly1305')\nconst assert = require('nanoassert')\n\nconst crypto_aead_chacha20poly1305_ietf_KEYBYTES = 32\nconst crypto_aead_chacha20poly1305_ietf_NSECBYTES = 0\nconst crypto_aead_chacha20poly1305_ietf_NPUBBYTES = 12\nconst crypto_aead_chacha20poly1305_ietf_ABYTES = 16\nconst crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX = Number.MAX_SAFE_INTEGER\n\nconst _pad0 = new Uint8Array(16)\n\nfunction crypto_aead_chacha20poly1305_ietf_encrypt (c, m, ad, nsec, npub, k) {\n  if (ad === null) return crypto_aead_chacha20poly1305_ietf_encrypt(c, m, new Uint8Array(0), nsec, npub, k)\n\n  assert(c.byteLength === m.byteLength + crypto_aead_chacha20poly1305_ietf_ABYTES,\n    \"ciphertext should be 'crypto_aead_chacha20poly1305_ietf_ABYTES' longer than message\")\n  assert(npub.byteLength === crypto_aead_chacha20poly1305_ietf_NPUBBYTES,\n    \"npub should be 'crypto_aead_chacha20poly1305_ietf_NPUBBYTES' long\")\n  assert(k.byteLength === crypto_aead_chacha20poly1305_ietf_KEYBYTES,\n    \"k should be 'crypto_aead_chacha20poly1305_ietf_KEYBYTES' long\")\n  assert(m.byteLength <= crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX, 'message is too large')\n\n  const ret = crypto_aead_chacha20poly1305_ietf_encrypt_detached(c.subarray(0, m.byteLength),\n    c.subarray(m.byteLength), m, ad, nsec, npub, k)\n\n  return m.byteLength + ret\n}\n\nfunction crypto_aead_chacha20poly1305_ietf_encrypt_detached (c, mac, m, ad, nsec, npub, k) {\n  if (ad === null) return crypto_aead_chacha20poly1305_ietf_encrypt_detached(c, mac, m, new Uint8Array(0), nsec, npub, k)\n\n  assert(c.byteLength === m.byteLength, 'ciphertext should be same length than message')\n  assert(npub.byteLength === crypto_aead_chacha20poly1305_ietf_NPUBBYTES,\n    \"npub should be 'crypto_aead_chacha20poly1305_ietf_NPUBBYTES' long\")\n  assert(k.byteLength === crypto_aead_chacha20poly1305_ietf_KEYBYTES,\n    \"k should be 'crypto_aead_chacha20poly1305_ietf_KEYBYTES' long\")\n  assert(m.byteLength <= crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX, 'message is too large')\n  assert(mac.byteLength <= crypto_aead_chacha20poly1305_ietf_ABYTES,\n    \"mac should be 'crypto_aead_chacha20poly1305_ietf_ABYTES' long\")\n\n  const block0 = new Uint8Array(64)\n  var slen = new Uint8Array(8)\n\n  crypto_stream_chacha20_ietf(block0, npub, k)\n  const poly = new Poly1305(block0)\n  block0.fill(0)\n\n  poly.update(ad, 0, ad.byteLength)\n  poly.update(_pad0, 0, (0x10 - ad.byteLength) & 0xf)\n\n  crypto_stream_chacha20_ietf_xor_ic(c, m, npub, 1, k)\n\n  poly.update(c, 0, m.byteLength)\n  poly.update(_pad0, 0, (0x10 - m.byteLength) & 0xf)\n\n  write64LE(slen, 0, ad.byteLength)\n  poly.update(slen, 0, slen.byteLength)\n\n  write64LE(slen, 0, m.byteLength)\n  poly.update(slen, 0, slen.byteLength)\n\n  poly.finish(mac, 0)\n  slen.fill(0)\n\n  return crypto_aead_chacha20poly1305_ietf_ABYTES\n}\n\nfunction crypto_aead_chacha20poly1305_ietf_decrypt (m, nsec, c, ad, npub, k) {\n  if (ad === null) return crypto_aead_chacha20poly1305_ietf_decrypt(m, nsec, c, new Uint8Array(0), npub, k)\n\n  assert(m.byteLength === c.byteLength - crypto_aead_chacha20poly1305_ietf_ABYTES,\n    \"message should be 'crypto_aead_chacha20poly1305_ietf_ABYTES' shorter than ciphertext\")\n  assert(npub.byteLength === crypto_aead_chacha20poly1305_ietf_NPUBBYTES,\n    \"npub should be 'crypto_aead_chacha20poly1305_ietf_NPUBBYTES' long\")\n  assert(k.byteLength === crypto_aead_chacha20poly1305_ietf_KEYBYTES,\n    \"k should be 'crypto_aead_chacha20poly1305_ietf_KEYBYTES' long\")\n  assert(m.byteLength <= crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX, 'message is too large')\n\n  if (c.byteLength < crypto_aead_chacha20poly1305_ietf_ABYTES) throw new Error('could not verify data')\n\n  crypto_aead_chacha20poly1305_ietf_decrypt_detached(\n    m, nsec,\n    c.subarray(0, c.byteLength - crypto_aead_chacha20poly1305_ietf_ABYTES),\n    c.subarray(c.byteLength - crypto_aead_chacha20poly1305_ietf_ABYTES),\n    ad, npub, k)\n\n  return c.byteLength - crypto_aead_chacha20poly1305_ietf_ABYTES\n}\n\nfunction crypto_aead_chacha20poly1305_ietf_decrypt_detached (m, nsec, c, mac, ad, npub, k) {\n  if (ad === null) return crypto_aead_chacha20poly1305_ietf_decrypt_detached(m, nsec, c, mac, new Uint8Array(0), npub, k)\n\n  assert(c.byteLength === m.byteLength, 'message should be same length than ciphertext')\n  assert(npub.byteLength === crypto_aead_chacha20poly1305_ietf_NPUBBYTES,\n    \"npub should be 'crypto_aead_chacha20poly1305_ietf_NPUBBYTES' long\")\n  assert(k.byteLength === crypto_aead_chacha20poly1305_ietf_KEYBYTES,\n    \"k should be 'crypto_aead_chacha20poly1305_ietf_KEYBYTES' long\")\n  assert(m.byteLength <= crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX, 'message is too large')\n  assert(mac.byteLength <= crypto_aead_chacha20poly1305_ietf_ABYTES,\n    \"mac should be 'crypto_aead_chacha20poly1305_ietf_ABYTES' long\")\n\n  const block0 = new Uint8Array(64)\n  const slen = new Uint8Array(8)\n  const computed_mac = new Uint8Array(crypto_aead_chacha20poly1305_ietf_ABYTES)\n\n  crypto_stream_chacha20_ietf(block0, npub, k)\n  const poly = new Poly1305(block0)\n  block0.fill(0)\n\n  poly.update(ad, 0, ad.byteLength)\n  poly.update(_pad0, 0, (0x10 - ad.byteLength) & 0xf)\n\n  const mlen = c.byteLength\n  poly.update(c, 0, mlen)\n  poly.update(_pad0, 0, (0x10 - mlen) & 0xf)\n\n  write64LE(slen, 0, ad.byteLength)\n  poly.update(slen, 0, slen.byteLength)\n\n  write64LE(slen, 0, mlen)\n  poly.update(slen, 0, slen.byteLength)\n\n  poly.finish(computed_mac, 0)\n\n  assert(computed_mac.byteLength === 16)\n  const ret = crypto_verify_16(computed_mac, 0, mac, 0)\n\n  computed_mac.fill(0)\n  slen.fill(0)\n\n  if (!ret) {\n    m.fill(0)\n    throw new Error('could not verify data')\n  }\n\n  crypto_stream_chacha20_ietf_xor_ic(m, c, npub, 1, k)\n}\n\nfunction write64LE (buf, offset, int) {\n  buf.fill(0, 0, 8)\n\n  const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n  view.setUint32(offset, int & 0xffffffff, true)\n  view.setUint32(offset + 4, (int / 2 ** 32) & 0xffffffff, true)\n}\n\nmodule.exports = {\n  crypto_aead_chacha20poly1305_ietf_encrypt,\n  crypto_aead_chacha20poly1305_ietf_encrypt_detached,\n  crypto_aead_chacha20poly1305_ietf_decrypt,\n  crypto_aead_chacha20poly1305_ietf_decrypt_detached,\n  crypto_aead_chacha20poly1305_ietf_ABYTES,\n  crypto_aead_chacha20poly1305_ietf_KEYBYTES,\n  crypto_aead_chacha20poly1305_ietf_NPUBBYTES,\n  crypto_aead_chacha20poly1305_ietf_NSECBYTES,\n  crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX\n}\n","start":1670465470851,"end":1670465470851,"order":"pre"},{"name":"commonjs","result":"/* eslint-disable camelcase */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_stream_chacha20.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_verify.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/internal/poly1305.js?commonjs-proxy\";\nimport require$$3 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoassert@2.0.0/node_modules/nanoassert/index.js?commonjs-proxy\";\n\nconst { crypto_stream_chacha20_ietf, crypto_stream_chacha20_ietf_xor_ic } = require$$0\nconst { crypto_verify_16 } = require$$1\nconst Poly1305 = require$$2\nconst assert = require$$3\n\nconst crypto_aead_chacha20poly1305_ietf_KEYBYTES = 32\nconst crypto_aead_chacha20poly1305_ietf_NSECBYTES = 0\nconst crypto_aead_chacha20poly1305_ietf_NPUBBYTES = 12\nconst crypto_aead_chacha20poly1305_ietf_ABYTES = 16\nconst crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX = Number.MAX_SAFE_INTEGER\n\nconst _pad0 = new Uint8Array(16)\n\nfunction crypto_aead_chacha20poly1305_ietf_encrypt (c, m, ad, nsec, npub, k) {\n  if (ad === null) return crypto_aead_chacha20poly1305_ietf_encrypt(c, m, new Uint8Array(0), nsec, npub, k)\n\n  assert(c.byteLength === m.byteLength + crypto_aead_chacha20poly1305_ietf_ABYTES,\n    \"ciphertext should be 'crypto_aead_chacha20poly1305_ietf_ABYTES' longer than message\")\n  assert(npub.byteLength === crypto_aead_chacha20poly1305_ietf_NPUBBYTES,\n    \"npub should be 'crypto_aead_chacha20poly1305_ietf_NPUBBYTES' long\")\n  assert(k.byteLength === crypto_aead_chacha20poly1305_ietf_KEYBYTES,\n    \"k should be 'crypto_aead_chacha20poly1305_ietf_KEYBYTES' long\")\n  assert(m.byteLength <= crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX, 'message is too large')\n\n  const ret = crypto_aead_chacha20poly1305_ietf_encrypt_detached(c.subarray(0, m.byteLength),\n    c.subarray(m.byteLength), m, ad, nsec, npub, k)\n\n  return m.byteLength + ret\n}\n\nfunction crypto_aead_chacha20poly1305_ietf_encrypt_detached (c, mac, m, ad, nsec, npub, k) {\n  if (ad === null) return crypto_aead_chacha20poly1305_ietf_encrypt_detached(c, mac, m, new Uint8Array(0), nsec, npub, k)\n\n  assert(c.byteLength === m.byteLength, 'ciphertext should be same length than message')\n  assert(npub.byteLength === crypto_aead_chacha20poly1305_ietf_NPUBBYTES,\n    \"npub should be 'crypto_aead_chacha20poly1305_ietf_NPUBBYTES' long\")\n  assert(k.byteLength === crypto_aead_chacha20poly1305_ietf_KEYBYTES,\n    \"k should be 'crypto_aead_chacha20poly1305_ietf_KEYBYTES' long\")\n  assert(m.byteLength <= crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX, 'message is too large')\n  assert(mac.byteLength <= crypto_aead_chacha20poly1305_ietf_ABYTES,\n    \"mac should be 'crypto_aead_chacha20poly1305_ietf_ABYTES' long\")\n\n  const block0 = new Uint8Array(64)\n  var slen = new Uint8Array(8)\n\n  crypto_stream_chacha20_ietf(block0, npub, k)\n  const poly = new Poly1305(block0)\n  block0.fill(0)\n\n  poly.update(ad, 0, ad.byteLength)\n  poly.update(_pad0, 0, (0x10 - ad.byteLength) & 0xf)\n\n  crypto_stream_chacha20_ietf_xor_ic(c, m, npub, 1, k)\n\n  poly.update(c, 0, m.byteLength)\n  poly.update(_pad0, 0, (0x10 - m.byteLength) & 0xf)\n\n  write64LE(slen, 0, ad.byteLength)\n  poly.update(slen, 0, slen.byteLength)\n\n  write64LE(slen, 0, m.byteLength)\n  poly.update(slen, 0, slen.byteLength)\n\n  poly.finish(mac, 0)\n  slen.fill(0)\n\n  return crypto_aead_chacha20poly1305_ietf_ABYTES\n}\n\nfunction crypto_aead_chacha20poly1305_ietf_decrypt (m, nsec, c, ad, npub, k) {\n  if (ad === null) return crypto_aead_chacha20poly1305_ietf_decrypt(m, nsec, c, new Uint8Array(0), npub, k)\n\n  assert(m.byteLength === c.byteLength - crypto_aead_chacha20poly1305_ietf_ABYTES,\n    \"message should be 'crypto_aead_chacha20poly1305_ietf_ABYTES' shorter than ciphertext\")\n  assert(npub.byteLength === crypto_aead_chacha20poly1305_ietf_NPUBBYTES,\n    \"npub should be 'crypto_aead_chacha20poly1305_ietf_NPUBBYTES' long\")\n  assert(k.byteLength === crypto_aead_chacha20poly1305_ietf_KEYBYTES,\n    \"k should be 'crypto_aead_chacha20poly1305_ietf_KEYBYTES' long\")\n  assert(m.byteLength <= crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX, 'message is too large')\n\n  if (c.byteLength < crypto_aead_chacha20poly1305_ietf_ABYTES) throw new Error('could not verify data')\n\n  crypto_aead_chacha20poly1305_ietf_decrypt_detached(\n    m, nsec,\n    c.subarray(0, c.byteLength - crypto_aead_chacha20poly1305_ietf_ABYTES),\n    c.subarray(c.byteLength - crypto_aead_chacha20poly1305_ietf_ABYTES),\n    ad, npub, k)\n\n  return c.byteLength - crypto_aead_chacha20poly1305_ietf_ABYTES\n}\n\nfunction crypto_aead_chacha20poly1305_ietf_decrypt_detached (m, nsec, c, mac, ad, npub, k) {\n  if (ad === null) return crypto_aead_chacha20poly1305_ietf_decrypt_detached(m, nsec, c, mac, new Uint8Array(0), npub, k)\n\n  assert(c.byteLength === m.byteLength, 'message should be same length than ciphertext')\n  assert(npub.byteLength === crypto_aead_chacha20poly1305_ietf_NPUBBYTES,\n    \"npub should be 'crypto_aead_chacha20poly1305_ietf_NPUBBYTES' long\")\n  assert(k.byteLength === crypto_aead_chacha20poly1305_ietf_KEYBYTES,\n    \"k should be 'crypto_aead_chacha20poly1305_ietf_KEYBYTES' long\")\n  assert(m.byteLength <= crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX, 'message is too large')\n  assert(mac.byteLength <= crypto_aead_chacha20poly1305_ietf_ABYTES,\n    \"mac should be 'crypto_aead_chacha20poly1305_ietf_ABYTES' long\")\n\n  const block0 = new Uint8Array(64)\n  const slen = new Uint8Array(8)\n  const computed_mac = new Uint8Array(crypto_aead_chacha20poly1305_ietf_ABYTES)\n\n  crypto_stream_chacha20_ietf(block0, npub, k)\n  const poly = new Poly1305(block0)\n  block0.fill(0)\n\n  poly.update(ad, 0, ad.byteLength)\n  poly.update(_pad0, 0, (0x10 - ad.byteLength) & 0xf)\n\n  const mlen = c.byteLength\n  poly.update(c, 0, mlen)\n  poly.update(_pad0, 0, (0x10 - mlen) & 0xf)\n\n  write64LE(slen, 0, ad.byteLength)\n  poly.update(slen, 0, slen.byteLength)\n\n  write64LE(slen, 0, mlen)\n  poly.update(slen, 0, slen.byteLength)\n\n  poly.finish(computed_mac, 0)\n\n  assert(computed_mac.byteLength === 16)\n  const ret = crypto_verify_16(computed_mac, 0, mac, 0)\n\n  computed_mac.fill(0)\n  slen.fill(0)\n\n  if (!ret) {\n    m.fill(0)\n    throw new Error('could not verify data')\n  }\n\n  crypto_stream_chacha20_ietf_xor_ic(m, c, npub, 1, k)\n}\n\nfunction write64LE (buf, offset, int) {\n  buf.fill(0, 0, 8)\n\n  const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength)\n  view.setUint32(offset, int & 0xffffffff, true)\n  view.setUint32(offset + 4, (int / 2 ** 32) & 0xffffffff, true)\n}\n\nvar crypto_aead = {\n  crypto_aead_chacha20poly1305_ietf_encrypt,\n  crypto_aead_chacha20poly1305_ietf_encrypt_detached,\n  crypto_aead_chacha20poly1305_ietf_decrypt,\n  crypto_aead_chacha20poly1305_ietf_decrypt_detached,\n  crypto_aead_chacha20poly1305_ietf_ABYTES,\n  crypto_aead_chacha20poly1305_ietf_KEYBYTES,\n  crypto_aead_chacha20poly1305_ietf_NPUBBYTES,\n  crypto_aead_chacha20poly1305_ietf_NSECBYTES,\n  crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX\n}\n\nexport default crypto_aead;\nexport { crypto_aead as __moduleExports };","start":1670465470852,"end":1670465471146,"order":"normal"}]}
