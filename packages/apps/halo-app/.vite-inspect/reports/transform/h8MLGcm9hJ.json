{"resolvedId":"/home/jdw/Code/dxos/dxos/packages/common/log/dist/lib/browser/index.mjs","transforms":[{"name":"vite:load-fallback","result":"// packages/common/log/src/config.ts\nvar LogLevel;\n(function(LogLevel2) {\n  LogLevel2[LogLevel2[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel2[LogLevel2[\"INFO\"] = 1] = \"INFO\";\n  LogLevel2[LogLevel2[\"WARN\"] = 2] = \"WARN\";\n  LogLevel2[LogLevel2[\"ERROR\"] = 3] = \"ERROR\";\n})(LogLevel || (LogLevel = {}));\nvar levels = {\n  debug: LogLevel.DEBUG,\n  info: LogLevel.INFO,\n  warn: LogLevel.WARN,\n  error: LogLevel.ERROR\n};\nvar shortLevelName = {\n  [LogLevel.DEBUG]: \"D\",\n  [LogLevel.INFO]: \"I\",\n  [LogLevel.WARN]: \"W\",\n  [LogLevel.ERROR]: \"E\"\n};\nvar LogProcessorType;\n(function(LogProcessorType2) {\n  LogProcessorType2[\"CONSOLE\"] = \"console\";\n  LogProcessorType2[\"BROWSER\"] = \"browser\";\n  LogProcessorType2[\"DEBUG\"] = \"debug\";\n})(LogProcessorType || (LogProcessorType = {}));\n\n// packages/common/log/src/context.ts\nvar matchFilter = (filter, level, path) => {\n  return level >= filter.level && (!filter.pattern || path.includes(filter.pattern));\n};\nvar shouldLog = (config, level, path) => {\n  if (config.filters === void 0) {\n    return true;\n  } else {\n    return config.filters.some((filter) => matchFilter(filter, level, path));\n  }\n};\n\n// packages/common/log/src/options.ts\nimport defaultsDeep from \"lodash.defaultsdeep\";\n\n// packages/common/log/src/platform/browser/index.ts\nvar loadOptions = (filepath) => {\n  return void 0;\n};\n\n// packages/common/log/src/processors/console-processor.ts\nimport chalk from \"chalk\";\nimport pickBy from \"lodash.pickby\";\nimport { inspect } from \"@dxos/node-std/util\";\n\n// packages/common/log/src/scope.ts\nvar logInfoProperties = Symbol(\"logInfoProperties\");\nvar logInfo = (target, propertyKey, descriptor) => {\n  var _a2;\n  ((_a2 = target[logInfoProperties]) != null ? _a2 : target[logInfoProperties] = []).push(propertyKey);\n};\nvar gatherLogInfoFromScope = (scope) => {\n  var _a2;\n  if (!scope) {\n    return {};\n  }\n  const res = {};\n  const prototype = Object.getPrototypeOf(scope);\n  const infoProps = (_a2 = prototype[logInfoProperties]) != null ? _a2 : [];\n  for (const prop of infoProps) {\n    try {\n      res[prop] = typeof scope[prop] === \"function\" ? scope[prop]() : scope[prop];\n    } catch (err) {\n      res[prop] = err.message;\n    }\n  }\n  return res;\n};\n\n// packages/common/log/src/processors/console-processor.ts\nvar LEVEL_COLORS = {\n  [LogLevel.DEBUG]: \"gray\",\n  [LogLevel.INFO]: \"white\",\n  [LogLevel.WARN]: \"yellow\",\n  [LogLevel.ERROR]: \"red\"\n};\nvar truncate = (text, length = 0, right = false) => {\n  const str = text && length ? right ? text.slice(-length) : text.substring(0, length) : text != null ? text : \"\";\n  return right ? str.padStart(length, \" \") : str.padEnd(length, \" \");\n};\nvar getRelativeFilename = (filename) => {\n  const match = filename.match(/.+\\/(packages\\/.+\\/.+)/);\n  if (match) {\n    const [, filePath] = match;\n    return filePath;\n  }\n  return filename;\n};\nvar DEFAULT_FORMATTER = (config, { path, line, level, message, context, error }) => {\n  var _a2, _b;\n  const column = (_b = (_a2 = config.options) == null ? void 0 : _a2.formatter) == null ? void 0 : _b.column;\n  const filepath = path !== void 0 && line !== void 0 ? chalk.grey(`${path}:${line}`) : void 0;\n  return [\n    filepath,\n    column && filepath ? \"\".padStart(column - filepath.length) : void 0,\n    chalk[LEVEL_COLORS[level]](column ? shortLevelName[level] : LogLevel[level]),\n    message,\n    context,\n    error\n  ];\n};\nvar SHORT_FORMATTER = (config, { path, level, message }) => [\n  chalk.grey(truncate(path, 16, true)),\n  chalk[LEVEL_COLORS[level]](shortLevelName[level]),\n  message\n];\nvar formatter = DEFAULT_FORMATTER;\nvar CONSOLE_PROCESSOR = (config, entry) => {\n  var _a2, _b;\n  let { level, message, context, meta, error } = entry;\n  if (!shouldLog(config, level, (_a2 = meta == null ? void 0 : meta.file) != null ? _a2 : \"\")) {\n    return;\n  }\n  const parts = {\n    level,\n    message,\n    error\n  };\n  if (meta) {\n    parts.path = getRelativeFilename(meta.file);\n    parts.line = meta.line;\n    const scopeInfo = gatherLogInfoFromScope(meta.scope);\n    if (Object.keys(scopeInfo).length > 0) {\n      context = Object.assign(context != null ? context : {}, scopeInfo);\n    }\n  }\n  if (context instanceof Error) {\n    const c = context.context;\n    parts.context = inspect(level === LogLevel.ERROR ? context : {\n      error: (_b = context == null ? void 0 : context.stack) != null ? _b : String(context),\n      ...c\n    }, {\n      colors: true\n    });\n  } else if (context && Object.keys(context).length > 0) {\n    parts.context = inspect(pickBy(context, (value) => value !== void 0), {\n      depth: config.options.depth,\n      colors: true,\n      maxArrayLength: 8,\n      sorted: false\n    });\n  }\n  const line = formatter(config, parts).filter(Boolean).join(\" \");\n  console.log(line);\n};\n\n// packages/common/log/src/processors/debug-processor.ts\nimport { inspect as inspect2 } from \"@dxos/node-std/util\";\nvar DEBUG_PROCESSOR = (config, entry) => {\n  console.log(inspect2(entry, false, null, true));\n};\n\n// packages/common/log/src/processors/browser-processor.ts\nvar getRelativeFilename2 = (filename) => {\n  const match = filename.match(/.+\\/(packages\\/.+\\/.+)/);\n  if (match) {\n    const [, filePath] = match;\n    return filePath;\n  }\n  return filename;\n};\nvar CONFIG = typeof mochaExecutor !== \"undefined\" ? {\n  useTestProcessor: true,\n  printFileLinks: true\n} : {\n  useTestProcessor: false,\n  printFileLinks: false\n};\nvar APP_BROWSER_PROCESSOR = (config, entry) => {\n  var _a2, _b, _c, _d, _e;\n  if (!shouldLog(config, entry.level, (_b = (_a2 = entry.meta) == null ? void 0 : _a2.file) != null ? _b : \"\")) {\n    return;\n  }\n  const LOG_BROWSER_PREFIX = (_c = config.prefix) != null ? _c : \"https://vscode.dev/github.com/dxos/dxos/blob/main/\";\n  const LOG_BROWSER_CSS = [];\n  let link = \"\";\n  if (entry.meta) {\n    const filename = getRelativeFilename2(entry.meta.file);\n    const filepath = `${LOG_BROWSER_PREFIX.replace(/\\/$/, \"\")}/${filename}`;\n    link = `${filepath}#L${entry.meta.line}`;\n  }\n  let args = [];\n  args.push(entry.message);\n  if (entry.context && Object.keys(entry.context).length > 0) {\n    args.push(entry.context);\n  }\n  const levels2 = {\n    [LogLevel.ERROR]: console.error,\n    [LogLevel.WARN]: console.warn,\n    [LogLevel.DEBUG]: console.log\n  };\n  if (CONFIG.printFileLinks) {\n    if (LOG_BROWSER_CSS == null ? void 0 : LOG_BROWSER_CSS.length) {\n      args = [\n        `%c${link}\n%c${args.join(\" \")}`,\n        ...LOG_BROWSER_CSS\n      ];\n    } else {\n      args = [\n        link + \"\\n\",\n        ...args\n      ];\n    }\n  }\n  const level = (_d = levels2[entry.level]) != null ? _d : console.log;\n  if (typeof ((_e = entry.meta) == null ? void 0 : _e.callSite) === \"function\") {\n    entry.meta.callSite(level, args);\n  } else {\n    level(...args);\n  }\n};\nvar TEST_BROWSER_PROCESSOR = (config, entry) => {\n  var _a2, _b, _c, _d;\n  if (!shouldLog(config, entry.level, (_b = (_a2 = entry.meta) == null ? void 0 : _a2.file) != null ? _b : \"\")) {\n    return;\n  }\n  let path = \"\";\n  if (entry.meta) {\n    path = `${getRelativeFilename2(entry.meta.file)}:${entry.meta.line}`;\n  }\n  let args = [];\n  args.push(entry.message);\n  if (entry.context && Object.keys(entry.context).length > 0) {\n    args.push(entry.context);\n  }\n  const levels2 = {\n    [LogLevel.ERROR]: console.error,\n    [LogLevel.WARN]: console.warn,\n    [LogLevel.DEBUG]: console.log\n  };\n  if (CONFIG.printFileLinks) {\n    args = [\n      path,\n      ...args\n    ];\n  }\n  const level = (_c = levels2[entry.level]) != null ? _c : console.log;\n  if (typeof ((_d = entry.meta) == null ? void 0 : _d.callSite) === \"function\") {\n    entry.meta.callSite(level, args);\n  } else {\n    level(...args);\n  }\n};\nvar BROWSER_PROCESSOR = CONFIG.useTestProcessor ? TEST_BROWSER_PROCESSOR : APP_BROWSER_PROCESSOR;\n\n// packages/common/log/src/options.ts\nvar processors = {\n  [LogProcessorType.CONSOLE]: CONSOLE_PROCESSOR,\n  [LogProcessorType.BROWSER]: BROWSER_PROCESSOR,\n  [LogProcessorType.DEBUG]: DEBUG_PROCESSOR\n};\nvar parseFilter = (filter) => {\n  if (typeof filter === \"number\") {\n    return [\n      {\n        level: filter\n      }\n    ];\n  }\n  const parseLogLevel = (level, defValue = LogLevel.WARN) => {\n    var _a2;\n    return (_a2 = levels[level.toLowerCase()]) != null ? _a2 : defValue;\n  };\n  const lines = typeof filter === \"string\" ? filter.split(/,\\s*/) : filter;\n  return lines.map((filter2) => {\n    const [pattern, level] = filter2.split(\":\");\n    return level ? {\n      level: parseLogLevel(level),\n      pattern\n    } : {\n      level: parseLogLevel(pattern)\n    };\n  });\n};\nvar IS_BROWSER = typeof window !== \"undefined\" || typeof navigator !== \"undefined\";\nvar getConfig = (_options) => {\n  var _a2, _b, _c, _d;\n  let options = defaultsDeep({}, _options, \"process\" in globalThis && {\n    file: (_a2 = process.env) == null ? void 0 : _a2.LOG_CONFIG,\n    filter: (_b = process.env) == null ? void 0 : _b.LOG_FILTER,\n    processor: (_c = process.env) == null ? void 0 : _c.LOG_PROCESSOR\n  });\n  if (options.file) {\n    options = defaultsDeep({}, loadOptions(options.file), options);\n  }\n  const defaultProcessor = IS_BROWSER ? BROWSER_PROCESSOR : CONSOLE_PROCESSOR;\n  return {\n    options,\n    filters: parseFilter((_d = options.filter) != null ? _d : LogLevel.INFO),\n    processor: options.processor ? processors[options.processor] : defaultProcessor,\n    prefix: options.prefix\n  };\n};\n\n// packages/common/log/src/log.ts\nvar createLog = () => {\n  const log2 = (...params) => processLog(LogLevel.DEBUG, ...params);\n  log2._config = getConfig();\n  log2.config = (options) => {\n    log2._config = getConfig(options);\n  };\n  log2.debug = (...params) => processLog(LogLevel.DEBUG, ...params);\n  log2.info = (...params) => processLog(LogLevel.INFO, ...params);\n  log2.warn = (...params) => processLog(LogLevel.WARN, ...params);\n  log2.error = (...params) => processLog(LogLevel.ERROR, ...params);\n  log2.catch = (error, context, meta) => processLog(LogLevel.ERROR, error.stack, context, meta);\n  log2.break = () => log2.info(\"\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\");\n  const processLog = (level, message, context, meta, error) => {\n    log2._config.processor(log2._config, {\n      level,\n      message,\n      context,\n      meta,\n      error\n    });\n  };\n  return log2;\n};\nvar _a;\nvar log = (_a = globalThis.dx_log) != null ? _a : globalThis.dx_log = createLog();\n\n// packages/common/log/src/experimental/ownership.ts\nimport { inspect as inspect3 } from \"@dxos/node-std/util\";\nvar kOwnershipScope = Symbol(\"kOwnershipScope\");\nvar kCurrentOwnershipScope = Symbol(\"kCurrentOwnershipScope\");\nvar kDebugInfoProperties = Symbol(\"kDebugInfoProperties\");\nvar OwnershipScope = class {\n  constructor(constr, parent) {\n    this.constr = constr;\n    this.parent = parent;\n  }\n  getInfo() {\n    var _a2;\n    if (!this.instance) {\n      return {};\n    }\n    const props = (_a2 = this.constr.prototype[kDebugInfoProperties]) != null ? _a2 : [];\n    const info = {};\n    for (const prop of props) {\n      info[prop] = this.instance[prop];\n    }\n    return info;\n  }\n  [inspect3.custom]() {\n    return {\n      className: this.constr.name,\n      info: this.getInfo(),\n      parent: this.parent\n    };\n  }\n};\nvar getCurrentOwnershipScope = (thisRef) => thisRef;\nexport {\n  BROWSER_PROCESSOR,\n  CONSOLE_PROCESSOR,\n  DEBUG_PROCESSOR,\n  DEFAULT_FORMATTER,\n  LogLevel,\n  LogProcessorType,\n  SHORT_FORMATTER,\n  gatherLogInfoFromScope,\n  getCurrentOwnershipScope,\n  levels,\n  log,\n  logInfo,\n  shortLevelName,\n  shouldLog,\n  truncate\n};\n//# sourceMappingURL=index.mjs.map\n","start":1670465438903,"end":1670465440510},{"name":"vite:react-babel","result":"// packages/common/log/src/config.ts\nvar LogLevel;\n(function(LogLevel2) {\n  LogLevel2[LogLevel2[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel2[LogLevel2[\"INFO\"] = 1] = \"INFO\";\n  LogLevel2[LogLevel2[\"WARN\"] = 2] = \"WARN\";\n  LogLevel2[LogLevel2[\"ERROR\"] = 3] = \"ERROR\";\n})(LogLevel || (LogLevel = {}));\nvar levels = {\n  debug: LogLevel.DEBUG,\n  info: LogLevel.INFO,\n  warn: LogLevel.WARN,\n  error: LogLevel.ERROR\n};\nvar shortLevelName = {\n  [LogLevel.DEBUG]: \"D\",\n  [LogLevel.INFO]: \"I\",\n  [LogLevel.WARN]: \"W\",\n  [LogLevel.ERROR]: \"E\"\n};\nvar LogProcessorType;\n(function(LogProcessorType2) {\n  LogProcessorType2[\"CONSOLE\"] = \"console\";\n  LogProcessorType2[\"BROWSER\"] = \"browser\";\n  LogProcessorType2[\"DEBUG\"] = \"debug\";\n})(LogProcessorType || (LogProcessorType = {}));\n\n// packages/common/log/src/context.ts\nvar matchFilter = (filter, level, path) => {\n  return level >= filter.level && (!filter.pattern || path.includes(filter.pattern));\n};\nvar shouldLog = (config, level, path) => {\n  if (config.filters === void 0) {\n    return true;\n  } else {\n    return config.filters.some((filter) => matchFilter(filter, level, path));\n  }\n};\n\n// packages/common/log/src/options.ts\nimport defaultsDeep from \"lodash.defaultsdeep\";\n\n// packages/common/log/src/platform/browser/index.ts\nvar loadOptions = (filepath) => {\n  return void 0;\n};\n\n// packages/common/log/src/processors/console-processor.ts\nimport chalk from \"chalk\";\nimport pickBy from \"lodash.pickby\";\nimport { inspect } from \"@dxos/node-std/util\";\n\n// packages/common/log/src/scope.ts\nvar logInfoProperties = Symbol(\"logInfoProperties\");\nvar logInfo = (target, propertyKey, descriptor) => {\n  var _a2;\n  ((_a2 = target[logInfoProperties]) != null ? _a2 : target[logInfoProperties] = []).push(propertyKey);\n};\nvar gatherLogInfoFromScope = (scope) => {\n  var _a2;\n  if (!scope) {\n    return {};\n  }\n  const res = {};\n  const prototype = Object.getPrototypeOf(scope);\n  const infoProps = (_a2 = prototype[logInfoProperties]) != null ? _a2 : [];\n  for (const prop of infoProps) {\n    try {\n      res[prop] = typeof scope[prop] === \"function\" ? scope[prop]() : scope[prop];\n    } catch (err) {\n      res[prop] = err.message;\n    }\n  }\n  return res;\n};\n\n// packages/common/log/src/processors/console-processor.ts\nvar LEVEL_COLORS = {\n  [LogLevel.DEBUG]: \"gray\",\n  [LogLevel.INFO]: \"white\",\n  [LogLevel.WARN]: \"yellow\",\n  [LogLevel.ERROR]: \"red\"\n};\nvar truncate = (text, length = 0, right = false) => {\n  const str = text && length ? right ? text.slice(-length) : text.substring(0, length) : text != null ? text : \"\";\n  return right ? str.padStart(length, \" \") : str.padEnd(length, \" \");\n};\nvar getRelativeFilename = (filename) => {\n  const match = filename.match(/.+\\/(packages\\/.+\\/.+)/);\n  if (match) {\n    const [, filePath] = match;\n    return filePath;\n  }\n  return filename;\n};\nvar DEFAULT_FORMATTER = (config, { path, line, level, message, context, error }) => {\n  var _a2, _b;\n  const column = (_b = (_a2 = config.options) == null ? void 0 : _a2.formatter) == null ? void 0 : _b.column;\n  const filepath = path !== void 0 && line !== void 0 ? chalk.grey(`${path}:${line}`) : void 0;\n  return [\n    filepath,\n    column && filepath ? \"\".padStart(column - filepath.length) : void 0,\n    chalk[LEVEL_COLORS[level]](column ? shortLevelName[level] : LogLevel[level]),\n    message,\n    context,\n    error\n  ];\n};\nvar SHORT_FORMATTER = (config, { path, level, message }) => [\n  chalk.grey(truncate(path, 16, true)),\n  chalk[LEVEL_COLORS[level]](shortLevelName[level]),\n  message\n];\nvar formatter = DEFAULT_FORMATTER;\nvar CONSOLE_PROCESSOR = (config, entry) => {\n  var _a2, _b;\n  let { level, message, context, meta, error } = entry;\n  if (!shouldLog(config, level, (_a2 = meta == null ? void 0 : meta.file) != null ? _a2 : \"\")) {\n    return;\n  }\n  const parts = {\n    level,\n    message,\n    error\n  };\n  if (meta) {\n    parts.path = getRelativeFilename(meta.file);\n    parts.line = meta.line;\n    const scopeInfo = gatherLogInfoFromScope(meta.scope);\n    if (Object.keys(scopeInfo).length > 0) {\n      context = Object.assign(context != null ? context : {}, scopeInfo);\n    }\n  }\n  if (context instanceof Error) {\n    const c = context.context;\n    parts.context = inspect(level === LogLevel.ERROR ? context : {\n      error: (_b = context == null ? void 0 : context.stack) != null ? _b : String(context),\n      ...c\n    }, {\n      colors: true\n    });\n  } else if (context && Object.keys(context).length > 0) {\n    parts.context = inspect(pickBy(context, (value) => value !== void 0), {\n      depth: config.options.depth,\n      colors: true,\n      maxArrayLength: 8,\n      sorted: false\n    });\n  }\n  const line = formatter(config, parts).filter(Boolean).join(\" \");\n  console.log(line);\n};\n\n// packages/common/log/src/processors/debug-processor.ts\nimport { inspect as inspect2 } from \"@dxos/node-std/util\";\nvar DEBUG_PROCESSOR = (config, entry) => {\n  console.log(inspect2(entry, false, null, true));\n};\n\n// packages/common/log/src/processors/browser-processor.ts\nvar getRelativeFilename2 = (filename) => {\n  const match = filename.match(/.+\\/(packages\\/.+\\/.+)/);\n  if (match) {\n    const [, filePath] = match;\n    return filePath;\n  }\n  return filename;\n};\nvar CONFIG = typeof mochaExecutor !== \"undefined\" ? {\n  useTestProcessor: true,\n  printFileLinks: true\n} : {\n  useTestProcessor: false,\n  printFileLinks: false\n};\nvar APP_BROWSER_PROCESSOR = (config, entry) => {\n  var _a2, _b, _c, _d, _e;\n  if (!shouldLog(config, entry.level, (_b = (_a2 = entry.meta) == null ? void 0 : _a2.file) != null ? _b : \"\")) {\n    return;\n  }\n  const LOG_BROWSER_PREFIX = (_c = config.prefix) != null ? _c : \"https://vscode.dev/github.com/dxos/dxos/blob/main/\";\n  const LOG_BROWSER_CSS = [];\n  let link = \"\";\n  if (entry.meta) {\n    const filename = getRelativeFilename2(entry.meta.file);\n    const filepath = `${LOG_BROWSER_PREFIX.replace(/\\/$/, \"\")}/${filename}`;\n    link = `${filepath}#L${entry.meta.line}`;\n  }\n  let args = [];\n  args.push(entry.message);\n  if (entry.context && Object.keys(entry.context).length > 0) {\n    args.push(entry.context);\n  }\n  const levels2 = {\n    [LogLevel.ERROR]: console.error,\n    [LogLevel.WARN]: console.warn,\n    [LogLevel.DEBUG]: console.log\n  };\n  if (CONFIG.printFileLinks) {\n    if (LOG_BROWSER_CSS == null ? void 0 : LOG_BROWSER_CSS.length) {\n      args = [\n        `%c${link}\n%c${args.join(\" \")}`,\n        ...LOG_BROWSER_CSS\n      ];\n    } else {\n      args = [\n        link + \"\\n\",\n        ...args\n      ];\n    }\n  }\n  const level = (_d = levels2[entry.level]) != null ? _d : console.log;\n  if (typeof ((_e = entry.meta) == null ? void 0 : _e.callSite) === \"function\") {\n    entry.meta.callSite(level, args);\n  } else {\n    level(...args);\n  }\n};\nvar TEST_BROWSER_PROCESSOR = (config, entry) => {\n  var _a2, _b, _c, _d;\n  if (!shouldLog(config, entry.level, (_b = (_a2 = entry.meta) == null ? void 0 : _a2.file) != null ? _b : \"\")) {\n    return;\n  }\n  let path = \"\";\n  if (entry.meta) {\n    path = `${getRelativeFilename2(entry.meta.file)}:${entry.meta.line}`;\n  }\n  let args = [];\n  args.push(entry.message);\n  if (entry.context && Object.keys(entry.context).length > 0) {\n    args.push(entry.context);\n  }\n  const levels2 = {\n    [LogLevel.ERROR]: console.error,\n    [LogLevel.WARN]: console.warn,\n    [LogLevel.DEBUG]: console.log\n  };\n  if (CONFIG.printFileLinks) {\n    args = [\n      path,\n      ...args\n    ];\n  }\n  const level = (_c = levels2[entry.level]) != null ? _c : console.log;\n  if (typeof ((_d = entry.meta) == null ? void 0 : _d.callSite) === \"function\") {\n    entry.meta.callSite(level, args);\n  } else {\n    level(...args);\n  }\n};\nvar BROWSER_PROCESSOR = CONFIG.useTestProcessor ? TEST_BROWSER_PROCESSOR : APP_BROWSER_PROCESSOR;\n\n// packages/common/log/src/options.ts\nvar processors = {\n  [LogProcessorType.CONSOLE]: CONSOLE_PROCESSOR,\n  [LogProcessorType.BROWSER]: BROWSER_PROCESSOR,\n  [LogProcessorType.DEBUG]: DEBUG_PROCESSOR\n};\nvar parseFilter = (filter) => {\n  if (typeof filter === \"number\") {\n    return [\n      {\n        level: filter\n      }\n    ];\n  }\n  const parseLogLevel = (level, defValue = LogLevel.WARN) => {\n    var _a2;\n    return (_a2 = levels[level.toLowerCase()]) != null ? _a2 : defValue;\n  };\n  const lines = typeof filter === \"string\" ? filter.split(/,\\s*/) : filter;\n  return lines.map((filter2) => {\n    const [pattern, level] = filter2.split(\":\");\n    return level ? {\n      level: parseLogLevel(level),\n      pattern\n    } : {\n      level: parseLogLevel(pattern)\n    };\n  });\n};\nvar IS_BROWSER = typeof window !== \"undefined\" || typeof navigator !== \"undefined\";\nvar getConfig = (_options) => {\n  var _a2, _b, _c, _d;\n  let options = defaultsDeep({}, _options, \"process\" in globalThis && {\n    file: (_a2 = process.env) == null ? void 0 : _a2.LOG_CONFIG,\n    filter: (_b = process.env) == null ? void 0 : _b.LOG_FILTER,\n    processor: (_c = process.env) == null ? void 0 : _c.LOG_PROCESSOR\n  });\n  if (options.file) {\n    options = defaultsDeep({}, loadOptions(options.file), options);\n  }\n  const defaultProcessor = IS_BROWSER ? BROWSER_PROCESSOR : CONSOLE_PROCESSOR;\n  return {\n    options,\n    filters: parseFilter((_d = options.filter) != null ? _d : LogLevel.INFO),\n    processor: options.processor ? processors[options.processor] : defaultProcessor,\n    prefix: options.prefix\n  };\n};\n\n// packages/common/log/src/log.ts\nvar createLog = () => {\n  const log2 = (...params) => processLog(LogLevel.DEBUG, ...params);\n  log2._config = getConfig();\n  log2.config = (options) => {\n    log2._config = getConfig(options);\n  };\n  log2.debug = (...params) => processLog(LogLevel.DEBUG, ...params);\n  log2.info = (...params) => processLog(LogLevel.INFO, ...params);\n  log2.warn = (...params) => processLog(LogLevel.WARN, ...params);\n  log2.error = (...params) => processLog(LogLevel.ERROR, ...params);\n  log2.catch = (error, context, meta) => processLog(LogLevel.ERROR, error.stack, context, meta);\n  log2.break = () => log2.info(\"\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\");\n  const processLog = (level, message, context, meta, error) => {\n    log2._config.processor(log2._config, {\n      level,\n      message,\n      context,\n      meta,\n      error\n    });\n  };\n  return log2;\n};\nvar _a;\nvar log = (_a = globalThis.dx_log) != null ? _a : globalThis.dx_log = createLog();\n\n// packages/common/log/src/experimental/ownership.ts\nimport { inspect as inspect3 } from \"@dxos/node-std/util\";\nvar kOwnershipScope = Symbol(\"kOwnershipScope\");\nvar kCurrentOwnershipScope = Symbol(\"kCurrentOwnershipScope\");\nvar kDebugInfoProperties = Symbol(\"kDebugInfoProperties\");\nvar OwnershipScope = class {\n  constructor(constr, parent) {\n    this.constr = constr;\n    this.parent = parent;\n  }\n  getInfo() {\n    var _a2;\n    if (!this.instance) {\n      return {};\n    }\n    const props = (_a2 = this.constr.prototype[kDebugInfoProperties]) != null ? _a2 : [];\n    const info = {};\n    for (const prop of props) {\n      info[prop] = this.instance[prop];\n    }\n    return info;\n  }\n  [inspect3.custom]() {\n    return {\n      className: this.constr.name,\n      info: this.getInfo(),\n      parent: this.parent\n    };\n  }\n};\nvar getCurrentOwnershipScope = (thisRef) => thisRef;\nexport {\n  BROWSER_PROCESSOR,\n  CONSOLE_PROCESSOR,\n  DEBUG_PROCESSOR,\n  DEFAULT_FORMATTER,\n  LogLevel,\n  LogProcessorType,\n  SHORT_FORMATTER,\n  gatherLogInfoFromScope,\n  getCurrentOwnershipScope,\n  levels,\n  log,\n  logInfo,\n  shortLevelName,\n  shouldLog,\n  truncate\n};\n//# sourceMappingURL=index.mjs.map\n","start":1670465440510,"end":1670465440511,"order":"pre"},{"name":"polyfill-node","result":"import { default as process } from '\u0000polyfill-node.process';\n\n// packages/common/log/src/config.ts\nvar LogLevel;\n(function(LogLevel2) {\n  LogLevel2[LogLevel2[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel2[LogLevel2[\"INFO\"] = 1] = \"INFO\";\n  LogLevel2[LogLevel2[\"WARN\"] = 2] = \"WARN\";\n  LogLevel2[LogLevel2[\"ERROR\"] = 3] = \"ERROR\";\n})(LogLevel || (LogLevel = {}));\nvar levels = {\n  debug: LogLevel.DEBUG,\n  info: LogLevel.INFO,\n  warn: LogLevel.WARN,\n  error: LogLevel.ERROR\n};\nvar shortLevelName = {\n  [LogLevel.DEBUG]: \"D\",\n  [LogLevel.INFO]: \"I\",\n  [LogLevel.WARN]: \"W\",\n  [LogLevel.ERROR]: \"E\"\n};\nvar LogProcessorType;\n(function(LogProcessorType2) {\n  LogProcessorType2[\"CONSOLE\"] = \"console\";\n  LogProcessorType2[\"BROWSER\"] = \"browser\";\n  LogProcessorType2[\"DEBUG\"] = \"debug\";\n})(LogProcessorType || (LogProcessorType = {}));\n\n// packages/common/log/src/context.ts\nvar matchFilter = (filter, level, path) => {\n  return level >= filter.level && (!filter.pattern || path.includes(filter.pattern));\n};\nvar shouldLog = (config, level, path) => {\n  if (config.filters === void 0) {\n    return true;\n  } else {\n    return config.filters.some((filter) => matchFilter(filter, level, path));\n  }\n};\n\n// packages/common/log/src/options.ts\nimport defaultsDeep from \"lodash.defaultsdeep\";\n\n// packages/common/log/src/platform/browser/index.ts\nvar loadOptions = (filepath) => {\n  return void 0;\n};\n\n// packages/common/log/src/processors/console-processor.ts\nimport chalk from \"chalk\";\nimport pickBy from \"lodash.pickby\";\nimport { inspect } from \"@dxos/node-std/util\";\n\n// packages/common/log/src/scope.ts\nvar logInfoProperties = Symbol(\"logInfoProperties\");\nvar logInfo = (target, propertyKey, descriptor) => {\n  var _a2;\n  ((_a2 = target[logInfoProperties]) != null ? _a2 : target[logInfoProperties] = []).push(propertyKey);\n};\nvar gatherLogInfoFromScope = (scope) => {\n  var _a2;\n  if (!scope) {\n    return {};\n  }\n  const res = {};\n  const prototype = Object.getPrototypeOf(scope);\n  const infoProps = (_a2 = prototype[logInfoProperties]) != null ? _a2 : [];\n  for (const prop of infoProps) {\n    try {\n      res[prop] = typeof scope[prop] === \"function\" ? scope[prop]() : scope[prop];\n    } catch (err) {\n      res[prop] = err.message;\n    }\n  }\n  return res;\n};\n\n// packages/common/log/src/processors/console-processor.ts\nvar LEVEL_COLORS = {\n  [LogLevel.DEBUG]: \"gray\",\n  [LogLevel.INFO]: \"white\",\n  [LogLevel.WARN]: \"yellow\",\n  [LogLevel.ERROR]: \"red\"\n};\nvar truncate = (text, length = 0, right = false) => {\n  const str = text && length ? right ? text.slice(-length) : text.substring(0, length) : text != null ? text : \"\";\n  return right ? str.padStart(length, \" \") : str.padEnd(length, \" \");\n};\nvar getRelativeFilename = (filename) => {\n  const match = filename.match(/.+\\/(packages\\/.+\\/.+)/);\n  if (match) {\n    const [, filePath] = match;\n    return filePath;\n  }\n  return filename;\n};\nvar DEFAULT_FORMATTER = (config, { path, line, level, message, context, error }) => {\n  var _a2, _b;\n  const column = (_b = (_a2 = config.options) == null ? void 0 : _a2.formatter) == null ? void 0 : _b.column;\n  const filepath = path !== void 0 && line !== void 0 ? chalk.grey(`${path}:${line}`) : void 0;\n  return [\n    filepath,\n    column && filepath ? \"\".padStart(column - filepath.length) : void 0,\n    chalk[LEVEL_COLORS[level]](column ? shortLevelName[level] : LogLevel[level]),\n    message,\n    context,\n    error\n  ];\n};\nvar SHORT_FORMATTER = (config, { path, level, message }) => [\n  chalk.grey(truncate(path, 16, true)),\n  chalk[LEVEL_COLORS[level]](shortLevelName[level]),\n  message\n];\nvar formatter = DEFAULT_FORMATTER;\nvar CONSOLE_PROCESSOR = (config, entry) => {\n  var _a2, _b;\n  let { level, message, context, meta, error } = entry;\n  if (!shouldLog(config, level, (_a2 = meta == null ? void 0 : meta.file) != null ? _a2 : \"\")) {\n    return;\n  }\n  const parts = {\n    level,\n    message,\n    error\n  };\n  if (meta) {\n    parts.path = getRelativeFilename(meta.file);\n    parts.line = meta.line;\n    const scopeInfo = gatherLogInfoFromScope(meta.scope);\n    if (Object.keys(scopeInfo).length > 0) {\n      context = Object.assign(context != null ? context : {}, scopeInfo);\n    }\n  }\n  if (context instanceof Error) {\n    const c = context.context;\n    parts.context = inspect(level === LogLevel.ERROR ? context : {\n      error: (_b = context == null ? void 0 : context.stack) != null ? _b : String(context),\n      ...c\n    }, {\n      colors: true\n    });\n  } else if (context && Object.keys(context).length > 0) {\n    parts.context = inspect(pickBy(context, (value) => value !== void 0), {\n      depth: config.options.depth,\n      colors: true,\n      maxArrayLength: 8,\n      sorted: false\n    });\n  }\n  const line = formatter(config, parts).filter(Boolean).join(\" \");\n  console.log(line);\n};\n\n// packages/common/log/src/processors/debug-processor.ts\nimport { inspect as inspect2 } from \"@dxos/node-std/util\";\nvar DEBUG_PROCESSOR = (config, entry) => {\n  console.log(inspect2(entry, false, null, true));\n};\n\n// packages/common/log/src/processors/browser-processor.ts\nvar getRelativeFilename2 = (filename) => {\n  const match = filename.match(/.+\\/(packages\\/.+\\/.+)/);\n  if (match) {\n    const [, filePath] = match;\n    return filePath;\n  }\n  return filename;\n};\nvar CONFIG = typeof mochaExecutor !== \"undefined\" ? {\n  useTestProcessor: true,\n  printFileLinks: true\n} : {\n  useTestProcessor: false,\n  printFileLinks: false\n};\nvar APP_BROWSER_PROCESSOR = (config, entry) => {\n  var _a2, _b, _c, _d, _e;\n  if (!shouldLog(config, entry.level, (_b = (_a2 = entry.meta) == null ? void 0 : _a2.file) != null ? _b : \"\")) {\n    return;\n  }\n  const LOG_BROWSER_PREFIX = (_c = config.prefix) != null ? _c : \"https://vscode.dev/github.com/dxos/dxos/blob/main/\";\n  const LOG_BROWSER_CSS = [];\n  let link = \"\";\n  if (entry.meta) {\n    const filename = getRelativeFilename2(entry.meta.file);\n    const filepath = `${LOG_BROWSER_PREFIX.replace(/\\/$/, \"\")}/${filename}`;\n    link = `${filepath}#L${entry.meta.line}`;\n  }\n  let args = [];\n  args.push(entry.message);\n  if (entry.context && Object.keys(entry.context).length > 0) {\n    args.push(entry.context);\n  }\n  const levels2 = {\n    [LogLevel.ERROR]: console.error,\n    [LogLevel.WARN]: console.warn,\n    [LogLevel.DEBUG]: console.log\n  };\n  if (CONFIG.printFileLinks) {\n    if (LOG_BROWSER_CSS == null ? void 0 : LOG_BROWSER_CSS.length) {\n      args = [\n        `%c${link}\n%c${args.join(\" \")}`,\n        ...LOG_BROWSER_CSS\n      ];\n    } else {\n      args = [\n        link + \"\\n\",\n        ...args\n      ];\n    }\n  }\n  const level = (_d = levels2[entry.level]) != null ? _d : console.log;\n  if (typeof ((_e = entry.meta) == null ? void 0 : _e.callSite) === \"function\") {\n    entry.meta.callSite(level, args);\n  } else {\n    level(...args);\n  }\n};\nvar TEST_BROWSER_PROCESSOR = (config, entry) => {\n  var _a2, _b, _c, _d;\n  if (!shouldLog(config, entry.level, (_b = (_a2 = entry.meta) == null ? void 0 : _a2.file) != null ? _b : \"\")) {\n    return;\n  }\n  let path = \"\";\n  if (entry.meta) {\n    path = `${getRelativeFilename2(entry.meta.file)}:${entry.meta.line}`;\n  }\n  let args = [];\n  args.push(entry.message);\n  if (entry.context && Object.keys(entry.context).length > 0) {\n    args.push(entry.context);\n  }\n  const levels2 = {\n    [LogLevel.ERROR]: console.error,\n    [LogLevel.WARN]: console.warn,\n    [LogLevel.DEBUG]: console.log\n  };\n  if (CONFIG.printFileLinks) {\n    args = [\n      path,\n      ...args\n    ];\n  }\n  const level = (_c = levels2[entry.level]) != null ? _c : console.log;\n  if (typeof ((_d = entry.meta) == null ? void 0 : _d.callSite) === \"function\") {\n    entry.meta.callSite(level, args);\n  } else {\n    level(...args);\n  }\n};\nvar BROWSER_PROCESSOR = CONFIG.useTestProcessor ? TEST_BROWSER_PROCESSOR : APP_BROWSER_PROCESSOR;\n\n// packages/common/log/src/options.ts\nvar processors = {\n  [LogProcessorType.CONSOLE]: CONSOLE_PROCESSOR,\n  [LogProcessorType.BROWSER]: BROWSER_PROCESSOR,\n  [LogProcessorType.DEBUG]: DEBUG_PROCESSOR\n};\nvar parseFilter = (filter) => {\n  if (typeof filter === \"number\") {\n    return [\n      {\n        level: filter\n      }\n    ];\n  }\n  const parseLogLevel = (level, defValue = LogLevel.WARN) => {\n    var _a2;\n    return (_a2 = levels[level.toLowerCase()]) != null ? _a2 : defValue;\n  };\n  const lines = typeof filter === \"string\" ? filter.split(/,\\s*/) : filter;\n  return lines.map((filter2) => {\n    const [pattern, level] = filter2.split(\":\");\n    return level ? {\n      level: parseLogLevel(level),\n      pattern\n    } : {\n      level: parseLogLevel(pattern)\n    };\n  });\n};\nvar IS_BROWSER = typeof window !== \"undefined\" || typeof navigator !== \"undefined\";\nvar getConfig = (_options) => {\n  var _a2, _b, _c, _d;\n  let options = defaultsDeep({}, _options, \"process\" in globalThis && {\n    file: (_a2 = process.env) == null ? void 0 : _a2.LOG_CONFIG,\n    filter: (_b = process.env) == null ? void 0 : _b.LOG_FILTER,\n    processor: (_c = process.env) == null ? void 0 : _c.LOG_PROCESSOR\n  });\n  if (options.file) {\n    options = defaultsDeep({}, loadOptions(options.file), options);\n  }\n  const defaultProcessor = IS_BROWSER ? BROWSER_PROCESSOR : CONSOLE_PROCESSOR;\n  return {\n    options,\n    filters: parseFilter((_d = options.filter) != null ? _d : LogLevel.INFO),\n    processor: options.processor ? processors[options.processor] : defaultProcessor,\n    prefix: options.prefix\n  };\n};\n\n// packages/common/log/src/log.ts\nvar createLog = () => {\n  const log2 = (...params) => processLog(LogLevel.DEBUG, ...params);\n  log2._config = getConfig();\n  log2.config = (options) => {\n    log2._config = getConfig(options);\n  };\n  log2.debug = (...params) => processLog(LogLevel.DEBUG, ...params);\n  log2.info = (...params) => processLog(LogLevel.INFO, ...params);\n  log2.warn = (...params) => processLog(LogLevel.WARN, ...params);\n  log2.error = (...params) => processLog(LogLevel.ERROR, ...params);\n  log2.catch = (error, context, meta) => processLog(LogLevel.ERROR, error.stack, context, meta);\n  log2.break = () => log2.info(\"\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\");\n  const processLog = (level, message, context, meta, error) => {\n    log2._config.processor(log2._config, {\n      level,\n      message,\n      context,\n      meta,\n      error\n    });\n  };\n  return log2;\n};\nvar _a;\nvar log = (_a = globalThis.dx_log) != null ? _a : globalThis.dx_log = createLog();\n\n// packages/common/log/src/experimental/ownership.ts\nimport { inspect as inspect3 } from \"@dxos/node-std/util\";\nvar kOwnershipScope = Symbol(\"kOwnershipScope\");\nvar kCurrentOwnershipScope = Symbol(\"kCurrentOwnershipScope\");\nvar kDebugInfoProperties = Symbol(\"kDebugInfoProperties\");\nvar OwnershipScope = class {\n  constructor(constr, parent) {\n    this.constr = constr;\n    this.parent = parent;\n  }\n  getInfo() {\n    var _a2;\n    if (!this.instance) {\n      return {};\n    }\n    const props = (_a2 = this.constr.prototype[kDebugInfoProperties]) != null ? _a2 : [];\n    const info = {};\n    for (const prop of props) {\n      info[prop] = this.instance[prop];\n    }\n    return info;\n  }\n  [inspect3.custom]() {\n    return {\n      className: this.constr.name,\n      info: this.getInfo(),\n      parent: this.parent\n    };\n  }\n};\nvar getCurrentOwnershipScope = (thisRef) => thisRef;\nexport {\n  BROWSER_PROCESSOR,\n  CONSOLE_PROCESSOR,\n  DEBUG_PROCESSOR,\n  DEFAULT_FORMATTER,\n  LogLevel,\n  LogProcessorType,\n  SHORT_FORMATTER,\n  gatherLogInfoFromScope,\n  getCurrentOwnershipScope,\n  levels,\n  log,\n  logInfo,\n  shortLevelName,\n  shouldLog,\n  truncate\n};\n//# sourceMappingURL=index.mjs.map\n","start":1670465440511,"end":1670465440522,"order":"normal"}]}
