{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/xsalsa20@1.2.0/node_modules/xsalsa20/index.js","transforms":[{"name":"vite:load-fallback","result":"var xsalsa20 = typeof WebAssembly !== \"undefined\" && require('./xsalsa20')()\n\nvar SIGMA = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107])\nvar head = 144\nvar top = head\nvar free = []\n\nmodule.exports = XSalsa20\n\nXSalsa20.NONCEBYTES = 24\nXSalsa20.KEYBYTES = 32\n\nXSalsa20.core_hsalsa20 = core_hsalsa20\nXSalsa20.SIGMA = SIGMA\n\nfunction XSalsa20 (nonce, key) {\n  if (!(this instanceof XSalsa20)) return new XSalsa20(nonce, key)\n  if (!nonce || nonce.length < 24) throw new Error('nonce must be at least 24 bytes')\n  if (!key || key.length < 32) throw new Error('key must be at least 32 bytes')\n  this._xor = xsalsa20 ? new WASM(nonce, key) : new Fallback(nonce, key)\n}\n\nXSalsa20.prototype.update = function (input, output) {\n  if (!input) throw new Error('input must be Uint8Array or Buffer')\n  if (!output) output = new Uint8Array(input.length)\n  if (input.length) this._xor.update(input, output)\n  return output\n}\n\nXSalsa20.prototype.final =\nXSalsa20.prototype.finalize = function () {\n  this._xor.finalize()\n  this._xor = null\n}\n\nfunction WASM (nonce, key) {\n  if (!free.length) {\n    free.push(head)\n    head += 64\n  }\n\n  this._pointer = free.pop()\n  this._nonce = this._pointer + 8\n  this._key = this._nonce + 24\n  this._overflow = 0\n  this._memory = new Uint8Array(xsalsa20.memory.buffer)\n\n  this._memory.fill(0, this._pointer, this._pointer + 8)\n  this._memory.set(nonce, this._nonce)\n  this._memory.set(key, this._key)\n}\n\nWASM.prototype.realloc = function (size) {\n  xsalsa20.memory.grow(Math.ceil(Math.abs(size - this._memory.length) / 65536))\n  this._memory = new Uint8Array(xsalsa20.memory.buffer)\n}\n\nWASM.prototype.update = function (input, output) {\n  var len = this._overflow + input.length\n  var start = head + this._overflow\n\n  top = head + len\n  if (top >= this._memory.length) this.realloc(top)\n\n  this._memory.set(input, start)\n  xsalsa20.xsalsa20_xor(this._pointer, head, head, len, this._nonce, this._key)\n  output.set(this._memory.subarray(start, head + len))\n\n  this._overflow = len & 63\n}\n\nWASM.prototype.finalize = function () {\n  this._memory.fill(0, this._pointer, this._key + 32)\n  if (top > head) {\n    this._memory.fill(0, head, top)\n    top = 0\n  }\n  free.push(this._pointer)\n}\n\nfunction Fallback (nonce, key) {\n  this._s = new Uint8Array(32)\n  this._z = new Uint8Array(16)\n  this._overflow = 0\n  core_hsalsa20(this._s, nonce, key, SIGMA)\n  for (var i = 0; i < 8; i++) this._z[i] = nonce[i + 16]\n}\n\nFallback.prototype.update = function (input, output) {\n  var x = new Uint8Array(64)\n  var u = 0\n  var i = this._overflow\n  var b = input.length + this._overflow\n  var z = this._z\n  var mpos = -this._overflow\n  var cpos = -this._overflow\n\n  while (b >= 64) {\n    core_salsa20(x, z, this._s, SIGMA)\n    for (; i < 64; i++) output[cpos + i] = input[mpos + i] ^ x[i]\n    u = 1\n    for (i = 8; i < 16; i++) {\n      u += (z[i] & 0xff) | 0\n      z[i] = u & 0xff\n      u >>>= 8\n    }\n    b -= 64\n    cpos += 64\n    mpos += 64\n    i = 0\n  }\n  if (b > 0) {\n    core_salsa20(x, z, this._s, SIGMA)\n    for (; i < b; i++) output[cpos + i] = input[mpos + i] ^ x[i]\n  }\n\n  this._overflow = b & 63\n}\n\nFallback.prototype.finalize = function () {\n  this._s.fill(0)\n  this._z.fill(0)\n}\n\n// below methods are ported from tweet nacl\n\nfunction core_salsa20(o, p, k, c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff) << 8 | (c[ 2] & 0xff) << 16 | (c[ 3] & 0xff) << 24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff) << 8 | (k[ 2] & 0xff) << 16 | (k[ 3] & 0xff) << 24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff) << 8 | (k[ 6] & 0xff) << 16 | (k[ 7] & 0xff) << 24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,\n      j4  = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff) << 8 | (c[ 6] & 0xff) << 16 | (c[ 7] & 0xff) << 24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff) << 8 | (p[ 2] & 0xff) << 16 | (p[ 3] & 0xff) << 24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff) << 8 | (p[ 6] & 0xff) << 16 | (p[ 7] & 0xff) << 24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,\n      j9  = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,\n      j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,\n      j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,\n      j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,\n      j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,\n      j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0\n    x4 ^= u << 7 | u >>> 25\n    u = x4 + x0 | 0\n    x8 ^= u << 9 | u >>> 23\n    u = x8 + x4 | 0\n    x12 ^= u << 13 | u >>> 19\n    u = x12 + x8 | 0\n    x0 ^= u << 18 | u >>> 14\n\n    u = x5 + x1 | 0\n    x9 ^= u << 7 | u >>> 25\n    u = x9 + x5 | 0\n    x13 ^= u << 9 | u >>> 23\n    u = x13 + x9 | 0\n    x1 ^= u << 13 | u >>> 19\n    u = x1 + x13 | 0\n    x5 ^= u << 18 | u >>> 14\n\n    u = x10 + x6 | 0\n    x14 ^= u << 7 | u >>> 25\n    u = x14 + x10 | 0\n    x2 ^= u << 9 | u >>> 23\n    u = x2 + x14 | 0\n    x6 ^= u << 13 | u >>> 19\n    u = x6 + x2 | 0\n    x10 ^= u << 18 | u >>> 14\n\n    u = x15 + x11 | 0\n    x3 ^= u << 7 | u >>> 25\n    u = x3 + x15 | 0\n    x7 ^= u << 9 | u >>> 23\n    u = x7 + x3 | 0\n    x11 ^= u << 13 | u >>> 19\n    u = x11 + x7 | 0\n    x15 ^= u << 18 | u >>> 14\n\n    u = x0 + x3 | 0\n    x1 ^= u << 7 | u >>> 25\n    u = x1 + x0 | 0\n    x2 ^= u << 9 | u >>> 23\n    u = x2 + x1 | 0\n    x3 ^= u << 13 | u >>> 19\n    u = x3 + x2 | 0\n    x0 ^= u << 18 | u >>> 14\n\n    u = x5 + x4 | 0\n    x6 ^= u << 7 | u >>> 25\n    u = x6 + x5 | 0\n    x7 ^= u << 9 | u >>> 23\n    u = x7 + x6 | 0\n    x4 ^= u << 13 | u >>> 19\n    u = x4 + x7 | 0\n    x5 ^= u << 18 | u >>> 14\n\n    u = x10 + x9 | 0\n    x11 ^= u << 7 | u >>> 25\n    u = x11 + x10 | 0\n    x8 ^= u << 9 | u >>> 23\n    u = x8 + x11 | 0\n    x9 ^= u << 13 | u >>> 19\n    u = x9 + x8 | 0\n    x10 ^= u << 18 | u >>> 14\n\n    u = x15 + x14 | 0\n    x12 ^= u << 7 | u >>> 25\n    u = x12 + x15 | 0\n    x13 ^= u << 9 | u >>> 23\n    u = x13 + x12 | 0\n    x14 ^= u << 13 | u >>> 19\n    u = x14 + x13 | 0\n    x15 ^= u << 18 | u >>> 14\n  }\n   x0 =  x0 +  j0 | 0\n   x1 =  x1 +  j1 | 0\n   x2 =  x2 +  j2 | 0\n   x3 =  x3 +  j3 | 0\n   x4 =  x4 +  j4 | 0\n   x5 =  x5 +  j5 | 0\n   x6 =  x6 +  j6 | 0\n   x7 =  x7 +  j7 | 0\n   x8 =  x8 +  j8 | 0\n   x9 =  x9 +  j9 | 0\n  x10 = x10 + j10 | 0\n  x11 = x11 + j11 | 0\n  x12 = x12 + j12 | 0\n  x13 = x13 + j13 | 0\n  x14 = x14 + j14 | 0\n  x15 = x15 + j15 | 0\n\n  o[ 0] = x0 >>>  0 & 0xff\n  o[ 1] = x0 >>>  8 & 0xff\n  o[ 2] = x0 >>> 16 & 0xff\n  o[ 3] = x0 >>> 24 & 0xff\n\n  o[ 4] = x1 >>>  0 & 0xff\n  o[ 5] = x1 >>>  8 & 0xff\n  o[ 6] = x1 >>> 16 & 0xff\n  o[ 7] = x1 >>> 24 & 0xff\n\n  o[ 8] = x2 >>>  0 & 0xff\n  o[ 9] = x2 >>>  8 & 0xff\n  o[10] = x2 >>> 16 & 0xff\n  o[11] = x2 >>> 24 & 0xff\n\n  o[12] = x3 >>>  0 & 0xff\n  o[13] = x3 >>>  8 & 0xff\n  o[14] = x3 >>> 16 & 0xff\n  o[15] = x3 >>> 24 & 0xff\n\n  o[16] = x4 >>>  0 & 0xff\n  o[17] = x4 >>>  8 & 0xff\n  o[18] = x4 >>> 16 & 0xff\n  o[19] = x4 >>> 24 & 0xff\n\n  o[20] = x5 >>>  0 & 0xff\n  o[21] = x5 >>>  8 & 0xff\n  o[22] = x5 >>> 16 & 0xff\n  o[23] = x5 >>> 24 & 0xff\n\n  o[24] = x6 >>>  0 & 0xff\n  o[25] = x6 >>>  8 & 0xff\n  o[26] = x6 >>> 16 & 0xff\n  o[27] = x6 >>> 24 & 0xff\n\n  o[28] = x7 >>>  0 & 0xff\n  o[29] = x7 >>>  8 & 0xff\n  o[30] = x7 >>> 16 & 0xff\n  o[31] = x7 >>> 24 & 0xff\n\n  o[32] = x8 >>>  0 & 0xff\n  o[33] = x8 >>>  8 & 0xff\n  o[34] = x8 >>> 16 & 0xff\n  o[35] = x8 >>> 24 & 0xff\n\n  o[36] = x9 >>>  0 & 0xff\n  o[37] = x9 >>>  8 & 0xff\n  o[38] = x9 >>> 16 & 0xff\n  o[39] = x9 >>> 24 & 0xff\n\n  o[40] = x10 >>>  0 & 0xff\n  o[41] = x10 >>>  8 & 0xff\n  o[42] = x10 >>> 16 & 0xff\n  o[43] = x10 >>> 24 & 0xff\n\n  o[44] = x11 >>>  0 & 0xff\n  o[45] = x11 >>>  8 & 0xff\n  o[46] = x11 >>> 16 & 0xff\n  o[47] = x11 >>> 24 & 0xff\n\n  o[48] = x12 >>>  0 & 0xff\n  o[49] = x12 >>>  8 & 0xff\n  o[50] = x12 >>> 16 & 0xff\n  o[51] = x12 >>> 24 & 0xff\n\n  o[52] = x13 >>>  0 & 0xff\n  o[53] = x13 >>>  8 & 0xff\n  o[54] = x13 >>> 16 & 0xff\n  o[55] = x13 >>> 24 & 0xff\n\n  o[56] = x14 >>>  0 & 0xff\n  o[57] = x14 >>>  8 & 0xff\n  o[58] = x14 >>> 16 & 0xff\n  o[59] = x14 >>> 24 & 0xff\n\n  o[60] = x15 >>>  0 & 0xff\n  o[61] = x15 >>>  8 & 0xff\n  o[62] = x15 >>> 16 & 0xff\n  o[63] = x15 >>> 24 & 0xff\n}\n\nfunction core_hsalsa20(o,p,k,c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff) << 8 | (c[ 2] & 0xff) << 16 | (c[ 3] & 0xff) << 24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff) << 8 | (k[ 2] & 0xff) << 16 | (k[ 3] & 0xff) << 24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff) << 8 | (k[ 6] & 0xff) << 16 | (k[ 7] & 0xff) << 24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,\n      j4  = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff) << 8 | (c[ 6] & 0xff) << 16 | (c[ 7] & 0xff) << 24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff) << 8 | (p[ 2] & 0xff) << 16 | (p[ 3] & 0xff) << 24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff) << 8 | (p[ 6] & 0xff) << 16 | (p[ 7] & 0xff) << 24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,\n      j9  = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,\n      j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,\n      j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,\n      j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,\n      j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,\n      j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0\n    x4 ^= u << 7 | u >>> 25\n    u = x4 + x0 | 0\n    x8 ^= u << 9 | u >>> 23\n    u = x8 + x4 | 0\n    x12 ^= u << 13 | u >>> 19\n    u = x12 + x8 | 0\n    x0 ^= u << 18 | u >>> 14\n\n    u = x5 + x1 | 0\n    x9 ^= u << 7 | u >>> 25\n    u = x9 + x5 | 0\n    x13 ^= u << 9 | u >>> 23\n    u = x13 + x9 | 0\n    x1 ^= u << 13 | u >>> 19\n    u = x1 + x13 | 0\n    x5 ^= u << 18 | u >>> 14\n\n    u = x10 + x6 | 0\n    x14 ^= u << 7 | u >>> 25\n    u = x14 + x10 | 0\n    x2 ^= u << 9 | u >>> 23\n    u = x2 + x14 | 0\n    x6 ^= u << 13 | u >>> 19\n    u = x6 + x2 | 0\n    x10 ^= u << 18 | u >>> 14\n\n    u = x15 + x11 | 0\n    x3 ^= u << 7 | u >>> 25\n    u = x3 + x15 | 0\n    x7 ^= u << 9 | u >>> 23\n    u = x7 + x3 | 0\n    x11 ^= u << 13 | u >>> 19\n    u = x11 + x7 | 0\n    x15 ^= u << 18 | u >>> 14\n\n    u = x0 + x3 | 0\n    x1 ^= u << 7 | u >>> 25\n    u = x1 + x0 | 0\n    x2 ^= u << 9 | u >>> 23\n    u = x2 + x1 | 0\n    x3 ^= u << 13 | u >>> 19\n    u = x3 + x2 | 0\n    x0 ^= u << 18 | u >>> 14\n\n    u = x5 + x4 | 0\n    x6 ^= u << 7 | u >>> 25\n    u = x6 + x5 | 0\n    x7 ^= u << 9 | u >>> 23\n    u = x7 + x6 | 0\n    x4 ^= u << 13 | u >>> 19\n    u = x4 + x7 | 0\n    x5 ^= u << 18 | u >>> 14\n\n    u = x10 + x9 | 0\n    x11 ^= u << 7 | u >>> 25\n    u = x11 + x10 | 0\n    x8 ^= u << 9 | u >>> 23\n    u = x8 + x11 | 0\n    x9 ^= u << 13 | u >>> 19\n    u = x9 + x8 | 0\n    x10 ^= u << 18 | u >>> 14\n\n    u = x15 + x14 | 0\n    x12 ^= u << 7 | u >>> 25\n    u = x12 + x15 | 0\n    x13 ^= u << 9 | u >>> 23\n    u = x13 + x12 | 0\n    x14 ^= u << 13 | u >>> 19\n    u = x14 + x13 | 0\n    x15 ^= u << 18 | u >>> 14\n  }\n\n  o[ 0] = x0 >>>  0 & 0xff\n  o[ 1] = x0 >>>  8 & 0xff\n  o[ 2] = x0 >>> 16 & 0xff\n  o[ 3] = x0 >>> 24 & 0xff\n\n  o[ 4] = x5 >>>  0 & 0xff\n  o[ 5] = x5 >>>  8 & 0xff\n  o[ 6] = x5 >>> 16 & 0xff\n  o[ 7] = x5 >>> 24 & 0xff\n\n  o[ 8] = x10 >>>  0 & 0xff\n  o[ 9] = x10 >>>  8 & 0xff\n  o[10] = x10 >>> 16 & 0xff\n  o[11] = x10 >>> 24 & 0xff\n\n  o[12] = x15 >>>  0 & 0xff\n  o[13] = x15 >>>  8 & 0xff\n  o[14] = x15 >>> 16 & 0xff\n  o[15] = x15 >>> 24 & 0xff\n\n  o[16] = x6 >>>  0 & 0xff\n  o[17] = x6 >>>  8 & 0xff\n  o[18] = x6 >>> 16 & 0xff\n  o[19] = x6 >>> 24 & 0xff\n\n  o[20] = x7 >>>  0 & 0xff\n  o[21] = x7 >>>  8 & 0xff\n  o[22] = x7 >>> 16 & 0xff\n  o[23] = x7 >>> 24 & 0xff\n\n  o[24] = x8 >>>  0 & 0xff\n  o[25] = x8 >>>  8 & 0xff\n  o[26] = x8 >>> 16 & 0xff\n  o[27] = x8 >>> 24 & 0xff\n\n  o[28] = x9 >>>  0 & 0xff\n  o[29] = x9 >>>  8 & 0xff\n  o[30] = x9 >>> 16 & 0xff\n  o[31] = x9 >>> 24 & 0xff\n}\n","start":1670465470986,"end":1670465471061},{"name":"vite:react-babel","result":"var xsalsa20 = typeof WebAssembly !== \"undefined\" && require('./xsalsa20')()\n\nvar SIGMA = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107])\nvar head = 144\nvar top = head\nvar free = []\n\nmodule.exports = XSalsa20\n\nXSalsa20.NONCEBYTES = 24\nXSalsa20.KEYBYTES = 32\n\nXSalsa20.core_hsalsa20 = core_hsalsa20\nXSalsa20.SIGMA = SIGMA\n\nfunction XSalsa20 (nonce, key) {\n  if (!(this instanceof XSalsa20)) return new XSalsa20(nonce, key)\n  if (!nonce || nonce.length < 24) throw new Error('nonce must be at least 24 bytes')\n  if (!key || key.length < 32) throw new Error('key must be at least 32 bytes')\n  this._xor = xsalsa20 ? new WASM(nonce, key) : new Fallback(nonce, key)\n}\n\nXSalsa20.prototype.update = function (input, output) {\n  if (!input) throw new Error('input must be Uint8Array or Buffer')\n  if (!output) output = new Uint8Array(input.length)\n  if (input.length) this._xor.update(input, output)\n  return output\n}\n\nXSalsa20.prototype.final =\nXSalsa20.prototype.finalize = function () {\n  this._xor.finalize()\n  this._xor = null\n}\n\nfunction WASM (nonce, key) {\n  if (!free.length) {\n    free.push(head)\n    head += 64\n  }\n\n  this._pointer = free.pop()\n  this._nonce = this._pointer + 8\n  this._key = this._nonce + 24\n  this._overflow = 0\n  this._memory = new Uint8Array(xsalsa20.memory.buffer)\n\n  this._memory.fill(0, this._pointer, this._pointer + 8)\n  this._memory.set(nonce, this._nonce)\n  this._memory.set(key, this._key)\n}\n\nWASM.prototype.realloc = function (size) {\n  xsalsa20.memory.grow(Math.ceil(Math.abs(size - this._memory.length) / 65536))\n  this._memory = new Uint8Array(xsalsa20.memory.buffer)\n}\n\nWASM.prototype.update = function (input, output) {\n  var len = this._overflow + input.length\n  var start = head + this._overflow\n\n  top = head + len\n  if (top >= this._memory.length) this.realloc(top)\n\n  this._memory.set(input, start)\n  xsalsa20.xsalsa20_xor(this._pointer, head, head, len, this._nonce, this._key)\n  output.set(this._memory.subarray(start, head + len))\n\n  this._overflow = len & 63\n}\n\nWASM.prototype.finalize = function () {\n  this._memory.fill(0, this._pointer, this._key + 32)\n  if (top > head) {\n    this._memory.fill(0, head, top)\n    top = 0\n  }\n  free.push(this._pointer)\n}\n\nfunction Fallback (nonce, key) {\n  this._s = new Uint8Array(32)\n  this._z = new Uint8Array(16)\n  this._overflow = 0\n  core_hsalsa20(this._s, nonce, key, SIGMA)\n  for (var i = 0; i < 8; i++) this._z[i] = nonce[i + 16]\n}\n\nFallback.prototype.update = function (input, output) {\n  var x = new Uint8Array(64)\n  var u = 0\n  var i = this._overflow\n  var b = input.length + this._overflow\n  var z = this._z\n  var mpos = -this._overflow\n  var cpos = -this._overflow\n\n  while (b >= 64) {\n    core_salsa20(x, z, this._s, SIGMA)\n    for (; i < 64; i++) output[cpos + i] = input[mpos + i] ^ x[i]\n    u = 1\n    for (i = 8; i < 16; i++) {\n      u += (z[i] & 0xff) | 0\n      z[i] = u & 0xff\n      u >>>= 8\n    }\n    b -= 64\n    cpos += 64\n    mpos += 64\n    i = 0\n  }\n  if (b > 0) {\n    core_salsa20(x, z, this._s, SIGMA)\n    for (; i < b; i++) output[cpos + i] = input[mpos + i] ^ x[i]\n  }\n\n  this._overflow = b & 63\n}\n\nFallback.prototype.finalize = function () {\n  this._s.fill(0)\n  this._z.fill(0)\n}\n\n// below methods are ported from tweet nacl\n\nfunction core_salsa20(o, p, k, c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff) << 8 | (c[ 2] & 0xff) << 16 | (c[ 3] & 0xff) << 24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff) << 8 | (k[ 2] & 0xff) << 16 | (k[ 3] & 0xff) << 24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff) << 8 | (k[ 6] & 0xff) << 16 | (k[ 7] & 0xff) << 24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,\n      j4  = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff) << 8 | (c[ 6] & 0xff) << 16 | (c[ 7] & 0xff) << 24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff) << 8 | (p[ 2] & 0xff) << 16 | (p[ 3] & 0xff) << 24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff) << 8 | (p[ 6] & 0xff) << 16 | (p[ 7] & 0xff) << 24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,\n      j9  = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,\n      j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,\n      j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,\n      j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,\n      j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,\n      j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0\n    x4 ^= u << 7 | u >>> 25\n    u = x4 + x0 | 0\n    x8 ^= u << 9 | u >>> 23\n    u = x8 + x4 | 0\n    x12 ^= u << 13 | u >>> 19\n    u = x12 + x8 | 0\n    x0 ^= u << 18 | u >>> 14\n\n    u = x5 + x1 | 0\n    x9 ^= u << 7 | u >>> 25\n    u = x9 + x5 | 0\n    x13 ^= u << 9 | u >>> 23\n    u = x13 + x9 | 0\n    x1 ^= u << 13 | u >>> 19\n    u = x1 + x13 | 0\n    x5 ^= u << 18 | u >>> 14\n\n    u = x10 + x6 | 0\n    x14 ^= u << 7 | u >>> 25\n    u = x14 + x10 | 0\n    x2 ^= u << 9 | u >>> 23\n    u = x2 + x14 | 0\n    x6 ^= u << 13 | u >>> 19\n    u = x6 + x2 | 0\n    x10 ^= u << 18 | u >>> 14\n\n    u = x15 + x11 | 0\n    x3 ^= u << 7 | u >>> 25\n    u = x3 + x15 | 0\n    x7 ^= u << 9 | u >>> 23\n    u = x7 + x3 | 0\n    x11 ^= u << 13 | u >>> 19\n    u = x11 + x7 | 0\n    x15 ^= u << 18 | u >>> 14\n\n    u = x0 + x3 | 0\n    x1 ^= u << 7 | u >>> 25\n    u = x1 + x0 | 0\n    x2 ^= u << 9 | u >>> 23\n    u = x2 + x1 | 0\n    x3 ^= u << 13 | u >>> 19\n    u = x3 + x2 | 0\n    x0 ^= u << 18 | u >>> 14\n\n    u = x5 + x4 | 0\n    x6 ^= u << 7 | u >>> 25\n    u = x6 + x5 | 0\n    x7 ^= u << 9 | u >>> 23\n    u = x7 + x6 | 0\n    x4 ^= u << 13 | u >>> 19\n    u = x4 + x7 | 0\n    x5 ^= u << 18 | u >>> 14\n\n    u = x10 + x9 | 0\n    x11 ^= u << 7 | u >>> 25\n    u = x11 + x10 | 0\n    x8 ^= u << 9 | u >>> 23\n    u = x8 + x11 | 0\n    x9 ^= u << 13 | u >>> 19\n    u = x9 + x8 | 0\n    x10 ^= u << 18 | u >>> 14\n\n    u = x15 + x14 | 0\n    x12 ^= u << 7 | u >>> 25\n    u = x12 + x15 | 0\n    x13 ^= u << 9 | u >>> 23\n    u = x13 + x12 | 0\n    x14 ^= u << 13 | u >>> 19\n    u = x14 + x13 | 0\n    x15 ^= u << 18 | u >>> 14\n  }\n   x0 =  x0 +  j0 | 0\n   x1 =  x1 +  j1 | 0\n   x2 =  x2 +  j2 | 0\n   x3 =  x3 +  j3 | 0\n   x4 =  x4 +  j4 | 0\n   x5 =  x5 +  j5 | 0\n   x6 =  x6 +  j6 | 0\n   x7 =  x7 +  j7 | 0\n   x8 =  x8 +  j8 | 0\n   x9 =  x9 +  j9 | 0\n  x10 = x10 + j10 | 0\n  x11 = x11 + j11 | 0\n  x12 = x12 + j12 | 0\n  x13 = x13 + j13 | 0\n  x14 = x14 + j14 | 0\n  x15 = x15 + j15 | 0\n\n  o[ 0] = x0 >>>  0 & 0xff\n  o[ 1] = x0 >>>  8 & 0xff\n  o[ 2] = x0 >>> 16 & 0xff\n  o[ 3] = x0 >>> 24 & 0xff\n\n  o[ 4] = x1 >>>  0 & 0xff\n  o[ 5] = x1 >>>  8 & 0xff\n  o[ 6] = x1 >>> 16 & 0xff\n  o[ 7] = x1 >>> 24 & 0xff\n\n  o[ 8] = x2 >>>  0 & 0xff\n  o[ 9] = x2 >>>  8 & 0xff\n  o[10] = x2 >>> 16 & 0xff\n  o[11] = x2 >>> 24 & 0xff\n\n  o[12] = x3 >>>  0 & 0xff\n  o[13] = x3 >>>  8 & 0xff\n  o[14] = x3 >>> 16 & 0xff\n  o[15] = x3 >>> 24 & 0xff\n\n  o[16] = x4 >>>  0 & 0xff\n  o[17] = x4 >>>  8 & 0xff\n  o[18] = x4 >>> 16 & 0xff\n  o[19] = x4 >>> 24 & 0xff\n\n  o[20] = x5 >>>  0 & 0xff\n  o[21] = x5 >>>  8 & 0xff\n  o[22] = x5 >>> 16 & 0xff\n  o[23] = x5 >>> 24 & 0xff\n\n  o[24] = x6 >>>  0 & 0xff\n  o[25] = x6 >>>  8 & 0xff\n  o[26] = x6 >>> 16 & 0xff\n  o[27] = x6 >>> 24 & 0xff\n\n  o[28] = x7 >>>  0 & 0xff\n  o[29] = x7 >>>  8 & 0xff\n  o[30] = x7 >>> 16 & 0xff\n  o[31] = x7 >>> 24 & 0xff\n\n  o[32] = x8 >>>  0 & 0xff\n  o[33] = x8 >>>  8 & 0xff\n  o[34] = x8 >>> 16 & 0xff\n  o[35] = x8 >>> 24 & 0xff\n\n  o[36] = x9 >>>  0 & 0xff\n  o[37] = x9 >>>  8 & 0xff\n  o[38] = x9 >>> 16 & 0xff\n  o[39] = x9 >>> 24 & 0xff\n\n  o[40] = x10 >>>  0 & 0xff\n  o[41] = x10 >>>  8 & 0xff\n  o[42] = x10 >>> 16 & 0xff\n  o[43] = x10 >>> 24 & 0xff\n\n  o[44] = x11 >>>  0 & 0xff\n  o[45] = x11 >>>  8 & 0xff\n  o[46] = x11 >>> 16 & 0xff\n  o[47] = x11 >>> 24 & 0xff\n\n  o[48] = x12 >>>  0 & 0xff\n  o[49] = x12 >>>  8 & 0xff\n  o[50] = x12 >>> 16 & 0xff\n  o[51] = x12 >>> 24 & 0xff\n\n  o[52] = x13 >>>  0 & 0xff\n  o[53] = x13 >>>  8 & 0xff\n  o[54] = x13 >>> 16 & 0xff\n  o[55] = x13 >>> 24 & 0xff\n\n  o[56] = x14 >>>  0 & 0xff\n  o[57] = x14 >>>  8 & 0xff\n  o[58] = x14 >>> 16 & 0xff\n  o[59] = x14 >>> 24 & 0xff\n\n  o[60] = x15 >>>  0 & 0xff\n  o[61] = x15 >>>  8 & 0xff\n  o[62] = x15 >>> 16 & 0xff\n  o[63] = x15 >>> 24 & 0xff\n}\n\nfunction core_hsalsa20(o,p,k,c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff) << 8 | (c[ 2] & 0xff) << 16 | (c[ 3] & 0xff) << 24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff) << 8 | (k[ 2] & 0xff) << 16 | (k[ 3] & 0xff) << 24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff) << 8 | (k[ 6] & 0xff) << 16 | (k[ 7] & 0xff) << 24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,\n      j4  = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff) << 8 | (c[ 6] & 0xff) << 16 | (c[ 7] & 0xff) << 24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff) << 8 | (p[ 2] & 0xff) << 16 | (p[ 3] & 0xff) << 24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff) << 8 | (p[ 6] & 0xff) << 16 | (p[ 7] & 0xff) << 24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,\n      j9  = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,\n      j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,\n      j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,\n      j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,\n      j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,\n      j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0\n    x4 ^= u << 7 | u >>> 25\n    u = x4 + x0 | 0\n    x8 ^= u << 9 | u >>> 23\n    u = x8 + x4 | 0\n    x12 ^= u << 13 | u >>> 19\n    u = x12 + x8 | 0\n    x0 ^= u << 18 | u >>> 14\n\n    u = x5 + x1 | 0\n    x9 ^= u << 7 | u >>> 25\n    u = x9 + x5 | 0\n    x13 ^= u << 9 | u >>> 23\n    u = x13 + x9 | 0\n    x1 ^= u << 13 | u >>> 19\n    u = x1 + x13 | 0\n    x5 ^= u << 18 | u >>> 14\n\n    u = x10 + x6 | 0\n    x14 ^= u << 7 | u >>> 25\n    u = x14 + x10 | 0\n    x2 ^= u << 9 | u >>> 23\n    u = x2 + x14 | 0\n    x6 ^= u << 13 | u >>> 19\n    u = x6 + x2 | 0\n    x10 ^= u << 18 | u >>> 14\n\n    u = x15 + x11 | 0\n    x3 ^= u << 7 | u >>> 25\n    u = x3 + x15 | 0\n    x7 ^= u << 9 | u >>> 23\n    u = x7 + x3 | 0\n    x11 ^= u << 13 | u >>> 19\n    u = x11 + x7 | 0\n    x15 ^= u << 18 | u >>> 14\n\n    u = x0 + x3 | 0\n    x1 ^= u << 7 | u >>> 25\n    u = x1 + x0 | 0\n    x2 ^= u << 9 | u >>> 23\n    u = x2 + x1 | 0\n    x3 ^= u << 13 | u >>> 19\n    u = x3 + x2 | 0\n    x0 ^= u << 18 | u >>> 14\n\n    u = x5 + x4 | 0\n    x6 ^= u << 7 | u >>> 25\n    u = x6 + x5 | 0\n    x7 ^= u << 9 | u >>> 23\n    u = x7 + x6 | 0\n    x4 ^= u << 13 | u >>> 19\n    u = x4 + x7 | 0\n    x5 ^= u << 18 | u >>> 14\n\n    u = x10 + x9 | 0\n    x11 ^= u << 7 | u >>> 25\n    u = x11 + x10 | 0\n    x8 ^= u << 9 | u >>> 23\n    u = x8 + x11 | 0\n    x9 ^= u << 13 | u >>> 19\n    u = x9 + x8 | 0\n    x10 ^= u << 18 | u >>> 14\n\n    u = x15 + x14 | 0\n    x12 ^= u << 7 | u >>> 25\n    u = x12 + x15 | 0\n    x13 ^= u << 9 | u >>> 23\n    u = x13 + x12 | 0\n    x14 ^= u << 13 | u >>> 19\n    u = x14 + x13 | 0\n    x15 ^= u << 18 | u >>> 14\n  }\n\n  o[ 0] = x0 >>>  0 & 0xff\n  o[ 1] = x0 >>>  8 & 0xff\n  o[ 2] = x0 >>> 16 & 0xff\n  o[ 3] = x0 >>> 24 & 0xff\n\n  o[ 4] = x5 >>>  0 & 0xff\n  o[ 5] = x5 >>>  8 & 0xff\n  o[ 6] = x5 >>> 16 & 0xff\n  o[ 7] = x5 >>> 24 & 0xff\n\n  o[ 8] = x10 >>>  0 & 0xff\n  o[ 9] = x10 >>>  8 & 0xff\n  o[10] = x10 >>> 16 & 0xff\n  o[11] = x10 >>> 24 & 0xff\n\n  o[12] = x15 >>>  0 & 0xff\n  o[13] = x15 >>>  8 & 0xff\n  o[14] = x15 >>> 16 & 0xff\n  o[15] = x15 >>> 24 & 0xff\n\n  o[16] = x6 >>>  0 & 0xff\n  o[17] = x6 >>>  8 & 0xff\n  o[18] = x6 >>> 16 & 0xff\n  o[19] = x6 >>> 24 & 0xff\n\n  o[20] = x7 >>>  0 & 0xff\n  o[21] = x7 >>>  8 & 0xff\n  o[22] = x7 >>> 16 & 0xff\n  o[23] = x7 >>> 24 & 0xff\n\n  o[24] = x8 >>>  0 & 0xff\n  o[25] = x8 >>>  8 & 0xff\n  o[26] = x8 >>> 16 & 0xff\n  o[27] = x8 >>> 24 & 0xff\n\n  o[28] = x9 >>>  0 & 0xff\n  o[29] = x9 >>>  8 & 0xff\n  o[30] = x9 >>> 16 & 0xff\n  o[31] = x9 >>> 24 & 0xff\n}\n","start":1670465471061,"end":1670465471061,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/xsalsa20@1.2.0/node_modules/xsalsa20/xsalsa20.js?commonjs-wrapped\";\n\nvar xsalsa20 = typeof WebAssembly !== \"undefined\" && require$$0()()\n\nvar SIGMA = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107])\nvar head = 144\nvar top = head\nvar free = []\n\nvar xsalsa20_1 = XSalsa20\n\nXSalsa20.NONCEBYTES = 24\nXSalsa20.KEYBYTES = 32\n\nXSalsa20.core_hsalsa20 = core_hsalsa20\nXSalsa20.SIGMA = SIGMA\n\nfunction XSalsa20 (nonce, key) {\n  if (!(this instanceof XSalsa20)) return new XSalsa20(nonce, key)\n  if (!nonce || nonce.length < 24) throw new Error('nonce must be at least 24 bytes')\n  if (!key || key.length < 32) throw new Error('key must be at least 32 bytes')\n  this._xor = xsalsa20 ? new WASM(nonce, key) : new Fallback(nonce, key)\n}\n\nXSalsa20.prototype.update = function (input, output) {\n  if (!input) throw new Error('input must be Uint8Array or Buffer')\n  if (!output) output = new Uint8Array(input.length)\n  if (input.length) this._xor.update(input, output)\n  return output\n}\n\nXSalsa20.prototype.final =\nXSalsa20.prototype.finalize = function () {\n  this._xor.finalize()\n  this._xor = null\n}\n\nfunction WASM (nonce, key) {\n  if (!free.length) {\n    free.push(head)\n    head += 64\n  }\n\n  this._pointer = free.pop()\n  this._nonce = this._pointer + 8\n  this._key = this._nonce + 24\n  this._overflow = 0\n  this._memory = new Uint8Array(xsalsa20.memory.buffer)\n\n  this._memory.fill(0, this._pointer, this._pointer + 8)\n  this._memory.set(nonce, this._nonce)\n  this._memory.set(key, this._key)\n}\n\nWASM.prototype.realloc = function (size) {\n  xsalsa20.memory.grow(Math.ceil(Math.abs(size - this._memory.length) / 65536))\n  this._memory = new Uint8Array(xsalsa20.memory.buffer)\n}\n\nWASM.prototype.update = function (input, output) {\n  var len = this._overflow + input.length\n  var start = head + this._overflow\n\n  top = head + len\n  if (top >= this._memory.length) this.realloc(top)\n\n  this._memory.set(input, start)\n  xsalsa20.xsalsa20_xor(this._pointer, head, head, len, this._nonce, this._key)\n  output.set(this._memory.subarray(start, head + len))\n\n  this._overflow = len & 63\n}\n\nWASM.prototype.finalize = function () {\n  this._memory.fill(0, this._pointer, this._key + 32)\n  if (top > head) {\n    this._memory.fill(0, head, top)\n    top = 0\n  }\n  free.push(this._pointer)\n}\n\nfunction Fallback (nonce, key) {\n  this._s = new Uint8Array(32)\n  this._z = new Uint8Array(16)\n  this._overflow = 0\n  core_hsalsa20(this._s, nonce, key, SIGMA)\n  for (var i = 0; i < 8; i++) this._z[i] = nonce[i + 16]\n}\n\nFallback.prototype.update = function (input, output) {\n  var x = new Uint8Array(64)\n  var u = 0\n  var i = this._overflow\n  var b = input.length + this._overflow\n  var z = this._z\n  var mpos = -this._overflow\n  var cpos = -this._overflow\n\n  while (b >= 64) {\n    core_salsa20(x, z, this._s, SIGMA)\n    for (; i < 64; i++) output[cpos + i] = input[mpos + i] ^ x[i]\n    u = 1\n    for (i = 8; i < 16; i++) {\n      u += (z[i] & 0xff) | 0\n      z[i] = u & 0xff\n      u >>>= 8\n    }\n    b -= 64\n    cpos += 64\n    mpos += 64\n    i = 0\n  }\n  if (b > 0) {\n    core_salsa20(x, z, this._s, SIGMA)\n    for (; i < b; i++) output[cpos + i] = input[mpos + i] ^ x[i]\n  }\n\n  this._overflow = b & 63\n}\n\nFallback.prototype.finalize = function () {\n  this._s.fill(0)\n  this._z.fill(0)\n}\n\n// below methods are ported from tweet nacl\n\nfunction core_salsa20(o, p, k, c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff) << 8 | (c[ 2] & 0xff) << 16 | (c[ 3] & 0xff) << 24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff) << 8 | (k[ 2] & 0xff) << 16 | (k[ 3] & 0xff) << 24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff) << 8 | (k[ 6] & 0xff) << 16 | (k[ 7] & 0xff) << 24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,\n      j4  = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff) << 8 | (c[ 6] & 0xff) << 16 | (c[ 7] & 0xff) << 24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff) << 8 | (p[ 2] & 0xff) << 16 | (p[ 3] & 0xff) << 24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff) << 8 | (p[ 6] & 0xff) << 16 | (p[ 7] & 0xff) << 24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,\n      j9  = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,\n      j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,\n      j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,\n      j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,\n      j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,\n      j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0\n    x4 ^= u << 7 | u >>> 25\n    u = x4 + x0 | 0\n    x8 ^= u << 9 | u >>> 23\n    u = x8 + x4 | 0\n    x12 ^= u << 13 | u >>> 19\n    u = x12 + x8 | 0\n    x0 ^= u << 18 | u >>> 14\n\n    u = x5 + x1 | 0\n    x9 ^= u << 7 | u >>> 25\n    u = x9 + x5 | 0\n    x13 ^= u << 9 | u >>> 23\n    u = x13 + x9 | 0\n    x1 ^= u << 13 | u >>> 19\n    u = x1 + x13 | 0\n    x5 ^= u << 18 | u >>> 14\n\n    u = x10 + x6 | 0\n    x14 ^= u << 7 | u >>> 25\n    u = x14 + x10 | 0\n    x2 ^= u << 9 | u >>> 23\n    u = x2 + x14 | 0\n    x6 ^= u << 13 | u >>> 19\n    u = x6 + x2 | 0\n    x10 ^= u << 18 | u >>> 14\n\n    u = x15 + x11 | 0\n    x3 ^= u << 7 | u >>> 25\n    u = x3 + x15 | 0\n    x7 ^= u << 9 | u >>> 23\n    u = x7 + x3 | 0\n    x11 ^= u << 13 | u >>> 19\n    u = x11 + x7 | 0\n    x15 ^= u << 18 | u >>> 14\n\n    u = x0 + x3 | 0\n    x1 ^= u << 7 | u >>> 25\n    u = x1 + x0 | 0\n    x2 ^= u << 9 | u >>> 23\n    u = x2 + x1 | 0\n    x3 ^= u << 13 | u >>> 19\n    u = x3 + x2 | 0\n    x0 ^= u << 18 | u >>> 14\n\n    u = x5 + x4 | 0\n    x6 ^= u << 7 | u >>> 25\n    u = x6 + x5 | 0\n    x7 ^= u << 9 | u >>> 23\n    u = x7 + x6 | 0\n    x4 ^= u << 13 | u >>> 19\n    u = x4 + x7 | 0\n    x5 ^= u << 18 | u >>> 14\n\n    u = x10 + x9 | 0\n    x11 ^= u << 7 | u >>> 25\n    u = x11 + x10 | 0\n    x8 ^= u << 9 | u >>> 23\n    u = x8 + x11 | 0\n    x9 ^= u << 13 | u >>> 19\n    u = x9 + x8 | 0\n    x10 ^= u << 18 | u >>> 14\n\n    u = x15 + x14 | 0\n    x12 ^= u << 7 | u >>> 25\n    u = x12 + x15 | 0\n    x13 ^= u << 9 | u >>> 23\n    u = x13 + x12 | 0\n    x14 ^= u << 13 | u >>> 19\n    u = x14 + x13 | 0\n    x15 ^= u << 18 | u >>> 14\n  }\n   x0 =  x0 +  j0 | 0\n   x1 =  x1 +  j1 | 0\n   x2 =  x2 +  j2 | 0\n   x3 =  x3 +  j3 | 0\n   x4 =  x4 +  j4 | 0\n   x5 =  x5 +  j5 | 0\n   x6 =  x6 +  j6 | 0\n   x7 =  x7 +  j7 | 0\n   x8 =  x8 +  j8 | 0\n   x9 =  x9 +  j9 | 0\n  x10 = x10 + j10 | 0\n  x11 = x11 + j11 | 0\n  x12 = x12 + j12 | 0\n  x13 = x13 + j13 | 0\n  x14 = x14 + j14 | 0\n  x15 = x15 + j15 | 0\n\n  o[ 0] = x0 >>>  0 & 0xff\n  o[ 1] = x0 >>>  8 & 0xff\n  o[ 2] = x0 >>> 16 & 0xff\n  o[ 3] = x0 >>> 24 & 0xff\n\n  o[ 4] = x1 >>>  0 & 0xff\n  o[ 5] = x1 >>>  8 & 0xff\n  o[ 6] = x1 >>> 16 & 0xff\n  o[ 7] = x1 >>> 24 & 0xff\n\n  o[ 8] = x2 >>>  0 & 0xff\n  o[ 9] = x2 >>>  8 & 0xff\n  o[10] = x2 >>> 16 & 0xff\n  o[11] = x2 >>> 24 & 0xff\n\n  o[12] = x3 >>>  0 & 0xff\n  o[13] = x3 >>>  8 & 0xff\n  o[14] = x3 >>> 16 & 0xff\n  o[15] = x3 >>> 24 & 0xff\n\n  o[16] = x4 >>>  0 & 0xff\n  o[17] = x4 >>>  8 & 0xff\n  o[18] = x4 >>> 16 & 0xff\n  o[19] = x4 >>> 24 & 0xff\n\n  o[20] = x5 >>>  0 & 0xff\n  o[21] = x5 >>>  8 & 0xff\n  o[22] = x5 >>> 16 & 0xff\n  o[23] = x5 >>> 24 & 0xff\n\n  o[24] = x6 >>>  0 & 0xff\n  o[25] = x6 >>>  8 & 0xff\n  o[26] = x6 >>> 16 & 0xff\n  o[27] = x6 >>> 24 & 0xff\n\n  o[28] = x7 >>>  0 & 0xff\n  o[29] = x7 >>>  8 & 0xff\n  o[30] = x7 >>> 16 & 0xff\n  o[31] = x7 >>> 24 & 0xff\n\n  o[32] = x8 >>>  0 & 0xff\n  o[33] = x8 >>>  8 & 0xff\n  o[34] = x8 >>> 16 & 0xff\n  o[35] = x8 >>> 24 & 0xff\n\n  o[36] = x9 >>>  0 & 0xff\n  o[37] = x9 >>>  8 & 0xff\n  o[38] = x9 >>> 16 & 0xff\n  o[39] = x9 >>> 24 & 0xff\n\n  o[40] = x10 >>>  0 & 0xff\n  o[41] = x10 >>>  8 & 0xff\n  o[42] = x10 >>> 16 & 0xff\n  o[43] = x10 >>> 24 & 0xff\n\n  o[44] = x11 >>>  0 & 0xff\n  o[45] = x11 >>>  8 & 0xff\n  o[46] = x11 >>> 16 & 0xff\n  o[47] = x11 >>> 24 & 0xff\n\n  o[48] = x12 >>>  0 & 0xff\n  o[49] = x12 >>>  8 & 0xff\n  o[50] = x12 >>> 16 & 0xff\n  o[51] = x12 >>> 24 & 0xff\n\n  o[52] = x13 >>>  0 & 0xff\n  o[53] = x13 >>>  8 & 0xff\n  o[54] = x13 >>> 16 & 0xff\n  o[55] = x13 >>> 24 & 0xff\n\n  o[56] = x14 >>>  0 & 0xff\n  o[57] = x14 >>>  8 & 0xff\n  o[58] = x14 >>> 16 & 0xff\n  o[59] = x14 >>> 24 & 0xff\n\n  o[60] = x15 >>>  0 & 0xff\n  o[61] = x15 >>>  8 & 0xff\n  o[62] = x15 >>> 16 & 0xff\n  o[63] = x15 >>> 24 & 0xff\n}\n\nfunction core_hsalsa20(o,p,k,c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff) << 8 | (c[ 2] & 0xff) << 16 | (c[ 3] & 0xff) << 24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff) << 8 | (k[ 2] & 0xff) << 16 | (k[ 3] & 0xff) << 24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff) << 8 | (k[ 6] & 0xff) << 16 | (k[ 7] & 0xff) << 24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,\n      j4  = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff) << 8 | (c[ 6] & 0xff) << 16 | (c[ 7] & 0xff) << 24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff) << 8 | (p[ 2] & 0xff) << 16 | (p[ 3] & 0xff) << 24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff) << 8 | (p[ 6] & 0xff) << 16 | (p[ 7] & 0xff) << 24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,\n      j9  = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,\n      j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,\n      j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,\n      j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,\n      j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,\n      j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0\n    x4 ^= u << 7 | u >>> 25\n    u = x4 + x0 | 0\n    x8 ^= u << 9 | u >>> 23\n    u = x8 + x4 | 0\n    x12 ^= u << 13 | u >>> 19\n    u = x12 + x8 | 0\n    x0 ^= u << 18 | u >>> 14\n\n    u = x5 + x1 | 0\n    x9 ^= u << 7 | u >>> 25\n    u = x9 + x5 | 0\n    x13 ^= u << 9 | u >>> 23\n    u = x13 + x9 | 0\n    x1 ^= u << 13 | u >>> 19\n    u = x1 + x13 | 0\n    x5 ^= u << 18 | u >>> 14\n\n    u = x10 + x6 | 0\n    x14 ^= u << 7 | u >>> 25\n    u = x14 + x10 | 0\n    x2 ^= u << 9 | u >>> 23\n    u = x2 + x14 | 0\n    x6 ^= u << 13 | u >>> 19\n    u = x6 + x2 | 0\n    x10 ^= u << 18 | u >>> 14\n\n    u = x15 + x11 | 0\n    x3 ^= u << 7 | u >>> 25\n    u = x3 + x15 | 0\n    x7 ^= u << 9 | u >>> 23\n    u = x7 + x3 | 0\n    x11 ^= u << 13 | u >>> 19\n    u = x11 + x7 | 0\n    x15 ^= u << 18 | u >>> 14\n\n    u = x0 + x3 | 0\n    x1 ^= u << 7 | u >>> 25\n    u = x1 + x0 | 0\n    x2 ^= u << 9 | u >>> 23\n    u = x2 + x1 | 0\n    x3 ^= u << 13 | u >>> 19\n    u = x3 + x2 | 0\n    x0 ^= u << 18 | u >>> 14\n\n    u = x5 + x4 | 0\n    x6 ^= u << 7 | u >>> 25\n    u = x6 + x5 | 0\n    x7 ^= u << 9 | u >>> 23\n    u = x7 + x6 | 0\n    x4 ^= u << 13 | u >>> 19\n    u = x4 + x7 | 0\n    x5 ^= u << 18 | u >>> 14\n\n    u = x10 + x9 | 0\n    x11 ^= u << 7 | u >>> 25\n    u = x11 + x10 | 0\n    x8 ^= u << 9 | u >>> 23\n    u = x8 + x11 | 0\n    x9 ^= u << 13 | u >>> 19\n    u = x9 + x8 | 0\n    x10 ^= u << 18 | u >>> 14\n\n    u = x15 + x14 | 0\n    x12 ^= u << 7 | u >>> 25\n    u = x12 + x15 | 0\n    x13 ^= u << 9 | u >>> 23\n    u = x13 + x12 | 0\n    x14 ^= u << 13 | u >>> 19\n    u = x14 + x13 | 0\n    x15 ^= u << 18 | u >>> 14\n  }\n\n  o[ 0] = x0 >>>  0 & 0xff\n  o[ 1] = x0 >>>  8 & 0xff\n  o[ 2] = x0 >>> 16 & 0xff\n  o[ 3] = x0 >>> 24 & 0xff\n\n  o[ 4] = x5 >>>  0 & 0xff\n  o[ 5] = x5 >>>  8 & 0xff\n  o[ 6] = x5 >>> 16 & 0xff\n  o[ 7] = x5 >>> 24 & 0xff\n\n  o[ 8] = x10 >>>  0 & 0xff\n  o[ 9] = x10 >>>  8 & 0xff\n  o[10] = x10 >>> 16 & 0xff\n  o[11] = x10 >>> 24 & 0xff\n\n  o[12] = x15 >>>  0 & 0xff\n  o[13] = x15 >>>  8 & 0xff\n  o[14] = x15 >>> 16 & 0xff\n  o[15] = x15 >>> 24 & 0xff\n\n  o[16] = x6 >>>  0 & 0xff\n  o[17] = x6 >>>  8 & 0xff\n  o[18] = x6 >>> 16 & 0xff\n  o[19] = x6 >>> 24 & 0xff\n\n  o[20] = x7 >>>  0 & 0xff\n  o[21] = x7 >>>  8 & 0xff\n  o[22] = x7 >>> 16 & 0xff\n  o[23] = x7 >>> 24 & 0xff\n\n  o[24] = x8 >>>  0 & 0xff\n  o[25] = x8 >>>  8 & 0xff\n  o[26] = x8 >>> 16 & 0xff\n  o[27] = x8 >>> 24 & 0xff\n\n  o[28] = x9 >>>  0 & 0xff\n  o[29] = x9 >>>  8 & 0xff\n  o[30] = x9 >>> 16 & 0xff\n  o[31] = x9 >>> 24 & 0xff\n}\n\nexport default xsalsa20_1;\nexport { xsalsa20_1 as __moduleExports };","start":1670465471062,"end":1670465471573,"order":"normal"},{"name":"polyfill-node","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/xsalsa20@1.2.0/node_modules/xsalsa20/xsalsa20.js?commonjs-wrapped\";\n\nvar xsalsa20 = typeof WebAssembly !== \"undefined\" && require$$0()()\n\nvar SIGMA = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107])\nvar head = 144\nvar top = head\nvar free = []\n\nvar xsalsa20_1 = XSalsa20\n\nXSalsa20.NONCEBYTES = 24\nXSalsa20.KEYBYTES = 32\n\nXSalsa20.core_hsalsa20 = core_hsalsa20\nXSalsa20.SIGMA = SIGMA\n\nfunction XSalsa20 (nonce, key) {\n  if (!(this instanceof XSalsa20)) return new XSalsa20(nonce, key)\n  if (!nonce || nonce.length < 24) throw new Error('nonce must be at least 24 bytes')\n  if (!key || key.length < 32) throw new Error('key must be at least 32 bytes')\n  this._xor = xsalsa20 ? new WASM(nonce, key) : new Fallback(nonce, key)\n}\n\nXSalsa20.prototype.update = function (input, output) {\n  if (!input) throw new Error('input must be Uint8Array or Buffer')\n  if (!output) output = new Uint8Array(input.length)\n  if (input.length) this._xor.update(input, output)\n  return output\n}\n\nXSalsa20.prototype.final =\nXSalsa20.prototype.finalize = function () {\n  this._xor.finalize()\n  this._xor = null\n}\n\nfunction WASM (nonce, key) {\n  if (!free.length) {\n    free.push(head)\n    head += 64\n  }\n\n  this._pointer = free.pop()\n  this._nonce = this._pointer + 8\n  this._key = this._nonce + 24\n  this._overflow = 0\n  this._memory = new Uint8Array(xsalsa20.memory.buffer)\n\n  this._memory.fill(0, this._pointer, this._pointer + 8)\n  this._memory.set(nonce, this._nonce)\n  this._memory.set(key, this._key)\n}\n\nWASM.prototype.realloc = function (size) {\n  xsalsa20.memory.grow(Math.ceil(Math.abs(size - this._memory.length) / 65536))\n  this._memory = new Uint8Array(xsalsa20.memory.buffer)\n}\n\nWASM.prototype.update = function (input, output) {\n  var len = this._overflow + input.length\n  var start = head + this._overflow\n\n  top = head + len\n  if (top >= this._memory.length) this.realloc(top)\n\n  this._memory.set(input, start)\n  xsalsa20.xsalsa20_xor(this._pointer, head, head, len, this._nonce, this._key)\n  output.set(this._memory.subarray(start, head + len))\n\n  this._overflow = len & 63\n}\n\nWASM.prototype.finalize = function () {\n  this._memory.fill(0, this._pointer, this._key + 32)\n  if (top > head) {\n    this._memory.fill(0, head, top)\n    top = 0\n  }\n  free.push(this._pointer)\n}\n\nfunction Fallback (nonce, key) {\n  this._s = new Uint8Array(32)\n  this._z = new Uint8Array(16)\n  this._overflow = 0\n  core_hsalsa20(this._s, nonce, key, SIGMA)\n  for (var i = 0; i < 8; i++) this._z[i] = nonce[i + 16]\n}\n\nFallback.prototype.update = function (input, output) {\n  var x = new Uint8Array(64)\n  var u = 0\n  var i = this._overflow\n  var b = input.length + this._overflow\n  var z = this._z\n  var mpos = -this._overflow\n  var cpos = -this._overflow\n\n  while (b >= 64) {\n    core_salsa20(x, z, this._s, SIGMA)\n    for (; i < 64; i++) output[cpos + i] = input[mpos + i] ^ x[i]\n    u = 1\n    for (i = 8; i < 16; i++) {\n      u += (z[i] & 0xff) | 0\n      z[i] = u & 0xff\n      u >>>= 8\n    }\n    b -= 64\n    cpos += 64\n    mpos += 64\n    i = 0\n  }\n  if (b > 0) {\n    core_salsa20(x, z, this._s, SIGMA)\n    for (; i < b; i++) output[cpos + i] = input[mpos + i] ^ x[i]\n  }\n\n  this._overflow = b & 63\n}\n\nFallback.prototype.finalize = function () {\n  this._s.fill(0)\n  this._z.fill(0)\n}\n\n// below methods are ported from tweet nacl\n\nfunction core_salsa20(o, p, k, c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff) << 8 | (c[ 2] & 0xff) << 16 | (c[ 3] & 0xff) << 24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff) << 8 | (k[ 2] & 0xff) << 16 | (k[ 3] & 0xff) << 24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff) << 8 | (k[ 6] & 0xff) << 16 | (k[ 7] & 0xff) << 24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,\n      j4  = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff) << 8 | (c[ 6] & 0xff) << 16 | (c[ 7] & 0xff) << 24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff) << 8 | (p[ 2] & 0xff) << 16 | (p[ 3] & 0xff) << 24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff) << 8 | (p[ 6] & 0xff) << 16 | (p[ 7] & 0xff) << 24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,\n      j9  = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,\n      j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,\n      j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,\n      j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,\n      j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,\n      j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0\n    x4 ^= u << 7 | u >>> 25\n    u = x4 + x0 | 0\n    x8 ^= u << 9 | u >>> 23\n    u = x8 + x4 | 0\n    x12 ^= u << 13 | u >>> 19\n    u = x12 + x8 | 0\n    x0 ^= u << 18 | u >>> 14\n\n    u = x5 + x1 | 0\n    x9 ^= u << 7 | u >>> 25\n    u = x9 + x5 | 0\n    x13 ^= u << 9 | u >>> 23\n    u = x13 + x9 | 0\n    x1 ^= u << 13 | u >>> 19\n    u = x1 + x13 | 0\n    x5 ^= u << 18 | u >>> 14\n\n    u = x10 + x6 | 0\n    x14 ^= u << 7 | u >>> 25\n    u = x14 + x10 | 0\n    x2 ^= u << 9 | u >>> 23\n    u = x2 + x14 | 0\n    x6 ^= u << 13 | u >>> 19\n    u = x6 + x2 | 0\n    x10 ^= u << 18 | u >>> 14\n\n    u = x15 + x11 | 0\n    x3 ^= u << 7 | u >>> 25\n    u = x3 + x15 | 0\n    x7 ^= u << 9 | u >>> 23\n    u = x7 + x3 | 0\n    x11 ^= u << 13 | u >>> 19\n    u = x11 + x7 | 0\n    x15 ^= u << 18 | u >>> 14\n\n    u = x0 + x3 | 0\n    x1 ^= u << 7 | u >>> 25\n    u = x1 + x0 | 0\n    x2 ^= u << 9 | u >>> 23\n    u = x2 + x1 | 0\n    x3 ^= u << 13 | u >>> 19\n    u = x3 + x2 | 0\n    x0 ^= u << 18 | u >>> 14\n\n    u = x5 + x4 | 0\n    x6 ^= u << 7 | u >>> 25\n    u = x6 + x5 | 0\n    x7 ^= u << 9 | u >>> 23\n    u = x7 + x6 | 0\n    x4 ^= u << 13 | u >>> 19\n    u = x4 + x7 | 0\n    x5 ^= u << 18 | u >>> 14\n\n    u = x10 + x9 | 0\n    x11 ^= u << 7 | u >>> 25\n    u = x11 + x10 | 0\n    x8 ^= u << 9 | u >>> 23\n    u = x8 + x11 | 0\n    x9 ^= u << 13 | u >>> 19\n    u = x9 + x8 | 0\n    x10 ^= u << 18 | u >>> 14\n\n    u = x15 + x14 | 0\n    x12 ^= u << 7 | u >>> 25\n    u = x12 + x15 | 0\n    x13 ^= u << 9 | u >>> 23\n    u = x13 + x12 | 0\n    x14 ^= u << 13 | u >>> 19\n    u = x14 + x13 | 0\n    x15 ^= u << 18 | u >>> 14\n  }\n   x0 =  x0 +  j0 | 0\n   x1 =  x1 +  j1 | 0\n   x2 =  x2 +  j2 | 0\n   x3 =  x3 +  j3 | 0\n   x4 =  x4 +  j4 | 0\n   x5 =  x5 +  j5 | 0\n   x6 =  x6 +  j6 | 0\n   x7 =  x7 +  j7 | 0\n   x8 =  x8 +  j8 | 0\n   x9 =  x9 +  j9 | 0\n  x10 = x10 + j10 | 0\n  x11 = x11 + j11 | 0\n  x12 = x12 + j12 | 0\n  x13 = x13 + j13 | 0\n  x14 = x14 + j14 | 0\n  x15 = x15 + j15 | 0\n\n  o[ 0] = x0 >>>  0 & 0xff\n  o[ 1] = x0 >>>  8 & 0xff\n  o[ 2] = x0 >>> 16 & 0xff\n  o[ 3] = x0 >>> 24 & 0xff\n\n  o[ 4] = x1 >>>  0 & 0xff\n  o[ 5] = x1 >>>  8 & 0xff\n  o[ 6] = x1 >>> 16 & 0xff\n  o[ 7] = x1 >>> 24 & 0xff\n\n  o[ 8] = x2 >>>  0 & 0xff\n  o[ 9] = x2 >>>  8 & 0xff\n  o[10] = x2 >>> 16 & 0xff\n  o[11] = x2 >>> 24 & 0xff\n\n  o[12] = x3 >>>  0 & 0xff\n  o[13] = x3 >>>  8 & 0xff\n  o[14] = x3 >>> 16 & 0xff\n  o[15] = x3 >>> 24 & 0xff\n\n  o[16] = x4 >>>  0 & 0xff\n  o[17] = x4 >>>  8 & 0xff\n  o[18] = x4 >>> 16 & 0xff\n  o[19] = x4 >>> 24 & 0xff\n\n  o[20] = x5 >>>  0 & 0xff\n  o[21] = x5 >>>  8 & 0xff\n  o[22] = x5 >>> 16 & 0xff\n  o[23] = x5 >>> 24 & 0xff\n\n  o[24] = x6 >>>  0 & 0xff\n  o[25] = x6 >>>  8 & 0xff\n  o[26] = x6 >>> 16 & 0xff\n  o[27] = x6 >>> 24 & 0xff\n\n  o[28] = x7 >>>  0 & 0xff\n  o[29] = x7 >>>  8 & 0xff\n  o[30] = x7 >>> 16 & 0xff\n  o[31] = x7 >>> 24 & 0xff\n\n  o[32] = x8 >>>  0 & 0xff\n  o[33] = x8 >>>  8 & 0xff\n  o[34] = x8 >>> 16 & 0xff\n  o[35] = x8 >>> 24 & 0xff\n\n  o[36] = x9 >>>  0 & 0xff\n  o[37] = x9 >>>  8 & 0xff\n  o[38] = x9 >>> 16 & 0xff\n  o[39] = x9 >>> 24 & 0xff\n\n  o[40] = x10 >>>  0 & 0xff\n  o[41] = x10 >>>  8 & 0xff\n  o[42] = x10 >>> 16 & 0xff\n  o[43] = x10 >>> 24 & 0xff\n\n  o[44] = x11 >>>  0 & 0xff\n  o[45] = x11 >>>  8 & 0xff\n  o[46] = x11 >>> 16 & 0xff\n  o[47] = x11 >>> 24 & 0xff\n\n  o[48] = x12 >>>  0 & 0xff\n  o[49] = x12 >>>  8 & 0xff\n  o[50] = x12 >>> 16 & 0xff\n  o[51] = x12 >>> 24 & 0xff\n\n  o[52] = x13 >>>  0 & 0xff\n  o[53] = x13 >>>  8 & 0xff\n  o[54] = x13 >>> 16 & 0xff\n  o[55] = x13 >>> 24 & 0xff\n\n  o[56] = x14 >>>  0 & 0xff\n  o[57] = x14 >>>  8 & 0xff\n  o[58] = x14 >>> 16 & 0xff\n  o[59] = x14 >>> 24 & 0xff\n\n  o[60] = x15 >>>  0 & 0xff\n  o[61] = x15 >>>  8 & 0xff\n  o[62] = x15 >>> 16 & 0xff\n  o[63] = x15 >>> 24 & 0xff\n}\n\nfunction core_hsalsa20(o,p,k,c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff) << 8 | (c[ 2] & 0xff) << 16 | (c[ 3] & 0xff) << 24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff) << 8 | (k[ 2] & 0xff) << 16 | (k[ 3] & 0xff) << 24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff) << 8 | (k[ 6] & 0xff) << 16 | (k[ 7] & 0xff) << 24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,\n      j4  = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff) << 8 | (c[ 6] & 0xff) << 16 | (c[ 7] & 0xff) << 24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff) << 8 | (p[ 2] & 0xff) << 16 | (p[ 3] & 0xff) << 24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff) << 8 | (p[ 6] & 0xff) << 16 | (p[ 7] & 0xff) << 24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,\n      j9  = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,\n      j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,\n      j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,\n      j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,\n      j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,\n      j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0\n    x4 ^= u << 7 | u >>> 25\n    u = x4 + x0 | 0\n    x8 ^= u << 9 | u >>> 23\n    u = x8 + x4 | 0\n    x12 ^= u << 13 | u >>> 19\n    u = x12 + x8 | 0\n    x0 ^= u << 18 | u >>> 14\n\n    u = x5 + x1 | 0\n    x9 ^= u << 7 | u >>> 25\n    u = x9 + x5 | 0\n    x13 ^= u << 9 | u >>> 23\n    u = x13 + x9 | 0\n    x1 ^= u << 13 | u >>> 19\n    u = x1 + x13 | 0\n    x5 ^= u << 18 | u >>> 14\n\n    u = x10 + x6 | 0\n    x14 ^= u << 7 | u >>> 25\n    u = x14 + x10 | 0\n    x2 ^= u << 9 | u >>> 23\n    u = x2 + x14 | 0\n    x6 ^= u << 13 | u >>> 19\n    u = x6 + x2 | 0\n    x10 ^= u << 18 | u >>> 14\n\n    u = x15 + x11 | 0\n    x3 ^= u << 7 | u >>> 25\n    u = x3 + x15 | 0\n    x7 ^= u << 9 | u >>> 23\n    u = x7 + x3 | 0\n    x11 ^= u << 13 | u >>> 19\n    u = x11 + x7 | 0\n    x15 ^= u << 18 | u >>> 14\n\n    u = x0 + x3 | 0\n    x1 ^= u << 7 | u >>> 25\n    u = x1 + x0 | 0\n    x2 ^= u << 9 | u >>> 23\n    u = x2 + x1 | 0\n    x3 ^= u << 13 | u >>> 19\n    u = x3 + x2 | 0\n    x0 ^= u << 18 | u >>> 14\n\n    u = x5 + x4 | 0\n    x6 ^= u << 7 | u >>> 25\n    u = x6 + x5 | 0\n    x7 ^= u << 9 | u >>> 23\n    u = x7 + x6 | 0\n    x4 ^= u << 13 | u >>> 19\n    u = x4 + x7 | 0\n    x5 ^= u << 18 | u >>> 14\n\n    u = x10 + x9 | 0\n    x11 ^= u << 7 | u >>> 25\n    u = x11 + x10 | 0\n    x8 ^= u << 9 | u >>> 23\n    u = x8 + x11 | 0\n    x9 ^= u << 13 | u >>> 19\n    u = x9 + x8 | 0\n    x10 ^= u << 18 | u >>> 14\n\n    u = x15 + x14 | 0\n    x12 ^= u << 7 | u >>> 25\n    u = x12 + x15 | 0\n    x13 ^= u << 9 | u >>> 23\n    u = x13 + x12 | 0\n    x14 ^= u << 13 | u >>> 19\n    u = x14 + x13 | 0\n    x15 ^= u << 18 | u >>> 14\n  }\n\n  o[ 0] = x0 >>>  0 & 0xff\n  o[ 1] = x0 >>>  8 & 0xff\n  o[ 2] = x0 >>> 16 & 0xff\n  o[ 3] = x0 >>> 24 & 0xff\n\n  o[ 4] = x5 >>>  0 & 0xff\n  o[ 5] = x5 >>>  8 & 0xff\n  o[ 6] = x5 >>> 16 & 0xff\n  o[ 7] = x5 >>> 24 & 0xff\n\n  o[ 8] = x10 >>>  0 & 0xff\n  o[ 9] = x10 >>>  8 & 0xff\n  o[10] = x10 >>> 16 & 0xff\n  o[11] = x10 >>> 24 & 0xff\n\n  o[12] = x15 >>>  0 & 0xff\n  o[13] = x15 >>>  8 & 0xff\n  o[14] = x15 >>> 16 & 0xff\n  o[15] = x15 >>> 24 & 0xff\n\n  o[16] = x6 >>>  0 & 0xff\n  o[17] = x6 >>>  8 & 0xff\n  o[18] = x6 >>> 16 & 0xff\n  o[19] = x6 >>> 24 & 0xff\n\n  o[20] = x7 >>>  0 & 0xff\n  o[21] = x7 >>>  8 & 0xff\n  o[22] = x7 >>> 16 & 0xff\n  o[23] = x7 >>> 24 & 0xff\n\n  o[24] = x8 >>>  0 & 0xff\n  o[25] = x8 >>>  8 & 0xff\n  o[26] = x8 >>> 16 & 0xff\n  o[27] = x8 >>> 24 & 0xff\n\n  o[28] = x9 >>>  0 & 0xff\n  o[29] = x9 >>>  8 & 0xff\n  o[30] = x9 >>> 16 & 0xff\n  o[31] = x9 >>> 24 & 0xff\n}\n\nexport default xsalsa20_1;\nexport { xsalsa20_1 as __moduleExports };","start":1670465471574,"end":1670465471584,"order":"normal"}]}
