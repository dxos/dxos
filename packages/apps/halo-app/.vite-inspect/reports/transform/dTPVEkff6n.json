{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/pbkdf2.js","transforms":[{"name":"vite:load-fallback","result":";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA1 = C_algo.SHA1;\n\t    var HMAC = C_algo.HMAC;\n\n\t    /**\n\t     * Password-Based Key Derivation Function 2 algorithm.\n\t     */\n\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hasher to use. Default: SHA1\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: SHA1,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create();\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Computes the Password-Based Key Derivation Function 2.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init HMAC\n\t            var hmac = HMAC.create(cfg.hasher, password);\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\t            var blockIndex = WordArray.create([0x00000001]);\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var blockIndexWords = blockIndex.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                var block = hmac.update(salt).finalize(blockIndex);\n\t                hmac.reset();\n\n\t                // Shortcuts\n\t                var blockWords = block.words;\n\t                var blockWordsLength = blockWords.length;\n\n\t                // Iterations\n\t                var intermediate = block;\n\t                for (var i = 1; i < iterations; i++) {\n\t                    intermediate = hmac.finalize(intermediate);\n\t                    hmac.reset();\n\n\t                    // Shortcut\n\t                    var intermediateWords = intermediate.words;\n\n\t                    // XOR intermediate with block\n\t                    for (var j = 0; j < blockWordsLength; j++) {\n\t                        blockWords[j] ^= intermediateWords[j];\n\t                    }\n\t                }\n\n\t                derivedKey.concat(block);\n\t                blockIndexWords[0]++;\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Computes the Password-Based Key Derivation Function 2.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.PBKDF2(password, salt);\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.PBKDF2 = function (password, salt, cfg) {\n\t        return PBKDF2.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.PBKDF2;\n\n}));","start":1670465468964,"end":1670465469144},{"name":"vite:react-babel","result":";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA1 = C_algo.SHA1;\n\t    var HMAC = C_algo.HMAC;\n\n\t    /**\n\t     * Password-Based Key Derivation Function 2 algorithm.\n\t     */\n\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hasher to use. Default: SHA1\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: SHA1,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create();\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Computes the Password-Based Key Derivation Function 2.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init HMAC\n\t            var hmac = HMAC.create(cfg.hasher, password);\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\t            var blockIndex = WordArray.create([0x00000001]);\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var blockIndexWords = blockIndex.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                var block = hmac.update(salt).finalize(blockIndex);\n\t                hmac.reset();\n\n\t                // Shortcuts\n\t                var blockWords = block.words;\n\t                var blockWordsLength = blockWords.length;\n\n\t                // Iterations\n\t                var intermediate = block;\n\t                for (var i = 1; i < iterations; i++) {\n\t                    intermediate = hmac.finalize(intermediate);\n\t                    hmac.reset();\n\n\t                    // Shortcut\n\t                    var intermediateWords = intermediate.words;\n\n\t                    // XOR intermediate with block\n\t                    for (var j = 0; j < blockWordsLength; j++) {\n\t                        blockWords[j] ^= intermediateWords[j];\n\t                    }\n\t                }\n\n\t                derivedKey.concat(block);\n\t                blockIndexWords[0]++;\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Computes the Password-Based Key Derivation Function 2.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.PBKDF2(password, salt);\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.PBKDF2 = function (password, salt, cfg) {\n\t        return PBKDF2.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.PBKDF2;\n\n}));","start":1670465469144,"end":1670465469144,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as pbkdf2Module, exports as pbkdf2 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/pbkdf2.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/core.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/sha1.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/hmac.js?commonjs-wrapped\";\n\nvar hasRequiredPbkdf2;\n\nfunction requirePbkdf2 () {\n\tif (hasRequiredPbkdf2) return pbkdf2;\n\thasRequiredPbkdf2 = 1;\n\t(function (module, exports) {\n\t\t;(function (root, factory, undef) {\n\t\t\tif ('object' === \"object\") {\n\t\t\t\t// CommonJS\n\t\t\t\tmodule.exports = exports = factory(require$$0(), require$$1(), require$$2());\n\t\t\t}\n\t\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t\t// AMD\n\t\t\t\tundefined([\"./core\", \"./sha1\", \"./hmac\"], factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Global (browser)\n\t\t\t\tfactory(root.CryptoJS);\n\t\t\t}\n\t\t}(commonjsHelpers.commonjsGlobal, function (CryptoJS) {\n\n\t\t\t(function () {\n\t\t\t    // Shortcuts\n\t\t\t    var C = CryptoJS;\n\t\t\t    var C_lib = C.lib;\n\t\t\t    var Base = C_lib.Base;\n\t\t\t    var WordArray = C_lib.WordArray;\n\t\t\t    var C_algo = C.algo;\n\t\t\t    var SHA1 = C_algo.SHA1;\n\t\t\t    var HMAC = C_algo.HMAC;\n\n\t\t\t    /**\n\t\t\t     * Password-Based Key Derivation Function 2 algorithm.\n\t\t\t     */\n\t\t\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n\t\t\t        /**\n\t\t\t         * Configuration options.\n\t\t\t         *\n\t\t\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t\t\t         * @property {Hasher} hasher The hasher to use. Default: SHA1\n\t\t\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t\t\t         */\n\t\t\t        cfg: Base.extend({\n\t\t\t            keySize: 128/32,\n\t\t\t            hasher: SHA1,\n\t\t\t            iterations: 1\n\t\t\t        }),\n\n\t\t\t        /**\n\t\t\t         * Initializes a newly created key derivation function.\n\t\t\t         *\n\t\t\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var kdf = CryptoJS.algo.PBKDF2.create();\n\t\t\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n\t\t\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n\t\t\t         */\n\t\t\t        init: function (cfg) {\n\t\t\t            this.cfg = this.cfg.extend(cfg);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Computes the Password-Based Key Derivation Function 2.\n\t\t\t         *\n\t\t\t         * @param {WordArray|string} password The password.\n\t\t\t         * @param {WordArray|string} salt A salt.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The derived key.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var key = kdf.compute(password, salt);\n\t\t\t         */\n\t\t\t        compute: function (password, salt) {\n\t\t\t            // Shortcut\n\t\t\t            var cfg = this.cfg;\n\n\t\t\t            // Init HMAC\n\t\t\t            var hmac = HMAC.create(cfg.hasher, password);\n\n\t\t\t            // Initial values\n\t\t\t            var derivedKey = WordArray.create();\n\t\t\t            var blockIndex = WordArray.create([0x00000001]);\n\n\t\t\t            // Shortcuts\n\t\t\t            var derivedKeyWords = derivedKey.words;\n\t\t\t            var blockIndexWords = blockIndex.words;\n\t\t\t            var keySize = cfg.keySize;\n\t\t\t            var iterations = cfg.iterations;\n\n\t\t\t            // Generate key\n\t\t\t            while (derivedKeyWords.length < keySize) {\n\t\t\t                var block = hmac.update(salt).finalize(blockIndex);\n\t\t\t                hmac.reset();\n\n\t\t\t                // Shortcuts\n\t\t\t                var blockWords = block.words;\n\t\t\t                var blockWordsLength = blockWords.length;\n\n\t\t\t                // Iterations\n\t\t\t                var intermediate = block;\n\t\t\t                for (var i = 1; i < iterations; i++) {\n\t\t\t                    intermediate = hmac.finalize(intermediate);\n\t\t\t                    hmac.reset();\n\n\t\t\t                    // Shortcut\n\t\t\t                    var intermediateWords = intermediate.words;\n\n\t\t\t                    // XOR intermediate with block\n\t\t\t                    for (var j = 0; j < blockWordsLength; j++) {\n\t\t\t                        blockWords[j] ^= intermediateWords[j];\n\t\t\t                    }\n\t\t\t                }\n\n\t\t\t                derivedKey.concat(block);\n\t\t\t                blockIndexWords[0]++;\n\t\t\t            }\n\t\t\t            derivedKey.sigBytes = keySize * 4;\n\n\t\t\t            return derivedKey;\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Computes the Password-Based Key Derivation Function 2.\n\t\t\t     *\n\t\t\t     * @param {WordArray|string} password The password.\n\t\t\t     * @param {WordArray|string} salt A salt.\n\t\t\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t\t\t     *\n\t\t\t     * @return {WordArray} The derived key.\n\t\t\t     *\n\t\t\t     * @static\n\t\t\t     *\n\t\t\t     * @example\n\t\t\t     *\n\t\t\t     *     var key = CryptoJS.PBKDF2(password, salt);\n\t\t\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n\t\t\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n\t\t\t     */\n\t\t\t    C.PBKDF2 = function (password, salt, cfg) {\n\t\t\t        return PBKDF2.create(cfg).compute(password, salt);\n\t\t\t    };\n\t\t\t}());\n\n\n\t\t\treturn CryptoJS.PBKDF2;\n\n\t\t}));\n} (pbkdf2Module, pbkdf2));\n\treturn pbkdf2;\n}\n\nexport { requirePbkdf2 as __require };","start":1670465469144,"end":1670465469146,"order":"normal"}]}
