{"resolvedId":"/home/jdw/Code/dxos/dxos/packages/apps/halo-app/src/pages/IdentityPage.tsx","transforms":[{"name":"vite:load-fallback","result":"//\n// Copyright 2022 DXOS.org\n//\n\nimport { Activity, Eraser } from 'phosphor-react';\nimport React, { useCallback } from 'react';\n\nimport { BASE_TELEMETRY_PROPERTIES, DX_TELEMETRY, getTelemetryIdentifier } from '@dxos/react-appkit';\nimport { useClient, useIdentity } from '@dxos/react-client';\nimport { useTranslation, Button, getSize, Input, AlertDialog, Avatar, defaultGroup } from '@dxos/react-uikit';\nimport * as Telemetry from '@dxos/telemetry';\nimport { humanize } from '@dxos/util';\n\nconst IdentityPage = () => {\n  const client = useClient();\n  const profile = useIdentity();\n  const profileHex = profile!.identityKey.toHex();\n  const telemetryDisabled = DX_TELEMETRY === 'true';\n  const { t } = useTranslation('halo');\n\n  const confirmString = humanize(profile!.identityKey.toHex());\n\n  const onChangeDisplayName = useCallback(\n    (nextValue: string) => {\n      if (profile) {\n        // TODO(thure): This doesn't appear to be a property with a setter, and I can't find a setter method for this, but it does persist at least in memory.\n        profile.displayName = nextValue;\n      }\n    },\n    [profile]\n  );\n\n  return (\n    <div role='none' className='flex flex-col items-center gap-2 max-is-lg mli-auto pli-7 pbs-4'>\n      {/* TODO(wittjosiah): Update with device invite. */}\n      <Avatar\n        size={32}\n        variant='circle'\n        fallbackValue={profileHex}\n        label={profile?.displayName ?? humanize(profileHex)}\n        slots={{ root: { className: defaultGroup({ elevation: 3, spacing: 'p-1', rounding: 'rounded-full' }) } }}\n      />\n      <Input\n        label={t('displayName label', { ns: 'uikit' })}\n        placeholder={humanize(profileHex)}\n        initialValue={profile?.displayName}\n        onChange={onChangeDisplayName}\n        slots={{ root: { className: 'w-full' } }}\n      />\n      {/* TODO(wittjosiah): Allow updating displayName. */}\n      {/* {displayName !== profile?.displayName && (\n          <Button\n            variant='outlined'\n            fullWidth\n            onClick={() => client.halo.setGlobalPreference('displayName', displayName)}\n          >Update</Button>\n        )} */}\n      <AlertDialog\n        title={telemetryDisabled ? t('enable telemetry label') : t('disable telemetry label')}\n        description={telemetryDisabled ? t('enable telemetry description') : t('disable telemetry description')}\n        openTrigger={\n          <Button variant='outline' className='flex gap-1 w-full'>\n            <Activity className={getSize(5)} />\n            {telemetryDisabled ? t('enable telemetry label') : t('disable telemetry label')}\n          </Button>\n        }\n        cancelTrigger={<Button>{t('cancel label', { ns: 'uikit' })}</Button>}\n        confirmTrigger={\n          <Button\n            onClick={() => {\n              Telemetry.event({\n                identityId: getTelemetryIdentifier(client),\n                name: 'halo-app:telemetry:toggle',\n                properties: {\n                  ...BASE_TELEMETRY_PROPERTIES,\n                  value: !telemetryDisabled\n                }\n              });\n              localStorage.setItem('halo-app:telemetry-disabled', String(!telemetryDisabled));\n              window.location.reload();\n            }}\n            className='text-error-700 dark:text-error-400'\n          >\n            {telemetryDisabled ? t('enable telemetry label') : t('disable telemetry label')}\n          </Button>\n        }\n      />\n      <AlertDialog\n        title={t('reset device label')}\n        openTrigger={\n          <Button variant='outline' className='flex gap-1 w-full'>\n            <Eraser className={getSize(5)} />\n            {t('reset device label')}\n          </Button>\n        }\n        destructiveConfirmString={confirmString}\n        destructiveConfirmInputProps={{\n          label: t('confirm reset device label', { confirmString })\n        }}\n        cancelTrigger={<Button>{t('cancel label', { ns: 'uikit' })}</Button>}\n        confirmTrigger={\n          <Button\n            onClick={async () => {\n              await client.reset();\n              window.location.reload();\n            }}\n            className='text-error-700 dark:text-error-400'\n          >\n            {t('reset device label')}\n          </Button>\n        }\n      />\n    </div>\n  );\n};\n\nexport default IdentityPage;\n","start":1670465438377,"end":1670465438641},{"name":"vite:react-babel","result":"//\n// Copyright 2022 DXOS.org\n//\n\nimport { Activity, Eraser } from 'phosphor-react';\nimport React, { useCallback } from 'react';\nimport { BASE_TELEMETRY_PROPERTIES, DX_TELEMETRY, getTelemetryIdentifier } from '@dxos/react-appkit';\nimport { useClient, useIdentity } from '@dxos/react-client';\nimport { useTranslation, Button, getSize, Input, AlertDialog, Avatar, defaultGroup } from '@dxos/react-uikit';\nimport * as Telemetry from '@dxos/telemetry';\nimport { humanize } from '@dxos/util';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst IdentityPage = () => {\n  const client = useClient();\n  const profile = useIdentity();\n  const profileHex = profile!.identityKey.toHex();\n  const telemetryDisabled = DX_TELEMETRY === 'true';\n  const {\n    t\n  } = useTranslation('halo');\n  const confirmString = humanize(profile!.identityKey.toHex());\n  const onChangeDisplayName = useCallback((nextValue: string) => {\n    if (profile) {\n      // TODO(thure): This doesn't appear to be a property with a setter, and I can't find a setter method for this, but it does persist at least in memory.\n      profile.displayName = nextValue;\n    }\n  }, [profile]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    role: \"none\",\n    className: \"flex flex-col items-center gap-2 max-is-lg mli-auto pli-7 pbs-4\",\n    children: [/*#__PURE__*/_jsx(Avatar, {\n      size: 32,\n      variant: \"circle\",\n      fallbackValue: profileHex,\n      label: profile?.displayName ?? humanize(profileHex),\n      slots: {\n        root: {\n          className: defaultGroup({\n            elevation: 3,\n            spacing: 'p-1',\n            rounding: 'rounded-full'\n          })\n        }\n      }\n    }), /*#__PURE__*/_jsx(Input, {\n      label: t('displayName label', {\n        ns: 'uikit'\n      }),\n      placeholder: humanize(profileHex),\n      initialValue: profile?.displayName,\n      onChange: onChangeDisplayName,\n      slots: {\n        root: {\n          className: 'w-full'\n        }\n      }\n    }), /*#__PURE__*/_jsx(AlertDialog, {\n      title: telemetryDisabled ? t('enable telemetry label') : t('disable telemetry label'),\n      description: telemetryDisabled ? t('enable telemetry description') : t('disable telemetry description'),\n      openTrigger: /*#__PURE__*/_jsxs(Button, {\n        variant: \"outline\",\n        className: \"flex gap-1 w-full\",\n        children: [/*#__PURE__*/_jsx(Activity, {\n          className: getSize(5)\n        }), telemetryDisabled ? t('enable telemetry label') : t('disable telemetry label')]\n      }),\n      cancelTrigger: /*#__PURE__*/_jsx(Button, {\n        children: t('cancel label', {\n          ns: 'uikit'\n        })\n      }),\n      confirmTrigger: /*#__PURE__*/_jsx(Button, {\n        onClick: () => {\n          Telemetry.event({\n            identityId: getTelemetryIdentifier(client),\n            name: 'halo-app:telemetry:toggle',\n            properties: {\n              ...BASE_TELEMETRY_PROPERTIES,\n              value: !telemetryDisabled\n            }\n          });\n          localStorage.setItem('halo-app:telemetry-disabled', String(!telemetryDisabled));\n          window.location.reload();\n        },\n        className: \"text-error-700 dark:text-error-400\",\n        children: telemetryDisabled ? t('enable telemetry label') : t('disable telemetry label')\n      })\n    }), /*#__PURE__*/_jsx(AlertDialog, {\n      title: t('reset device label'),\n      openTrigger: /*#__PURE__*/_jsxs(Button, {\n        variant: \"outline\",\n        className: \"flex gap-1 w-full\",\n        children: [/*#__PURE__*/_jsx(Eraser, {\n          className: getSize(5)\n        }), t('reset device label')]\n      }),\n      destructiveConfirmString: confirmString,\n      destructiveConfirmInputProps: {\n        label: t('confirm reset device label', {\n          confirmString\n        })\n      },\n      cancelTrigger: /*#__PURE__*/_jsx(Button, {\n        children: t('cancel label', {\n          ns: 'uikit'\n        })\n      }),\n      confirmTrigger: /*#__PURE__*/_jsx(Button, {\n        onClick: async () => {\n          await client.reset();\n          window.location.reload();\n        },\n        className: \"text-error-700 dark:text-error-400\",\n        children: t('reset device label')\n      })\n    })]\n  });\n};\nexport default IdentityPage;","start":1670465438642,"end":1670465438655,"order":"pre"},{"name":"vite:esbuild","result":"import { Activity, Eraser } from \"phosphor-react\";\nimport { useCallback } from \"react\";\nimport { BASE_TELEMETRY_PROPERTIES, DX_TELEMETRY, getTelemetryIdentifier } from \"@dxos/react-appkit\";\nimport { useClient, useIdentity } from \"@dxos/react-client\";\nimport { useTranslation, Button, getSize, Input, AlertDialog, Avatar, defaultGroup } from \"@dxos/react-uikit\";\nimport * as Telemetry from \"@dxos/telemetry\";\nimport { humanize } from \"@dxos/util\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst IdentityPage = () => {\n  const client = useClient();\n  const profile = useIdentity();\n  const profileHex = profile.identityKey.toHex();\n  const telemetryDisabled = DX_TELEMETRY === \"true\";\n  const {\n    t\n  } = useTranslation(\"halo\");\n  const confirmString = humanize(profile.identityKey.toHex());\n  const onChangeDisplayName = useCallback((nextValue) => {\n    if (profile) {\n      profile.displayName = nextValue;\n    }\n  }, [profile]);\n  return /* @__PURE__ */ _jsxs(\"div\", {\n    role: \"none\",\n    className: \"flex flex-col items-center gap-2 max-is-lg mli-auto pli-7 pbs-4\",\n    children: [/* @__PURE__ */ _jsx(Avatar, {\n      size: 32,\n      variant: \"circle\",\n      fallbackValue: profileHex,\n      label: profile?.displayName ?? humanize(profileHex),\n      slots: {\n        root: {\n          className: defaultGroup({\n            elevation: 3,\n            spacing: \"p-1\",\n            rounding: \"rounded-full\"\n          })\n        }\n      }\n    }), /* @__PURE__ */ _jsx(Input, {\n      label: t(\"displayName label\", {\n        ns: \"uikit\"\n      }),\n      placeholder: humanize(profileHex),\n      initialValue: profile?.displayName,\n      onChange: onChangeDisplayName,\n      slots: {\n        root: {\n          className: \"w-full\"\n        }\n      }\n    }), /* @__PURE__ */ _jsx(AlertDialog, {\n      title: telemetryDisabled ? t(\"enable telemetry label\") : t(\"disable telemetry label\"),\n      description: telemetryDisabled ? t(\"enable telemetry description\") : t(\"disable telemetry description\"),\n      openTrigger: /* @__PURE__ */ _jsxs(Button, {\n        variant: \"outline\",\n        className: \"flex gap-1 w-full\",\n        children: [/* @__PURE__ */ _jsx(Activity, {\n          className: getSize(5)\n        }), telemetryDisabled ? t(\"enable telemetry label\") : t(\"disable telemetry label\")]\n      }),\n      cancelTrigger: /* @__PURE__ */ _jsx(Button, {\n        children: t(\"cancel label\", {\n          ns: \"uikit\"\n        })\n      }),\n      confirmTrigger: /* @__PURE__ */ _jsx(Button, {\n        onClick: () => {\n          Telemetry.event({\n            identityId: getTelemetryIdentifier(client),\n            name: \"halo-app:telemetry:toggle\",\n            properties: {\n              ...BASE_TELEMETRY_PROPERTIES,\n              value: !telemetryDisabled\n            }\n          });\n          localStorage.setItem(\"halo-app:telemetry-disabled\", String(!telemetryDisabled));\n          window.location.reload();\n        },\n        className: \"text-error-700 dark:text-error-400\",\n        children: telemetryDisabled ? t(\"enable telemetry label\") : t(\"disable telemetry label\")\n      })\n    }), /* @__PURE__ */ _jsx(AlertDialog, {\n      title: t(\"reset device label\"),\n      openTrigger: /* @__PURE__ */ _jsxs(Button, {\n        variant: \"outline\",\n        className: \"flex gap-1 w-full\",\n        children: [/* @__PURE__ */ _jsx(Eraser, {\n          className: getSize(5)\n        }), t(\"reset device label\")]\n      }),\n      destructiveConfirmString: confirmString,\n      destructiveConfirmInputProps: {\n        label: t(\"confirm reset device label\", {\n          confirmString\n        })\n      },\n      cancelTrigger: /* @__PURE__ */ _jsx(Button, {\n        children: t(\"cancel label\", {\n          ns: \"uikit\"\n        })\n      }),\n      confirmTrigger: /* @__PURE__ */ _jsx(Button, {\n        onClick: async () => {\n          await client.reset();\n          window.location.reload();\n        },\n        className: \"text-error-700 dark:text-error-400\",\n        children: t(\"reset device label\")\n      })\n    })]\n  });\n};\nexport default IdentityPage;\n","start":1670465438655,"end":1670465438904,"order":"normal"}]}
