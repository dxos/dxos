{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/noise-protocol@3.0.1/node_modules/noise-protocol/handshake-state.js","transforms":[{"name":"vite:load-fallback","result":"/* eslint-disable camelcase */\nconst { sodium_malloc, sodium_memzero, sodium_free } = require('sodium-universal/memory')\nconst assert = require('nanoassert')\nconst clone = require('clone')\nconst symmetricState = require('./symmetric-state')\nconst cipherState = require('./cipher-state')\nconst dh = require('./dh')\n\nconst PKLEN = dh.PKLEN\nconst SKLEN = dh.SKLEN\n\nmodule.exports = Object.freeze({\n  initialize,\n  writeMessage,\n  readMessage,\n  destroy,\n  keygen,\n  seedKeygen,\n  SKLEN,\n  PKLEN\n})\n\nfunction HandshakeState () {\n  this.symmetricState = sodium_malloc(symmetricState.STATELEN)\n\n  this.initiator = null\n\n  this.spk = null\n  this.ssk = null\n\n  this.epk = null\n  this.esk = null\n\n  this.rs = null\n  this.re = null\n\n  this.messagePatterns = null\n}\n\nconst INITIATOR = Symbol('initiator')\nconst RESPONDER = Symbol('responder')\n\nconst TOK_S = Symbol('s')\nconst TOK_E = Symbol('e')\nconst TOK_ES = Symbol('es')\nconst TOK_SE = Symbol('se')\nconst TOK_EE = Symbol('ee')\nconst TOK_SS = Symbol('es')\n\n// initiator, ->\n// responder, <-\nvar PATTERNS = Object.freeze({\n  N: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES]\n    ]\n  },\n  K: {\n    premessages: [\n      [INITIATOR, TOK_S],\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES, TOK_SS]\n    ]\n  },\n  X: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES, TOK_S, TOK_SS]\n    ]\n  },\n  NN: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE]\n    ]\n  },\n  KN: {\n    premessages: [\n      [INITIATOR, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE]\n    ]\n  },\n  NK: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES],\n      [RESPONDER, TOK_E, TOK_EE]\n    ]\n  },\n  KK: {\n    premessages: [\n      [INITIATOR, TOK_S],\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES, TOK_SS],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE]\n    ]\n  },\n  NX: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE, TOK_S, TOK_ES]\n    ]\n  },\n  KX: {\n    premessages: [\n      [INITIATOR, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE, TOK_S, TOK_ES]\n    ]\n  },\n  XN: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE],\n      [INITIATOR, TOK_S, TOK_SE]\n    ]\n  },\n  IN: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_S],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE]\n    ]\n  },\n  XK: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES],\n      [RESPONDER, TOK_E, TOK_EE],\n      [INITIATOR, TOK_S, TOK_SE]\n    ]\n  },\n  IK: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES, TOK_S, TOK_SS],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE]\n    ]\n  },\n  XX: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE, TOK_S, TOK_ES],\n      [INITIATOR, TOK_S, TOK_SE]\n    ]\n  },\n  IX: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_S],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE, TOK_S, TOK_ES]\n    ]\n  }\n})\n\nfunction sodiumBufferCopy (src) {\n  var buf = sodium_malloc(src.byteLength)\n  buf.set(src)\n  return buf\n}\n\nfunction initialize (handshakePattern, initiator, prologue, s, e, rs, re) {\n  assert(Object.keys(PATTERNS).includes(handshakePattern), 'Unsupported handshake pattern')\n  assert(typeof initiator === 'boolean', 'Initiator must be a boolean')\n  assert(prologue.byteLength != null, 'prolouge must be a Buffer')\n\n  assert(e == null ? true : e.publicKey.byteLength === dh.PKLEN, `e.publicKey must be ${dh.PKLEN} bytes`)\n  assert(e == null ? true : e.secretKey.byteLength === dh.SKLEN, `e.secretKey must be ${dh.SKLEN} bytes`)\n\n  assert(rs == null ? true : rs.byteLength === dh.PKLEN, `rs must be ${dh.PKLEN} bytes`)\n  assert(re == null ? true : re.byteLength === dh.PKLEN, `re must be ${dh.PKLEN} bytes`)\n\n  var state = new HandshakeState()\n\n  var protocolName = Uint8Array.from(`Noise_${handshakePattern}_25519_ChaChaPoly_BLAKE2b`, toCharCode)\n\n  symmetricState.initializeSymmetric(state.symmetricState, protocolName)\n  symmetricState.mixHash(state.symmetricState, prologue)\n\n  state.role = initiator === true ? INITIATOR : RESPONDER\n\n  if (s != null) {\n    assert(s.publicKey.byteLength === dh.PKLEN, `s.publicKey must be ${dh.PKLEN} bytes`)\n    assert(s.secretKey.byteLength === dh.SKLEN, `s.secretKey must be ${dh.SKLEN} bytes`)\n\n    state.spk = sodiumBufferCopy(s.publicKey)\n    state.ssk = sodiumBufferCopy(s.secretKey)\n  }\n\n  if (e != null) {\n    assert(e.publicKey.byteLength === dh.PKLEN)\n    assert(e.secretKey.byteLength === dh.SKLEN)\n\n    state.epk = sodiumBufferCopy(e.publicKey)\n    state.esk = sodiumBufferCopy(e.secretKey)\n  }\n\n  if (rs != null) {\n    assert(rs.byteLength === dh.PKLEN)\n    state.rs = sodiumBufferCopy(rs)\n  }\n  if (re != null) {\n    assert(re.byteLength === dh.PKLEN)\n    state.re = sodiumBufferCopy(re)\n  }\n\n  // hashing\n  var pat = PATTERNS[handshakePattern]\n\n  for (var pattern of clone(pat.premessages)) {\n    var patternRole = pattern.shift()\n\n    for (var token of pattern) {\n      switch (token) {\n        case TOK_E:\n          assert(state.role === patternRole ? state.epk.byteLength != null : state.re.byteLength != null)\n          symmetricState.mixHash(state.symmetricState, state.role === patternRole ? state.epk : state.re)\n          break\n        case TOK_S:\n          assert(state.role === patternRole ? state.spk.byteLength != null : state.rs.byteLength != null)\n          symmetricState.mixHash(state.symmetricState, state.role === patternRole ? state.spk : state.rs)\n          break\n        default:\n          throw new Error('Invalid premessage pattern')\n      }\n    }\n  }\n\n  state.messagePatterns = clone(pat.messagePatterns)\n\n  assert(state.messagePatterns.filter(p => p[0] === INITIATOR).some(p => p.includes(TOK_S))\n    ? (state.spk !== null && state.ssk !== null)\n    : true, // Default if none is found\n  'This handshake pattern requires a static keypair')\n\n  return state\n}\n\nvar DhResult = sodium_malloc(dh.DHLEN)\nfunction writeMessage (state, payload, messageBuffer) {\n  assert(state instanceof HandshakeState)\n  assert(payload.byteLength != null)\n  assert(messageBuffer.byteLength != null)\n\n  var mpat = state.messagePatterns.shift()\n  var moffset = 0\n\n  assert(mpat != null)\n\n  assert(state.role === mpat.shift())\n\n  for (var token of mpat) {\n    switch (token) {\n      case TOK_E:\n        assert(state.epk == null)\n        assert(state.esk == null)\n\n        state.epk = sodium_malloc(dh.PKLEN)\n        state.esk = sodium_malloc(dh.SKLEN)\n\n        dh.generateKeypair(state.epk, state.esk)\n\n        messageBuffer.set(state.epk, moffset)\n        moffset += state.epk.byteLength\n\n        symmetricState.mixHash(state.symmetricState, state.epk)\n\n        break\n\n      case TOK_S:\n        assert(state.spk.byteLength === dh.PKLEN)\n\n        symmetricState.encryptAndHash(state.symmetricState, messageBuffer.subarray(moffset), state.spk)\n        moffset += symmetricState.encryptAndHash.bytesWritten\n\n        break\n\n      case TOK_EE:\n        dh.dh(DhResult, state.esk, state.re)\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_ES:\n        if (state.role === INITIATOR) dh.dh(DhResult, state.esk, state.rs)\n        else dh.dh(DhResult, state.ssk, state.re)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_SE:\n        if (state.role === INITIATOR) dh.dh(DhResult, state.ssk, state.re)\n        else dh.dh(DhResult, state.esk, state.rs)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_SS:\n        dh.dh(DhResult, state.ssk, state.rs)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n\n      default:\n        throw new Error('Invalid message pattern')\n    }\n  }\n\n  symmetricState.encryptAndHash(state.symmetricState, messageBuffer.subarray(moffset), payload)\n  moffset += symmetricState.encryptAndHash.bytesWritten\n\n  writeMessage.bytes = moffset\n\n  if (state.messagePatterns.length === 0) {\n    var tx = sodium_malloc(cipherState.STATELEN)\n    var rx = sodium_malloc(cipherState.STATELEN)\n    symmetricState.split(state.symmetricState, tx, rx)\n\n    return { tx, rx }\n  }\n}\nwriteMessage.bytes = 0\n\nfunction readMessage (state, message, payloadBuffer) {\n  assert(state instanceof HandshakeState)\n  assert(message.byteLength != null)\n  assert(payloadBuffer.byteLength != null)\n\n  var mpat = state.messagePatterns.shift()\n  var moffset = 0\n\n  assert(mpat != null)\n  assert(mpat.shift() !== state.role)\n\n  for (var token of mpat) {\n    switch (token) {\n      case TOK_E:\n        assert(state.re == null)\n        assert(message.byteLength - moffset >= dh.PKLEN)\n\n        // PKLEN instead of DHLEN since they are different in out case\n        state.re = sodium_malloc(dh.PKLEN)\n        state.re.set(message.subarray(moffset, moffset + dh.PKLEN))\n        moffset += dh.PKLEN\n\n        symmetricState.mixHash(state.symmetricState, state.re)\n\n        break\n\n      case TOK_S:\n        assert(state.rs == null)\n        state.rs = sodium_malloc(dh.PKLEN)\n\n        var bytes = 0\n        if (symmetricState._hasKey(state.symmetricState)) {\n          bytes = dh.PKLEN + 16\n        } else {\n          bytes = dh.PKLEN\n        }\n\n        assert(message.byteLength - moffset >= bytes)\n\n        symmetricState.decryptAndHash(\n          state.symmetricState,\n          state.rs,\n          message.subarray(moffset, moffset + bytes) // <- called temp in noise spec\n        )\n\n        moffset += symmetricState.decryptAndHash.bytesRead\n\n        break\n      case TOK_EE:\n        dh.dh(DhResult, state.esk, state.re)\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_ES:\n        if (state.role === INITIATOR) dh.dh(DhResult, state.esk, state.rs)\n        else dh.dh(DhResult, state.ssk, state.re)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_SE:\n        if (state.role === INITIATOR) dh.dh(DhResult, state.ssk, state.re)\n        else dh.dh(DhResult, state.esk, state.rs)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_SS:\n        dh.dh(DhResult, state.ssk, state.rs)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n\n      default:\n        throw new Error('Invalid message pattern')\n    }\n  }\n\n  symmetricState.decryptAndHash(state.symmetricState, payloadBuffer, message.subarray(moffset))\n\n  // How many bytes were written to payload (minus the TAG/MAC)\n  readMessage.bytes = symmetricState.decryptAndHash.bytesWritten\n\n  if (state.messagePatterns.length === 0) {\n    var tx = sodium_malloc(cipherState.STATELEN)\n    var rx = sodium_malloc(cipherState.STATELEN)\n    symmetricState.split(state.symmetricState, rx, tx)\n\n    return { tx, rx }\n  }\n}\nreadMessage.bytes = 0\n\nfunction destroy (state) {\n  if (state.symmetricState != null) {\n    sodium_free(state.symmetricState)\n    state.symmetricState = null\n  }\n\n  state.role = null\n\n  if (state.spk != null) {\n    sodium_free(state.spk)\n    state.spk = null\n  }\n\n  if (state.ssk != null) {\n    sodium_free(state.ssk)\n    state.ssk = null\n  }\n\n  if (state.epk != null) {\n    sodium_free(state.epk)\n    state.epk = null\n  }\n\n  if (state.esk != null) {\n    sodium_free(state.esk)\n    state.esk = null\n  }\n\n  if (state.rs != null) {\n    sodium_free(state.rs)\n    state.rs = null\n  }\n\n  if (state.re != null) {\n    sodium_free(state.re)\n    state.re = null\n  }\n\n  state.messagePatterns = null\n}\n\nfunction keygen (obj, sk) {\n  if (!obj) {\n    obj = { publicKey: sodium_malloc(PKLEN), secretKey: sodium_malloc(SKLEN) }\n    return keygen(obj)\n  }\n\n  if (obj.publicKey) {\n    dh.generateKeypair(obj.publicKey, obj.secretKey)\n    return obj\n  }\n\n  if (obj.byteLength != null) dh.generateKeypair(null, obj)\n}\n\nfunction seedKeygen (seed) {\n  var obj = { publicKey: sodium_malloc(PKLEN), secretKey: sodium_malloc(SKLEN) }\n  dh.generateSeedKeypair(obj.publicKey, obj.secretKey, seed)\n  return obj\n}\n\nfunction toCharCode (s) {\n  return s.charCodeAt(0)\n}\n","start":1670465471308,"end":1670465471664},{"name":"vite:react-babel","result":"/* eslint-disable camelcase */\nconst { sodium_malloc, sodium_memzero, sodium_free } = require('sodium-universal/memory')\nconst assert = require('nanoassert')\nconst clone = require('clone')\nconst symmetricState = require('./symmetric-state')\nconst cipherState = require('./cipher-state')\nconst dh = require('./dh')\n\nconst PKLEN = dh.PKLEN\nconst SKLEN = dh.SKLEN\n\nmodule.exports = Object.freeze({\n  initialize,\n  writeMessage,\n  readMessage,\n  destroy,\n  keygen,\n  seedKeygen,\n  SKLEN,\n  PKLEN\n})\n\nfunction HandshakeState () {\n  this.symmetricState = sodium_malloc(symmetricState.STATELEN)\n\n  this.initiator = null\n\n  this.spk = null\n  this.ssk = null\n\n  this.epk = null\n  this.esk = null\n\n  this.rs = null\n  this.re = null\n\n  this.messagePatterns = null\n}\n\nconst INITIATOR = Symbol('initiator')\nconst RESPONDER = Symbol('responder')\n\nconst TOK_S = Symbol('s')\nconst TOK_E = Symbol('e')\nconst TOK_ES = Symbol('es')\nconst TOK_SE = Symbol('se')\nconst TOK_EE = Symbol('ee')\nconst TOK_SS = Symbol('es')\n\n// initiator, ->\n// responder, <-\nvar PATTERNS = Object.freeze({\n  N: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES]\n    ]\n  },\n  K: {\n    premessages: [\n      [INITIATOR, TOK_S],\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES, TOK_SS]\n    ]\n  },\n  X: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES, TOK_S, TOK_SS]\n    ]\n  },\n  NN: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE]\n    ]\n  },\n  KN: {\n    premessages: [\n      [INITIATOR, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE]\n    ]\n  },\n  NK: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES],\n      [RESPONDER, TOK_E, TOK_EE]\n    ]\n  },\n  KK: {\n    premessages: [\n      [INITIATOR, TOK_S],\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES, TOK_SS],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE]\n    ]\n  },\n  NX: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE, TOK_S, TOK_ES]\n    ]\n  },\n  KX: {\n    premessages: [\n      [INITIATOR, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE, TOK_S, TOK_ES]\n    ]\n  },\n  XN: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE],\n      [INITIATOR, TOK_S, TOK_SE]\n    ]\n  },\n  IN: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_S],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE]\n    ]\n  },\n  XK: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES],\n      [RESPONDER, TOK_E, TOK_EE],\n      [INITIATOR, TOK_S, TOK_SE]\n    ]\n  },\n  IK: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES, TOK_S, TOK_SS],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE]\n    ]\n  },\n  XX: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE, TOK_S, TOK_ES],\n      [INITIATOR, TOK_S, TOK_SE]\n    ]\n  },\n  IX: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_S],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE, TOK_S, TOK_ES]\n    ]\n  }\n})\n\nfunction sodiumBufferCopy (src) {\n  var buf = sodium_malloc(src.byteLength)\n  buf.set(src)\n  return buf\n}\n\nfunction initialize (handshakePattern, initiator, prologue, s, e, rs, re) {\n  assert(Object.keys(PATTERNS).includes(handshakePattern), 'Unsupported handshake pattern')\n  assert(typeof initiator === 'boolean', 'Initiator must be a boolean')\n  assert(prologue.byteLength != null, 'prolouge must be a Buffer')\n\n  assert(e == null ? true : e.publicKey.byteLength === dh.PKLEN, `e.publicKey must be ${dh.PKLEN} bytes`)\n  assert(e == null ? true : e.secretKey.byteLength === dh.SKLEN, `e.secretKey must be ${dh.SKLEN} bytes`)\n\n  assert(rs == null ? true : rs.byteLength === dh.PKLEN, `rs must be ${dh.PKLEN} bytes`)\n  assert(re == null ? true : re.byteLength === dh.PKLEN, `re must be ${dh.PKLEN} bytes`)\n\n  var state = new HandshakeState()\n\n  var protocolName = Uint8Array.from(`Noise_${handshakePattern}_25519_ChaChaPoly_BLAKE2b`, toCharCode)\n\n  symmetricState.initializeSymmetric(state.symmetricState, protocolName)\n  symmetricState.mixHash(state.symmetricState, prologue)\n\n  state.role = initiator === true ? INITIATOR : RESPONDER\n\n  if (s != null) {\n    assert(s.publicKey.byteLength === dh.PKLEN, `s.publicKey must be ${dh.PKLEN} bytes`)\n    assert(s.secretKey.byteLength === dh.SKLEN, `s.secretKey must be ${dh.SKLEN} bytes`)\n\n    state.spk = sodiumBufferCopy(s.publicKey)\n    state.ssk = sodiumBufferCopy(s.secretKey)\n  }\n\n  if (e != null) {\n    assert(e.publicKey.byteLength === dh.PKLEN)\n    assert(e.secretKey.byteLength === dh.SKLEN)\n\n    state.epk = sodiumBufferCopy(e.publicKey)\n    state.esk = sodiumBufferCopy(e.secretKey)\n  }\n\n  if (rs != null) {\n    assert(rs.byteLength === dh.PKLEN)\n    state.rs = sodiumBufferCopy(rs)\n  }\n  if (re != null) {\n    assert(re.byteLength === dh.PKLEN)\n    state.re = sodiumBufferCopy(re)\n  }\n\n  // hashing\n  var pat = PATTERNS[handshakePattern]\n\n  for (var pattern of clone(pat.premessages)) {\n    var patternRole = pattern.shift()\n\n    for (var token of pattern) {\n      switch (token) {\n        case TOK_E:\n          assert(state.role === patternRole ? state.epk.byteLength != null : state.re.byteLength != null)\n          symmetricState.mixHash(state.symmetricState, state.role === patternRole ? state.epk : state.re)\n          break\n        case TOK_S:\n          assert(state.role === patternRole ? state.spk.byteLength != null : state.rs.byteLength != null)\n          symmetricState.mixHash(state.symmetricState, state.role === patternRole ? state.spk : state.rs)\n          break\n        default:\n          throw new Error('Invalid premessage pattern')\n      }\n    }\n  }\n\n  state.messagePatterns = clone(pat.messagePatterns)\n\n  assert(state.messagePatterns.filter(p => p[0] === INITIATOR).some(p => p.includes(TOK_S))\n    ? (state.spk !== null && state.ssk !== null)\n    : true, // Default if none is found\n  'This handshake pattern requires a static keypair')\n\n  return state\n}\n\nvar DhResult = sodium_malloc(dh.DHLEN)\nfunction writeMessage (state, payload, messageBuffer) {\n  assert(state instanceof HandshakeState)\n  assert(payload.byteLength != null)\n  assert(messageBuffer.byteLength != null)\n\n  var mpat = state.messagePatterns.shift()\n  var moffset = 0\n\n  assert(mpat != null)\n\n  assert(state.role === mpat.shift())\n\n  for (var token of mpat) {\n    switch (token) {\n      case TOK_E:\n        assert(state.epk == null)\n        assert(state.esk == null)\n\n        state.epk = sodium_malloc(dh.PKLEN)\n        state.esk = sodium_malloc(dh.SKLEN)\n\n        dh.generateKeypair(state.epk, state.esk)\n\n        messageBuffer.set(state.epk, moffset)\n        moffset += state.epk.byteLength\n\n        symmetricState.mixHash(state.symmetricState, state.epk)\n\n        break\n\n      case TOK_S:\n        assert(state.spk.byteLength === dh.PKLEN)\n\n        symmetricState.encryptAndHash(state.symmetricState, messageBuffer.subarray(moffset), state.spk)\n        moffset += symmetricState.encryptAndHash.bytesWritten\n\n        break\n\n      case TOK_EE:\n        dh.dh(DhResult, state.esk, state.re)\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_ES:\n        if (state.role === INITIATOR) dh.dh(DhResult, state.esk, state.rs)\n        else dh.dh(DhResult, state.ssk, state.re)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_SE:\n        if (state.role === INITIATOR) dh.dh(DhResult, state.ssk, state.re)\n        else dh.dh(DhResult, state.esk, state.rs)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_SS:\n        dh.dh(DhResult, state.ssk, state.rs)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n\n      default:\n        throw new Error('Invalid message pattern')\n    }\n  }\n\n  symmetricState.encryptAndHash(state.symmetricState, messageBuffer.subarray(moffset), payload)\n  moffset += symmetricState.encryptAndHash.bytesWritten\n\n  writeMessage.bytes = moffset\n\n  if (state.messagePatterns.length === 0) {\n    var tx = sodium_malloc(cipherState.STATELEN)\n    var rx = sodium_malloc(cipherState.STATELEN)\n    symmetricState.split(state.symmetricState, tx, rx)\n\n    return { tx, rx }\n  }\n}\nwriteMessage.bytes = 0\n\nfunction readMessage (state, message, payloadBuffer) {\n  assert(state instanceof HandshakeState)\n  assert(message.byteLength != null)\n  assert(payloadBuffer.byteLength != null)\n\n  var mpat = state.messagePatterns.shift()\n  var moffset = 0\n\n  assert(mpat != null)\n  assert(mpat.shift() !== state.role)\n\n  for (var token of mpat) {\n    switch (token) {\n      case TOK_E:\n        assert(state.re == null)\n        assert(message.byteLength - moffset >= dh.PKLEN)\n\n        // PKLEN instead of DHLEN since they are different in out case\n        state.re = sodium_malloc(dh.PKLEN)\n        state.re.set(message.subarray(moffset, moffset + dh.PKLEN))\n        moffset += dh.PKLEN\n\n        symmetricState.mixHash(state.symmetricState, state.re)\n\n        break\n\n      case TOK_S:\n        assert(state.rs == null)\n        state.rs = sodium_malloc(dh.PKLEN)\n\n        var bytes = 0\n        if (symmetricState._hasKey(state.symmetricState)) {\n          bytes = dh.PKLEN + 16\n        } else {\n          bytes = dh.PKLEN\n        }\n\n        assert(message.byteLength - moffset >= bytes)\n\n        symmetricState.decryptAndHash(\n          state.symmetricState,\n          state.rs,\n          message.subarray(moffset, moffset + bytes) // <- called temp in noise spec\n        )\n\n        moffset += symmetricState.decryptAndHash.bytesRead\n\n        break\n      case TOK_EE:\n        dh.dh(DhResult, state.esk, state.re)\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_ES:\n        if (state.role === INITIATOR) dh.dh(DhResult, state.esk, state.rs)\n        else dh.dh(DhResult, state.ssk, state.re)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_SE:\n        if (state.role === INITIATOR) dh.dh(DhResult, state.ssk, state.re)\n        else dh.dh(DhResult, state.esk, state.rs)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_SS:\n        dh.dh(DhResult, state.ssk, state.rs)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n\n      default:\n        throw new Error('Invalid message pattern')\n    }\n  }\n\n  symmetricState.decryptAndHash(state.symmetricState, payloadBuffer, message.subarray(moffset))\n\n  // How many bytes were written to payload (minus the TAG/MAC)\n  readMessage.bytes = symmetricState.decryptAndHash.bytesWritten\n\n  if (state.messagePatterns.length === 0) {\n    var tx = sodium_malloc(cipherState.STATELEN)\n    var rx = sodium_malloc(cipherState.STATELEN)\n    symmetricState.split(state.symmetricState, rx, tx)\n\n    return { tx, rx }\n  }\n}\nreadMessage.bytes = 0\n\nfunction destroy (state) {\n  if (state.symmetricState != null) {\n    sodium_free(state.symmetricState)\n    state.symmetricState = null\n  }\n\n  state.role = null\n\n  if (state.spk != null) {\n    sodium_free(state.spk)\n    state.spk = null\n  }\n\n  if (state.ssk != null) {\n    sodium_free(state.ssk)\n    state.ssk = null\n  }\n\n  if (state.epk != null) {\n    sodium_free(state.epk)\n    state.epk = null\n  }\n\n  if (state.esk != null) {\n    sodium_free(state.esk)\n    state.esk = null\n  }\n\n  if (state.rs != null) {\n    sodium_free(state.rs)\n    state.rs = null\n  }\n\n  if (state.re != null) {\n    sodium_free(state.re)\n    state.re = null\n  }\n\n  state.messagePatterns = null\n}\n\nfunction keygen (obj, sk) {\n  if (!obj) {\n    obj = { publicKey: sodium_malloc(PKLEN), secretKey: sodium_malloc(SKLEN) }\n    return keygen(obj)\n  }\n\n  if (obj.publicKey) {\n    dh.generateKeypair(obj.publicKey, obj.secretKey)\n    return obj\n  }\n\n  if (obj.byteLength != null) dh.generateKeypair(null, obj)\n}\n\nfunction seedKeygen (seed) {\n  var obj = { publicKey: sodium_malloc(PKLEN), secretKey: sodium_malloc(SKLEN) }\n  dh.generateSeedKeypair(obj.publicKey, obj.secretKey, seed)\n  return obj\n}\n\nfunction toCharCode (s) {\n  return s.charCodeAt(0)\n}\n","start":1670465471664,"end":1670465471664,"order":"pre"},{"name":"commonjs","result":"/* eslint-disable camelcase */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-universal@3.1.0/node_modules/sodium-universal/memory.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoassert@2.0.0/node_modules/nanoassert/index.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/clone@2.1.2/node_modules/clone/clone.js?commonjs-proxy\";\nimport require$$3 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/noise-protocol@3.0.1/node_modules/noise-protocol/symmetric-state.js?commonjs-proxy\";\nimport require$$4 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/noise-protocol@3.0.1/node_modules/noise-protocol/cipher-state.js?commonjs-proxy\";\nimport require$$5 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/noise-protocol@3.0.1/node_modules/noise-protocol/dh.js?commonjs-proxy\";\n\nconst { sodium_malloc, sodium_memzero, sodium_free } = require$$0\nconst assert = require$$1\nconst clone = require$$2\nconst symmetricState = require$$3\nconst cipherState = require$$4\nconst dh = require$$5\n\nconst PKLEN = dh.PKLEN\nconst SKLEN = dh.SKLEN\n\nvar handshakeState = Object.freeze({\n  initialize,\n  writeMessage,\n  readMessage,\n  destroy,\n  keygen,\n  seedKeygen,\n  SKLEN,\n  PKLEN\n})\n\nfunction HandshakeState () {\n  this.symmetricState = sodium_malloc(symmetricState.STATELEN)\n\n  this.initiator = null\n\n  this.spk = null\n  this.ssk = null\n\n  this.epk = null\n  this.esk = null\n\n  this.rs = null\n  this.re = null\n\n  this.messagePatterns = null\n}\n\nconst INITIATOR = Symbol('initiator')\nconst RESPONDER = Symbol('responder')\n\nconst TOK_S = Symbol('s')\nconst TOK_E = Symbol('e')\nconst TOK_ES = Symbol('es')\nconst TOK_SE = Symbol('se')\nconst TOK_EE = Symbol('ee')\nconst TOK_SS = Symbol('es')\n\n// initiator, ->\n// responder, <-\nvar PATTERNS = Object.freeze({\n  N: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES]\n    ]\n  },\n  K: {\n    premessages: [\n      [INITIATOR, TOK_S],\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES, TOK_SS]\n    ]\n  },\n  X: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES, TOK_S, TOK_SS]\n    ]\n  },\n  NN: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE]\n    ]\n  },\n  KN: {\n    premessages: [\n      [INITIATOR, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE]\n    ]\n  },\n  NK: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES],\n      [RESPONDER, TOK_E, TOK_EE]\n    ]\n  },\n  KK: {\n    premessages: [\n      [INITIATOR, TOK_S],\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES, TOK_SS],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE]\n    ]\n  },\n  NX: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE, TOK_S, TOK_ES]\n    ]\n  },\n  KX: {\n    premessages: [\n      [INITIATOR, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE, TOK_S, TOK_ES]\n    ]\n  },\n  XN: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE],\n      [INITIATOR, TOK_S, TOK_SE]\n    ]\n  },\n  IN: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_S],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE]\n    ]\n  },\n  XK: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES],\n      [RESPONDER, TOK_E, TOK_EE],\n      [INITIATOR, TOK_S, TOK_SE]\n    ]\n  },\n  IK: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES, TOK_S, TOK_SS],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE]\n    ]\n  },\n  XX: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE, TOK_S, TOK_ES],\n      [INITIATOR, TOK_S, TOK_SE]\n    ]\n  },\n  IX: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_S],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE, TOK_S, TOK_ES]\n    ]\n  }\n})\n\nfunction sodiumBufferCopy (src) {\n  var buf = sodium_malloc(src.byteLength)\n  buf.set(src)\n  return buf\n}\n\nfunction initialize (handshakePattern, initiator, prologue, s, e, rs, re) {\n  assert(Object.keys(PATTERNS).includes(handshakePattern), 'Unsupported handshake pattern')\n  assert(typeof initiator === 'boolean', 'Initiator must be a boolean')\n  assert(prologue.byteLength != null, 'prolouge must be a Buffer')\n\n  assert(e == null ? true : e.publicKey.byteLength === dh.PKLEN, `e.publicKey must be ${dh.PKLEN} bytes`)\n  assert(e == null ? true : e.secretKey.byteLength === dh.SKLEN, `e.secretKey must be ${dh.SKLEN} bytes`)\n\n  assert(rs == null ? true : rs.byteLength === dh.PKLEN, `rs must be ${dh.PKLEN} bytes`)\n  assert(re == null ? true : re.byteLength === dh.PKLEN, `re must be ${dh.PKLEN} bytes`)\n\n  var state = new HandshakeState()\n\n  var protocolName = Uint8Array.from(`Noise_${handshakePattern}_25519_ChaChaPoly_BLAKE2b`, toCharCode)\n\n  symmetricState.initializeSymmetric(state.symmetricState, protocolName)\n  symmetricState.mixHash(state.symmetricState, prologue)\n\n  state.role = initiator === true ? INITIATOR : RESPONDER\n\n  if (s != null) {\n    assert(s.publicKey.byteLength === dh.PKLEN, `s.publicKey must be ${dh.PKLEN} bytes`)\n    assert(s.secretKey.byteLength === dh.SKLEN, `s.secretKey must be ${dh.SKLEN} bytes`)\n\n    state.spk = sodiumBufferCopy(s.publicKey)\n    state.ssk = sodiumBufferCopy(s.secretKey)\n  }\n\n  if (e != null) {\n    assert(e.publicKey.byteLength === dh.PKLEN)\n    assert(e.secretKey.byteLength === dh.SKLEN)\n\n    state.epk = sodiumBufferCopy(e.publicKey)\n    state.esk = sodiumBufferCopy(e.secretKey)\n  }\n\n  if (rs != null) {\n    assert(rs.byteLength === dh.PKLEN)\n    state.rs = sodiumBufferCopy(rs)\n  }\n  if (re != null) {\n    assert(re.byteLength === dh.PKLEN)\n    state.re = sodiumBufferCopy(re)\n  }\n\n  // hashing\n  var pat = PATTERNS[handshakePattern]\n\n  for (var pattern of clone(pat.premessages)) {\n    var patternRole = pattern.shift()\n\n    for (var token of pattern) {\n      switch (token) {\n        case TOK_E:\n          assert(state.role === patternRole ? state.epk.byteLength != null : state.re.byteLength != null)\n          symmetricState.mixHash(state.symmetricState, state.role === patternRole ? state.epk : state.re)\n          break\n        case TOK_S:\n          assert(state.role === patternRole ? state.spk.byteLength != null : state.rs.byteLength != null)\n          symmetricState.mixHash(state.symmetricState, state.role === patternRole ? state.spk : state.rs)\n          break\n        default:\n          throw new Error('Invalid premessage pattern')\n      }\n    }\n  }\n\n  state.messagePatterns = clone(pat.messagePatterns)\n\n  assert(state.messagePatterns.filter(p => p[0] === INITIATOR).some(p => p.includes(TOK_S))\n    ? (state.spk !== null && state.ssk !== null)\n    : true, // Default if none is found\n  'This handshake pattern requires a static keypair')\n\n  return state\n}\n\nvar DhResult = sodium_malloc(dh.DHLEN)\nfunction writeMessage (state, payload, messageBuffer) {\n  assert(state instanceof HandshakeState)\n  assert(payload.byteLength != null)\n  assert(messageBuffer.byteLength != null)\n\n  var mpat = state.messagePatterns.shift()\n  var moffset = 0\n\n  assert(mpat != null)\n\n  assert(state.role === mpat.shift())\n\n  for (var token of mpat) {\n    switch (token) {\n      case TOK_E:\n        assert(state.epk == null)\n        assert(state.esk == null)\n\n        state.epk = sodium_malloc(dh.PKLEN)\n        state.esk = sodium_malloc(dh.SKLEN)\n\n        dh.generateKeypair(state.epk, state.esk)\n\n        messageBuffer.set(state.epk, moffset)\n        moffset += state.epk.byteLength\n\n        symmetricState.mixHash(state.symmetricState, state.epk)\n\n        break\n\n      case TOK_S:\n        assert(state.spk.byteLength === dh.PKLEN)\n\n        symmetricState.encryptAndHash(state.symmetricState, messageBuffer.subarray(moffset), state.spk)\n        moffset += symmetricState.encryptAndHash.bytesWritten\n\n        break\n\n      case TOK_EE:\n        dh.dh(DhResult, state.esk, state.re)\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_ES:\n        if (state.role === INITIATOR) dh.dh(DhResult, state.esk, state.rs)\n        else dh.dh(DhResult, state.ssk, state.re)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_SE:\n        if (state.role === INITIATOR) dh.dh(DhResult, state.ssk, state.re)\n        else dh.dh(DhResult, state.esk, state.rs)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_SS:\n        dh.dh(DhResult, state.ssk, state.rs)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n\n      default:\n        throw new Error('Invalid message pattern')\n    }\n  }\n\n  symmetricState.encryptAndHash(state.symmetricState, messageBuffer.subarray(moffset), payload)\n  moffset += symmetricState.encryptAndHash.bytesWritten\n\n  writeMessage.bytes = moffset\n\n  if (state.messagePatterns.length === 0) {\n    var tx = sodium_malloc(cipherState.STATELEN)\n    var rx = sodium_malloc(cipherState.STATELEN)\n    symmetricState.split(state.symmetricState, tx, rx)\n\n    return { tx, rx }\n  }\n}\nwriteMessage.bytes = 0\n\nfunction readMessage (state, message, payloadBuffer) {\n  assert(state instanceof HandshakeState)\n  assert(message.byteLength != null)\n  assert(payloadBuffer.byteLength != null)\n\n  var mpat = state.messagePatterns.shift()\n  var moffset = 0\n\n  assert(mpat != null)\n  assert(mpat.shift() !== state.role)\n\n  for (var token of mpat) {\n    switch (token) {\n      case TOK_E:\n        assert(state.re == null)\n        assert(message.byteLength - moffset >= dh.PKLEN)\n\n        // PKLEN instead of DHLEN since they are different in out case\n        state.re = sodium_malloc(dh.PKLEN)\n        state.re.set(message.subarray(moffset, moffset + dh.PKLEN))\n        moffset += dh.PKLEN\n\n        symmetricState.mixHash(state.symmetricState, state.re)\n\n        break\n\n      case TOK_S:\n        assert(state.rs == null)\n        state.rs = sodium_malloc(dh.PKLEN)\n\n        var bytes = 0\n        if (symmetricState._hasKey(state.symmetricState)) {\n          bytes = dh.PKLEN + 16\n        } else {\n          bytes = dh.PKLEN\n        }\n\n        assert(message.byteLength - moffset >= bytes)\n\n        symmetricState.decryptAndHash(\n          state.symmetricState,\n          state.rs,\n          message.subarray(moffset, moffset + bytes) // <- called temp in noise spec\n        )\n\n        moffset += symmetricState.decryptAndHash.bytesRead\n\n        break\n      case TOK_EE:\n        dh.dh(DhResult, state.esk, state.re)\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_ES:\n        if (state.role === INITIATOR) dh.dh(DhResult, state.esk, state.rs)\n        else dh.dh(DhResult, state.ssk, state.re)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_SE:\n        if (state.role === INITIATOR) dh.dh(DhResult, state.ssk, state.re)\n        else dh.dh(DhResult, state.esk, state.rs)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_SS:\n        dh.dh(DhResult, state.ssk, state.rs)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n\n      default:\n        throw new Error('Invalid message pattern')\n    }\n  }\n\n  symmetricState.decryptAndHash(state.symmetricState, payloadBuffer, message.subarray(moffset))\n\n  // How many bytes were written to payload (minus the TAG/MAC)\n  readMessage.bytes = symmetricState.decryptAndHash.bytesWritten\n\n  if (state.messagePatterns.length === 0) {\n    var tx = sodium_malloc(cipherState.STATELEN)\n    var rx = sodium_malloc(cipherState.STATELEN)\n    symmetricState.split(state.symmetricState, rx, tx)\n\n    return { tx, rx }\n  }\n}\nreadMessage.bytes = 0\n\nfunction destroy (state) {\n  if (state.symmetricState != null) {\n    sodium_free(state.symmetricState)\n    state.symmetricState = null\n  }\n\n  state.role = null\n\n  if (state.spk != null) {\n    sodium_free(state.spk)\n    state.spk = null\n  }\n\n  if (state.ssk != null) {\n    sodium_free(state.ssk)\n    state.ssk = null\n  }\n\n  if (state.epk != null) {\n    sodium_free(state.epk)\n    state.epk = null\n  }\n\n  if (state.esk != null) {\n    sodium_free(state.esk)\n    state.esk = null\n  }\n\n  if (state.rs != null) {\n    sodium_free(state.rs)\n    state.rs = null\n  }\n\n  if (state.re != null) {\n    sodium_free(state.re)\n    state.re = null\n  }\n\n  state.messagePatterns = null\n}\n\nfunction keygen (obj, sk) {\n  if (!obj) {\n    obj = { publicKey: sodium_malloc(PKLEN), secretKey: sodium_malloc(SKLEN) }\n    return keygen(obj)\n  }\n\n  if (obj.publicKey) {\n    dh.generateKeypair(obj.publicKey, obj.secretKey)\n    return obj\n  }\n\n  if (obj.byteLength != null) dh.generateKeypair(null, obj)\n}\n\nfunction seedKeygen (seed) {\n  var obj = { publicKey: sodium_malloc(PKLEN), secretKey: sodium_malloc(SKLEN) }\n  dh.generateSeedKeypair(obj.publicKey, obj.secretKey, seed)\n  return obj\n}\n\nfunction toCharCode (s) {\n  return s.charCodeAt(0)\n}\n\nexport default handshakeState;\nexport { handshakeState as __moduleExports };","start":1670465471665,"end":1670465471803,"order":"normal"},{"name":"polyfill-node","result":"/* eslint-disable camelcase */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-universal@3.1.0/node_modules/sodium-universal/memory.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoassert@2.0.0/node_modules/nanoassert/index.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/clone@2.1.2/node_modules/clone/clone.js?commonjs-proxy\";\nimport require$$3 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/noise-protocol@3.0.1/node_modules/noise-protocol/symmetric-state.js?commonjs-proxy\";\nimport require$$4 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/noise-protocol@3.0.1/node_modules/noise-protocol/cipher-state.js?commonjs-proxy\";\nimport require$$5 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/noise-protocol@3.0.1/node_modules/noise-protocol/dh.js?commonjs-proxy\";\n\nconst { sodium_malloc, sodium_memzero, sodium_free } = require$$0\nconst assert = require$$1\nconst clone = require$$2\nconst symmetricState = require$$3\nconst cipherState = require$$4\nconst dh = require$$5\n\nconst PKLEN = dh.PKLEN\nconst SKLEN = dh.SKLEN\n\nvar handshakeState = Object.freeze({\n  initialize,\n  writeMessage,\n  readMessage,\n  destroy,\n  keygen,\n  seedKeygen,\n  SKLEN,\n  PKLEN\n})\n\nfunction HandshakeState () {\n  this.symmetricState = sodium_malloc(symmetricState.STATELEN)\n\n  this.initiator = null\n\n  this.spk = null\n  this.ssk = null\n\n  this.epk = null\n  this.esk = null\n\n  this.rs = null\n  this.re = null\n\n  this.messagePatterns = null\n}\n\nconst INITIATOR = Symbol('initiator')\nconst RESPONDER = Symbol('responder')\n\nconst TOK_S = Symbol('s')\nconst TOK_E = Symbol('e')\nconst TOK_ES = Symbol('es')\nconst TOK_SE = Symbol('se')\nconst TOK_EE = Symbol('ee')\nconst TOK_SS = Symbol('es')\n\n// initiator, ->\n// responder, <-\nvar PATTERNS = Object.freeze({\n  N: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES]\n    ]\n  },\n  K: {\n    premessages: [\n      [INITIATOR, TOK_S],\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES, TOK_SS]\n    ]\n  },\n  X: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES, TOK_S, TOK_SS]\n    ]\n  },\n  NN: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE]\n    ]\n  },\n  KN: {\n    premessages: [\n      [INITIATOR, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE]\n    ]\n  },\n  NK: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES],\n      [RESPONDER, TOK_E, TOK_EE]\n    ]\n  },\n  KK: {\n    premessages: [\n      [INITIATOR, TOK_S],\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES, TOK_SS],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE]\n    ]\n  },\n  NX: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE, TOK_S, TOK_ES]\n    ]\n  },\n  KX: {\n    premessages: [\n      [INITIATOR, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE, TOK_S, TOK_ES]\n    ]\n  },\n  XN: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE],\n      [INITIATOR, TOK_S, TOK_SE]\n    ]\n  },\n  IN: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_S],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE]\n    ]\n  },\n  XK: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES],\n      [RESPONDER, TOK_E, TOK_EE],\n      [INITIATOR, TOK_S, TOK_SE]\n    ]\n  },\n  IK: {\n    premessages: [\n      [RESPONDER, TOK_S]\n    ],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_ES, TOK_S, TOK_SS],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE]\n    ]\n  },\n  XX: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E],\n      [RESPONDER, TOK_E, TOK_EE, TOK_S, TOK_ES],\n      [INITIATOR, TOK_S, TOK_SE]\n    ]\n  },\n  IX: {\n    premessages: [],\n    messagePatterns: [\n      [INITIATOR, TOK_E, TOK_S],\n      [RESPONDER, TOK_E, TOK_EE, TOK_SE, TOK_S, TOK_ES]\n    ]\n  }\n})\n\nfunction sodiumBufferCopy (src) {\n  var buf = sodium_malloc(src.byteLength)\n  buf.set(src)\n  return buf\n}\n\nfunction initialize (handshakePattern, initiator, prologue, s, e, rs, re) {\n  assert(Object.keys(PATTERNS).includes(handshakePattern), 'Unsupported handshake pattern')\n  assert(typeof initiator === 'boolean', 'Initiator must be a boolean')\n  assert(prologue.byteLength != null, 'prolouge must be a Buffer')\n\n  assert(e == null ? true : e.publicKey.byteLength === dh.PKLEN, `e.publicKey must be ${dh.PKLEN} bytes`)\n  assert(e == null ? true : e.secretKey.byteLength === dh.SKLEN, `e.secretKey must be ${dh.SKLEN} bytes`)\n\n  assert(rs == null ? true : rs.byteLength === dh.PKLEN, `rs must be ${dh.PKLEN} bytes`)\n  assert(re == null ? true : re.byteLength === dh.PKLEN, `re must be ${dh.PKLEN} bytes`)\n\n  var state = new HandshakeState()\n\n  var protocolName = Uint8Array.from(`Noise_${handshakePattern}_25519_ChaChaPoly_BLAKE2b`, toCharCode)\n\n  symmetricState.initializeSymmetric(state.symmetricState, protocolName)\n  symmetricState.mixHash(state.symmetricState, prologue)\n\n  state.role = initiator === true ? INITIATOR : RESPONDER\n\n  if (s != null) {\n    assert(s.publicKey.byteLength === dh.PKLEN, `s.publicKey must be ${dh.PKLEN} bytes`)\n    assert(s.secretKey.byteLength === dh.SKLEN, `s.secretKey must be ${dh.SKLEN} bytes`)\n\n    state.spk = sodiumBufferCopy(s.publicKey)\n    state.ssk = sodiumBufferCopy(s.secretKey)\n  }\n\n  if (e != null) {\n    assert(e.publicKey.byteLength === dh.PKLEN)\n    assert(e.secretKey.byteLength === dh.SKLEN)\n\n    state.epk = sodiumBufferCopy(e.publicKey)\n    state.esk = sodiumBufferCopy(e.secretKey)\n  }\n\n  if (rs != null) {\n    assert(rs.byteLength === dh.PKLEN)\n    state.rs = sodiumBufferCopy(rs)\n  }\n  if (re != null) {\n    assert(re.byteLength === dh.PKLEN)\n    state.re = sodiumBufferCopy(re)\n  }\n\n  // hashing\n  var pat = PATTERNS[handshakePattern]\n\n  for (var pattern of clone(pat.premessages)) {\n    var patternRole = pattern.shift()\n\n    for (var token of pattern) {\n      switch (token) {\n        case TOK_E:\n          assert(state.role === patternRole ? state.epk.byteLength != null : state.re.byteLength != null)\n          symmetricState.mixHash(state.symmetricState, state.role === patternRole ? state.epk : state.re)\n          break\n        case TOK_S:\n          assert(state.role === patternRole ? state.spk.byteLength != null : state.rs.byteLength != null)\n          symmetricState.mixHash(state.symmetricState, state.role === patternRole ? state.spk : state.rs)\n          break\n        default:\n          throw new Error('Invalid premessage pattern')\n      }\n    }\n  }\n\n  state.messagePatterns = clone(pat.messagePatterns)\n\n  assert(state.messagePatterns.filter(p => p[0] === INITIATOR).some(p => p.includes(TOK_S))\n    ? (state.spk !== null && state.ssk !== null)\n    : true, // Default if none is found\n  'This handshake pattern requires a static keypair')\n\n  return state\n}\n\nvar DhResult = sodium_malloc(dh.DHLEN)\nfunction writeMessage (state, payload, messageBuffer) {\n  assert(state instanceof HandshakeState)\n  assert(payload.byteLength != null)\n  assert(messageBuffer.byteLength != null)\n\n  var mpat = state.messagePatterns.shift()\n  var moffset = 0\n\n  assert(mpat != null)\n\n  assert(state.role === mpat.shift())\n\n  for (var token of mpat) {\n    switch (token) {\n      case TOK_E:\n        assert(state.epk == null)\n        assert(state.esk == null)\n\n        state.epk = sodium_malloc(dh.PKLEN)\n        state.esk = sodium_malloc(dh.SKLEN)\n\n        dh.generateKeypair(state.epk, state.esk)\n\n        messageBuffer.set(state.epk, moffset)\n        moffset += state.epk.byteLength\n\n        symmetricState.mixHash(state.symmetricState, state.epk)\n\n        break\n\n      case TOK_S:\n        assert(state.spk.byteLength === dh.PKLEN)\n\n        symmetricState.encryptAndHash(state.symmetricState, messageBuffer.subarray(moffset), state.spk)\n        moffset += symmetricState.encryptAndHash.bytesWritten\n\n        break\n\n      case TOK_EE:\n        dh.dh(DhResult, state.esk, state.re)\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_ES:\n        if (state.role === INITIATOR) dh.dh(DhResult, state.esk, state.rs)\n        else dh.dh(DhResult, state.ssk, state.re)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_SE:\n        if (state.role === INITIATOR) dh.dh(DhResult, state.ssk, state.re)\n        else dh.dh(DhResult, state.esk, state.rs)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_SS:\n        dh.dh(DhResult, state.ssk, state.rs)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n\n      default:\n        throw new Error('Invalid message pattern')\n    }\n  }\n\n  symmetricState.encryptAndHash(state.symmetricState, messageBuffer.subarray(moffset), payload)\n  moffset += symmetricState.encryptAndHash.bytesWritten\n\n  writeMessage.bytes = moffset\n\n  if (state.messagePatterns.length === 0) {\n    var tx = sodium_malloc(cipherState.STATELEN)\n    var rx = sodium_malloc(cipherState.STATELEN)\n    symmetricState.split(state.symmetricState, tx, rx)\n\n    return { tx, rx }\n  }\n}\nwriteMessage.bytes = 0\n\nfunction readMessage (state, message, payloadBuffer) {\n  assert(state instanceof HandshakeState)\n  assert(message.byteLength != null)\n  assert(payloadBuffer.byteLength != null)\n\n  var mpat = state.messagePatterns.shift()\n  var moffset = 0\n\n  assert(mpat != null)\n  assert(mpat.shift() !== state.role)\n\n  for (var token of mpat) {\n    switch (token) {\n      case TOK_E:\n        assert(state.re == null)\n        assert(message.byteLength - moffset >= dh.PKLEN)\n\n        // PKLEN instead of DHLEN since they are different in out case\n        state.re = sodium_malloc(dh.PKLEN)\n        state.re.set(message.subarray(moffset, moffset + dh.PKLEN))\n        moffset += dh.PKLEN\n\n        symmetricState.mixHash(state.symmetricState, state.re)\n\n        break\n\n      case TOK_S:\n        assert(state.rs == null)\n        state.rs = sodium_malloc(dh.PKLEN)\n\n        var bytes = 0\n        if (symmetricState._hasKey(state.symmetricState)) {\n          bytes = dh.PKLEN + 16\n        } else {\n          bytes = dh.PKLEN\n        }\n\n        assert(message.byteLength - moffset >= bytes)\n\n        symmetricState.decryptAndHash(\n          state.symmetricState,\n          state.rs,\n          message.subarray(moffset, moffset + bytes) // <- called temp in noise spec\n        )\n\n        moffset += symmetricState.decryptAndHash.bytesRead\n\n        break\n      case TOK_EE:\n        dh.dh(DhResult, state.esk, state.re)\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_ES:\n        if (state.role === INITIATOR) dh.dh(DhResult, state.esk, state.rs)\n        else dh.dh(DhResult, state.ssk, state.re)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_SE:\n        if (state.role === INITIATOR) dh.dh(DhResult, state.ssk, state.re)\n        else dh.dh(DhResult, state.esk, state.rs)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n      case TOK_SS:\n        dh.dh(DhResult, state.ssk, state.rs)\n\n        symmetricState.mixKey(state.symmetricState, DhResult)\n        sodium_memzero(DhResult)\n        break\n\n      default:\n        throw new Error('Invalid message pattern')\n    }\n  }\n\n  symmetricState.decryptAndHash(state.symmetricState, payloadBuffer, message.subarray(moffset))\n\n  // How many bytes were written to payload (minus the TAG/MAC)\n  readMessage.bytes = symmetricState.decryptAndHash.bytesWritten\n\n  if (state.messagePatterns.length === 0) {\n    var tx = sodium_malloc(cipherState.STATELEN)\n    var rx = sodium_malloc(cipherState.STATELEN)\n    symmetricState.split(state.symmetricState, rx, tx)\n\n    return { tx, rx }\n  }\n}\nreadMessage.bytes = 0\n\nfunction destroy (state) {\n  if (state.symmetricState != null) {\n    sodium_free(state.symmetricState)\n    state.symmetricState = null\n  }\n\n  state.role = null\n\n  if (state.spk != null) {\n    sodium_free(state.spk)\n    state.spk = null\n  }\n\n  if (state.ssk != null) {\n    sodium_free(state.ssk)\n    state.ssk = null\n  }\n\n  if (state.epk != null) {\n    sodium_free(state.epk)\n    state.epk = null\n  }\n\n  if (state.esk != null) {\n    sodium_free(state.esk)\n    state.esk = null\n  }\n\n  if (state.rs != null) {\n    sodium_free(state.rs)\n    state.rs = null\n  }\n\n  if (state.re != null) {\n    sodium_free(state.re)\n    state.re = null\n  }\n\n  state.messagePatterns = null\n}\n\nfunction keygen (obj, sk) {\n  if (!obj) {\n    obj = { publicKey: sodium_malloc(PKLEN), secretKey: sodium_malloc(SKLEN) }\n    return keygen(obj)\n  }\n\n  if (obj.publicKey) {\n    dh.generateKeypair(obj.publicKey, obj.secretKey)\n    return obj\n  }\n\n  if (obj.byteLength != null) dh.generateKeypair(null, obj)\n}\n\nfunction seedKeygen (seed) {\n  var obj = { publicKey: sodium_malloc(PKLEN), secretKey: sodium_malloc(SKLEN) }\n  dh.generateSeedKeypair(obj.publicKey, obj.secretKey, seed)\n  return obj\n}\n\nfunction toCharCode (s) {\n  return s.charCodeAt(0)\n}\n\nexport default handshakeState;\nexport { handshakeState as __moduleExports };","start":1670465471803,"end":1670465471808,"order":"normal"}]}
