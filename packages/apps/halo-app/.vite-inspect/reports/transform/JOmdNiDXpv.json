{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_kdf.js","transforms":[{"name":"vite:load-fallback","result":"/* eslint-disable camelcase */\nconst assert = require('nanoassert')\nconst randombytes_buf = require('./randombytes').randombytes_buf\nconst blake2b = require('blake2b')\n\nmodule.exports.crypto_kdf_PRIMITIVE = 'blake2b'\nmodule.exports.crypto_kdf_BYTES_MIN = 16\nmodule.exports.crypto_kdf_BYTES_MAX = 64\nmodule.exports.crypto_kdf_CONTEXTBYTES = 8\nmodule.exports.crypto_kdf_KEYBYTES = 32\n\nfunction STORE64_LE (dest, int) {\n  var mul = 1\n  var i = 0\n  dest[0] = int & 0xFF\n  while (++i < 8 && (mul *= 0x100)) {\n    dest[i] = (int / mul) & 0xFF\n  }\n}\n\nmodule.exports.crypto_kdf_derive_from_key = function crypto_kdf_derive_from_key (subkey, subkey_id, ctx, key) {\n  assert(subkey.length >= module.exports.crypto_kdf_BYTES_MIN, 'subkey must be at least crypto_kdf_BYTES_MIN')\n  assert(subkey_id >= 0 && subkey_id <= 0x1fffffffffffff, 'subkey_id must be safe integer')\n  assert(ctx.length >= module.exports.crypto_kdf_CONTEXTBYTES, 'context must be at least crypto_kdf_CONTEXTBYTES')\n\n  var ctx_padded = new Uint8Array(blake2b.PERSONALBYTES)\n  var salt = new Uint8Array(blake2b.SALTBYTES)\n\n  ctx_padded.set(ctx, 0, module.exports.crypto_kdf_CONTEXTBYTES)\n  STORE64_LE(salt, subkey_id)\n\n  var outlen = Math.min(subkey.length, module.exports.crypto_kdf_BYTES_MAX)\n  blake2b(outlen, key.subarray(0, module.exports.crypto_kdf_KEYBYTES), salt, ctx_padded, true)\n    .final(subkey)\n}\n\nmodule.exports.crypto_kdf_keygen = function crypto_kdf_keygen (out) {\n  assert(out.length >= module.exports.crypto_kdf_KEYBYTES, 'out.length must be crypto_kdf_KEYBYTES')\n  randombytes_buf(out.subarray(0, module.exports.crypto_kdf_KEYBYTES))\n}\n","start":1670465470686,"end":1670465470848},{"name":"vite:react-babel","result":"/* eslint-disable camelcase */\nconst assert = require('nanoassert')\nconst randombytes_buf = require('./randombytes').randombytes_buf\nconst blake2b = require('blake2b')\n\nmodule.exports.crypto_kdf_PRIMITIVE = 'blake2b'\nmodule.exports.crypto_kdf_BYTES_MIN = 16\nmodule.exports.crypto_kdf_BYTES_MAX = 64\nmodule.exports.crypto_kdf_CONTEXTBYTES = 8\nmodule.exports.crypto_kdf_KEYBYTES = 32\n\nfunction STORE64_LE (dest, int) {\n  var mul = 1\n  var i = 0\n  dest[0] = int & 0xFF\n  while (++i < 8 && (mul *= 0x100)) {\n    dest[i] = (int / mul) & 0xFF\n  }\n}\n\nmodule.exports.crypto_kdf_derive_from_key = function crypto_kdf_derive_from_key (subkey, subkey_id, ctx, key) {\n  assert(subkey.length >= module.exports.crypto_kdf_BYTES_MIN, 'subkey must be at least crypto_kdf_BYTES_MIN')\n  assert(subkey_id >= 0 && subkey_id <= 0x1fffffffffffff, 'subkey_id must be safe integer')\n  assert(ctx.length >= module.exports.crypto_kdf_CONTEXTBYTES, 'context must be at least crypto_kdf_CONTEXTBYTES')\n\n  var ctx_padded = new Uint8Array(blake2b.PERSONALBYTES)\n  var salt = new Uint8Array(blake2b.SALTBYTES)\n\n  ctx_padded.set(ctx, 0, module.exports.crypto_kdf_CONTEXTBYTES)\n  STORE64_LE(salt, subkey_id)\n\n  var outlen = Math.min(subkey.length, module.exports.crypto_kdf_BYTES_MAX)\n  blake2b(outlen, key.subarray(0, module.exports.crypto_kdf_KEYBYTES), salt, ctx_padded, true)\n    .final(subkey)\n}\n\nmodule.exports.crypto_kdf_keygen = function crypto_kdf_keygen (out) {\n  assert(out.length >= module.exports.crypto_kdf_KEYBYTES, 'out.length must be crypto_kdf_KEYBYTES')\n  randombytes_buf(out.subarray(0, module.exports.crypto_kdf_KEYBYTES))\n}\n","start":1670465470848,"end":1670465470848,"order":"pre"},{"name":"commonjs","result":"/* eslint-disable camelcase */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as crypto_kdfModule, exports as crypto_kdf } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_kdf.js?commonjs-module\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoassert@2.0.0/node_modules/nanoassert/index.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/randombytes.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/blake2b@2.1.4/node_modules/blake2b/index.js?commonjs-proxy\";\n\n(function (module) {\n\tconst assert = require$$0\n\tconst randombytes_buf = require$$1.randombytes_buf\n\tconst blake2b = require$$2\n\n\tmodule.exports.crypto_kdf_PRIMITIVE = 'blake2b'\n\tmodule.exports.crypto_kdf_BYTES_MIN = 16\n\tmodule.exports.crypto_kdf_BYTES_MAX = 64\n\tmodule.exports.crypto_kdf_CONTEXTBYTES = 8\n\tmodule.exports.crypto_kdf_KEYBYTES = 32\n\n\tfunction STORE64_LE (dest, int) {\n\t  var mul = 1\n\t  var i = 0\n\t  dest[0] = int & 0xFF\n\t  while (++i < 8 && (mul *= 0x100)) {\n\t    dest[i] = (int / mul) & 0xFF\n\t  }\n\t}\n\n\tmodule.exports.crypto_kdf_derive_from_key = function crypto_kdf_derive_from_key (subkey, subkey_id, ctx, key) {\n\t  assert(subkey.length >= module.exports.crypto_kdf_BYTES_MIN, 'subkey must be at least crypto_kdf_BYTES_MIN')\n\t  assert(subkey_id >= 0 && subkey_id <= 0x1fffffffffffff, 'subkey_id must be safe integer')\n\t  assert(ctx.length >= module.exports.crypto_kdf_CONTEXTBYTES, 'context must be at least crypto_kdf_CONTEXTBYTES')\n\n\t  var ctx_padded = new Uint8Array(blake2b.PERSONALBYTES)\n\t  var salt = new Uint8Array(blake2b.SALTBYTES)\n\n\t  ctx_padded.set(ctx, 0, module.exports.crypto_kdf_CONTEXTBYTES)\n\t  STORE64_LE(salt, subkey_id)\n\n\t  var outlen = Math.min(subkey.length, module.exports.crypto_kdf_BYTES_MAX)\n\t  blake2b(outlen, key.subarray(0, module.exports.crypto_kdf_KEYBYTES), salt, ctx_padded, true)\n\t    .final(subkey)\n\t}\n\n\tmodule.exports.crypto_kdf_keygen = function crypto_kdf_keygen (out) {\n\t  assert(out.length >= module.exports.crypto_kdf_KEYBYTES, 'out.length must be crypto_kdf_KEYBYTES')\n\t  randombytes_buf(out.subarray(0, module.exports.crypto_kdf_KEYBYTES))\n\t}\n} (crypto_kdfModule));\n\nexport default crypto_kdf;\nexport { crypto_kdf as __moduleExports };","start":1670465470849,"end":1670465471713,"order":"normal"}]}
