{"resolvedId":"/home/jdw/Code/dxos/dxos/packages/apps/halo-app/src/vault.ts","transforms":[{"name":"vite:load-fallback","result":"//\n// Copyright 2022 DXOS.org\n//\n\nimport { IFrameRuntime } from '@dxos/client';\nimport { log } from '@dxos/log';\nimport { PortMuxer } from '@dxos/rpc-tunnel';\n\nif (typeof SharedWorker === 'undefined') {\n  throw new Error('Browser does not support shared workers.');\n}\n\n// NOTE: Url must be within SharedWorker instantiation for bundling to work as expected.\nconst worker = new SharedWorker(new URL('./shared-worker', import.meta.url), { type: 'module', name: 'dxos-vault' });\nconst portMuxer = new PortMuxer(worker.port);\n\nconst iframeRuntime: IFrameRuntime = new IFrameRuntime({\n  // TODO(dmaretskyi): Extract channel names to config.ts.\n  systemPort: portMuxer.createWorkerPort({ channel: 'dxos:system' }),\n  workerAppPort: portMuxer.createWorkerPort({ channel: 'dxos:app' }),\n  windowAppPort: portMuxer.createIFramePort({\n    channel: 'dxos:app',\n    onOrigin: (origin) => iframeRuntime.open(origin)\n  })\n});\n\nwindow.addEventListener('beforeunload', () => {\n  iframeRuntime.close().catch((err) => log.catch(err));\n});\n","start":1670465438185,"end":1670465438185},{"name":"vite:react-babel","result":"//\n// Copyright 2022 DXOS.org\n//\n\nimport { IFrameRuntime } from '@dxos/client';\nimport { log } from '@dxos/log';\nimport { PortMuxer } from '@dxos/rpc-tunnel';\n\nif (typeof SharedWorker === 'undefined') {\n  throw new Error('Browser does not support shared workers.');\n}\n\n// NOTE: Url must be within SharedWorker instantiation for bundling to work as expected.\nconst worker = new SharedWorker(new URL('./shared-worker', import.meta.url), { type: 'module', name: 'dxos-vault' });\nconst portMuxer = new PortMuxer(worker.port);\n\nconst iframeRuntime: IFrameRuntime = new IFrameRuntime({\n  // TODO(dmaretskyi): Extract channel names to config.ts.\n  systemPort: portMuxer.createWorkerPort({ channel: 'dxos:system' }),\n  workerAppPort: portMuxer.createWorkerPort({ channel: 'dxos:app' }),\n  windowAppPort: portMuxer.createIFramePort({\n    channel: 'dxos:app',\n    onOrigin: (origin) => iframeRuntime.open(origin)\n  })\n});\n\nwindow.addEventListener('beforeunload', () => {\n  iframeRuntime.close().catch((err) => log.catch(err));\n});\n","start":1670465438185,"end":1670465438185,"order":"pre"},{"name":"vite:esbuild","result":"import { IFrameRuntime } from \"@dxos/client\";\nimport { log } from \"@dxos/log\";\nimport { PortMuxer } from \"@dxos/rpc-tunnel\";\nif (typeof SharedWorker === \"undefined\") {\n  throw new Error(\"Browser does not support shared workers.\");\n}\nconst worker = new SharedWorker(new URL(\"./shared-worker\", import.meta.url), { type: \"module\", name: \"dxos-vault\" });\nconst portMuxer = new PortMuxer(worker.port);\nconst iframeRuntime = new IFrameRuntime({\n  systemPort: portMuxer.createWorkerPort({ channel: \"dxos:system\" }),\n  workerAppPort: portMuxer.createWorkerPort({ channel: \"dxos:app\" }),\n  windowAppPort: portMuxer.createIFramePort({\n    channel: \"dxos:app\",\n    onOrigin: (origin) => iframeRuntime.open(origin)\n  })\n});\nwindow.addEventListener(\"beforeunload\", () => {\n  iframeRuntime.close().catch((err) => log.catch(err));\n});\n","start":1670465438186,"end":1670465438249,"order":"normal"},{"name":"vite:worker-import-meta-url","result":"import { IFrameRuntime } from \"@dxos/client\";\nimport { log } from \"@dxos/log\";\nimport { PortMuxer } from \"@dxos/rpc-tunnel\";\nif (typeof SharedWorker === \"undefined\") {\n  throw new Error(\"Browser does not support shared workers.\");\n}\nconst worker = new SharedWorker(new URL(\"__VITE_WORKER_ASSET__46df7745__\", self.location), { type: \"module\", name: \"dxos-vault\" });\nconst portMuxer = new PortMuxer(worker.port);\nconst iframeRuntime = new IFrameRuntime({\n  systemPort: portMuxer.createWorkerPort({ channel: \"dxos:system\" }),\n  workerAppPort: portMuxer.createWorkerPort({ channel: \"dxos:app\" }),\n  windowAppPort: portMuxer.createIFramePort({\n    channel: \"dxos:app\",\n    onOrigin: (origin) => iframeRuntime.open(origin)\n  })\n});\nwindow.addEventListener(\"beforeunload\", () => {\n  iframeRuntime.close().catch((err) => log.catch(err));\n});\n","start":1670465438250,"end":1670465455706,"order":"normal"}]}
