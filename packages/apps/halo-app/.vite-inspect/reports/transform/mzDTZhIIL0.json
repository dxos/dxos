{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/lib-typedarrays.js","transforms":[{"name":"vite:load-fallback","result":";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Check if typed arrays are supported\n\t    if (typeof ArrayBuffer != 'function') {\n\t        return;\n\t    }\n\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\n\t    // Reference original init\n\t    var superInit = WordArray.init;\n\n\t    // Augment WordArray.init to handle typed arrays\n\t    var subInit = WordArray.init = function (typedArray) {\n\t        // Convert buffers to uint8\n\t        if (typedArray instanceof ArrayBuffer) {\n\t            typedArray = new Uint8Array(typedArray);\n\t        }\n\n\t        // Convert other array views to uint8\n\t        if (\n\t            typedArray instanceof Int8Array ||\n\t            (typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray) ||\n\t            typedArray instanceof Int16Array ||\n\t            typedArray instanceof Uint16Array ||\n\t            typedArray instanceof Int32Array ||\n\t            typedArray instanceof Uint32Array ||\n\t            typedArray instanceof Float32Array ||\n\t            typedArray instanceof Float64Array\n\t        ) {\n\t            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n\t        }\n\n\t        // Handle Uint8Array\n\t        if (typedArray instanceof Uint8Array) {\n\t            // Shortcut\n\t            var typedArrayByteLength = typedArray.byteLength;\n\n\t            // Extract bytes\n\t            var words = [];\n\t            for (var i = 0; i < typedArrayByteLength; i++) {\n\t                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\n\t            }\n\n\t            // Initialize this word array\n\t            superInit.call(this, words, typedArrayByteLength);\n\t        } else {\n\t            // Else call normal init\n\t            superInit.apply(this, arguments);\n\t        }\n\t    };\n\n\t    subInit.prototype = WordArray;\n\t}());\n\n\n\treturn CryptoJS.lib.WordArray;\n\n}));","start":1670465468894,"end":1670465469062},{"name":"vite:react-babel","result":";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Check if typed arrays are supported\n\t    if (typeof ArrayBuffer != 'function') {\n\t        return;\n\t    }\n\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\n\t    // Reference original init\n\t    var superInit = WordArray.init;\n\n\t    // Augment WordArray.init to handle typed arrays\n\t    var subInit = WordArray.init = function (typedArray) {\n\t        // Convert buffers to uint8\n\t        if (typedArray instanceof ArrayBuffer) {\n\t            typedArray = new Uint8Array(typedArray);\n\t        }\n\n\t        // Convert other array views to uint8\n\t        if (\n\t            typedArray instanceof Int8Array ||\n\t            (typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray) ||\n\t            typedArray instanceof Int16Array ||\n\t            typedArray instanceof Uint16Array ||\n\t            typedArray instanceof Int32Array ||\n\t            typedArray instanceof Uint32Array ||\n\t            typedArray instanceof Float32Array ||\n\t            typedArray instanceof Float64Array\n\t        ) {\n\t            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n\t        }\n\n\t        // Handle Uint8Array\n\t        if (typedArray instanceof Uint8Array) {\n\t            // Shortcut\n\t            var typedArrayByteLength = typedArray.byteLength;\n\n\t            // Extract bytes\n\t            var words = [];\n\t            for (var i = 0; i < typedArrayByteLength; i++) {\n\t                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\n\t            }\n\n\t            // Initialize this word array\n\t            superInit.call(this, words, typedArrayByteLength);\n\t        } else {\n\t            // Else call normal init\n\t            superInit.apply(this, arguments);\n\t        }\n\t    };\n\n\t    subInit.prototype = WordArray;\n\t}());\n\n\n\treturn CryptoJS.lib.WordArray;\n\n}));","start":1670465469062,"end":1670465469062,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as libTypedarraysModule, exports as libTypedarrays } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/lib-typedarrays.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/core.js?commonjs-wrapped\";\n\nvar hasRequiredLibTypedarrays;\n\nfunction requireLibTypedarrays () {\n\tif (hasRequiredLibTypedarrays) return libTypedarrays;\n\thasRequiredLibTypedarrays = 1;\n\t(function (module, exports) {\n\t\t;(function (root, factory) {\n\t\t\tif ('object' === \"object\") {\n\t\t\t\t// CommonJS\n\t\t\t\tmodule.exports = exports = factory(require$$0());\n\t\t\t}\n\t\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t\t// AMD\n\t\t\t\tundefined([\"./core\"], factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Global (browser)\n\t\t\t\tfactory(root.CryptoJS);\n\t\t\t}\n\t\t}(commonjsHelpers.commonjsGlobal, function (CryptoJS) {\n\n\t\t\t(function () {\n\t\t\t    // Check if typed arrays are supported\n\t\t\t    if (typeof ArrayBuffer != 'function') {\n\t\t\t        return;\n\t\t\t    }\n\n\t\t\t    // Shortcuts\n\t\t\t    var C = CryptoJS;\n\t\t\t    var C_lib = C.lib;\n\t\t\t    var WordArray = C_lib.WordArray;\n\n\t\t\t    // Reference original init\n\t\t\t    var superInit = WordArray.init;\n\n\t\t\t    // Augment WordArray.init to handle typed arrays\n\t\t\t    var subInit = WordArray.init = function (typedArray) {\n\t\t\t        // Convert buffers to uint8\n\t\t\t        if (typedArray instanceof ArrayBuffer) {\n\t\t\t            typedArray = new Uint8Array(typedArray);\n\t\t\t        }\n\n\t\t\t        // Convert other array views to uint8\n\t\t\t        if (\n\t\t\t            typedArray instanceof Int8Array ||\n\t\t\t            (typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray) ||\n\t\t\t            typedArray instanceof Int16Array ||\n\t\t\t            typedArray instanceof Uint16Array ||\n\t\t\t            typedArray instanceof Int32Array ||\n\t\t\t            typedArray instanceof Uint32Array ||\n\t\t\t            typedArray instanceof Float32Array ||\n\t\t\t            typedArray instanceof Float64Array\n\t\t\t        ) {\n\t\t\t            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n\t\t\t        }\n\n\t\t\t        // Handle Uint8Array\n\t\t\t        if (typedArray instanceof Uint8Array) {\n\t\t\t            // Shortcut\n\t\t\t            var typedArrayByteLength = typedArray.byteLength;\n\n\t\t\t            // Extract bytes\n\t\t\t            var words = [];\n\t\t\t            for (var i = 0; i < typedArrayByteLength; i++) {\n\t\t\t                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\n\t\t\t            }\n\n\t\t\t            // Initialize this word array\n\t\t\t            superInit.call(this, words, typedArrayByteLength);\n\t\t\t        } else {\n\t\t\t            // Else call normal init\n\t\t\t            superInit.apply(this, arguments);\n\t\t\t        }\n\t\t\t    };\n\n\t\t\t    subInit.prototype = WordArray;\n\t\t\t}());\n\n\n\t\t\treturn CryptoJS.lib.WordArray;\n\n\t\t}));\n} (libTypedarraysModule, libTypedarrays));\n\treturn libTypedarrays;\n}\n\nexport { requireLibTypedarrays as __require };","start":1670465469062,"end":1670465469063,"order":"normal"},{"name":"polyfill-node","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as libTypedarraysModule, exports as libTypedarrays } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/lib-typedarrays.js?commonjs-module\"\nimport { __require as require$$0 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/crypto-js@3.3.0/node_modules/crypto-js/core.js?commonjs-wrapped\";\n\nvar hasRequiredLibTypedarrays;\n\nfunction requireLibTypedarrays () {\n\tif (hasRequiredLibTypedarrays) return libTypedarrays;\n\thasRequiredLibTypedarrays = 1;\n\t(function (module, exports) {\n\t\t;(function (root, factory) {\n\t\t\tif ('object' === \"object\") {\n\t\t\t\t// CommonJS\n\t\t\t\tmodule.exports = exports = factory(require$$0());\n\t\t\t}\n\t\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t\t// AMD\n\t\t\t\tundefined([\"./core\"], factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Global (browser)\n\t\t\t\tfactory(root.CryptoJS);\n\t\t\t}\n\t\t}(commonjsHelpers.commonjsGlobal, function (CryptoJS) {\n\n\t\t\t(function () {\n\t\t\t    // Check if typed arrays are supported\n\t\t\t    if (typeof ArrayBuffer != 'function') {\n\t\t\t        return;\n\t\t\t    }\n\n\t\t\t    // Shortcuts\n\t\t\t    var C = CryptoJS;\n\t\t\t    var C_lib = C.lib;\n\t\t\t    var WordArray = C_lib.WordArray;\n\n\t\t\t    // Reference original init\n\t\t\t    var superInit = WordArray.init;\n\n\t\t\t    // Augment WordArray.init to handle typed arrays\n\t\t\t    var subInit = WordArray.init = function (typedArray) {\n\t\t\t        // Convert buffers to uint8\n\t\t\t        if (typedArray instanceof ArrayBuffer) {\n\t\t\t            typedArray = new Uint8Array(typedArray);\n\t\t\t        }\n\n\t\t\t        // Convert other array views to uint8\n\t\t\t        if (\n\t\t\t            typedArray instanceof Int8Array ||\n\t\t\t            (typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray) ||\n\t\t\t            typedArray instanceof Int16Array ||\n\t\t\t            typedArray instanceof Uint16Array ||\n\t\t\t            typedArray instanceof Int32Array ||\n\t\t\t            typedArray instanceof Uint32Array ||\n\t\t\t            typedArray instanceof Float32Array ||\n\t\t\t            typedArray instanceof Float64Array\n\t\t\t        ) {\n\t\t\t            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n\t\t\t        }\n\n\t\t\t        // Handle Uint8Array\n\t\t\t        if (typedArray instanceof Uint8Array) {\n\t\t\t            // Shortcut\n\t\t\t            var typedArrayByteLength = typedArray.byteLength;\n\n\t\t\t            // Extract bytes\n\t\t\t            var words = [];\n\t\t\t            for (var i = 0; i < typedArrayByteLength; i++) {\n\t\t\t                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\n\t\t\t            }\n\n\t\t\t            // Initialize this word array\n\t\t\t            superInit.call(this, words, typedArrayByteLength);\n\t\t\t        } else {\n\t\t\t            // Else call normal init\n\t\t\t            superInit.apply(this, arguments);\n\t\t\t        }\n\t\t\t    };\n\n\t\t\t    subInit.prototype = WordArray;\n\t\t\t}());\n\n\n\t\t\treturn CryptoJS.lib.WordArray;\n\n\t\t}));\n} (libTypedarraysModule, libTypedarrays));\n\treturn libTypedarrays;\n}\n\nexport { requireLibTypedarrays as __require };","start":1670465469063,"end":1670465469064,"order":"normal"}]}
