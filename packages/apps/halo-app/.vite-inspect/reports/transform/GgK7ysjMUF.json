{"resolvedId":"/home/jdw/Code/dxos/dxos/packages/sdk/react-client/dist/lib/browser/index.mjs","transforms":[{"name":"vite:load-fallback","result":"// packages/sdk/react-client/src/client/ClientContext.tsx\nimport React, { useState, createContext, useContext } from \"react\";\nimport { Client } from \"@dxos/client\";\nimport { raise } from \"@dxos/debug\";\nimport { log } from \"@dxos/log\";\nimport { useAsyncEffect } from \"@dxos/react-async\";\nimport { getAsyncValue } from \"@dxos/util\";\n\n// packages/sdk/react-client/src/banner.ts\nvar BANNER = (client) => `\n_/\\\\/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\______/\\\\/\\\\/\\\\/\\\\/\\\\_\n_/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\_________\n_/\\\\/\\\\____/\\\\/\\\\______/\\\\/\\\\______/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\___\n_/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\__________/\\\\/\\\\_\n_/\\\\/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\/\\\\___\n\n DXOS Client ${client.version} \n`;\nvar bannerPrinted = false;\nvar printBanner = (client) => {\n  if (bannerPrinted) {\n    return;\n  }\n  bannerPrinted = true;\n  console.log(BANNER(client));\n};\n\n// packages/sdk/react-client/src/client/ClientContext.tsx\nvar ClientContext = /* @__PURE__ */ createContext(void 0);\nvar useClient = () => {\n  var _a;\n  const { client } = (_a = useContext(ClientContext)) != null ? _a : raise(new Error(\"Missing ClientContext.\"));\n  return client;\n};\nvar ClientProvider = ({ children, config: configProvider, services: createServices, client: clientProvider, fallback = null, onInitialize }) => {\n  const [client, setClient] = useState(clientProvider instanceof Client ? clientProvider : void 0);\n  const [error, setError] = useState();\n  if (error) {\n    throw error;\n  }\n  useAsyncEffect(async () => {\n    const done = async (client2) => {\n      log(\"client ready\", {\n        client: client2\n      }, {\n        file: \"/home/jdw/Code/dxos/dxos/packages/sdk/react-client/src/client/ClientContext.tsx\",\n        line: 95,\n        scope: void 0,\n        callSite: (f, a) => f(...a)\n      });\n      await (onInitialize == null ? void 0 : onInitialize(client2));\n      setClient(client2);\n      printBanner(client2);\n    };\n    if (clientProvider) {\n      const client2 = await getAsyncValue(clientProvider);\n      await done(client2);\n    } else {\n      const config = await getAsyncValue(configProvider);\n      log(\"resolved config\", {\n        config\n      }, {\n        file: \"/home/jdw/Code/dxos/dxos/packages/sdk/react-client/src/client/ClientContext.tsx\",\n        line: 108,\n        scope: void 0,\n        callSite: (f, a) => f(...a)\n      });\n      const services = config && (createServices == null ? void 0 : createServices(config));\n      log(\"created services\", {\n        services\n      }, {\n        file: \"/home/jdw/Code/dxos/dxos/packages/sdk/react-client/src/client/ClientContext.tsx\",\n        line: 110,\n        scope: void 0,\n        callSite: (f, a) => f(...a)\n      });\n      const client1 = new Client({\n        config,\n        services\n      });\n      log(\"created client\", {\n        client: client1\n      }, {\n        file: \"/home/jdw/Code/dxos/dxos/packages/sdk/react-client/src/client/ClientContext.tsx\",\n        line: 112,\n        scope: void 0,\n        callSite: (f, a) => f(...a)\n      });\n      await client1.initialize().catch((err) => setError(err));\n      await done(client1);\n    }\n  }, [\n    clientProvider,\n    configProvider,\n    createServices\n  ]);\n  if (!client) {\n    return fallback;\n  }\n  return /* @__PURE__ */ React.createElement(ClientContext.Provider, {\n    value: {\n      client\n    }\n  }, children);\n};\n\n// packages/sdk/react-client/src/client/useClientServices.ts\nimport { useContext as useContext2 } from \"react\";\nimport { raise as raise2 } from \"@dxos/debug\";\nvar useClientServices = () => {\n  var _a;\n  const { services } = (_a = useContext2(ClientContext)) != null ? _a : raise2(new Error(\"Missing ClientContext.\"));\n  return services;\n};\n\n// packages/sdk/react-client/src/client/useConfig.ts\nimport { useContext as useContext3 } from \"react\";\nimport { raise as raise3 } from \"@dxos/debug\";\nvar useConfig = () => {\n  var _a;\n  const { client } = (_a = useContext3(ClientContext)) != null ? _a : raise3(new Error(\"Missing ClientContext.\"));\n  return client.config;\n};\n\n// packages/sdk/react-client/src/client/useDevtools.ts\nimport { useContext as useContext4 } from \"react\";\nimport { raise as raise4 } from \"@dxos/debug\";\nvar useDevtools = () => {\n  var _a;\n  const { services } = (_a = useContext4(ClientContext)) != null ? _a : raise4(new Error(\"Missing ClientContext.\"));\n  return services == null ? void 0 : services.DevtoolsHost;\n};\n\n// packages/sdk/react-client/src/client/useStatus.ts\nimport { useEffect, useState as useState2 } from \"react\";\nimport { asyncTimeout } from \"@dxos/async\";\nimport { log as log2 } from \"@dxos/log\";\nvar useStatus = (polling = 1e3) => {\n  const [status, setStatus] = useState2(true);\n  const client = useClient();\n  useEffect(() => {\n    const i = setInterval(async () => {\n      try {\n        await asyncTimeout(client.getStatus(), 500);\n        setStatus(true);\n      } catch (err) {\n        log2.error(\"heartbeat stalled\", {}, {\n          file: \"/home/jdw/Code/dxos/dxos/packages/sdk/react-client/src/client/useStatus.ts\",\n          line: 23,\n          scope: void 0,\n          callSite: (f, a) => f(...a)\n        });\n        setStatus(false);\n      }\n    }, polling);\n    return () => clearInterval(i);\n  }, []);\n  return status;\n};\n\n// packages/sdk/react-client/src/echo/useMembers.ts\nimport { useEffect as useEffect3, useState as useState4 } from \"react\";\n\n// packages/sdk/react-client/src/echo/useSpaces.ts\nimport { useEffect as useEffect2, useState as useState3 } from \"react\";\nvar useSpace = (spaceKey) => {\n  const spaces = useSpaces();\n  return spaces.find((space) => spaceKey && space.key.equals(spaceKey));\n};\nvar useSpaces = () => {\n  const client = useClient();\n  const [spaces, setSpaces] = useState3([]);\n  useEffect2(() => {\n    const result = client.echo.querySpaces();\n    setSpaces(result.value);\n    const unsubscribe = result.subscribe(() => {\n      setSpaces(result.value);\n    });\n    return () => {\n      if (unsubscribe) {\n        unsubscribe();\n      }\n    };\n  }, []);\n  return spaces;\n};\n\n// packages/sdk/react-client/src/echo/useMembers.ts\nvar useMembers = (spaceKey) => {\n  const space = useSpace(spaceKey);\n  const [members, setMembers] = useState4([]);\n  useEffect3(() => {\n    if (!space) {\n      return;\n    }\n    const result = space.queryMembers();\n    setMembers(result.value);\n    return result.subscribe(() => {\n      setMembers(result.value);\n    });\n  }, [\n    space == null ? void 0 : space.key.toString()\n  ]);\n  return members;\n};\n\n// packages/sdk/react-client/src/echo/useSelection.ts\nimport { useEffect as useEffect4, useState as useState5 } from \"react\";\nimport { Selection } from \"@dxos/client\";\nvar useSelection = (selection, deps = []) => {\n  const [result, setResult] = useState5(() => coerceSelection(selection));\n  const [data, setData] = useState5(() => result ? result.entities : void 0);\n  useEffect4(() => {\n    const newResult = coerceSelection(selection);\n    setResult(newResult);\n    setData(newResult == null ? void 0 : newResult.entities);\n  }, [\n    !!selection,\n    !!selection && selection.root,\n    ...deps\n  ]);\n  useEffect4(() => {\n    if (result) {\n      return result.update.on((result2) => {\n        setData(result2.entities);\n      });\n    }\n  }, [\n    result\n  ]);\n  return data;\n};\nvar useReducer = (selection, value, deps = []) => {\n  const [result, setResult] = useState5(() => coerceSelection(selection));\n  const [data, setData] = useState5(() => result ? result.value : void 0);\n  useEffect4(() => {\n    const newResult = coerceSelection(selection);\n    setResult(newResult);\n    setData(newResult == null ? void 0 : newResult.value);\n  }, [\n    !!selection,\n    !!selection && selection.root,\n    ...deps\n  ]);\n  useEffect4(() => {\n    if (result) {\n      return result.update.on((result2) => {\n        setData(result2.value);\n      });\n    }\n  }, [\n    result\n  ]);\n  return data;\n};\nvar coerceSelection = (value) => !value ? void 0 : value instanceof Selection ? value.exec() : value;\n\n// packages/sdk/react-client/src/echo/useSpaceInvitations.ts\nimport { useEffect as useEffect6, useMemo as useMemo2, useState as useState6 } from \"react\";\nimport { SpaceProxy } from \"@dxos/client\";\n\n// packages/sdk/react-client/src/invitations/useInvitationStatus.ts\nimport { useReducer as useReducer2, useMemo, useCallback, useEffect as useEffect5 } from \"react\";\nimport { Invitation, InvitationEncoder } from \"@dxos/client\";\nimport { log as log3 } from \"@dxos/log\";\nvar useInvitationStatus = (initialObservable) => {\n  const [state, dispatch] = useReducer2((prev, action) => {\n    log3(\"useInvitationStatus\", {\n      action\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/react-client/src/invitations/useInvitationStatus.ts\",\n      line: 65,\n      scope: void 0,\n      callSite: (f, a) => f(...a)\n    });\n    return {\n      status: action.status,\n      result: action.status === Invitation.State.SUCCESS ? action.result : prev.result,\n      observable: action.status === Invitation.State.CONNECTING ? action.observable : prev.observable,\n      id: action.status === Invitation.State.CONNECTED ? action.id : prev.id,\n      invitationCode: action.status === Invitation.State.CONNECTED ? action.invitationCode : prev.invitationCode,\n      authenticationCode: action.status === Invitation.State.CONNECTED ? action.authenticationCode : prev.authenticationCode,\n      ...action.status === Invitation.State.ERROR && {\n        error: action.error\n      },\n      ...(action.status === Invitation.State.ERROR || action.status === Invitation.State.CANCELLED || action.status === Invitation.State.TIMEOUT) && {\n        haltedAt: typeof prev.haltedAt === \"undefined\" ? action.haltedAt : prev.haltedAt\n      }\n    };\n  }, null, (_arg) => {\n    return {\n      status: Invitation.State.INIT,\n      result: {\n        spaceKey: null,\n        identityKey: null,\n        swarmKey: null\n      },\n      observable: initialObservable\n    };\n  });\n  const onConnected = useCallback((invitation) => {\n    dispatch({\n      status: Invitation.State.CONNECTED,\n      id: invitation.invitationId,\n      invitationCode: InvitationEncoder.encode(invitation),\n      authenticationCode: invitation.authenticationCode\n    });\n  }, []);\n  const onSuccess = useCallback(({ spaceKey, identityKey, swarmKey }) => {\n    dispatch({\n      status: Invitation.State.SUCCESS,\n      result: {\n        spaceKey: spaceKey || null,\n        identityKey: identityKey || null,\n        swarmKey: swarmKey || null\n      }\n    });\n  }, []);\n  const onError = useCallback((invitation) => {\n    dispatch({\n      status: Invitation.State.ERROR,\n      error: invitation.error,\n      haltedAt: state.status\n    });\n  }, [\n    state.status\n  ]);\n  const onCancelled = useCallback(() => {\n    dispatch({\n      status: Invitation.State.CANCELLED,\n      haltedAt: state.status\n    });\n  }, [\n    state.status\n  ]);\n  const onAuthenticating = useCallback(() => {\n    dispatch({\n      status: Invitation.State.AUTHENTICATING\n    });\n  }, [\n    state.status\n  ]);\n  const onTimeout = useCallback((_err) => {\n    dispatch({\n      status: Invitation.State.TIMEOUT,\n      haltedAt: state.status\n    });\n  }, [\n    state.status\n  ]);\n  useEffect5(() => {\n    var _a;\n    return (_a = state.observable) == null ? void 0 : _a.subscribe({\n      onConnected,\n      onSuccess,\n      onError,\n      onCancelled,\n      onAuthenticating,\n      onTimeout\n    });\n  }, [\n    state.observable,\n    onConnected,\n    onSuccess,\n    onError,\n    onCancelled,\n    onAuthenticating,\n    onTimeout\n  ]);\n  const connect = useCallback((observable) => {\n    dispatch({\n      status: Invitation.State.CONNECTING,\n      observable\n    });\n  }, []);\n  const authenticate = useCallback((authenticationCode) => {\n    log3(\"authenticating...\", {\n      authenticationCode\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/react-client/src/invitations/useInvitationStatus.ts\",\n      line: 156,\n      scope: void 0,\n      callSite: (f, a) => f(...a)\n    });\n    return state.observable.authenticate(authenticationCode);\n  }, [\n    state.observable\n  ]);\n  const cancel = useCallback(async () => {\n    var _a;\n    return (_a = state.observable) == null ? void 0 : _a.cancel();\n  }, [\n    state.observable\n  ]);\n  return useMemo(() => {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    return {\n      status: state.status,\n      haltedAt: state.haltedAt,\n      result: state.result,\n      error: state.error,\n      cancel,\n      connect,\n      authenticate,\n      id: (_c = (_b = (_a = state.observable) == null ? void 0 : _a.invitation) == null ? void 0 : _b.invitationId) != null ? _c : null,\n      invitationCode: ((_d = state.observable) == null ? void 0 : _d.invitation) ? InvitationEncoder.encode((_e = state.observable) == null ? void 0 : _e.invitation) : null,\n      authenticationCode: (_h = (_g = (_f = state.observable) == null ? void 0 : _f.invitation) == null ? void 0 : _g.authenticationCode) != null ? _h : null\n    };\n  }, [\n    state,\n    connect,\n    authenticate\n  ]);\n};\n\n// packages/sdk/react-client/src/echo/useSpaceInvitations.ts\nvar useSpaceInvitations = (spaceKey) => {\n  var _a;\n  const space = useSpace(spaceKey);\n  const [invitations, setInvitations] = useState6((_a = space == null ? void 0 : space.invitations) != null ? _a : []);\n  useEffect6(() => {\n    if (!(space instanceof SpaceProxy)) {\n      return;\n    }\n    return space.invitationsUpdate.on(() => {\n      setInvitations([\n        ...space.invitations\n      ]);\n    });\n  }, [\n    space\n  ]);\n  return invitations;\n};\nvar useSpaceInvitation = (spaceKey, invitationId) => {\n  const invitations = useSpaceInvitations(spaceKey);\n  const invitation = useMemo2(() => invitations.find(({ invitation: invitation2 }) => (invitation2 == null ? void 0 : invitation2.invitationId) === invitationId), [\n    invitations\n  ]);\n  return useInvitationStatus(invitation);\n};\n\n// packages/sdk/react-client/src/halo/useContacts.ts\nimport { useEffect as useEffect7, useState as useState7 } from \"react\";\nvar useContacts = () => {\n  const client = useClient();\n  const [contacts, setContacts] = useState7([]);\n  useEffect7(() => {\n    const result = client.halo.queryContacts();\n    setContacts(result.value);\n    return result.subscribe(() => {\n      setContacts(result.value);\n    });\n  }, []);\n  return contacts;\n};\n\n// packages/sdk/react-client/src/halo/useDevices.ts\nimport { useState as useState8 } from \"react\";\nimport { useAsyncEffect as useAsyncEffect2 } from \"@dxos/react-async\";\nvar useDevices = () => {\n  const client = useClient();\n  const [devices, setDevices] = useState8([]);\n  useAsyncEffect2(async () => {\n    const result = await client.halo.queryDevices();\n    setDevices(result);\n  }, [\n    client\n  ]);\n  return devices;\n};\n\n// packages/sdk/react-client/src/halo/useIdentity.ts\nimport { useState as useState9, useEffect as useEffect8 } from \"react\";\nvar useIdentity = () => {\n  const client = useClient();\n  const [identity, setIdentity] = useState9(() => client.halo.profile);\n  useEffect8(() => client.halo.subscribeToProfile(() => setIdentity(client.halo.profile)), [\n    client\n  ]);\n  return identity;\n};\n\n// packages/sdk/react-client/src/halo/useHaloInvitations.ts\nimport { useEffect as useEffect9, useMemo as useMemo3, useState as useState10 } from \"react\";\nvar useHaloInvitations = () => {\n  var _a, _b;\n  const client = useClient();\n  const [invitations, setInvitations] = useState10((_b = (_a = client.halo) == null ? void 0 : _a.invitations) != null ? _b : []);\n  useEffect9(() => {\n    return client.halo.invitationsUpdate.on(() => {\n      setInvitations([\n        ...client.halo.invitations\n      ]);\n    });\n  }, [\n    client.halo\n  ]);\n  return invitations;\n};\nvar useHaloInvitation = (invitationId) => {\n  const invitations = useHaloInvitations();\n  const invitation = useMemo3(() => invitations.find(({ invitation: invitation2 }) => (invitation2 == null ? void 0 : invitation2.invitationId) === invitationId), [\n    invitations\n  ]);\n  return useInvitationStatus(invitation);\n};\n\n// packages/sdk/react-client/src/util/useResultSet.ts\nimport { useMemo as useMemo4 } from \"react\";\nimport { useSubscription } from \"use-subscription\";\nvar useResultSet = (resultSet) => useSubscription(useMemo4(() => ({\n  getCurrentValue: () => resultSet.value,\n  subscribe: (cb) => resultSet.subscribe(cb)\n}), [\n  resultSet\n]));\n\n// packages/sdk/react-client/src/util/useStream.ts\nimport { useState as useState11, useEffect as useEffect10 } from \"react\";\nimport { log as log4 } from \"@dxos/log\";\nvar useStream = (streamFactory, defaultValue, deps = []) => {\n  const [value, setValue] = useState11(defaultValue);\n  useEffect10(() => {\n    const stream = streamFactory();\n    stream.subscribe((response) => setValue(response), (err) => {\n      if (err) {\n        log4.catch(err, {}, {\n          file: \"/home/jdw/Code/dxos/dxos/packages/sdk/react-client/src/util/useStream.ts\",\n          line: 21,\n          scope: void 0,\n          callSite: (f, a) => f(...a)\n        });\n      }\n    });\n    return () => {\n      stream.close();\n    };\n  }, deps);\n  return value != null ? value : defaultValue;\n};\nexport {\n  ClientContext,\n  ClientProvider,\n  useClient,\n  useClientServices,\n  useConfig,\n  useContacts,\n  useDevices,\n  useDevtools,\n  useHaloInvitation,\n  useHaloInvitations,\n  useIdentity,\n  useInvitationStatus,\n  useMembers,\n  useReducer,\n  useResultSet,\n  useSelection,\n  useSpace,\n  useSpaceInvitation,\n  useSpaceInvitations,\n  useSpaces,\n  useStatus,\n  useStream\n};\n//# sourceMappingURL=index.mjs.map\n","start":1670465438903,"end":1670465440337},{"name":"vite:react-babel","result":"// packages/sdk/react-client/src/client/ClientContext.tsx\nimport React, { useState, createContext, useContext } from \"react\";\nimport { Client } from \"@dxos/client\";\nimport { raise } from \"@dxos/debug\";\nimport { log } from \"@dxos/log\";\nimport { useAsyncEffect } from \"@dxos/react-async\";\nimport { getAsyncValue } from \"@dxos/util\";\n\n// packages/sdk/react-client/src/banner.ts\nvar BANNER = client => `\n_/\\\\/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\______/\\\\/\\\\/\\\\/\\\\/\\\\_\n_/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\__/\\\\/\\\\_________\n_/\\\\/\\\\____/\\\\/\\\\______/\\\\/\\\\______/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\___\n_/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\__________/\\\\/\\\\_\n_/\\\\/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\____/\\\\/\\\\/\\\\/\\\\/\\\\___\n\n DXOS Client ${client.version} \n`;\nvar bannerPrinted = false;\nvar printBanner = client => {\n  if (bannerPrinted) {\n    return;\n  }\n  bannerPrinted = true;\n  console.log(BANNER(client));\n};\n\n// packages/sdk/react-client/src/client/ClientContext.tsx\nvar ClientContext = /* @__PURE__ */createContext(void 0);\nvar useClient = () => {\n  var _a;\n  const {\n    client\n  } = (_a = useContext(ClientContext)) != null ? _a : raise(new Error(\"Missing ClientContext.\"));\n  return client;\n};\nvar ClientProvider = ({\n  children,\n  config: configProvider,\n  services: createServices,\n  client: clientProvider,\n  fallback = null,\n  onInitialize\n}) => {\n  const [client, setClient] = useState(clientProvider instanceof Client ? clientProvider : void 0);\n  const [error, setError] = useState();\n  if (error) {\n    throw error;\n  }\n  useAsyncEffect(async () => {\n    const done = async client2 => {\n      log(\"client ready\", {\n        client: client2\n      }, {\n        file: \"/home/jdw/Code/dxos/dxos/packages/sdk/react-client/src/client/ClientContext.tsx\",\n        line: 95,\n        scope: void 0,\n        callSite: (f, a) => f(...a)\n      });\n      await (onInitialize == null ? void 0 : onInitialize(client2));\n      setClient(client2);\n      printBanner(client2);\n    };\n    if (clientProvider) {\n      const client2 = await getAsyncValue(clientProvider);\n      await done(client2);\n    } else {\n      const config = await getAsyncValue(configProvider);\n      log(\"resolved config\", {\n        config\n      }, {\n        file: \"/home/jdw/Code/dxos/dxos/packages/sdk/react-client/src/client/ClientContext.tsx\",\n        line: 108,\n        scope: void 0,\n        callSite: (f, a) => f(...a)\n      });\n      const services = config && (createServices == null ? void 0 : createServices(config));\n      log(\"created services\", {\n        services\n      }, {\n        file: \"/home/jdw/Code/dxos/dxos/packages/sdk/react-client/src/client/ClientContext.tsx\",\n        line: 110,\n        scope: void 0,\n        callSite: (f, a) => f(...a)\n      });\n      const client1 = new Client({\n        config,\n        services\n      });\n      log(\"created client\", {\n        client: client1\n      }, {\n        file: \"/home/jdw/Code/dxos/dxos/packages/sdk/react-client/src/client/ClientContext.tsx\",\n        line: 112,\n        scope: void 0,\n        callSite: (f, a) => f(...a)\n      });\n      await client1.initialize().catch(err => setError(err));\n      await done(client1);\n    }\n  }, [clientProvider, configProvider, createServices]);\n  if (!client) {\n    return fallback;\n  }\n  return (\n    /*#__PURE__*/\n    /* @__PURE__ */\n    _jsx(ClientContext.Provider, {\n      value: {\n        client\n      },\n      children: children\n    })\n  );\n};\n\n// packages/sdk/react-client/src/client/useClientServices.ts\nimport { useContext as useContext2 } from \"react\";\nimport { raise as raise2 } from \"@dxos/debug\";\nvar useClientServices = () => {\n  var _a;\n  const {\n    services\n  } = (_a = useContext2(ClientContext)) != null ? _a : raise2(new Error(\"Missing ClientContext.\"));\n  return services;\n};\n\n// packages/sdk/react-client/src/client/useConfig.ts\nimport { useContext as useContext3 } from \"react\";\nimport { raise as raise3 } from \"@dxos/debug\";\nvar useConfig = () => {\n  var _a;\n  const {\n    client\n  } = (_a = useContext3(ClientContext)) != null ? _a : raise3(new Error(\"Missing ClientContext.\"));\n  return client.config;\n};\n\n// packages/sdk/react-client/src/client/useDevtools.ts\nimport { useContext as useContext4 } from \"react\";\nimport { raise as raise4 } from \"@dxos/debug\";\nvar useDevtools = () => {\n  var _a;\n  const {\n    services\n  } = (_a = useContext4(ClientContext)) != null ? _a : raise4(new Error(\"Missing ClientContext.\"));\n  return services == null ? void 0 : services.DevtoolsHost;\n};\n\n// packages/sdk/react-client/src/client/useStatus.ts\nimport { useEffect, useState as useState2 } from \"react\";\nimport { asyncTimeout } from \"@dxos/async\";\nimport { log as log2 } from \"@dxos/log\";\nvar useStatus = (polling = 1e3) => {\n  const [status, setStatus] = useState2(true);\n  const client = useClient();\n  useEffect(() => {\n    const i = setInterval(async () => {\n      try {\n        await asyncTimeout(client.getStatus(), 500);\n        setStatus(true);\n      } catch (err) {\n        log2.error(\"heartbeat stalled\", {}, {\n          file: \"/home/jdw/Code/dxos/dxos/packages/sdk/react-client/src/client/useStatus.ts\",\n          line: 23,\n          scope: void 0,\n          callSite: (f, a) => f(...a)\n        });\n        setStatus(false);\n      }\n    }, polling);\n    return () => clearInterval(i);\n  }, []);\n  return status;\n};\n\n// packages/sdk/react-client/src/echo/useMembers.ts\nimport { useEffect as useEffect3, useState as useState4 } from \"react\";\n\n// packages/sdk/react-client/src/echo/useSpaces.ts\nimport { useEffect as useEffect2, useState as useState3 } from \"react\";\nvar useSpace = spaceKey => {\n  const spaces = useSpaces();\n  return spaces.find(space => spaceKey && space.key.equals(spaceKey));\n};\nvar useSpaces = () => {\n  const client = useClient();\n  const [spaces, setSpaces] = useState3([]);\n  useEffect2(() => {\n    const result = client.echo.querySpaces();\n    setSpaces(result.value);\n    const unsubscribe = result.subscribe(() => {\n      setSpaces(result.value);\n    });\n    return () => {\n      if (unsubscribe) {\n        unsubscribe();\n      }\n    };\n  }, []);\n  return spaces;\n};\n\n// packages/sdk/react-client/src/echo/useMembers.ts\nvar useMembers = spaceKey => {\n  const space = useSpace(spaceKey);\n  const [members, setMembers] = useState4([]);\n  useEffect3(() => {\n    if (!space) {\n      return;\n    }\n    const result = space.queryMembers();\n    setMembers(result.value);\n    return result.subscribe(() => {\n      setMembers(result.value);\n    });\n  }, [space == null ? void 0 : space.key.toString()]);\n  return members;\n};\n\n// packages/sdk/react-client/src/echo/useSelection.ts\nimport { useEffect as useEffect4, useState as useState5 } from \"react\";\nimport { Selection } from \"@dxos/client\";\nvar useSelection = (selection, deps = []) => {\n  const [result, setResult] = useState5(() => coerceSelection(selection));\n  const [data, setData] = useState5(() => result ? result.entities : void 0);\n  useEffect4(() => {\n    const newResult = coerceSelection(selection);\n    setResult(newResult);\n    setData(newResult == null ? void 0 : newResult.entities);\n  }, [!!selection, !!selection && selection.root, ...deps]);\n  useEffect4(() => {\n    if (result) {\n      return result.update.on(result2 => {\n        setData(result2.entities);\n      });\n    }\n  }, [result]);\n  return data;\n};\nvar useReducer = (selection, value, deps = []) => {\n  const [result, setResult] = useState5(() => coerceSelection(selection));\n  const [data, setData] = useState5(() => result ? result.value : void 0);\n  useEffect4(() => {\n    const newResult = coerceSelection(selection);\n    setResult(newResult);\n    setData(newResult == null ? void 0 : newResult.value);\n  }, [!!selection, !!selection && selection.root, ...deps]);\n  useEffect4(() => {\n    if (result) {\n      return result.update.on(result2 => {\n        setData(result2.value);\n      });\n    }\n  }, [result]);\n  return data;\n};\nvar coerceSelection = value => !value ? void 0 : value instanceof Selection ? value.exec() : value;\n\n// packages/sdk/react-client/src/echo/useSpaceInvitations.ts\nimport { useEffect as useEffect6, useMemo as useMemo2, useState as useState6 } from \"react\";\nimport { SpaceProxy } from \"@dxos/client\";\n\n// packages/sdk/react-client/src/invitations/useInvitationStatus.ts\nimport { useReducer as useReducer2, useMemo, useCallback, useEffect as useEffect5 } from \"react\";\nimport { Invitation, InvitationEncoder } from \"@dxos/client\";\nimport { log as log3 } from \"@dxos/log\";\nvar useInvitationStatus = initialObservable => {\n  const [state, dispatch] = useReducer2((prev, action) => {\n    log3(\"useInvitationStatus\", {\n      action\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/react-client/src/invitations/useInvitationStatus.ts\",\n      line: 65,\n      scope: void 0,\n      callSite: (f, a) => f(...a)\n    });\n    return {\n      status: action.status,\n      result: action.status === Invitation.State.SUCCESS ? action.result : prev.result,\n      observable: action.status === Invitation.State.CONNECTING ? action.observable : prev.observable,\n      id: action.status === Invitation.State.CONNECTED ? action.id : prev.id,\n      invitationCode: action.status === Invitation.State.CONNECTED ? action.invitationCode : prev.invitationCode,\n      authenticationCode: action.status === Invitation.State.CONNECTED ? action.authenticationCode : prev.authenticationCode,\n      ...(action.status === Invitation.State.ERROR && {\n        error: action.error\n      }),\n      ...((action.status === Invitation.State.ERROR || action.status === Invitation.State.CANCELLED || action.status === Invitation.State.TIMEOUT) && {\n        haltedAt: typeof prev.haltedAt === \"undefined\" ? action.haltedAt : prev.haltedAt\n      })\n    };\n  }, null, _arg => {\n    return {\n      status: Invitation.State.INIT,\n      result: {\n        spaceKey: null,\n        identityKey: null,\n        swarmKey: null\n      },\n      observable: initialObservable\n    };\n  });\n  const onConnected = useCallback(invitation => {\n    dispatch({\n      status: Invitation.State.CONNECTED,\n      id: invitation.invitationId,\n      invitationCode: InvitationEncoder.encode(invitation),\n      authenticationCode: invitation.authenticationCode\n    });\n  }, []);\n  const onSuccess = useCallback(({\n    spaceKey,\n    identityKey,\n    swarmKey\n  }) => {\n    dispatch({\n      status: Invitation.State.SUCCESS,\n      result: {\n        spaceKey: spaceKey || null,\n        identityKey: identityKey || null,\n        swarmKey: swarmKey || null\n      }\n    });\n  }, []);\n  const onError = useCallback(invitation => {\n    dispatch({\n      status: Invitation.State.ERROR,\n      error: invitation.error,\n      haltedAt: state.status\n    });\n  }, [state.status]);\n  const onCancelled = useCallback(() => {\n    dispatch({\n      status: Invitation.State.CANCELLED,\n      haltedAt: state.status\n    });\n  }, [state.status]);\n  const onAuthenticating = useCallback(() => {\n    dispatch({\n      status: Invitation.State.AUTHENTICATING\n    });\n  }, [state.status]);\n  const onTimeout = useCallback(_err => {\n    dispatch({\n      status: Invitation.State.TIMEOUT,\n      haltedAt: state.status\n    });\n  }, [state.status]);\n  useEffect5(() => {\n    var _a;\n    return (_a = state.observable) == null ? void 0 : _a.subscribe({\n      onConnected,\n      onSuccess,\n      onError,\n      onCancelled,\n      onAuthenticating,\n      onTimeout\n    });\n  }, [state.observable, onConnected, onSuccess, onError, onCancelled, onAuthenticating, onTimeout]);\n  const connect = useCallback(observable => {\n    dispatch({\n      status: Invitation.State.CONNECTING,\n      observable\n    });\n  }, []);\n  const authenticate = useCallback(authenticationCode => {\n    log3(\"authenticating...\", {\n      authenticationCode\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/react-client/src/invitations/useInvitationStatus.ts\",\n      line: 156,\n      scope: void 0,\n      callSite: (f, a) => f(...a)\n    });\n    return state.observable.authenticate(authenticationCode);\n  }, [state.observable]);\n  const cancel = useCallback(async () => {\n    var _a;\n    return (_a = state.observable) == null ? void 0 : _a.cancel();\n  }, [state.observable]);\n  return useMemo(() => {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    return {\n      status: state.status,\n      haltedAt: state.haltedAt,\n      result: state.result,\n      error: state.error,\n      cancel,\n      connect,\n      authenticate,\n      id: (_c = (_b = (_a = state.observable) == null ? void 0 : _a.invitation) == null ? void 0 : _b.invitationId) != null ? _c : null,\n      invitationCode: ((_d = state.observable) == null ? void 0 : _d.invitation) ? InvitationEncoder.encode((_e = state.observable) == null ? void 0 : _e.invitation) : null,\n      authenticationCode: (_h = (_g = (_f = state.observable) == null ? void 0 : _f.invitation) == null ? void 0 : _g.authenticationCode) != null ? _h : null\n    };\n  }, [state, connect, authenticate]);\n};\n\n// packages/sdk/react-client/src/echo/useSpaceInvitations.ts\nvar useSpaceInvitations = spaceKey => {\n  var _a;\n  const space = useSpace(spaceKey);\n  const [invitations, setInvitations] = useState6((_a = space == null ? void 0 : space.invitations) != null ? _a : []);\n  useEffect6(() => {\n    if (!(space instanceof SpaceProxy)) {\n      return;\n    }\n    return space.invitationsUpdate.on(() => {\n      setInvitations([...space.invitations]);\n    });\n  }, [space]);\n  return invitations;\n};\nvar useSpaceInvitation = (spaceKey, invitationId) => {\n  const invitations = useSpaceInvitations(spaceKey);\n  const invitation = useMemo2(() => invitations.find(({\n    invitation: invitation2\n  }) => (invitation2 == null ? void 0 : invitation2.invitationId) === invitationId), [invitations]);\n  return useInvitationStatus(invitation);\n};\n\n// packages/sdk/react-client/src/halo/useContacts.ts\nimport { useEffect as useEffect7, useState as useState7 } from \"react\";\nvar useContacts = () => {\n  const client = useClient();\n  const [contacts, setContacts] = useState7([]);\n  useEffect7(() => {\n    const result = client.halo.queryContacts();\n    setContacts(result.value);\n    return result.subscribe(() => {\n      setContacts(result.value);\n    });\n  }, []);\n  return contacts;\n};\n\n// packages/sdk/react-client/src/halo/useDevices.ts\nimport { useState as useState8 } from \"react\";\nimport { useAsyncEffect as useAsyncEffect2 } from \"@dxos/react-async\";\nvar useDevices = () => {\n  const client = useClient();\n  const [devices, setDevices] = useState8([]);\n  useAsyncEffect2(async () => {\n    const result = await client.halo.queryDevices();\n    setDevices(result);\n  }, [client]);\n  return devices;\n};\n\n// packages/sdk/react-client/src/halo/useIdentity.ts\nimport { useState as useState9, useEffect as useEffect8 } from \"react\";\nvar useIdentity = () => {\n  const client = useClient();\n  const [identity, setIdentity] = useState9(() => client.halo.profile);\n  useEffect8(() => client.halo.subscribeToProfile(() => setIdentity(client.halo.profile)), [client]);\n  return identity;\n};\n\n// packages/sdk/react-client/src/halo/useHaloInvitations.ts\nimport { useEffect as useEffect9, useMemo as useMemo3, useState as useState10 } from \"react\";\nvar useHaloInvitations = () => {\n  var _a, _b;\n  const client = useClient();\n  const [invitations, setInvitations] = useState10((_b = (_a = client.halo) == null ? void 0 : _a.invitations) != null ? _b : []);\n  useEffect9(() => {\n    return client.halo.invitationsUpdate.on(() => {\n      setInvitations([...client.halo.invitations]);\n    });\n  }, [client.halo]);\n  return invitations;\n};\nvar useHaloInvitation = invitationId => {\n  const invitations = useHaloInvitations();\n  const invitation = useMemo3(() => invitations.find(({\n    invitation: invitation2\n  }) => (invitation2 == null ? void 0 : invitation2.invitationId) === invitationId), [invitations]);\n  return useInvitationStatus(invitation);\n};\n\n// packages/sdk/react-client/src/util/useResultSet.ts\nimport { useMemo as useMemo4 } from \"react\";\nimport { useSubscription } from \"use-subscription\";\nvar useResultSet = resultSet => useSubscription(useMemo4(() => ({\n  getCurrentValue: () => resultSet.value,\n  subscribe: cb => resultSet.subscribe(cb)\n}), [resultSet]));\n\n// packages/sdk/react-client/src/util/useStream.ts\nimport { useState as useState11, useEffect as useEffect10 } from \"react\";\nimport { log as log4 } from \"@dxos/log\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useStream = (streamFactory, defaultValue, deps = []) => {\n  const [value, setValue] = useState11(defaultValue);\n  useEffect10(() => {\n    const stream = streamFactory();\n    stream.subscribe(response => setValue(response), err => {\n      if (err) {\n        log4.catch(err, {}, {\n          file: \"/home/jdw/Code/dxos/dxos/packages/sdk/react-client/src/util/useStream.ts\",\n          line: 21,\n          scope: void 0,\n          callSite: (f, a) => f(...a)\n        });\n      }\n    });\n    return () => {\n      stream.close();\n    };\n  }, deps);\n  return value != null ? value : defaultValue;\n};\nexport { ClientContext, ClientProvider, useClient, useClientServices, useConfig, useContacts, useDevices, useDevtools, useHaloInvitation, useHaloInvitations, useIdentity, useInvitationStatus, useMembers, useReducer, useResultSet, useSelection, useSpace, useSpaceInvitation, useSpaceInvitations, useSpaces, useStatus, useStream };","start":1670465440337,"end":1670465440394,"order":"pre"}]}
