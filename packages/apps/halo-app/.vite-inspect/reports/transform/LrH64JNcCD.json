{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoresource-promise@2.0.0/node_modules/nanoresource-promise/nanoresource-cb.js","transforms":[{"name":"vite:load-fallback","result":"/**\n *\n * This code is based on the @mafintosh work.\n * https://github.com/mafintosh/nanoresource\n */\n\nconst preopening = Symbol('opening when closing')\nconst opening = Symbol('opening queue')\nconst preclosing = Symbol('closing when inactive')\nconst closing = Symbol('closing queue')\nconst sync = Symbol('sync')\nconst fastClose = Symbol('fast close')\nconst reopen = Symbol('allow reopen')\nconst init = Symbol('init state')\n\nclass Nanoresource {\n  constructor (opts) {\n    if (!opts) opts = {}\n    if (opts.open) this._open = opts.open\n    if (opts.close) this._close = opts.close\n\n    this[init]()\n\n    this[reopen] = opts.reopen || false\n    this[preopening] = null\n    this[opening] = null\n    this[preclosing] = null\n    this[closing] = null\n    this[sync] = false\n    this[fastClose] = true\n  }\n\n  [init] () {\n    this.opening = false\n    this.opened = false\n    this.closing = false\n    this.closed = false\n    this.actives = 0\n  }\n\n  _open (cb) {\n    cb(null)\n  }\n\n  _close (cb) {\n    cb(null)\n  }\n\n  open (cb) {\n    if (!cb) cb = noop\n\n    if (this.closing || this.closed) {\n      if (!this[reopen]) {\n        return process.nextTick(cb, new Error('Resource is closed'))\n      }\n\n      if (this.closing) {\n        if (!this[preopening]) this[preopening] = []\n        this[preopening].push(cb)\n        return\n      }\n\n      this[init]()\n    }\n\n    if (this.opened) return process.nextTick(cb)\n\n    if (this[opening]) {\n      this[opening].push(cb)\n      return\n    }\n\n    this.opening = true\n    this[opening] = [cb]\n    this[sync] = true\n    this._open(onopen.bind(this))\n    this[sync] = false\n  }\n\n  active (cb) {\n    if ((this[fastClose] && this[preclosing]) || this[closing] || this.closed) {\n      if (cb) process.nextTick(cb, new Error('Resource is closed'))\n      return false\n    }\n    this.actives++\n    return true\n  }\n\n  inactive (cb, err, val) {\n    if (!--this.actives) {\n      const queue = this[preclosing]\n      if (queue) {\n        this[preclosing] = null\n        while (queue.length) this.close(queue.shift())\n      }\n    }\n\n    if (cb) cb(err, val)\n  }\n\n  close (allowActive, cb) {\n    if (typeof allowActive === 'function') return this.close(false, allowActive)\n    if (!cb) cb = noop\n\n    if (allowActive) this[fastClose] = false\n\n    if (this.closed) return process.nextTick(cb)\n\n    if (this.actives || this[opening]) {\n      if (!this[preclosing]) this[preclosing] = []\n      this[preclosing].push(cb)\n      return\n    }\n\n    if (!this.opened) {\n      this.closed = true\n      process.nextTick(cb)\n      return\n    }\n\n    if (this[closing]) {\n      this[closing].push(cb)\n      return\n    }\n\n    this.closing = true\n    this[closing] = [cb]\n    this[sync] = true\n    this._close(onclose.bind(this))\n    this[sync] = false\n  }\n}\n\nfunction onopen (err) {\n  if (this[sync]) return process.nextTick(onopen.bind(this), err)\n\n  const oqueue = this[opening]\n  this[opening] = null\n  this.opening = false\n  this.opened = !err\n\n  while (oqueue.length) oqueue.shift()(err)\n\n  const cqueue = this[preclosing]\n  if (cqueue && !this.actives) {\n    this[preclosing] = null\n    while (cqueue.length) this.close(cqueue.shift())\n  }\n}\n\nfunction onclose (err) {\n  if (this[sync]) return process.nextTick(onclose.bind(this), err)\n  const queue = this[closing]\n  this.closing = false\n  this[closing] = null\n  this.closed = !err\n  while (queue.length) queue.shift()(err)\n\n  const cqueue = this[preopening]\n  if (cqueue) {\n    this[preopening] = null\n    while (cqueue.length) this.open(cqueue.shift())\n  }\n}\n\nfunction noop () {}\n\nmodule.exports = (opts) => new Nanoresource(opts)\nmodule.exports.Nanoresource = Nanoresource\n","start":1670465471056,"end":1670465471210},{"name":"vite:react-babel","result":"/**\n *\n * This code is based on the @mafintosh work.\n * https://github.com/mafintosh/nanoresource\n */\n\nconst preopening = Symbol('opening when closing')\nconst opening = Symbol('opening queue')\nconst preclosing = Symbol('closing when inactive')\nconst closing = Symbol('closing queue')\nconst sync = Symbol('sync')\nconst fastClose = Symbol('fast close')\nconst reopen = Symbol('allow reopen')\nconst init = Symbol('init state')\n\nclass Nanoresource {\n  constructor (opts) {\n    if (!opts) opts = {}\n    if (opts.open) this._open = opts.open\n    if (opts.close) this._close = opts.close\n\n    this[init]()\n\n    this[reopen] = opts.reopen || false\n    this[preopening] = null\n    this[opening] = null\n    this[preclosing] = null\n    this[closing] = null\n    this[sync] = false\n    this[fastClose] = true\n  }\n\n  [init] () {\n    this.opening = false\n    this.opened = false\n    this.closing = false\n    this.closed = false\n    this.actives = 0\n  }\n\n  _open (cb) {\n    cb(null)\n  }\n\n  _close (cb) {\n    cb(null)\n  }\n\n  open (cb) {\n    if (!cb) cb = noop\n\n    if (this.closing || this.closed) {\n      if (!this[reopen]) {\n        return process.nextTick(cb, new Error('Resource is closed'))\n      }\n\n      if (this.closing) {\n        if (!this[preopening]) this[preopening] = []\n        this[preopening].push(cb)\n        return\n      }\n\n      this[init]()\n    }\n\n    if (this.opened) return process.nextTick(cb)\n\n    if (this[opening]) {\n      this[opening].push(cb)\n      return\n    }\n\n    this.opening = true\n    this[opening] = [cb]\n    this[sync] = true\n    this._open(onopen.bind(this))\n    this[sync] = false\n  }\n\n  active (cb) {\n    if ((this[fastClose] && this[preclosing]) || this[closing] || this.closed) {\n      if (cb) process.nextTick(cb, new Error('Resource is closed'))\n      return false\n    }\n    this.actives++\n    return true\n  }\n\n  inactive (cb, err, val) {\n    if (!--this.actives) {\n      const queue = this[preclosing]\n      if (queue) {\n        this[preclosing] = null\n        while (queue.length) this.close(queue.shift())\n      }\n    }\n\n    if (cb) cb(err, val)\n  }\n\n  close (allowActive, cb) {\n    if (typeof allowActive === 'function') return this.close(false, allowActive)\n    if (!cb) cb = noop\n\n    if (allowActive) this[fastClose] = false\n\n    if (this.closed) return process.nextTick(cb)\n\n    if (this.actives || this[opening]) {\n      if (!this[preclosing]) this[preclosing] = []\n      this[preclosing].push(cb)\n      return\n    }\n\n    if (!this.opened) {\n      this.closed = true\n      process.nextTick(cb)\n      return\n    }\n\n    if (this[closing]) {\n      this[closing].push(cb)\n      return\n    }\n\n    this.closing = true\n    this[closing] = [cb]\n    this[sync] = true\n    this._close(onclose.bind(this))\n    this[sync] = false\n  }\n}\n\nfunction onopen (err) {\n  if (this[sync]) return process.nextTick(onopen.bind(this), err)\n\n  const oqueue = this[opening]\n  this[opening] = null\n  this.opening = false\n  this.opened = !err\n\n  while (oqueue.length) oqueue.shift()(err)\n\n  const cqueue = this[preclosing]\n  if (cqueue && !this.actives) {\n    this[preclosing] = null\n    while (cqueue.length) this.close(cqueue.shift())\n  }\n}\n\nfunction onclose (err) {\n  if (this[sync]) return process.nextTick(onclose.bind(this), err)\n  const queue = this[closing]\n  this.closing = false\n  this[closing] = null\n  this.closed = !err\n  while (queue.length) queue.shift()(err)\n\n  const cqueue = this[preopening]\n  if (cqueue) {\n    this[preopening] = null\n    while (cqueue.length) this.open(cqueue.shift())\n  }\n}\n\nfunction noop () {}\n\nmodule.exports = (opts) => new Nanoresource(opts)\nmodule.exports.Nanoresource = Nanoresource\n","start":1670465471210,"end":1670465471210,"order":"pre"},{"name":"commonjs","result":"/**\n *\n * This code is based on the @mafintosh work.\n * https://github.com/mafintosh/nanoresource\n */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as nanoresourceCbModule, exports as nanoresourceCb } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoresource-promise@2.0.0/node_modules/nanoresource-promise/nanoresource-cb.js?commonjs-module\"\n\nconst preopening = Symbol('opening when closing')\nconst opening = Symbol('opening queue')\nconst preclosing = Symbol('closing when inactive')\nconst closing = Symbol('closing queue')\nconst sync = Symbol('sync')\nconst fastClose = Symbol('fast close')\nconst reopen = Symbol('allow reopen')\nconst init = Symbol('init state')\n\nclass Nanoresource {\n  constructor (opts) {\n    if (!opts) opts = {}\n    if (opts.open) this._open = opts.open\n    if (opts.close) this._close = opts.close\n\n    this[init]()\n\n    this[reopen] = opts.reopen || false\n    this[preopening] = null\n    this[opening] = null\n    this[preclosing] = null\n    this[closing] = null\n    this[sync] = false\n    this[fastClose] = true\n  }\n\n  [init] () {\n    this.opening = false\n    this.opened = false\n    this.closing = false\n    this.closed = false\n    this.actives = 0\n  }\n\n  _open (cb) {\n    cb(null)\n  }\n\n  _close (cb) {\n    cb(null)\n  }\n\n  open (cb) {\n    if (!cb) cb = noop\n\n    if (this.closing || this.closed) {\n      if (!this[reopen]) {\n        return process.nextTick(cb, new Error('Resource is closed'))\n      }\n\n      if (this.closing) {\n        if (!this[preopening]) this[preopening] = []\n        this[preopening].push(cb)\n        return\n      }\n\n      this[init]()\n    }\n\n    if (this.opened) return process.nextTick(cb)\n\n    if (this[opening]) {\n      this[opening].push(cb)\n      return\n    }\n\n    this.opening = true\n    this[opening] = [cb]\n    this[sync] = true\n    this._open(onopen.bind(this))\n    this[sync] = false\n  }\n\n  active (cb) {\n    if ((this[fastClose] && this[preclosing]) || this[closing] || this.closed) {\n      if (cb) process.nextTick(cb, new Error('Resource is closed'))\n      return false\n    }\n    this.actives++\n    return true\n  }\n\n  inactive (cb, err, val) {\n    if (!--this.actives) {\n      const queue = this[preclosing]\n      if (queue) {\n        this[preclosing] = null\n        while (queue.length) this.close(queue.shift())\n      }\n    }\n\n    if (cb) cb(err, val)\n  }\n\n  close (allowActive, cb) {\n    if (typeof allowActive === 'function') return this.close(false, allowActive)\n    if (!cb) cb = noop\n\n    if (allowActive) this[fastClose] = false\n\n    if (this.closed) return process.nextTick(cb)\n\n    if (this.actives || this[opening]) {\n      if (!this[preclosing]) this[preclosing] = []\n      this[preclosing].push(cb)\n      return\n    }\n\n    if (!this.opened) {\n      this.closed = true\n      process.nextTick(cb)\n      return\n    }\n\n    if (this[closing]) {\n      this[closing].push(cb)\n      return\n    }\n\n    this.closing = true\n    this[closing] = [cb]\n    this[sync] = true\n    this._close(onclose.bind(this))\n    this[sync] = false\n  }\n}\n\nfunction onopen (err) {\n  if (this[sync]) return process.nextTick(onopen.bind(this), err)\n\n  const oqueue = this[opening]\n  this[opening] = null\n  this.opening = false\n  this.opened = !err\n\n  while (oqueue.length) oqueue.shift()(err)\n\n  const cqueue = this[preclosing]\n  if (cqueue && !this.actives) {\n    this[preclosing] = null\n    while (cqueue.length) this.close(cqueue.shift())\n  }\n}\n\nfunction onclose (err) {\n  if (this[sync]) return process.nextTick(onclose.bind(this), err)\n  const queue = this[closing]\n  this.closing = false\n  this[closing] = null\n  this.closed = !err\n  while (queue.length) queue.shift()(err)\n\n  const cqueue = this[preopening]\n  if (cqueue) {\n    this[preopening] = null\n    while (cqueue.length) this.open(cqueue.shift())\n  }\n}\n\nfunction noop () {}\n\nnanoresourceCbModule.exports = (opts) => new Nanoresource(opts)\nvar Nanoresource_1 = nanoresourceCb.Nanoresource = Nanoresource\n\nexport { nanoresourceCb as __moduleExports, Nanoresource_1 as Nanoresource, nanoresourceCb as default };","start":1670465471210,"end":1670465471213,"order":"normal"},{"name":"polyfill-node","result":"import { default as process } from '\u0000polyfill-node.process';\n\n/**\n *\n * This code is based on the @mafintosh work.\n * https://github.com/mafintosh/nanoresource\n */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as nanoresourceCbModule, exports as nanoresourceCb } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoresource-promise@2.0.0/node_modules/nanoresource-promise/nanoresource-cb.js?commonjs-module\"\n\nconst preopening = Symbol('opening when closing')\nconst opening = Symbol('opening queue')\nconst preclosing = Symbol('closing when inactive')\nconst closing = Symbol('closing queue')\nconst sync = Symbol('sync')\nconst fastClose = Symbol('fast close')\nconst reopen = Symbol('allow reopen')\nconst init = Symbol('init state')\n\nclass Nanoresource {\n  constructor (opts) {\n    if (!opts) opts = {}\n    if (opts.open) this._open = opts.open\n    if (opts.close) this._close = opts.close\n\n    this[init]()\n\n    this[reopen] = opts.reopen || false\n    this[preopening] = null\n    this[opening] = null\n    this[preclosing] = null\n    this[closing] = null\n    this[sync] = false\n    this[fastClose] = true\n  }\n\n  [init] () {\n    this.opening = false\n    this.opened = false\n    this.closing = false\n    this.closed = false\n    this.actives = 0\n  }\n\n  _open (cb) {\n    cb(null)\n  }\n\n  _close (cb) {\n    cb(null)\n  }\n\n  open (cb) {\n    if (!cb) cb = noop\n\n    if (this.closing || this.closed) {\n      if (!this[reopen]) {\n        return process.nextTick(cb, new Error('Resource is closed'))\n      }\n\n      if (this.closing) {\n        if (!this[preopening]) this[preopening] = []\n        this[preopening].push(cb)\n        return\n      }\n\n      this[init]()\n    }\n\n    if (this.opened) return process.nextTick(cb)\n\n    if (this[opening]) {\n      this[opening].push(cb)\n      return\n    }\n\n    this.opening = true\n    this[opening] = [cb]\n    this[sync] = true\n    this._open(onopen.bind(this))\n    this[sync] = false\n  }\n\n  active (cb) {\n    if ((this[fastClose] && this[preclosing]) || this[closing] || this.closed) {\n      if (cb) process.nextTick(cb, new Error('Resource is closed'))\n      return false\n    }\n    this.actives++\n    return true\n  }\n\n  inactive (cb, err, val) {\n    if (!--this.actives) {\n      const queue = this[preclosing]\n      if (queue) {\n        this[preclosing] = null\n        while (queue.length) this.close(queue.shift())\n      }\n    }\n\n    if (cb) cb(err, val)\n  }\n\n  close (allowActive, cb) {\n    if (typeof allowActive === 'function') return this.close(false, allowActive)\n    if (!cb) cb = noop\n\n    if (allowActive) this[fastClose] = false\n\n    if (this.closed) return process.nextTick(cb)\n\n    if (this.actives || this[opening]) {\n      if (!this[preclosing]) this[preclosing] = []\n      this[preclosing].push(cb)\n      return\n    }\n\n    if (!this.opened) {\n      this.closed = true\n      process.nextTick(cb)\n      return\n    }\n\n    if (this[closing]) {\n      this[closing].push(cb)\n      return\n    }\n\n    this.closing = true\n    this[closing] = [cb]\n    this[sync] = true\n    this._close(onclose.bind(this))\n    this[sync] = false\n  }\n}\n\nfunction onopen (err) {\n  if (this[sync]) return process.nextTick(onopen.bind(this), err)\n\n  const oqueue = this[opening]\n  this[opening] = null\n  this.opening = false\n  this.opened = !err\n\n  while (oqueue.length) oqueue.shift()(err)\n\n  const cqueue = this[preclosing]\n  if (cqueue && !this.actives) {\n    this[preclosing] = null\n    while (cqueue.length) this.close(cqueue.shift())\n  }\n}\n\nfunction onclose (err) {\n  if (this[sync]) return process.nextTick(onclose.bind(this), err)\n  const queue = this[closing]\n  this.closing = false\n  this[closing] = null\n  this.closed = !err\n  while (queue.length) queue.shift()(err)\n\n  const cqueue = this[preopening]\n  if (cqueue) {\n    this[preopening] = null\n    while (cqueue.length) this.open(cqueue.shift())\n  }\n}\n\nfunction noop () {}\n\nnanoresourceCbModule.exports = (opts) => new Nanoresource(opts)\nvar Nanoresource_1 = nanoresourceCb.Nanoresource = Nanoresource\n\nexport { nanoresourceCb as __moduleExports, Nanoresource_1 as Nanoresource, nanoresourceCb as default };","start":1670465471213,"end":1670465471215,"order":"normal"}]}
