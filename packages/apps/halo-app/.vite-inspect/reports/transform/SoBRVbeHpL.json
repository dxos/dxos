{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/noise-protocol@3.0.1/node_modules/noise-protocol/cipher.js","transforms":[{"name":"vite:load-fallback","result":"/* eslint-disable camelcase */\nconst { sodium_malloc, sodium_memzero } = require('sodium-universal/memory')\nconst {\n  crypto_aead_chacha20poly1305_ietf_KEYBYTES,\n  crypto_aead_chacha20poly1305_ietf_NPUBBYTES,\n  crypto_aead_chacha20poly1305_ietf_ABYTES,\n  crypto_aead_chacha20poly1305_ietf_encrypt,\n  crypto_aead_chacha20poly1305_ietf_decrypt\n} = require('sodium-universal/crypto_aead')\n\nvar assert = require('nanoassert')\n\nvar KEYLEN = 32\nvar NONCELEN = 8\nvar MACLEN = 16\n\nassert(crypto_aead_chacha20poly1305_ietf_KEYBYTES === KEYLEN)\n// 16 bytes are cut off in the following functions\nassert(crypto_aead_chacha20poly1305_ietf_NPUBBYTES === 4 + NONCELEN)\nassert(crypto_aead_chacha20poly1305_ietf_ABYTES === MACLEN)\n\nmodule.exports = {\n  KEYLEN,\n  NONCELEN,\n  MACLEN,\n  encrypt,\n  decrypt,\n  rekey\n}\n\nvar ElongatedNonce = sodium_malloc(crypto_aead_chacha20poly1305_ietf_NPUBBYTES)\nfunction encrypt (out, k, n, ad, plaintext) {\n  assert(out.byteLength >= plaintext.byteLength + MACLEN, 'output buffer must be at least plaintext plus MACLEN bytes long')\n  assert(k.byteLength === KEYLEN)\n  assert(n.byteLength === NONCELEN)\n  assert(ad == null ? true : ad.byteLength != null)\n  sodium_memzero(ElongatedNonce)\n\n  ElongatedNonce.set(n, 4)\n\n  encrypt.bytesWritten = crypto_aead_chacha20poly1305_ietf_encrypt(out.subarray(0, plaintext.byteLength + MACLEN), plaintext, ad, null, ElongatedNonce, k)\n  encrypt.bytesRead = encrypt.bytesWritten - MACLEN\n\n  sodium_memzero(ElongatedNonce)\n}\nencrypt.bytesWritten = 0\nencrypt.bytesRead = 0\n\nfunction decrypt (out, k, n, ad, ciphertext) {\n  assert(out.byteLength >= ciphertext.byteLength - MACLEN)\n  assert(k.byteLength === KEYLEN)\n  assert(n.byteLength === NONCELEN)\n  assert(ad == null ? true : ad.byteLength != null)\n  sodium_memzero(ElongatedNonce)\n\n  ElongatedNonce.set(n, 4)\n\n  decrypt.bytesWritten = crypto_aead_chacha20poly1305_ietf_decrypt(out.subarray(0, ciphertext.byteLength - MACLEN), null, ciphertext, ad, ElongatedNonce, k)\n  decrypt.bytesRead = decrypt.bytesWritten + MACLEN\n\n  sodium_memzero(ElongatedNonce)\n}\ndecrypt.bytesWritten = 0\ndecrypt.bytesRead = 0\n\nvar maxnonce = new Uint8Array(8).fill(0xff)\nvar zerolen = new Uint8Array(0)\nvar zeros = new Uint8Array(32)\n\nvar IntermediateKey = sodium_malloc(KEYLEN + MACLEN)\nsodium_memzero(IntermediateKey)\nfunction rekey (out, k) {\n  assert(out.byteLength === KEYLEN)\n  assert(k.byteLength === KEYLEN)\n  sodium_memzero(IntermediateKey)\n\n  IntermediateKey.set(k)\n  encrypt(IntermediateKey, k, maxnonce, zerolen, zeros)\n  rekey.bytesWritten = encrypt.bytesWritten\n  rekey.bytesRead = encrypt.bytesRead\n  out.set(IntermediateKey.subarray(0, KEYLEN))\n  sodium_memzero(IntermediateKey)\n}\nrekey.bytesWritten = 0\nrekey.bytesRead = 0\n","start":1670465471671,"end":1670465471783},{"name":"vite:react-babel","result":"/* eslint-disable camelcase */\nconst { sodium_malloc, sodium_memzero } = require('sodium-universal/memory')\nconst {\n  crypto_aead_chacha20poly1305_ietf_KEYBYTES,\n  crypto_aead_chacha20poly1305_ietf_NPUBBYTES,\n  crypto_aead_chacha20poly1305_ietf_ABYTES,\n  crypto_aead_chacha20poly1305_ietf_encrypt,\n  crypto_aead_chacha20poly1305_ietf_decrypt\n} = require('sodium-universal/crypto_aead')\n\nvar assert = require('nanoassert')\n\nvar KEYLEN = 32\nvar NONCELEN = 8\nvar MACLEN = 16\n\nassert(crypto_aead_chacha20poly1305_ietf_KEYBYTES === KEYLEN)\n// 16 bytes are cut off in the following functions\nassert(crypto_aead_chacha20poly1305_ietf_NPUBBYTES === 4 + NONCELEN)\nassert(crypto_aead_chacha20poly1305_ietf_ABYTES === MACLEN)\n\nmodule.exports = {\n  KEYLEN,\n  NONCELEN,\n  MACLEN,\n  encrypt,\n  decrypt,\n  rekey\n}\n\nvar ElongatedNonce = sodium_malloc(crypto_aead_chacha20poly1305_ietf_NPUBBYTES)\nfunction encrypt (out, k, n, ad, plaintext) {\n  assert(out.byteLength >= plaintext.byteLength + MACLEN, 'output buffer must be at least plaintext plus MACLEN bytes long')\n  assert(k.byteLength === KEYLEN)\n  assert(n.byteLength === NONCELEN)\n  assert(ad == null ? true : ad.byteLength != null)\n  sodium_memzero(ElongatedNonce)\n\n  ElongatedNonce.set(n, 4)\n\n  encrypt.bytesWritten = crypto_aead_chacha20poly1305_ietf_encrypt(out.subarray(0, plaintext.byteLength + MACLEN), plaintext, ad, null, ElongatedNonce, k)\n  encrypt.bytesRead = encrypt.bytesWritten - MACLEN\n\n  sodium_memzero(ElongatedNonce)\n}\nencrypt.bytesWritten = 0\nencrypt.bytesRead = 0\n\nfunction decrypt (out, k, n, ad, ciphertext) {\n  assert(out.byteLength >= ciphertext.byteLength - MACLEN)\n  assert(k.byteLength === KEYLEN)\n  assert(n.byteLength === NONCELEN)\n  assert(ad == null ? true : ad.byteLength != null)\n  sodium_memzero(ElongatedNonce)\n\n  ElongatedNonce.set(n, 4)\n\n  decrypt.bytesWritten = crypto_aead_chacha20poly1305_ietf_decrypt(out.subarray(0, ciphertext.byteLength - MACLEN), null, ciphertext, ad, ElongatedNonce, k)\n  decrypt.bytesRead = decrypt.bytesWritten + MACLEN\n\n  sodium_memzero(ElongatedNonce)\n}\ndecrypt.bytesWritten = 0\ndecrypt.bytesRead = 0\n\nvar maxnonce = new Uint8Array(8).fill(0xff)\nvar zerolen = new Uint8Array(0)\nvar zeros = new Uint8Array(32)\n\nvar IntermediateKey = sodium_malloc(KEYLEN + MACLEN)\nsodium_memzero(IntermediateKey)\nfunction rekey (out, k) {\n  assert(out.byteLength === KEYLEN)\n  assert(k.byteLength === KEYLEN)\n  sodium_memzero(IntermediateKey)\n\n  IntermediateKey.set(k)\n  encrypt(IntermediateKey, k, maxnonce, zerolen, zeros)\n  rekey.bytesWritten = encrypt.bytesWritten\n  rekey.bytesRead = encrypt.bytesRead\n  out.set(IntermediateKey.subarray(0, KEYLEN))\n  sodium_memzero(IntermediateKey)\n}\nrekey.bytesWritten = 0\nrekey.bytesRead = 0\n","start":1670465471783,"end":1670465471783,"order":"pre"},{"name":"commonjs","result":"/* eslint-disable camelcase */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-universal@3.1.0/node_modules/sodium-universal/memory.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-universal@3.1.0/node_modules/sodium-universal/crypto_aead.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoassert@2.0.0/node_modules/nanoassert/index.js?commonjs-proxy\";\n\nconst { sodium_malloc, sodium_memzero } = require$$0\nconst {\n  crypto_aead_chacha20poly1305_ietf_KEYBYTES,\n  crypto_aead_chacha20poly1305_ietf_NPUBBYTES,\n  crypto_aead_chacha20poly1305_ietf_ABYTES,\n  crypto_aead_chacha20poly1305_ietf_encrypt,\n  crypto_aead_chacha20poly1305_ietf_decrypt\n} = require$$1\n\nvar assert = require$$2\n\nvar KEYLEN = 32\nvar NONCELEN = 8\nvar MACLEN = 16\n\nassert(crypto_aead_chacha20poly1305_ietf_KEYBYTES === KEYLEN)\n// 16 bytes are cut off in the following functions\nassert(crypto_aead_chacha20poly1305_ietf_NPUBBYTES === 4 + NONCELEN)\nassert(crypto_aead_chacha20poly1305_ietf_ABYTES === MACLEN)\n\nvar cipher = {\n  KEYLEN,\n  NONCELEN,\n  MACLEN,\n  encrypt,\n  decrypt,\n  rekey\n}\n\nvar ElongatedNonce = sodium_malloc(crypto_aead_chacha20poly1305_ietf_NPUBBYTES)\nfunction encrypt (out, k, n, ad, plaintext) {\n  assert(out.byteLength >= plaintext.byteLength + MACLEN, 'output buffer must be at least plaintext plus MACLEN bytes long')\n  assert(k.byteLength === KEYLEN)\n  assert(n.byteLength === NONCELEN)\n  assert(ad == null ? true : ad.byteLength != null)\n  sodium_memzero(ElongatedNonce)\n\n  ElongatedNonce.set(n, 4)\n\n  encrypt.bytesWritten = crypto_aead_chacha20poly1305_ietf_encrypt(out.subarray(0, plaintext.byteLength + MACLEN), plaintext, ad, null, ElongatedNonce, k)\n  encrypt.bytesRead = encrypt.bytesWritten - MACLEN\n\n  sodium_memzero(ElongatedNonce)\n}\nencrypt.bytesWritten = 0\nencrypt.bytesRead = 0\n\nfunction decrypt (out, k, n, ad, ciphertext) {\n  assert(out.byteLength >= ciphertext.byteLength - MACLEN)\n  assert(k.byteLength === KEYLEN)\n  assert(n.byteLength === NONCELEN)\n  assert(ad == null ? true : ad.byteLength != null)\n  sodium_memzero(ElongatedNonce)\n\n  ElongatedNonce.set(n, 4)\n\n  decrypt.bytesWritten = crypto_aead_chacha20poly1305_ietf_decrypt(out.subarray(0, ciphertext.byteLength - MACLEN), null, ciphertext, ad, ElongatedNonce, k)\n  decrypt.bytesRead = decrypt.bytesWritten + MACLEN\n\n  sodium_memzero(ElongatedNonce)\n}\ndecrypt.bytesWritten = 0\ndecrypt.bytesRead = 0\n\nvar maxnonce = new Uint8Array(8).fill(0xff)\nvar zerolen = new Uint8Array(0)\nvar zeros = new Uint8Array(32)\n\nvar IntermediateKey = sodium_malloc(KEYLEN + MACLEN)\nsodium_memzero(IntermediateKey)\nfunction rekey (out, k) {\n  assert(out.byteLength === KEYLEN)\n  assert(k.byteLength === KEYLEN)\n  sodium_memzero(IntermediateKey)\n\n  IntermediateKey.set(k)\n  encrypt(IntermediateKey, k, maxnonce, zerolen, zeros)\n  rekey.bytesWritten = encrypt.bytesWritten\n  rekey.bytesRead = encrypt.bytesRead\n  out.set(IntermediateKey.subarray(0, KEYLEN))\n  sodium_memzero(IntermediateKey)\n}\nrekey.bytesWritten = 0\nrekey.bytesRead = 0\n\nexport default cipher;\nexport { cipher as __moduleExports };","start":1670465471783,"end":1670465471797,"order":"normal"}]}
