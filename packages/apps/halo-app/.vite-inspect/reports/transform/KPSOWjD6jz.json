{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_stream_chacha20.js","transforms":[{"name":"vite:load-fallback","result":"const assert = require('nanoassert')\nconst Chacha20 = require('chacha20-universal')\n\nif (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')\n\nexports.crypto_stream_chacha20_KEYBYTES = 32\nexports.crypto_stream_chacha20_NONCEBYTES = 8\nexports.crypto_stream_chacha20_MESSAGEBYTES_MAX = Number.MAX_SAFE_INTEGER\n\nexports.crypto_stream_chacha20_ietf_KEYBYTES = 32\nexports.crypto_stream_chacha20_ietf_NONCEBYTES = 12\nexports.crypto_stream_chacha20_ietf_MESSAGEBYTES_MAX = 2 ** 32\n\nexports.crypto_stream_chacha20 = function (c, n, k) {\n  c.fill(0)\n  exports.crypto_stream_chacha20_xor(c, c, n, k)\n}\n\nexports.crypto_stream_chacha20_xor = function (c, m, n, k) {\n  assert(n.byteLength === exports.crypto_stream_chacha20_NONCEBYTES,\n    'n should be crypto_stream_chacha20_NONCEBYTES')\n  assert(k.byteLength === exports.crypto_stream_chacha20_KEYBYTES,\n    'k should be crypto_stream_chacha20_KEYBYTES')\n\n  const xor = new Chacha20(n, k)\n  xor.update(c, m)\n  xor.final()\n}\n\nexports.crypto_stream_chacha20_xor_ic = function (c, m, n, ic, k) {\n  assert(n.byteLength === exports.crypto_stream_chacha20_NONCEBYTES,\n    'n should be crypto_stream_chacha20_NONCEBYTES')\n  assert(k.byteLength === exports.crypto_stream_chacha20_KEYBYTES,\n    'k should be crypto_stream_chacha20_KEYBYTES')\n\n  const xor = new Chacha20(n, k, ic)\n  xor.update(c, m)\n  xor.final()\n}\n\nexports.crypto_stream_chacha20_xor_instance = function (n, k) {\n  assert(n.byteLength === exports.crypto_stream_chacha20_NONCEBYTES,\n    'n should be crypto_stream_chacha20_NONCEBYTES')\n  assert(k.byteLength === exports.crypto_stream_chacha20_KEYBYTES,\n    'k should be crypto_stream_chacha20_KEYBYTES')\n\n  return new Chacha20(n, k)\n}\n\nexports.crypto_stream_chacha20_ietf = function (c, n, k) {\n  c.fill(0)\n  exports.crypto_stream_chacha20_ietf_xor(c, c, n, k)\n}\n\nexports.crypto_stream_chacha20_ietf_xor = function (c, m, n, k) {\n  assert(n.byteLength === exports.crypto_stream_chacha20_ietf_NONCEBYTES,\n    'n should be crypto_stream_chacha20_ietf_NONCEBYTES')\n  assert(k.byteLength === exports.crypto_stream_chacha20_ietf_KEYBYTES,\n    'k should be crypto_stream_chacha20_ietf_KEYBYTES')\n\n  const xor = new Chacha20(n, k)\n  xor.update(c, m)\n  xor.final()\n}\n\nexports.crypto_stream_chacha20_ietf_xor_ic = function (c, m, n, ic, k) {\n  assert(n.byteLength === exports.crypto_stream_chacha20_ietf_NONCEBYTES,\n    'n should be crypto_stream_chacha20_ietf_NONCEBYTES')\n  assert(k.byteLength === exports.crypto_stream_chacha20_ietf_KEYBYTES,\n    'k should be crypto_stream_chacha20_ietf_KEYBYTES')\n\n  const xor = new Chacha20(n, k, ic)\n  xor.update(c, m)\n  xor.final()\n}\n\nexports.crypto_stream_chacha20_ietf_xor_instance = function (n, k) {\n  assert(n.byteLength === exports.crypto_stream_chacha20_ietf_NONCEBYTES,\n    'n should be crypto_stream_chacha20_ietf_NONCEBYTES')\n  assert(k.byteLength === exports.crypto_stream_chacha20_ietf_KEYBYTES,\n    'k should be crypto_stream_chacha20_ietf_KEYBYTES')\n\n  return new Chacha20(n, k)\n}\n","start":1670465470784,"end":1670465470876},{"name":"vite:react-babel","result":"const assert = require('nanoassert')\nconst Chacha20 = require('chacha20-universal')\n\nif (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')\n\nexports.crypto_stream_chacha20_KEYBYTES = 32\nexports.crypto_stream_chacha20_NONCEBYTES = 8\nexports.crypto_stream_chacha20_MESSAGEBYTES_MAX = Number.MAX_SAFE_INTEGER\n\nexports.crypto_stream_chacha20_ietf_KEYBYTES = 32\nexports.crypto_stream_chacha20_ietf_NONCEBYTES = 12\nexports.crypto_stream_chacha20_ietf_MESSAGEBYTES_MAX = 2 ** 32\n\nexports.crypto_stream_chacha20 = function (c, n, k) {\n  c.fill(0)\n  exports.crypto_stream_chacha20_xor(c, c, n, k)\n}\n\nexports.crypto_stream_chacha20_xor = function (c, m, n, k) {\n  assert(n.byteLength === exports.crypto_stream_chacha20_NONCEBYTES,\n    'n should be crypto_stream_chacha20_NONCEBYTES')\n  assert(k.byteLength === exports.crypto_stream_chacha20_KEYBYTES,\n    'k should be crypto_stream_chacha20_KEYBYTES')\n\n  const xor = new Chacha20(n, k)\n  xor.update(c, m)\n  xor.final()\n}\n\nexports.crypto_stream_chacha20_xor_ic = function (c, m, n, ic, k) {\n  assert(n.byteLength === exports.crypto_stream_chacha20_NONCEBYTES,\n    'n should be crypto_stream_chacha20_NONCEBYTES')\n  assert(k.byteLength === exports.crypto_stream_chacha20_KEYBYTES,\n    'k should be crypto_stream_chacha20_KEYBYTES')\n\n  const xor = new Chacha20(n, k, ic)\n  xor.update(c, m)\n  xor.final()\n}\n\nexports.crypto_stream_chacha20_xor_instance = function (n, k) {\n  assert(n.byteLength === exports.crypto_stream_chacha20_NONCEBYTES,\n    'n should be crypto_stream_chacha20_NONCEBYTES')\n  assert(k.byteLength === exports.crypto_stream_chacha20_KEYBYTES,\n    'k should be crypto_stream_chacha20_KEYBYTES')\n\n  return new Chacha20(n, k)\n}\n\nexports.crypto_stream_chacha20_ietf = function (c, n, k) {\n  c.fill(0)\n  exports.crypto_stream_chacha20_ietf_xor(c, c, n, k)\n}\n\nexports.crypto_stream_chacha20_ietf_xor = function (c, m, n, k) {\n  assert(n.byteLength === exports.crypto_stream_chacha20_ietf_NONCEBYTES,\n    'n should be crypto_stream_chacha20_ietf_NONCEBYTES')\n  assert(k.byteLength === exports.crypto_stream_chacha20_ietf_KEYBYTES,\n    'k should be crypto_stream_chacha20_ietf_KEYBYTES')\n\n  const xor = new Chacha20(n, k)\n  xor.update(c, m)\n  xor.final()\n}\n\nexports.crypto_stream_chacha20_ietf_xor_ic = function (c, m, n, ic, k) {\n  assert(n.byteLength === exports.crypto_stream_chacha20_ietf_NONCEBYTES,\n    'n should be crypto_stream_chacha20_ietf_NONCEBYTES')\n  assert(k.byteLength === exports.crypto_stream_chacha20_ietf_KEYBYTES,\n    'k should be crypto_stream_chacha20_ietf_KEYBYTES')\n\n  const xor = new Chacha20(n, k, ic)\n  xor.update(c, m)\n  xor.final()\n}\n\nexports.crypto_stream_chacha20_ietf_xor_instance = function (n, k) {\n  assert(n.byteLength === exports.crypto_stream_chacha20_ietf_NONCEBYTES,\n    'n should be crypto_stream_chacha20_ietf_NONCEBYTES')\n  assert(k.byteLength === exports.crypto_stream_chacha20_ietf_KEYBYTES,\n    'k should be crypto_stream_chacha20_ietf_KEYBYTES')\n\n  return new Chacha20(n, k)\n}\n","start":1670465470876,"end":1670465470876,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as crypto_stream_chacha20 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/sodium-javascript@0.8.0/node_modules/sodium-javascript/crypto_stream_chacha20.js?commonjs-exports\"\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoassert@2.0.0/node_modules/nanoassert/index.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/chacha20-universal@1.0.4/node_modules/chacha20-universal/index.js?commonjs-proxy\";\n\n(function (exports) {\n\tconst assert = require$$0\n\tconst Chacha20 = require$$1\n\n\tif (new Uint16Array([1])[0] !== 1) throw new Error('Big endian architecture is not supported.')\n\n\texports.crypto_stream_chacha20_KEYBYTES = 32\n\texports.crypto_stream_chacha20_NONCEBYTES = 8\n\texports.crypto_stream_chacha20_MESSAGEBYTES_MAX = Number.MAX_SAFE_INTEGER\n\n\texports.crypto_stream_chacha20_ietf_KEYBYTES = 32\n\texports.crypto_stream_chacha20_ietf_NONCEBYTES = 12\n\texports.crypto_stream_chacha20_ietf_MESSAGEBYTES_MAX = 2 ** 32\n\n\texports.crypto_stream_chacha20 = function (c, n, k) {\n\t  c.fill(0)\n\t  exports.crypto_stream_chacha20_xor(c, c, n, k)\n\t}\n\n\texports.crypto_stream_chacha20_xor = function (c, m, n, k) {\n\t  assert(n.byteLength === exports.crypto_stream_chacha20_NONCEBYTES,\n\t    'n should be crypto_stream_chacha20_NONCEBYTES')\n\t  assert(k.byteLength === exports.crypto_stream_chacha20_KEYBYTES,\n\t    'k should be crypto_stream_chacha20_KEYBYTES')\n\n\t  const xor = new Chacha20(n, k)\n\t  xor.update(c, m)\n\t  xor.final()\n\t}\n\n\texports.crypto_stream_chacha20_xor_ic = function (c, m, n, ic, k) {\n\t  assert(n.byteLength === exports.crypto_stream_chacha20_NONCEBYTES,\n\t    'n should be crypto_stream_chacha20_NONCEBYTES')\n\t  assert(k.byteLength === exports.crypto_stream_chacha20_KEYBYTES,\n\t    'k should be crypto_stream_chacha20_KEYBYTES')\n\n\t  const xor = new Chacha20(n, k, ic)\n\t  xor.update(c, m)\n\t  xor.final()\n\t}\n\n\texports.crypto_stream_chacha20_xor_instance = function (n, k) {\n\t  assert(n.byteLength === exports.crypto_stream_chacha20_NONCEBYTES,\n\t    'n should be crypto_stream_chacha20_NONCEBYTES')\n\t  assert(k.byteLength === exports.crypto_stream_chacha20_KEYBYTES,\n\t    'k should be crypto_stream_chacha20_KEYBYTES')\n\n\t  return new Chacha20(n, k)\n\t}\n\n\texports.crypto_stream_chacha20_ietf = function (c, n, k) {\n\t  c.fill(0)\n\t  exports.crypto_stream_chacha20_ietf_xor(c, c, n, k)\n\t}\n\n\texports.crypto_stream_chacha20_ietf_xor = function (c, m, n, k) {\n\t  assert(n.byteLength === exports.crypto_stream_chacha20_ietf_NONCEBYTES,\n\t    'n should be crypto_stream_chacha20_ietf_NONCEBYTES')\n\t  assert(k.byteLength === exports.crypto_stream_chacha20_ietf_KEYBYTES,\n\t    'k should be crypto_stream_chacha20_ietf_KEYBYTES')\n\n\t  const xor = new Chacha20(n, k)\n\t  xor.update(c, m)\n\t  xor.final()\n\t}\n\n\texports.crypto_stream_chacha20_ietf_xor_ic = function (c, m, n, ic, k) {\n\t  assert(n.byteLength === exports.crypto_stream_chacha20_ietf_NONCEBYTES,\n\t    'n should be crypto_stream_chacha20_ietf_NONCEBYTES')\n\t  assert(k.byteLength === exports.crypto_stream_chacha20_ietf_KEYBYTES,\n\t    'k should be crypto_stream_chacha20_ietf_KEYBYTES')\n\n\t  const xor = new Chacha20(n, k, ic)\n\t  xor.update(c, m)\n\t  xor.final()\n\t}\n\n\texports.crypto_stream_chacha20_ietf_xor_instance = function (n, k) {\n\t  assert(n.byteLength === exports.crypto_stream_chacha20_ietf_NONCEBYTES,\n\t    'n should be crypto_stream_chacha20_ietf_NONCEBYTES')\n\t  assert(k.byteLength === exports.crypto_stream_chacha20_ietf_KEYBYTES,\n\t    'k should be crypto_stream_chacha20_ietf_KEYBYTES')\n\n\t  return new Chacha20(n, k)\n\t}\n} (crypto_stream_chacha20));\n\nexport default crypto_stream_chacha20;\nexport { crypto_stream_chacha20 as __moduleExports };","start":1670465470876,"end":1670465471134,"order":"normal"}]}
