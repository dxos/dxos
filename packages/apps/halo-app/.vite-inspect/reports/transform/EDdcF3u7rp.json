{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/level-js@5.0.2/node_modules/level-js/iterator.js","transforms":[{"name":"vite:load-fallback","result":"'use strict'\n\nvar inherits = require('inherits')\nvar AbstractIterator = require('abstract-leveldown').AbstractIterator\nvar createKeyRange = require('./util/key-range')\nvar deserialize = require('./util/deserialize')\nvar noop = function () {}\n\nmodule.exports = Iterator\n\nfunction Iterator (db, location, options) {\n  AbstractIterator.call(this, db)\n\n  this._limit = options.limit\n  this._count = 0\n  this._callback = null\n  this._cache = []\n  this._completed = false\n  this._aborted = false\n  this._error = null\n  this._transaction = null\n\n  this._keys = options.keys\n  this._values = options.values\n  this._keyAsBuffer = options.keyAsBuffer\n  this._valueAsBuffer = options.valueAsBuffer\n\n  if (this._limit === 0) {\n    this._completed = true\n    return\n  }\n\n  try {\n    var keyRange = createKeyRange(options)\n  } catch (e) {\n    // The lower key is greater than the upper key.\n    // IndexedDB throws an error, but we'll just return 0 results.\n    this._completed = true\n    return\n  }\n\n  this.createIterator(location, keyRange, options.reverse)\n}\n\ninherits(Iterator, AbstractIterator)\n\nIterator.prototype.createIterator = function (location, keyRange, reverse) {\n  var self = this\n  var transaction = this.db.db.transaction([location], 'readonly')\n  var store = transaction.objectStore(location)\n  var req = store.openCursor(keyRange, reverse ? 'prev' : 'next')\n\n  req.onsuccess = function (ev) {\n    var cursor = ev.target.result\n    if (cursor) self.onItem(cursor)\n  }\n\n  this._transaction = transaction\n\n  // If an error occurs (on the request), the transaction will abort.\n  transaction.onabort = function () {\n    self.onAbort(self._transaction.error || new Error('aborted by user'))\n  }\n\n  transaction.oncomplete = function () {\n    self.onComplete()\n  }\n}\n\nIterator.prototype.onItem = function (cursor) {\n  this._cache.push(cursor.key, cursor.value)\n\n  if (this._limit <= 0 || ++this._count < this._limit) {\n    cursor.continue()\n  }\n\n  this.maybeNext()\n}\n\nIterator.prototype.onAbort = function (err) {\n  this._aborted = true\n  this._error = err\n  this.maybeNext()\n}\n\nIterator.prototype.onComplete = function () {\n  this._completed = true\n  this.maybeNext()\n}\n\nIterator.prototype.maybeNext = function () {\n  if (this._callback) {\n    this._next(this._callback)\n    this._callback = null\n  }\n}\n\nIterator.prototype._next = function (callback) {\n  if (this._aborted) {\n    // The error should be picked up by either next() or end().\n    var err = this._error\n    this._error = null\n    this._nextTick(callback, err)\n  } else if (this._cache.length > 0) {\n    var key = this._cache.shift()\n    var value = this._cache.shift()\n\n    if (this._keys && key !== undefined) {\n      key = this._deserializeKey(key, this._keyAsBuffer)\n    } else {\n      key = undefined\n    }\n\n    if (this._values && value !== undefined) {\n      value = this._deserializeValue(value, this._valueAsBuffer)\n    } else {\n      value = undefined\n    }\n\n    this._nextTick(callback, null, key, value)\n  } else if (this._completed) {\n    this._nextTick(callback)\n  } else {\n    this._callback = callback\n  }\n}\n\n// Exposed for the v4 to v5 upgrade utility\nIterator.prototype._deserializeKey = deserialize\nIterator.prototype._deserializeValue = deserialize\n\nIterator.prototype._end = function (callback) {\n  if (this._aborted || this._completed) {\n    return this._nextTick(callback, this._error)\n  }\n\n  // Don't advance the cursor anymore, and the transaction will complete\n  // on its own in the next tick. This approach is much cleaner than calling\n  // transaction.abort() with its unpredictable event order.\n  this.onItem = noop\n  this.onAbort = callback\n  this.onComplete = callback\n}\n","start":1670465468229,"end":1670465468302},{"name":"vite:react-babel","result":"'use strict'\n\nvar inherits = require('inherits')\nvar AbstractIterator = require('abstract-leveldown').AbstractIterator\nvar createKeyRange = require('./util/key-range')\nvar deserialize = require('./util/deserialize')\nvar noop = function () {}\n\nmodule.exports = Iterator\n\nfunction Iterator (db, location, options) {\n  AbstractIterator.call(this, db)\n\n  this._limit = options.limit\n  this._count = 0\n  this._callback = null\n  this._cache = []\n  this._completed = false\n  this._aborted = false\n  this._error = null\n  this._transaction = null\n\n  this._keys = options.keys\n  this._values = options.values\n  this._keyAsBuffer = options.keyAsBuffer\n  this._valueAsBuffer = options.valueAsBuffer\n\n  if (this._limit === 0) {\n    this._completed = true\n    return\n  }\n\n  try {\n    var keyRange = createKeyRange(options)\n  } catch (e) {\n    // The lower key is greater than the upper key.\n    // IndexedDB throws an error, but we'll just return 0 results.\n    this._completed = true\n    return\n  }\n\n  this.createIterator(location, keyRange, options.reverse)\n}\n\ninherits(Iterator, AbstractIterator)\n\nIterator.prototype.createIterator = function (location, keyRange, reverse) {\n  var self = this\n  var transaction = this.db.db.transaction([location], 'readonly')\n  var store = transaction.objectStore(location)\n  var req = store.openCursor(keyRange, reverse ? 'prev' : 'next')\n\n  req.onsuccess = function (ev) {\n    var cursor = ev.target.result\n    if (cursor) self.onItem(cursor)\n  }\n\n  this._transaction = transaction\n\n  // If an error occurs (on the request), the transaction will abort.\n  transaction.onabort = function () {\n    self.onAbort(self._transaction.error || new Error('aborted by user'))\n  }\n\n  transaction.oncomplete = function () {\n    self.onComplete()\n  }\n}\n\nIterator.prototype.onItem = function (cursor) {\n  this._cache.push(cursor.key, cursor.value)\n\n  if (this._limit <= 0 || ++this._count < this._limit) {\n    cursor.continue()\n  }\n\n  this.maybeNext()\n}\n\nIterator.prototype.onAbort = function (err) {\n  this._aborted = true\n  this._error = err\n  this.maybeNext()\n}\n\nIterator.prototype.onComplete = function () {\n  this._completed = true\n  this.maybeNext()\n}\n\nIterator.prototype.maybeNext = function () {\n  if (this._callback) {\n    this._next(this._callback)\n    this._callback = null\n  }\n}\n\nIterator.prototype._next = function (callback) {\n  if (this._aborted) {\n    // The error should be picked up by either next() or end().\n    var err = this._error\n    this._error = null\n    this._nextTick(callback, err)\n  } else if (this._cache.length > 0) {\n    var key = this._cache.shift()\n    var value = this._cache.shift()\n\n    if (this._keys && key !== undefined) {\n      key = this._deserializeKey(key, this._keyAsBuffer)\n    } else {\n      key = undefined\n    }\n\n    if (this._values && value !== undefined) {\n      value = this._deserializeValue(value, this._valueAsBuffer)\n    } else {\n      value = undefined\n    }\n\n    this._nextTick(callback, null, key, value)\n  } else if (this._completed) {\n    this._nextTick(callback)\n  } else {\n    this._callback = callback\n  }\n}\n\n// Exposed for the v4 to v5 upgrade utility\nIterator.prototype._deserializeKey = deserialize\nIterator.prototype._deserializeValue = deserialize\n\nIterator.prototype._end = function (callback) {\n  if (this._aborted || this._completed) {\n    return this._nextTick(callback, this._error)\n  }\n\n  // Don't advance the cursor anymore, and the transaction will complete\n  // on its own in the next tick. This approach is much cleaner than calling\n  // transaction.abort() with its unpredictable event order.\n  this.onItem = noop\n  this.onAbort = callback\n  this.onComplete = callback\n}\n","start":1670465468302,"end":1670465468302,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/abstract-leveldown@6.2.3/node_modules/abstract-leveldown/index.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/level-js@5.0.2/node_modules/level-js/util/key-range.js?commonjs-proxy\";\nimport require$$3 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/level-js@5.0.2/node_modules/level-js/util/deserialize.js?commonjs-proxy\";\n\n'use strict'\n\nvar inherits = require$$0\nvar AbstractIterator = require$$1.AbstractIterator\nvar createKeyRange = require$$2\nvar deserialize = require$$3\nvar noop = function () {}\n\nvar iterator = Iterator\n\nfunction Iterator (db, location, options) {\n  AbstractIterator.call(this, db)\n\n  this._limit = options.limit\n  this._count = 0\n  this._callback = null\n  this._cache = []\n  this._completed = false\n  this._aborted = false\n  this._error = null\n  this._transaction = null\n\n  this._keys = options.keys\n  this._values = options.values\n  this._keyAsBuffer = options.keyAsBuffer\n  this._valueAsBuffer = options.valueAsBuffer\n\n  if (this._limit === 0) {\n    this._completed = true\n    return\n  }\n\n  try {\n    var keyRange = createKeyRange(options)\n  } catch (e) {\n    // The lower key is greater than the upper key.\n    // IndexedDB throws an error, but we'll just return 0 results.\n    this._completed = true\n    return\n  }\n\n  this.createIterator(location, keyRange, options.reverse)\n}\n\ninherits(Iterator, AbstractIterator)\n\nIterator.prototype.createIterator = function (location, keyRange, reverse) {\n  var self = this\n  var transaction = this.db.db.transaction([location], 'readonly')\n  var store = transaction.objectStore(location)\n  var req = store.openCursor(keyRange, reverse ? 'prev' : 'next')\n\n  req.onsuccess = function (ev) {\n    var cursor = ev.target.result\n    if (cursor) self.onItem(cursor)\n  }\n\n  this._transaction = transaction\n\n  // If an error occurs (on the request), the transaction will abort.\n  transaction.onabort = function () {\n    self.onAbort(self._transaction.error || new Error('aborted by user'))\n  }\n\n  transaction.oncomplete = function () {\n    self.onComplete()\n  }\n}\n\nIterator.prototype.onItem = function (cursor) {\n  this._cache.push(cursor.key, cursor.value)\n\n  if (this._limit <= 0 || ++this._count < this._limit) {\n    cursor.continue()\n  }\n\n  this.maybeNext()\n}\n\nIterator.prototype.onAbort = function (err) {\n  this._aborted = true\n  this._error = err\n  this.maybeNext()\n}\n\nIterator.prototype.onComplete = function () {\n  this._completed = true\n  this.maybeNext()\n}\n\nIterator.prototype.maybeNext = function () {\n  if (this._callback) {\n    this._next(this._callback)\n    this._callback = null\n  }\n}\n\nIterator.prototype._next = function (callback) {\n  if (this._aborted) {\n    // The error should be picked up by either next() or end().\n    var err = this._error\n    this._error = null\n    this._nextTick(callback, err)\n  } else if (this._cache.length > 0) {\n    var key = this._cache.shift()\n    var value = this._cache.shift()\n\n    if (this._keys && key !== undefined) {\n      key = this._deserializeKey(key, this._keyAsBuffer)\n    } else {\n      key = undefined\n    }\n\n    if (this._values && value !== undefined) {\n      value = this._deserializeValue(value, this._valueAsBuffer)\n    } else {\n      value = undefined\n    }\n\n    this._nextTick(callback, null, key, value)\n  } else if (this._completed) {\n    this._nextTick(callback)\n  } else {\n    this._callback = callback\n  }\n}\n\n// Exposed for the v4 to v5 upgrade utility\nIterator.prototype._deserializeKey = deserialize\nIterator.prototype._deserializeValue = deserialize\n\nIterator.prototype._end = function (callback) {\n  if (this._aborted || this._completed) {\n    return this._nextTick(callback, this._error)\n  }\n\n  // Don't advance the cursor anymore, and the transaction will complete\n  // on its own in the next tick. This approach is much cleaner than calling\n  // transaction.abort() with its unpredictable event order.\n  this.onItem = noop\n  this.onAbort = callback\n  this.onComplete = callback\n}\n\nexport default iterator;\nexport { iterator as __moduleExports };","start":1670465468303,"end":1670465471257,"order":"normal"},{"name":"polyfill-node","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/abstract-leveldown@6.2.3/node_modules/abstract-leveldown/index.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/level-js@5.0.2/node_modules/level-js/util/key-range.js?commonjs-proxy\";\nimport require$$3 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/level-js@5.0.2/node_modules/level-js/util/deserialize.js?commonjs-proxy\";\n\n'use strict'\n\nvar inherits = require$$0\nvar AbstractIterator = require$$1.AbstractIterator\nvar createKeyRange = require$$2\nvar deserialize = require$$3\nvar noop = function () {}\n\nvar iterator = Iterator\n\nfunction Iterator (db, location, options) {\n  AbstractIterator.call(this, db)\n\n  this._limit = options.limit\n  this._count = 0\n  this._callback = null\n  this._cache = []\n  this._completed = false\n  this._aborted = false\n  this._error = null\n  this._transaction = null\n\n  this._keys = options.keys\n  this._values = options.values\n  this._keyAsBuffer = options.keyAsBuffer\n  this._valueAsBuffer = options.valueAsBuffer\n\n  if (this._limit === 0) {\n    this._completed = true\n    return\n  }\n\n  try {\n    var keyRange = createKeyRange(options)\n  } catch (e) {\n    // The lower key is greater than the upper key.\n    // IndexedDB throws an error, but we'll just return 0 results.\n    this._completed = true\n    return\n  }\n\n  this.createIterator(location, keyRange, options.reverse)\n}\n\ninherits(Iterator, AbstractIterator)\n\nIterator.prototype.createIterator = function (location, keyRange, reverse) {\n  var self = this\n  var transaction = this.db.db.transaction([location], 'readonly')\n  var store = transaction.objectStore(location)\n  var req = store.openCursor(keyRange, reverse ? 'prev' : 'next')\n\n  req.onsuccess = function (ev) {\n    var cursor = ev.target.result\n    if (cursor) self.onItem(cursor)\n  }\n\n  this._transaction = transaction\n\n  // If an error occurs (on the request), the transaction will abort.\n  transaction.onabort = function () {\n    self.onAbort(self._transaction.error || new Error('aborted by user'))\n  }\n\n  transaction.oncomplete = function () {\n    self.onComplete()\n  }\n}\n\nIterator.prototype.onItem = function (cursor) {\n  this._cache.push(cursor.key, cursor.value)\n\n  if (this._limit <= 0 || ++this._count < this._limit) {\n    cursor.continue()\n  }\n\n  this.maybeNext()\n}\n\nIterator.prototype.onAbort = function (err) {\n  this._aborted = true\n  this._error = err\n  this.maybeNext()\n}\n\nIterator.prototype.onComplete = function () {\n  this._completed = true\n  this.maybeNext()\n}\n\nIterator.prototype.maybeNext = function () {\n  if (this._callback) {\n    this._next(this._callback)\n    this._callback = null\n  }\n}\n\nIterator.prototype._next = function (callback) {\n  if (this._aborted) {\n    // The error should be picked up by either next() or end().\n    var err = this._error\n    this._error = null\n    this._nextTick(callback, err)\n  } else if (this._cache.length > 0) {\n    var key = this._cache.shift()\n    var value = this._cache.shift()\n\n    if (this._keys && key !== undefined) {\n      key = this._deserializeKey(key, this._keyAsBuffer)\n    } else {\n      key = undefined\n    }\n\n    if (this._values && value !== undefined) {\n      value = this._deserializeValue(value, this._valueAsBuffer)\n    } else {\n      value = undefined\n    }\n\n    this._nextTick(callback, null, key, value)\n  } else if (this._completed) {\n    this._nextTick(callback)\n  } else {\n    this._callback = callback\n  }\n}\n\n// Exposed for the v4 to v5 upgrade utility\nIterator.prototype._deserializeKey = deserialize\nIterator.prototype._deserializeValue = deserialize\n\nIterator.prototype._end = function (callback) {\n  if (this._aborted || this._completed) {\n    return this._nextTick(callback, this._error)\n  }\n\n  // Don't advance the cursor anymore, and the transaction will complete\n  // on its own in the next tick. This approach is much cleaner than calling\n  // transaction.abort() with its unpredictable event order.\n  this.onItem = noop\n  this.onAbort = callback\n  this.onComplete = callback\n}\n\nexport default iterator;\nexport { iterator as __moduleExports };","start":1670465471260,"end":1670465471262,"order":"normal"}]}
