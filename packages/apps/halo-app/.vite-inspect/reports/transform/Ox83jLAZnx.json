{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/siphash24@1.3.1/node_modules/siphash24/index.js","transforms":[{"name":"vite:load-fallback","result":"var assert = require('nanoassert')\nvar wasm = typeof WebAssembly !== 'undefined' && require('./siphash24')()\nvar fallback = require('./fallback')\n\nmodule.exports = siphash24\n\nvar BYTES = siphash24.BYTES = 8\nvar KEYBYTES = siphash24.KEYBYTES = 16\n\nsiphash24.WASM_SUPPORTED = !!wasm\nsiphash24.WASM_LOADED = !!wasm\n\nvar memory = new Uint8Array(wasm ? wasm.memory.buffer : 0)\n\nfunction siphash24 (data, key, out, noAssert) {\n  if (!out) out = new Uint8Array(8)\n\n  if (noAssert !== true) {\n    assert(out.length >= BYTES, 'output must be at least ' + BYTES)\n    assert(key.length >= KEYBYTES, 'key must be at least ' + KEYBYTES)\n  }\n\n  if (wasm) {\n    if (data.length + 24 > memory.length) realloc(data.length + 24)\n    memory.set(key, 8)\n    memory.set(data, 24)\n    wasm.siphash(24, data.length)\n    out.set(memory.subarray(0, 8))\n  } else {\n    fallback(out, data, key)\n  }\n\n  return out\n}\n\nfunction realloc (size) {\n  wasm.memory.grow(Math.max(0, Math.ceil(Math.abs(size - memory.length) / 65536)))\n  memory = new Uint8Array(wasm.memory.buffer)\n}\n","start":1670465470997,"end":1670465471126},{"name":"vite:react-babel","result":"var assert = require('nanoassert')\nvar wasm = typeof WebAssembly !== 'undefined' && require('./siphash24')()\nvar fallback = require('./fallback')\n\nmodule.exports = siphash24\n\nvar BYTES = siphash24.BYTES = 8\nvar KEYBYTES = siphash24.KEYBYTES = 16\n\nsiphash24.WASM_SUPPORTED = !!wasm\nsiphash24.WASM_LOADED = !!wasm\n\nvar memory = new Uint8Array(wasm ? wasm.memory.buffer : 0)\n\nfunction siphash24 (data, key, out, noAssert) {\n  if (!out) out = new Uint8Array(8)\n\n  if (noAssert !== true) {\n    assert(out.length >= BYTES, 'output must be at least ' + BYTES)\n    assert(key.length >= KEYBYTES, 'key must be at least ' + KEYBYTES)\n  }\n\n  if (wasm) {\n    if (data.length + 24 > memory.length) realloc(data.length + 24)\n    memory.set(key, 8)\n    memory.set(data, 24)\n    wasm.siphash(24, data.length)\n    out.set(memory.subarray(0, 8))\n  } else {\n    fallback(out, data, key)\n  }\n\n  return out\n}\n\nfunction realloc (size) {\n  wasm.memory.grow(Math.max(0, Math.ceil(Math.abs(size - memory.length) / 65536)))\n  memory = new Uint8Array(wasm.memory.buffer)\n}\n","start":1670465471126,"end":1670465471126,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/nanoassert@2.0.0/node_modules/nanoassert/index.js?commonjs-proxy\";\nimport { __require as require$$1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/siphash24@1.3.1/node_modules/siphash24/siphash24.js?commonjs-wrapped\";\nimport require$$2 from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/siphash24@1.3.1/node_modules/siphash24/fallback.js?commonjs-proxy\";\n\nvar assert = require$$0\nvar wasm = typeof WebAssembly !== 'undefined' && require$$1()()\nvar fallback = require$$2\n\nvar siphash24_1 = siphash24\n\nvar BYTES = siphash24.BYTES = 8\nvar KEYBYTES = siphash24.KEYBYTES = 16\n\nsiphash24.WASM_SUPPORTED = !!wasm\nsiphash24.WASM_LOADED = !!wasm\n\nvar memory = new Uint8Array(wasm ? wasm.memory.buffer : 0)\n\nfunction siphash24 (data, key, out, noAssert) {\n  if (!out) out = new Uint8Array(8)\n\n  if (noAssert !== true) {\n    assert(out.length >= BYTES, 'output must be at least ' + BYTES)\n    assert(key.length >= KEYBYTES, 'key must be at least ' + KEYBYTES)\n  }\n\n  if (wasm) {\n    if (data.length + 24 > memory.length) realloc(data.length + 24)\n    memory.set(key, 8)\n    memory.set(data, 24)\n    wasm.siphash(24, data.length)\n    out.set(memory.subarray(0, 8))\n  } else {\n    fallback(out, data, key)\n  }\n\n  return out\n}\n\nfunction realloc (size) {\n  wasm.memory.grow(Math.max(0, Math.ceil(Math.abs(size - memory.length) / 65536)))\n  memory = new Uint8Array(wasm.memory.buffer)\n}\n\nexport default siphash24_1;\nexport { siphash24_1 as __moduleExports };","start":1670465471127,"end":1670465471620,"order":"normal"}]}
