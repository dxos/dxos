{"resolvedId":"/home/jdw/Code/dxos/dxos/packages/apps/halo-app/src/shared-worker.ts","transforms":[{"name":"__load__","result":"import { WorkerRuntime } from \"@dxos/client\";\nimport { Config, Defaults, Dynamics } from \"@dxos/config\";\nimport { log } from \"@dxos/log\";\nimport { PortMuxer } from \"@dxos/rpc-tunnel\";\nlog.config({ filter: ({}).LOG_FILTER ?? \"client:debug,info\", prefix: \"vscode://file/home/jdw/Code/dxos/dxos/\" });\nconst workerRuntime = new WorkerRuntime(async () => new Config(await Dynamics(), Defaults()));\nconst start = Date.now();\nvoid workerRuntime.start().then(\n  () => {\n    log.info(\"worker ready\", { initTimeMs: Date.now() - start });\n  },\n  (err) => {\n    log.catch(err);\n  }\n);\nonconnect = async (event) => {\n  log.info(\"onconnect\", { event });\n  const portMuxer = new PortMuxer(event.ports[0]);\n  await workerRuntime.createSession({\n    appPort: portMuxer.createWorkerPort({ channel: \"dxos:app\" }),\n    systemPort: portMuxer.createWorkerPort({ channel: \"dxos:system\" })\n  });\n};\n","start":1670465438336,"end":1670465438336},{"name":"dxos-config","result":"globalThis.__DXOS_CONFIG__ = {\"publicUrl\":\"\"};\nglobalThis.__CONFIG_DEFAULTS__ = {\"version\":1,\"package\":{\"modules\":[{\"name\":\"halo\",\"type\":\"dxos:type/app\",\"displayName\":\"HALO\",\"description\":\"Self-sovereign identity management.\",\"build\":{\"command\":\"pnpm -w nx bundle halo-app\"}}]},\"runtime\":{\"client\":{\"remoteSource\":\"/vault.html\",\"storage\":{\"persistent\":true}},\"services\":{\"signal\":{\"server\":\"wss://kube.dxos.org/.well-known/dx/signal\"},\"ice\":[{\"urls\":\"turn:kube.dxos.org:3478\",\"username\":\"dxos\",\"credential\":\"dxos\"}],\"dxns\":{\"server\":\"https://kube.dxos.org/.well-known/dx/registry\"}}}};\nglobalThis.__CONFIG_ENVS__ = {};\nglobalThis.__CONFIG_DYNAMICS__ = {};import { WorkerRuntime } from \"@dxos/client\";\nimport { Config, Defaults, Dynamics } from \"@dxos/config\";\nimport { log } from \"@dxos/log\";\nimport { PortMuxer } from \"@dxos/rpc-tunnel\";\nlog.config({ filter: ({}).LOG_FILTER ?? \"client:debug,info\", prefix: \"vscode://file/home/jdw/Code/dxos/dxos/\" });\nconst workerRuntime = new WorkerRuntime(async () => new Config(await Dynamics(), Defaults()));\nconst start = Date.now();\nvoid workerRuntime.start().then(\n  () => {\n    log.info(\"worker ready\", { initTimeMs: Date.now() - start });\n  },\n  (err) => {\n    log.catch(err);\n  }\n);\nonconnect = async (event) => {\n  log.info(\"onconnect\", { event });\n  const portMuxer = new PortMuxer(event.ports[0]);\n  await workerRuntime.createSession({\n    appPort: portMuxer.createWorkerPort({ channel: \"dxos:app\" }),\n    systemPort: portMuxer.createWorkerPort({ channel: \"dxos:system\" })\n  });\n};\n","start":1670465438336,"end":1670465438336,"order":"normal"}]}
