{"resolvedId":"/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+utf8@1.1.0/node_modules/@protobufjs/utf8/index.js","transforms":[{"name":"vite:load-fallback","result":"\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","start":1670465471159,"end":1670465471306},{"name":"vite:react-babel","result":"\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","start":1670465471307,"end":1670465471307,"order":"pre"},{"name":"commonjs","result":"import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as utf8_1 } from \"\\u0000/home/jdw/Code/dxos/dxos/node_modules/.pnpm/@protobufjs+utf8@1.1.0/node_modules/@protobufjs/utf8/index.js?commonjs-exports\"\n\n(function (exports) {\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * A minimal UTF8 implementation for number arrays.\r\n\t * @memberof util\r\n\t * @namespace\r\n\t */\r\n\tvar utf8 = exports;\r\n\r\n\t/**\r\n\t * Calculates the UTF8 byte length of a string.\r\n\t * @param {string} string String\r\n\t * @returns {number} Byte length\r\n\t */\r\n\tutf8.length = function utf8_length(string) {\r\n\t    var len = 0,\r\n\t        c = 0;\r\n\t    for (var i = 0; i < string.length; ++i) {\r\n\t        c = string.charCodeAt(i);\r\n\t        if (c < 128)\r\n\t            len += 1;\r\n\t        else if (c < 2048)\r\n\t            len += 2;\r\n\t        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n\t            ++i;\r\n\t            len += 4;\r\n\t        } else\r\n\t            len += 3;\r\n\t    }\r\n\t    return len;\r\n\t};\r\n\r\n\t/**\r\n\t * Reads UTF8 bytes as a string.\r\n\t * @param {Uint8Array} buffer Source buffer\r\n\t * @param {number} start Source start\r\n\t * @param {number} end Source end\r\n\t * @returns {string} String read\r\n\t */\r\n\tutf8.read = function utf8_read(buffer, start, end) {\r\n\t    var len = end - start;\r\n\t    if (len < 1)\r\n\t        return \"\";\r\n\t    var parts = null,\r\n\t        chunk = [],\r\n\t        i = 0, // char offset\r\n\t        t;     // temporary\r\n\t    while (start < end) {\r\n\t        t = buffer[start++];\r\n\t        if (t < 128)\r\n\t            chunk[i++] = t;\r\n\t        else if (t > 191 && t < 224)\r\n\t            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n\t        else if (t > 239 && t < 365) {\r\n\t            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n\t            chunk[i++] = 0xD800 + (t >> 10);\r\n\t            chunk[i++] = 0xDC00 + (t & 1023);\r\n\t        } else\r\n\t            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n\t        if (i > 8191) {\r\n\t            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n\t            i = 0;\r\n\t        }\r\n\t    }\r\n\t    if (parts) {\r\n\t        if (i)\r\n\t            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n\t        return parts.join(\"\");\r\n\t    }\r\n\t    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n\t};\r\n\r\n\t/**\r\n\t * Writes a string as UTF8 bytes.\r\n\t * @param {string} string Source string\r\n\t * @param {Uint8Array} buffer Destination buffer\r\n\t * @param {number} offset Destination offset\r\n\t * @returns {number} Bytes written\r\n\t */\r\n\tutf8.write = function utf8_write(string, buffer, offset) {\r\n\t    var start = offset,\r\n\t        c1, // character 1\r\n\t        c2; // character 2\r\n\t    for (var i = 0; i < string.length; ++i) {\r\n\t        c1 = string.charCodeAt(i);\r\n\t        if (c1 < 128) {\r\n\t            buffer[offset++] = c1;\r\n\t        } else if (c1 < 2048) {\r\n\t            buffer[offset++] = c1 >> 6       | 192;\r\n\t            buffer[offset++] = c1       & 63 | 128;\r\n\t        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n\t            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n\t            ++i;\r\n\t            buffer[offset++] = c1 >> 18      | 240;\r\n\t            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n\t            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n\t            buffer[offset++] = c1       & 63 | 128;\r\n\t        } else {\r\n\t            buffer[offset++] = c1 >> 12      | 224;\r\n\t            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n\t            buffer[offset++] = c1       & 63 | 128;\r\n\t        }\r\n\t    }\r\n\t    return offset - start;\r\n\t};\n} (utf8_1));\n\nexport default utf8_1;\nexport { utf8_1 as __moduleExports };","start":1670465471307,"end":1670465471308,"order":"normal"}]}
