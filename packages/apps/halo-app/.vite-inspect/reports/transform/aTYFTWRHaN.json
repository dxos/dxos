{"resolvedId":"/home/jdw/Code/dxos/dxos/packages/sdk/client/dist/lib/browser/index.mjs","transforms":[{"name":"vite:load-fallback","result":"// packages/sdk/client/src/index.ts\nimport { Config as Config3 } from \"@dxos/config\";\nimport { generateSeedPhrase } from \"@dxos/credentials\";\nimport { TYPE_SCHEMA, Entity, Item, Link, Database as Database2, Selection, SelectionResult, ItemFilterDeleted, ResultSet as ResultSet4, Schema } from \"@dxos/echo-db\";\nimport { PublicKey as PublicKey4 } from \"@dxos/keys\";\nimport { ItemID, ObjectModel, OrderedList } from \"@dxos/object-model\";\nimport {\n  InvitationEncoder,\n  ClientServicesHost as ClientServicesHost2,\n  IFrameRuntime,\n  WorkerRuntime,\n  WorkerSession\n} from \"@dxos/client-services\";\nimport { ApiError as ApiError6 } from \"@dxos/errors\";\nimport { Contact, SpaceMember, Profile } from \"@dxos/protocols/proto/dxos/client\";\nimport { Invitation } from \"@dxos/protocols/proto/dxos/client/services\";\nimport { KeyRecord, KeyType } from \"@dxos/protocols/proto/dxos/halo/keys\";\nimport { SignRequest, SignResponse } from \"@dxos/protocols/proto/dxos/client\";\n\n// packages/sdk/client/src/packlets/client/client.ts\nimport assert from \"@dxos/node-std/assert\";\nimport { inspect as inspect3 } from \"@dxos/node-std/util\";\nimport { synchronized as synchronized2 } from \"@dxos/async\";\nimport { createDefaultModelFactory } from \"@dxos/client-services\";\nimport { Config as Config2 } from \"@dxos/config\";\nimport { inspectObject as inspectObject3 } from \"@dxos/debug\";\nimport { ApiError as ApiError5, InvalidConfigError } from \"@dxos/errors\";\n\n// packages/sdk/client/src/version.ts\nvar DXOS_VERSION = \"0.1.13\";\n\n// packages/sdk/client/src/packlets/devtools/devtools.ts\nimport { log } from \"@dxos/log\";\nimport { createBundledRpcServer } from \"@dxos/rpc\";\nvar port = {\n  send: async (message) => window.postMessage({\n    data: Array.from(message),\n    source: \"dxos-client\"\n  }, \"*\"),\n  subscribe: (callback) => {\n    const handler = (event) => {\n      if (event.source !== window) {\n        return;\n      }\n      const message = event.data;\n      if (typeof message !== \"object\" || message === null || message.source !== \"content-script\") {\n        return;\n      }\n      callback(new Uint8Array(message.data));\n    };\n    window.addEventListener(\"message\", handler);\n    return () => window.removeEventListener(\"message\", handler);\n  }\n};\nvar createDevtoolsRpcServer = async (client, clientServices) => {\n  let server;\n  window.__DXOS__ = {\n    client,\n    openClientRpcServer: async () => {\n      if (server) {\n        log(\"Closing existing client RPC server.\", {}, {\n          file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/devtools/devtools.ts\",\n          line: 56,\n          scope: void 0,\n          callSite: (f, a) => f(...a)\n        });\n        await server.close();\n      }\n      log(\"Opening devtools client RPC server...\", {}, {\n        file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/devtools/devtools.ts\",\n        line: 60,\n        scope: void 0,\n        callSite: (f, a) => f(...a)\n      });\n      server = createBundledRpcServer({\n        services: clientServices.descriptors,\n        handlers: clientServices.services,\n        port\n      });\n      await server.open().catch((err) => {\n        log.error(`Failed to open RPC server: ${err}`, {}, {\n          file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/devtools/devtools.ts\",\n          line: 68,\n          scope: void 0,\n          callSite: (f, a) => f(...a)\n        });\n        return false;\n      });\n      log(\"Opened devtools client RPC server.\", {}, {\n        file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/devtools/devtools.ts\",\n        line: 72,\n        scope: void 0,\n        callSite: (f, a) => f(...a)\n      });\n      return true;\n    }\n  };\n};\n\n// packages/sdk/client/src/packlets/proxies/echo-proxy.ts\nimport { inspect } from \"@dxos/node-std/util\";\nimport { Event as Event2, EventSubscriptions, Trigger } from \"@dxos/async\";\nimport { ClientServicesProxy as ClientServicesProxy2, SpaceInvitationsProxy as SpaceInvitationsProxy2 } from \"@dxos/client-services\";\nimport { inspectObject } from \"@dxos/debug\";\nimport { ResultSet as ResultSet2 } from \"@dxos/echo-db\";\nimport { ApiError as ApiError2, SystemError } from \"@dxos/errors\";\nimport { PublicKey } from \"@dxos/keys\";\nimport { log as log3 } from \"@dxos/log\";\nimport { ComplexMap } from \"@dxos/util\";\n\n// packages/sdk/client/src/packlets/proxies/space-proxy.ts\nimport { Event, synchronized } from \"@dxos/async\";\nimport { ClientServicesProxy, SpaceInvitationsProxy } from \"@dxos/client-services\";\nimport { todo } from \"@dxos/debug\";\nimport { Database, DatabaseBackendProxy, ResultSet } from \"@dxos/echo-db\";\nimport { ApiError } from \"@dxos/errors\";\nimport { log as log2 } from \"@dxos/log\";\nvar __decorate = function(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n    r = Reflect.decorate(decorators, target, key, desc);\n  else\n    for (var i = decorators.length - 1; i >= 0; i--)\n      if (d = decorators[i])\n        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar SPACE_ITEM_TYPE = \"dxos:item/space\";\nvar SpaceProxy = class {\n  constructor(_clientServices, _modelFactory, _space, memberKey) {\n    this._clientServices = _clientServices;\n    this._modelFactory = _modelFactory;\n    this._space = _space;\n    this._invitationProxy = new SpaceInvitationsProxy(this._clientServices.services.SpaceInvitationsService);\n    this._invitations = [];\n    this.invitationsUpdate = new Event();\n    this.stateUpdate = new Event();\n    this._initialized = false;\n    this._key = this._space.publicKey;\n    this._isOpen = this._space.isOpen;\n    this._isActive = this._space.isActive;\n    if (!this._space.isOpen) {\n      return;\n    }\n    this._database = new Database(this._modelFactory, new DatabaseBackendProxy(this._clientServices.services.DataService, this._key), memberKey);\n  }\n  get key() {\n    return this._key;\n  }\n  get isOpen() {\n    return this._isOpen;\n  }\n  get isActive() {\n    return this._isActive;\n  }\n  get database() {\n    if (!this._database) {\n      throw new ApiError(\"Space not open.\");\n    }\n    return this._database;\n  }\n  get select() {\n    return this.database.select.bind(this.database);\n  }\n  get reduce() {\n    return this.database.reduce.bind(this.database);\n  }\n  async initialize() {\n    if (this._initialized) {\n      return;\n    }\n    log2(\"initializing...\", {}, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 169,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    this._initialized = true;\n    await this.database.initialize();\n    const result = this.database.select({\n      type: SPACE_ITEM_TYPE\n    }).exec();\n    if (result.entities.length) {\n      this._item = result.entities[0];\n    } else {\n      this._item = await this.database.createItem({\n        type: SPACE_ITEM_TYPE\n      });\n    }\n    this.stateUpdate.emit();\n    log2(\"initialized\", {}, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 185,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n  }\n  async destroy() {\n    log2(\"destroying...\", {}, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 193,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    if (this._database && this._clientServices instanceof ClientServicesProxy) {\n      await this.database.destroy();\n    }\n    log2(\"destroyed\", {}, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 198,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n  }\n  async open() {\n    await this._setOpen(true);\n  }\n  async close() {\n    await this._setOpen(false);\n  }\n  async getDetails() {\n    return this._clientServices.services.SpaceService.getSpaceDetails({\n      spaceKey: this._key\n    });\n  }\n  get properties() {\n    return this._item.model;\n  }\n  get invitations() {\n    return this._invitations;\n  }\n  async setActive(active) {\n  }\n  async setTitle(title) {\n  }\n  getTitle() {\n    return todo();\n  }\n  async setProperty(key, value) {\n    await this.properties.set(key, value);\n  }\n  getProperty(key, defaultValue) {\n    return this.properties.get(key, defaultValue);\n  }\n  queryMembers() {\n    return new ResultSet(this.stateUpdate, () => {\n      var _a;\n      return (_a = this._space.members) != null ? _a : [];\n    });\n  }\n  createInvitation(options) {\n    log2(\"create invitation\", options, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 279,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    const invitation = this._invitationProxy.createInvitation(this.key, options);\n    this._invitations.push(invitation);\n    const unsubscribe = invitation.subscribe({\n      onConnecting: () => {\n        this.invitationsUpdate.emit(invitation);\n        unsubscribe();\n      },\n      onCancelled: () => {\n        unsubscribe();\n      },\n      onSuccess: () => {\n        unsubscribe();\n      },\n      onError: function(err) {\n        unsubscribe();\n      }\n    });\n    return invitation;\n  }\n  removeInvitation(id) {\n    var _a;\n    log2(\"remove invitation\", {\n      id\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 306,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    const index = this._invitations.findIndex((invitation) => {\n      var _a2;\n      return ((_a2 = invitation.invitation) == null ? void 0 : _a2.invitationId) === id;\n    });\n    void ((_a = this._invitations[index]) == null ? void 0 : _a.cancel());\n    this._invitations.splice(index, 1);\n    this.invitationsUpdate.emit();\n  }\n  createSnapshot() {\n    return todo();\n  }\n  async _setOpen(open) {\n    await this._clientServices.services.SpaceService.setSpaceState({\n      spaceKey: this.key,\n      open\n    });\n  }\n  _processSpaceUpdate(space) {\n    this._space = space;\n    this._key = space.publicKey;\n    this._isOpen = space.isOpen;\n    this._isActive = space.isActive;\n    log2(\"update\", {\n      space\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 337,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    this.stateUpdate.emit();\n  }\n};\n__decorate([\n  synchronized\n], SpaceProxy.prototype, \"initialize\", null);\n__decorate([\n  synchronized\n], SpaceProxy.prototype, \"destroy\", null);\n\n// packages/sdk/client/src/packlets/proxies/echo-proxy.ts\nvar EchoProxy = class {\n  constructor(_serviceProvider, _modelFactory, _haloProxy) {\n    this._serviceProvider = _serviceProvider;\n    this._modelFactory = _modelFactory;\n    this._haloProxy = _haloProxy;\n    this._spaces = new ComplexMap(PublicKey.hash);\n    this._subscriptions = new EventSubscriptions();\n    this._spacesChanged = new Event2();\n    this._spacesInitialized = new Event2();\n    this._destroying = false;\n  }\n  [inspect.custom]() {\n    return inspectObject(this);\n  }\n  toJSON() {\n    return {\n      spaces: this._spaces.size\n    };\n  }\n  get modelFactory() {\n    return this._modelFactory;\n  }\n  get networkManager() {\n    if (this._serviceProvider instanceof ClientServicesProxy2) {\n      throw new SystemError(\"Network manager not available in service proxy.\");\n    }\n    return this._serviceProvider.echo.networkManager;\n  }\n  get opened() {\n    return this._invitationProxy !== void 0;\n  }\n  async open() {\n    this._invitationProxy = new SpaceInvitationsProxy2(this._serviceProvider.services.SpaceInvitationsService);\n    const gotSpaces = this._spacesChanged.waitForCount(1);\n    const spacesStream = this._serviceProvider.services.SpaceService.subscribeSpaces();\n    spacesStream.subscribe(async (data) => {\n      var _a;\n      for (const space of (_a = data.spaces) != null ? _a : []) {\n        if (!this._spaces.has(space.publicKey)) {\n          await this._haloProxy.profileChanged.waitForCondition(() => !!this._haloProxy.profile);\n          if (this._destroying) {\n            return;\n          }\n          const spaceProxy = new SpaceProxy(this._serviceProvider, this._modelFactory, space, this._haloProxy.profile.identityKey);\n          this._spaces.set(spaceProxy.key, spaceProxy);\n          await spaceProxy.initialize();\n          this._spacesInitialized.emit(spaceProxy.key);\n        } else {\n          this._spaces.get(space.publicKey)._processSpaceUpdate(space);\n        }\n      }\n      this._spacesChanged.emit();\n    });\n    this._subscriptions.add(() => spacesStream.close());\n    await gotSpaces;\n  }\n  async close() {\n    for (const space of this._spaces.values()) {\n      await space.destroy();\n    }\n    await this._subscriptions.clear();\n    this._invitationProxy = void 0;\n  }\n  async createSpace() {\n    const space = await this._serviceProvider.services.SpaceService.createSpace();\n    const proxy = new Trigger();\n    const unsubscribe = this._spacesInitialized.on((spaceKey) => {\n      if (spaceKey.equals(space.publicKey)) {\n        const spaceProxy2 = this._spaces.get(space.publicKey);\n        proxy.wake(spaceProxy2);\n      }\n    });\n    const spaceProxy = await proxy.wait();\n    unsubscribe();\n    return spaceProxy;\n  }\n  async cloneSpace(snapshot) {\n    const space = await this._serviceProvider.services.SpaceService.cloneSpace(snapshot);\n    const proxy = new Trigger();\n    const unsubscribe = this._spacesInitialized.on((spaceKey) => {\n      if (spaceKey.equals(space.publicKey)) {\n        const spaceProxy2 = this._spaces.get(space.publicKey);\n        proxy.wake(spaceProxy2);\n      }\n    });\n    const spaceProxy = await proxy.wait();\n    unsubscribe();\n    return spaceProxy;\n  }\n  getSpace(spaceKey) {\n    return this._spaces.get(spaceKey);\n  }\n  querySpaces() {\n    return new ResultSet2(this._spacesChanged, () => Array.from(this._spaces.values()));\n  }\n  acceptInvitation(invitation, options) {\n    if (!this.opened) {\n      throw new ApiError2(\"Client not open.\");\n    }\n    log3(\"accept invitation\", options, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/echo-proxy.ts\",\n      line: 221,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    return this._invitationProxy.acceptInvitation(invitation, options);\n  }\n};\n\n// packages/sdk/client/src/packlets/proxies/halo-proxy.ts\nimport { inspect as inspect2 } from \"@dxos/node-std/util\";\nimport { Event as Event3, EventSubscriptions as EventSubscriptions2 } from \"@dxos/async\";\nimport { HaloInvitationsProxy } from \"@dxos/client-services\";\nimport { keyPairFromSeedPhrase } from \"@dxos/credentials\";\nimport { inspectObject as inspectObject2 } from \"@dxos/debug\";\nimport { ResultSet as ResultSet3 } from \"@dxos/echo-db\";\nimport { ApiError as ApiError3 } from \"@dxos/errors\";\nimport { PublicKey as PublicKey2 } from \"@dxos/keys\";\nimport { log as log4 } from \"@dxos/log\";\nimport { humanize } from \"@dxos/util\";\nvar HaloProxy = class {\n  constructor(_serviceProvider) {\n    this._serviceProvider = _serviceProvider;\n    this._subscriptions = new EventSubscriptions2();\n    this._contactsChanged = new Event3();\n    this.invitationsUpdate = new Event3();\n    this.profileChanged = new Event3();\n    this._invitations = [];\n    this._contacts = [];\n  }\n  [inspect2.custom]() {\n    return inspectObject2(this);\n  }\n  toJSON() {\n    var _a;\n    return {\n      key: (_a = this._profile) == null ? void 0 : _a.identityKey\n    };\n  }\n  get profile() {\n    return this._profile;\n  }\n  get invitations() {\n    return this._invitations;\n  }\n  get opened() {\n    return this._invitationProxy !== void 0;\n  }\n  async open() {\n    const gotProfile = this.profileChanged.waitForCount(1);\n    this._invitationProxy = new HaloInvitationsProxy(this._serviceProvider.services.HaloInvitationsService);\n    const profileStream = this._serviceProvider.services.ProfileService.subscribeProfile();\n    profileStream.subscribe((data) => {\n      this._profile = data.profile;\n      this.profileChanged.emit();\n    });\n    this._subscriptions.add(() => profileStream.close());\n    await Promise.all([\n      gotProfile\n    ]);\n  }\n  async close() {\n    this._subscriptions.clear();\n    this._invitationProxy = void 0;\n  }\n  subscribeToProfile(callback) {\n    return this.profileChanged.on(() => callback(this._profile));\n  }\n  async createProfile({ publicKey, secretKey, displayName, seedphrase } = {}) {\n    if (seedphrase && (publicKey || secretKey)) {\n      throw new ApiError3(\"Seedphrase must not be specified with existing keys\");\n    }\n    if (seedphrase) {\n      const keyPair = keyPairFromSeedPhrase(seedphrase);\n      publicKey = PublicKey2.from(keyPair.publicKey);\n      secretKey = PublicKey2.from(keyPair.secretKey);\n    }\n    this._profile = await this._serviceProvider.services.ProfileService.createProfile({\n      publicKey: publicKey == null ? void 0 : publicKey.asUint8Array(),\n      secretKey: secretKey == null ? void 0 : secretKey.asUint8Array(),\n      displayName\n    });\n    return this._profile;\n  }\n  async recoverProfile(seedPhrase) {\n    this._profile = await this._serviceProvider.services.ProfileService.recoverProfile({\n      seedPhrase\n    });\n    return this._profile;\n  }\n  queryContacts() {\n    return new ResultSet3(this._contactsChanged, () => this._contacts);\n  }\n  async queryDevices() {\n    return new Promise((resolve, reject) => {\n      const stream = this._serviceProvider.services.DevicesService.queryDevices();\n      stream.subscribe((devices) => {\n        var _a, _b;\n        resolve((_b = (_a = devices.devices) == null ? void 0 : _a.map((device) => ({\n          publicKey: device.deviceKey,\n          displayName: humanize(device.deviceKey)\n        }))) != null ? _b : []);\n        stream.close();\n      }, (error) => {\n        reject(error);\n        stream.close();\n      });\n    });\n  }\n  createInvitation(options) {\n    if (!this.opened) {\n      throw new ApiError3(\"Client not open.\");\n    }\n    log4(\"create invitation\", options, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/halo-proxy.ts\",\n      line: 218,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    const invitation = this._invitationProxy.createInvitation(void 0, options);\n    this._invitations.push(invitation);\n    const unsubscribe = invitation.subscribe({\n      onConnecting: () => {\n        this.invitationsUpdate.emit(invitation);\n        unsubscribe();\n      },\n      onCancelled: () => {\n        unsubscribe();\n      },\n      onSuccess: () => {\n        unsubscribe();\n      },\n      onError: function(err) {\n        unsubscribe();\n      }\n    });\n    return invitation;\n  }\n  removeInvitation(id) {\n    var _a;\n    log4(\"remove invitation\", {\n      id\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/halo-proxy.ts\",\n      line: 245,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    const index = this._invitations.findIndex((invitation) => {\n      var _a2;\n      return ((_a2 = invitation.invitation) == null ? void 0 : _a2.invitationId) === id;\n    });\n    void ((_a = this._invitations[index]) == null ? void 0 : _a.cancel());\n    this._invitations.splice(index, 1);\n    this.invitationsUpdate.emit();\n  }\n  acceptInvitation(invitation, options) {\n    if (!this.opened) {\n      throw new ApiError3(\"Client not open.\");\n    }\n    log4(\"accept invitation\", options, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/halo-proxy.ts\",\n      line: 260,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    return this._invitationProxy.acceptInvitation(invitation, options);\n  }\n};\n\n// packages/sdk/client/src/packlets/client/config.ts\nvar DEFAULT_CONFIG_CHANNEL = \"dxos:app\";\nvar DEFAULT_CLIENT_ORIGIN = \"https://halo.dxos.org/vault.html\";\nvar EXPECTED_CONFIG_VERSION = 1;\nvar defaultConfig = {\n  version: 1\n};\n\n// packages/sdk/client/src/packlets/client/serializer.ts\nimport { schema } from \"@dxos/protocols\";\nvar spaceCodec = schema.getCodecForType(\"dxos.echo.snapshot.SpaceSnapshot\");\nvar SpaceSerializer = class {\n  constructor(_echo) {\n    this._echo = _echo;\n  }\n  async serializeSpace(space) {\n    const snapshot = await space.createSnapshot();\n    return new Blob([\n      spaceCodec.encode(snapshot)\n    ]);\n  }\n  async deserializeSpace(data) {\n    return await this._echo.cloneSpace(spaceCodec.decode(data));\n  }\n};\n\n// packages/sdk/client/src/packlets/client/utils.ts\nimport { ClientServicesHost } from \"@dxos/client-services\";\nimport { Config } from \"@dxos/config\";\nimport { ApiError as ApiError4 } from \"@dxos/errors\";\nimport { log as log5 } from \"@dxos/log\";\nimport { MemorySignalManager, MemorySignalManagerContext, WebsocketSignalManager } from \"@dxos/messaging\";\nimport { createWebRTCTransportFactory, MemoryTransportFactory, NetworkManager } from \"@dxos/network-manager\";\n\n// packages/sdk/client/src/packlets/client/iframe-service-proxy.ts\nimport { ClientServicesProxy as ClientServicesProxy3 } from \"@dxos/client-services\";\nimport { PublicKey as PublicKey3 } from \"@dxos/keys\";\nimport { createIFrame, createIFramePort } from \"@dxos/rpc-tunnel\";\nvar IFrameClientServicesProxy = class {\n  constructor({ config, channel, timeout = 1e3 }) {\n    this.params = {\n      config,\n      channel,\n      timeout\n    };\n    this._clientServicesProxy = new ClientServicesProxy3(this._getIFramePort());\n  }\n  get proxy() {\n    return this._clientServicesProxy.proxy;\n  }\n  get descriptors() {\n    return this._clientServicesProxy.descriptors;\n  }\n  get services() {\n    return this._clientServicesProxy.services;\n  }\n  async open() {\n    if (!this._clientServicesProxy) {\n      this._clientServicesProxy = new ClientServicesProxy3(this._getIFramePort());\n    }\n    return this._clientServicesProxy.open();\n  }\n  async close() {\n    var _a, _b;\n    await ((_a = this._clientServicesProxy) == null ? void 0 : _a.close());\n    this._clientServicesProxy = void 0;\n    if (this._iframeId) {\n      (_b = document.getElementById(this._iframeId)) == null ? void 0 : _b.remove();\n      this._iframeId = void 0;\n    }\n  }\n  _getIFramePort() {\n    var _a;\n    this._iframeId = `__DXOS_CLIENT_${PublicKey3.random().toHex()}__`;\n    const source = new URL((_a = this.params.config.get(\"runtime.client.remoteSource\")) != null ? _a : DEFAULT_CLIENT_ORIGIN, window.location.origin);\n    const iframe = createIFrame(source.toString(), this._iframeId);\n    return createIFramePort({\n      origin: source.origin,\n      iframe,\n      channel: this.params.channel\n    });\n  }\n};\n\n// packages/sdk/client/src/packlets/client/utils.ts\nvar fromIFrame = (config = new Config(), channel = DEFAULT_CONFIG_CHANNEL) => {\n  if (typeof window === \"undefined\") {\n    throw new ApiError4(\"Cannot configure IFrame bridge outside of browser environment.\");\n  }\n  return new IFrameClientServicesProxy({\n    config,\n    channel\n  });\n};\nvar fromHost = (config = new Config()) => {\n  return new ClientServicesHost({\n    config,\n    networkManager: createNetworkManager(config)\n  });\n};\nvar createNetworkManager = (config, options = {}) => {\n  const signalServer = config.get(\"runtime.services.signal.server\");\n  if (signalServer) {\n    const { log: log1 = true, signalManager = new WebsocketSignalManager([\n      signalServer\n    ]), transportFactory = createWebRTCTransportFactory({\n      iceServers: config.get(\"runtime.services.ice\")\n    }) } = options;\n    return new NetworkManager({\n      log: log1,\n      signalManager,\n      transportFactory\n    });\n  }\n  log5.warn(\"P2P network is not configured.\", {}, {\n    file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/client/utils.ts\",\n    line: 62,\n    scope: void 0,\n    callSite: (f, a) => f(...a)\n  });\n  return new NetworkManager({\n    signalManager: new MemorySignalManager(new MemorySignalManagerContext()),\n    transportFactory: MemoryTransportFactory\n  });\n};\n\n// packages/sdk/client/src/packlets/client/client.ts\nvar __decorate2 = function(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n    r = Reflect.decorate(decorators, target, key, desc);\n  else\n    for (var i = decorators.length - 1; i >= 0; i--)\n      if (d = decorators[i])\n        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar Client = class {\n  constructor({ config, modelFactory, services } = {}) {\n    this.version = DXOS_VERSION;\n    this._initialized = false;\n    this._config = config != null ? config : new Config2();\n    this._services = services != null ? services : fromIFrame(this._config);\n    this._modelFactory = modelFactory != null ? modelFactory : createDefaultModelFactory();\n    this._halo = new HaloProxy(this._services);\n    this._echo = new EchoProxy(this._services, this._modelFactory, this._halo);\n    if (Object.keys(this._config.values).length > 0 && this._config.values.version !== EXPECTED_CONFIG_VERSION) {\n      throw new InvalidConfigError(\"Invalid config version\", {\n        current: this._config.values.version,\n        expected: EXPECTED_CONFIG_VERSION\n      });\n    }\n  }\n  [inspect3.custom]() {\n    return inspectObject3(this);\n  }\n  toJSON() {\n    return {\n      initialized: this.initialized,\n      echo: this.echo,\n      halo: this.halo\n    };\n  }\n  get config() {\n    return this._config;\n  }\n  get initialized() {\n    return this._initialized;\n  }\n  get halo() {\n    assert(this._initialized, \"Client not initialized.\");\n    return this._halo;\n  }\n  get echo() {\n    assert(this._initialized, \"Client not initialized.\");\n    return this._echo;\n  }\n  async initialize() {\n    if (this._initialized) {\n      return;\n    }\n    await this._services.open();\n    if (typeof window !== \"undefined\") {\n      await createDevtoolsRpcServer(this, this._services);\n    }\n    await this._services.services.SystemService.initSession();\n    await this._halo.open();\n    await this._echo.open();\n    this._initialized = true;\n  }\n  async destroy() {\n    if (!this._initialized) {\n      return;\n    }\n    await this._halo.close();\n    await this._echo.close();\n    await this._services.close();\n    this._initialized = false;\n  }\n  async getStatus() {\n    var _a;\n    return (_a = this._services.services) == null ? void 0 : _a.SystemService.getStatus();\n  }\n  async reset() {\n    var _a;\n    if (!this._initialized) {\n      throw new ApiError5(\"Client not open.\");\n    }\n    await ((_a = this._services.services) == null ? void 0 : _a.SystemService.reset());\n    await this.destroy();\n    this._halo.profileChanged.emit();\n    this._initialized = false;\n  }\n  createSerializer() {\n    return new SpaceSerializer(this._echo);\n  }\n};\n__decorate2([\n  synchronized2\n], Client.prototype, \"initialize\", null);\n__decorate2([\n  synchronized2\n], Client.prototype, \"destroy\", null);\nexport {\n  ApiError6 as ApiError,\n  Client,\n  ClientServicesHost2 as ClientServicesHost,\n  Config3 as Config,\n  Contact,\n  DEFAULT_CLIENT_ORIGIN,\n  DEFAULT_CONFIG_CHANNEL,\n  Database2 as Database,\n  EXPECTED_CONFIG_VERSION,\n  EchoProxy,\n  Entity,\n  HaloProxy,\n  IFrameClientServicesProxy,\n  IFrameRuntime,\n  Invitation,\n  InvitationEncoder,\n  Item,\n  ItemFilterDeleted,\n  ItemID,\n  KeyRecord,\n  KeyType,\n  Link,\n  ObjectModel,\n  OrderedList,\n  Profile,\n  PublicKey4 as PublicKey,\n  ResultSet4 as ResultSet,\n  SPACE_ITEM_TYPE,\n  Schema,\n  Selection,\n  SelectionResult,\n  SignRequest,\n  SignResponse,\n  SpaceMember,\n  SpaceProxy,\n  SpaceSerializer,\n  TYPE_SCHEMA,\n  WorkerRuntime,\n  WorkerSession,\n  createDevtoolsRpcServer,\n  defaultConfig,\n  fromHost,\n  fromIFrame,\n  generateSeedPhrase\n};\n//# sourceMappingURL=index.mjs.map\n","start":1670465438903,"end":1670465440556},{"name":"vite:react-babel","result":"// packages/sdk/client/src/index.ts\nimport { Config as Config3 } from \"@dxos/config\";\nimport { generateSeedPhrase } from \"@dxos/credentials\";\nimport { TYPE_SCHEMA, Entity, Item, Link, Database as Database2, Selection, SelectionResult, ItemFilterDeleted, ResultSet as ResultSet4, Schema } from \"@dxos/echo-db\";\nimport { PublicKey as PublicKey4 } from \"@dxos/keys\";\nimport { ItemID, ObjectModel, OrderedList } from \"@dxos/object-model\";\nimport {\n  InvitationEncoder,\n  ClientServicesHost as ClientServicesHost2,\n  IFrameRuntime,\n  WorkerRuntime,\n  WorkerSession\n} from \"@dxos/client-services\";\nimport { ApiError as ApiError6 } from \"@dxos/errors\";\nimport { Contact, SpaceMember, Profile } from \"@dxos/protocols/proto/dxos/client\";\nimport { Invitation } from \"@dxos/protocols/proto/dxos/client/services\";\nimport { KeyRecord, KeyType } from \"@dxos/protocols/proto/dxos/halo/keys\";\nimport { SignRequest, SignResponse } from \"@dxos/protocols/proto/dxos/client\";\n\n// packages/sdk/client/src/packlets/client/client.ts\nimport assert from \"@dxos/node-std/assert\";\nimport { inspect as inspect3 } from \"@dxos/node-std/util\";\nimport { synchronized as synchronized2 } from \"@dxos/async\";\nimport { createDefaultModelFactory } from \"@dxos/client-services\";\nimport { Config as Config2 } from \"@dxos/config\";\nimport { inspectObject as inspectObject3 } from \"@dxos/debug\";\nimport { ApiError as ApiError5, InvalidConfigError } from \"@dxos/errors\";\n\n// packages/sdk/client/src/version.ts\nvar DXOS_VERSION = \"0.1.13\";\n\n// packages/sdk/client/src/packlets/devtools/devtools.ts\nimport { log } from \"@dxos/log\";\nimport { createBundledRpcServer } from \"@dxos/rpc\";\nvar port = {\n  send: async (message) => window.postMessage({\n    data: Array.from(message),\n    source: \"dxos-client\"\n  }, \"*\"),\n  subscribe: (callback) => {\n    const handler = (event) => {\n      if (event.source !== window) {\n        return;\n      }\n      const message = event.data;\n      if (typeof message !== \"object\" || message === null || message.source !== \"content-script\") {\n        return;\n      }\n      callback(new Uint8Array(message.data));\n    };\n    window.addEventListener(\"message\", handler);\n    return () => window.removeEventListener(\"message\", handler);\n  }\n};\nvar createDevtoolsRpcServer = async (client, clientServices) => {\n  let server;\n  window.__DXOS__ = {\n    client,\n    openClientRpcServer: async () => {\n      if (server) {\n        log(\"Closing existing client RPC server.\", {}, {\n          file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/devtools/devtools.ts\",\n          line: 56,\n          scope: void 0,\n          callSite: (f, a) => f(...a)\n        });\n        await server.close();\n      }\n      log(\"Opening devtools client RPC server...\", {}, {\n        file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/devtools/devtools.ts\",\n        line: 60,\n        scope: void 0,\n        callSite: (f, a) => f(...a)\n      });\n      server = createBundledRpcServer({\n        services: clientServices.descriptors,\n        handlers: clientServices.services,\n        port\n      });\n      await server.open().catch((err) => {\n        log.error(`Failed to open RPC server: ${err}`, {}, {\n          file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/devtools/devtools.ts\",\n          line: 68,\n          scope: void 0,\n          callSite: (f, a) => f(...a)\n        });\n        return false;\n      });\n      log(\"Opened devtools client RPC server.\", {}, {\n        file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/devtools/devtools.ts\",\n        line: 72,\n        scope: void 0,\n        callSite: (f, a) => f(...a)\n      });\n      return true;\n    }\n  };\n};\n\n// packages/sdk/client/src/packlets/proxies/echo-proxy.ts\nimport { inspect } from \"@dxos/node-std/util\";\nimport { Event as Event2, EventSubscriptions, Trigger } from \"@dxos/async\";\nimport { ClientServicesProxy as ClientServicesProxy2, SpaceInvitationsProxy as SpaceInvitationsProxy2 } from \"@dxos/client-services\";\nimport { inspectObject } from \"@dxos/debug\";\nimport { ResultSet as ResultSet2 } from \"@dxos/echo-db\";\nimport { ApiError as ApiError2, SystemError } from \"@dxos/errors\";\nimport { PublicKey } from \"@dxos/keys\";\nimport { log as log3 } from \"@dxos/log\";\nimport { ComplexMap } from \"@dxos/util\";\n\n// packages/sdk/client/src/packlets/proxies/space-proxy.ts\nimport { Event, synchronized } from \"@dxos/async\";\nimport { ClientServicesProxy, SpaceInvitationsProxy } from \"@dxos/client-services\";\nimport { todo } from \"@dxos/debug\";\nimport { Database, DatabaseBackendProxy, ResultSet } from \"@dxos/echo-db\";\nimport { ApiError } from \"@dxos/errors\";\nimport { log as log2 } from \"@dxos/log\";\nvar __decorate = function(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n    r = Reflect.decorate(decorators, target, key, desc);\n  else\n    for (var i = decorators.length - 1; i >= 0; i--)\n      if (d = decorators[i])\n        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar SPACE_ITEM_TYPE = \"dxos:item/space\";\nvar SpaceProxy = class {\n  constructor(_clientServices, _modelFactory, _space, memberKey) {\n    this._clientServices = _clientServices;\n    this._modelFactory = _modelFactory;\n    this._space = _space;\n    this._invitationProxy = new SpaceInvitationsProxy(this._clientServices.services.SpaceInvitationsService);\n    this._invitations = [];\n    this.invitationsUpdate = new Event();\n    this.stateUpdate = new Event();\n    this._initialized = false;\n    this._key = this._space.publicKey;\n    this._isOpen = this._space.isOpen;\n    this._isActive = this._space.isActive;\n    if (!this._space.isOpen) {\n      return;\n    }\n    this._database = new Database(this._modelFactory, new DatabaseBackendProxy(this._clientServices.services.DataService, this._key), memberKey);\n  }\n  get key() {\n    return this._key;\n  }\n  get isOpen() {\n    return this._isOpen;\n  }\n  get isActive() {\n    return this._isActive;\n  }\n  get database() {\n    if (!this._database) {\n      throw new ApiError(\"Space not open.\");\n    }\n    return this._database;\n  }\n  get select() {\n    return this.database.select.bind(this.database);\n  }\n  get reduce() {\n    return this.database.reduce.bind(this.database);\n  }\n  async initialize() {\n    if (this._initialized) {\n      return;\n    }\n    log2(\"initializing...\", {}, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 169,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    this._initialized = true;\n    await this.database.initialize();\n    const result = this.database.select({\n      type: SPACE_ITEM_TYPE\n    }).exec();\n    if (result.entities.length) {\n      this._item = result.entities[0];\n    } else {\n      this._item = await this.database.createItem({\n        type: SPACE_ITEM_TYPE\n      });\n    }\n    this.stateUpdate.emit();\n    log2(\"initialized\", {}, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 185,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n  }\n  async destroy() {\n    log2(\"destroying...\", {}, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 193,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    if (this._database && this._clientServices instanceof ClientServicesProxy) {\n      await this.database.destroy();\n    }\n    log2(\"destroyed\", {}, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 198,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n  }\n  async open() {\n    await this._setOpen(true);\n  }\n  async close() {\n    await this._setOpen(false);\n  }\n  async getDetails() {\n    return this._clientServices.services.SpaceService.getSpaceDetails({\n      spaceKey: this._key\n    });\n  }\n  get properties() {\n    return this._item.model;\n  }\n  get invitations() {\n    return this._invitations;\n  }\n  async setActive(active) {\n  }\n  async setTitle(title) {\n  }\n  getTitle() {\n    return todo();\n  }\n  async setProperty(key, value) {\n    await this.properties.set(key, value);\n  }\n  getProperty(key, defaultValue) {\n    return this.properties.get(key, defaultValue);\n  }\n  queryMembers() {\n    return new ResultSet(this.stateUpdate, () => {\n      var _a;\n      return (_a = this._space.members) != null ? _a : [];\n    });\n  }\n  createInvitation(options) {\n    log2(\"create invitation\", options, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 279,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    const invitation = this._invitationProxy.createInvitation(this.key, options);\n    this._invitations.push(invitation);\n    const unsubscribe = invitation.subscribe({\n      onConnecting: () => {\n        this.invitationsUpdate.emit(invitation);\n        unsubscribe();\n      },\n      onCancelled: () => {\n        unsubscribe();\n      },\n      onSuccess: () => {\n        unsubscribe();\n      },\n      onError: function(err) {\n        unsubscribe();\n      }\n    });\n    return invitation;\n  }\n  removeInvitation(id) {\n    var _a;\n    log2(\"remove invitation\", {\n      id\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 306,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    const index = this._invitations.findIndex((invitation) => {\n      var _a2;\n      return ((_a2 = invitation.invitation) == null ? void 0 : _a2.invitationId) === id;\n    });\n    void ((_a = this._invitations[index]) == null ? void 0 : _a.cancel());\n    this._invitations.splice(index, 1);\n    this.invitationsUpdate.emit();\n  }\n  createSnapshot() {\n    return todo();\n  }\n  async _setOpen(open) {\n    await this._clientServices.services.SpaceService.setSpaceState({\n      spaceKey: this.key,\n      open\n    });\n  }\n  _processSpaceUpdate(space) {\n    this._space = space;\n    this._key = space.publicKey;\n    this._isOpen = space.isOpen;\n    this._isActive = space.isActive;\n    log2(\"update\", {\n      space\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 337,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    this.stateUpdate.emit();\n  }\n};\n__decorate([\n  synchronized\n], SpaceProxy.prototype, \"initialize\", null);\n__decorate([\n  synchronized\n], SpaceProxy.prototype, \"destroy\", null);\n\n// packages/sdk/client/src/packlets/proxies/echo-proxy.ts\nvar EchoProxy = class {\n  constructor(_serviceProvider, _modelFactory, _haloProxy) {\n    this._serviceProvider = _serviceProvider;\n    this._modelFactory = _modelFactory;\n    this._haloProxy = _haloProxy;\n    this._spaces = new ComplexMap(PublicKey.hash);\n    this._subscriptions = new EventSubscriptions();\n    this._spacesChanged = new Event2();\n    this._spacesInitialized = new Event2();\n    this._destroying = false;\n  }\n  [inspect.custom]() {\n    return inspectObject(this);\n  }\n  toJSON() {\n    return {\n      spaces: this._spaces.size\n    };\n  }\n  get modelFactory() {\n    return this._modelFactory;\n  }\n  get networkManager() {\n    if (this._serviceProvider instanceof ClientServicesProxy2) {\n      throw new SystemError(\"Network manager not available in service proxy.\");\n    }\n    return this._serviceProvider.echo.networkManager;\n  }\n  get opened() {\n    return this._invitationProxy !== void 0;\n  }\n  async open() {\n    this._invitationProxy = new SpaceInvitationsProxy2(this._serviceProvider.services.SpaceInvitationsService);\n    const gotSpaces = this._spacesChanged.waitForCount(1);\n    const spacesStream = this._serviceProvider.services.SpaceService.subscribeSpaces();\n    spacesStream.subscribe(async (data) => {\n      var _a;\n      for (const space of (_a = data.spaces) != null ? _a : []) {\n        if (!this._spaces.has(space.publicKey)) {\n          await this._haloProxy.profileChanged.waitForCondition(() => !!this._haloProxy.profile);\n          if (this._destroying) {\n            return;\n          }\n          const spaceProxy = new SpaceProxy(this._serviceProvider, this._modelFactory, space, this._haloProxy.profile.identityKey);\n          this._spaces.set(spaceProxy.key, spaceProxy);\n          await spaceProxy.initialize();\n          this._spacesInitialized.emit(spaceProxy.key);\n        } else {\n          this._spaces.get(space.publicKey)._processSpaceUpdate(space);\n        }\n      }\n      this._spacesChanged.emit();\n    });\n    this._subscriptions.add(() => spacesStream.close());\n    await gotSpaces;\n  }\n  async close() {\n    for (const space of this._spaces.values()) {\n      await space.destroy();\n    }\n    await this._subscriptions.clear();\n    this._invitationProxy = void 0;\n  }\n  async createSpace() {\n    const space = await this._serviceProvider.services.SpaceService.createSpace();\n    const proxy = new Trigger();\n    const unsubscribe = this._spacesInitialized.on((spaceKey) => {\n      if (spaceKey.equals(space.publicKey)) {\n        const spaceProxy2 = this._spaces.get(space.publicKey);\n        proxy.wake(spaceProxy2);\n      }\n    });\n    const spaceProxy = await proxy.wait();\n    unsubscribe();\n    return spaceProxy;\n  }\n  async cloneSpace(snapshot) {\n    const space = await this._serviceProvider.services.SpaceService.cloneSpace(snapshot);\n    const proxy = new Trigger();\n    const unsubscribe = this._spacesInitialized.on((spaceKey) => {\n      if (spaceKey.equals(space.publicKey)) {\n        const spaceProxy2 = this._spaces.get(space.publicKey);\n        proxy.wake(spaceProxy2);\n      }\n    });\n    const spaceProxy = await proxy.wait();\n    unsubscribe();\n    return spaceProxy;\n  }\n  getSpace(spaceKey) {\n    return this._spaces.get(spaceKey);\n  }\n  querySpaces() {\n    return new ResultSet2(this._spacesChanged, () => Array.from(this._spaces.values()));\n  }\n  acceptInvitation(invitation, options) {\n    if (!this.opened) {\n      throw new ApiError2(\"Client not open.\");\n    }\n    log3(\"accept invitation\", options, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/echo-proxy.ts\",\n      line: 221,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    return this._invitationProxy.acceptInvitation(invitation, options);\n  }\n};\n\n// packages/sdk/client/src/packlets/proxies/halo-proxy.ts\nimport { inspect as inspect2 } from \"@dxos/node-std/util\";\nimport { Event as Event3, EventSubscriptions as EventSubscriptions2 } from \"@dxos/async\";\nimport { HaloInvitationsProxy } from \"@dxos/client-services\";\nimport { keyPairFromSeedPhrase } from \"@dxos/credentials\";\nimport { inspectObject as inspectObject2 } from \"@dxos/debug\";\nimport { ResultSet as ResultSet3 } from \"@dxos/echo-db\";\nimport { ApiError as ApiError3 } from \"@dxos/errors\";\nimport { PublicKey as PublicKey2 } from \"@dxos/keys\";\nimport { log as log4 } from \"@dxos/log\";\nimport { humanize } from \"@dxos/util\";\nvar HaloProxy = class {\n  constructor(_serviceProvider) {\n    this._serviceProvider = _serviceProvider;\n    this._subscriptions = new EventSubscriptions2();\n    this._contactsChanged = new Event3();\n    this.invitationsUpdate = new Event3();\n    this.profileChanged = new Event3();\n    this._invitations = [];\n    this._contacts = [];\n  }\n  [inspect2.custom]() {\n    return inspectObject2(this);\n  }\n  toJSON() {\n    var _a;\n    return {\n      key: (_a = this._profile) == null ? void 0 : _a.identityKey\n    };\n  }\n  get profile() {\n    return this._profile;\n  }\n  get invitations() {\n    return this._invitations;\n  }\n  get opened() {\n    return this._invitationProxy !== void 0;\n  }\n  async open() {\n    const gotProfile = this.profileChanged.waitForCount(1);\n    this._invitationProxy = new HaloInvitationsProxy(this._serviceProvider.services.HaloInvitationsService);\n    const profileStream = this._serviceProvider.services.ProfileService.subscribeProfile();\n    profileStream.subscribe((data) => {\n      this._profile = data.profile;\n      this.profileChanged.emit();\n    });\n    this._subscriptions.add(() => profileStream.close());\n    await Promise.all([\n      gotProfile\n    ]);\n  }\n  async close() {\n    this._subscriptions.clear();\n    this._invitationProxy = void 0;\n  }\n  subscribeToProfile(callback) {\n    return this.profileChanged.on(() => callback(this._profile));\n  }\n  async createProfile({ publicKey, secretKey, displayName, seedphrase } = {}) {\n    if (seedphrase && (publicKey || secretKey)) {\n      throw new ApiError3(\"Seedphrase must not be specified with existing keys\");\n    }\n    if (seedphrase) {\n      const keyPair = keyPairFromSeedPhrase(seedphrase);\n      publicKey = PublicKey2.from(keyPair.publicKey);\n      secretKey = PublicKey2.from(keyPair.secretKey);\n    }\n    this._profile = await this._serviceProvider.services.ProfileService.createProfile({\n      publicKey: publicKey == null ? void 0 : publicKey.asUint8Array(),\n      secretKey: secretKey == null ? void 0 : secretKey.asUint8Array(),\n      displayName\n    });\n    return this._profile;\n  }\n  async recoverProfile(seedPhrase) {\n    this._profile = await this._serviceProvider.services.ProfileService.recoverProfile({\n      seedPhrase\n    });\n    return this._profile;\n  }\n  queryContacts() {\n    return new ResultSet3(this._contactsChanged, () => this._contacts);\n  }\n  async queryDevices() {\n    return new Promise((resolve, reject) => {\n      const stream = this._serviceProvider.services.DevicesService.queryDevices();\n      stream.subscribe((devices) => {\n        var _a, _b;\n        resolve((_b = (_a = devices.devices) == null ? void 0 : _a.map((device) => ({\n          publicKey: device.deviceKey,\n          displayName: humanize(device.deviceKey)\n        }))) != null ? _b : []);\n        stream.close();\n      }, (error) => {\n        reject(error);\n        stream.close();\n      });\n    });\n  }\n  createInvitation(options) {\n    if (!this.opened) {\n      throw new ApiError3(\"Client not open.\");\n    }\n    log4(\"create invitation\", options, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/halo-proxy.ts\",\n      line: 218,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    const invitation = this._invitationProxy.createInvitation(void 0, options);\n    this._invitations.push(invitation);\n    const unsubscribe = invitation.subscribe({\n      onConnecting: () => {\n        this.invitationsUpdate.emit(invitation);\n        unsubscribe();\n      },\n      onCancelled: () => {\n        unsubscribe();\n      },\n      onSuccess: () => {\n        unsubscribe();\n      },\n      onError: function(err) {\n        unsubscribe();\n      }\n    });\n    return invitation;\n  }\n  removeInvitation(id) {\n    var _a;\n    log4(\"remove invitation\", {\n      id\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/halo-proxy.ts\",\n      line: 245,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    const index = this._invitations.findIndex((invitation) => {\n      var _a2;\n      return ((_a2 = invitation.invitation) == null ? void 0 : _a2.invitationId) === id;\n    });\n    void ((_a = this._invitations[index]) == null ? void 0 : _a.cancel());\n    this._invitations.splice(index, 1);\n    this.invitationsUpdate.emit();\n  }\n  acceptInvitation(invitation, options) {\n    if (!this.opened) {\n      throw new ApiError3(\"Client not open.\");\n    }\n    log4(\"accept invitation\", options, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/halo-proxy.ts\",\n      line: 260,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    return this._invitationProxy.acceptInvitation(invitation, options);\n  }\n};\n\n// packages/sdk/client/src/packlets/client/config.ts\nvar DEFAULT_CONFIG_CHANNEL = \"dxos:app\";\nvar DEFAULT_CLIENT_ORIGIN = \"https://halo.dxos.org/vault.html\";\nvar EXPECTED_CONFIG_VERSION = 1;\nvar defaultConfig = {\n  version: 1\n};\n\n// packages/sdk/client/src/packlets/client/serializer.ts\nimport { schema } from \"@dxos/protocols\";\nvar spaceCodec = schema.getCodecForType(\"dxos.echo.snapshot.SpaceSnapshot\");\nvar SpaceSerializer = class {\n  constructor(_echo) {\n    this._echo = _echo;\n  }\n  async serializeSpace(space) {\n    const snapshot = await space.createSnapshot();\n    return new Blob([\n      spaceCodec.encode(snapshot)\n    ]);\n  }\n  async deserializeSpace(data) {\n    return await this._echo.cloneSpace(spaceCodec.decode(data));\n  }\n};\n\n// packages/sdk/client/src/packlets/client/utils.ts\nimport { ClientServicesHost } from \"@dxos/client-services\";\nimport { Config } from \"@dxos/config\";\nimport { ApiError as ApiError4 } from \"@dxos/errors\";\nimport { log as log5 } from \"@dxos/log\";\nimport { MemorySignalManager, MemorySignalManagerContext, WebsocketSignalManager } from \"@dxos/messaging\";\nimport { createWebRTCTransportFactory, MemoryTransportFactory, NetworkManager } from \"@dxos/network-manager\";\n\n// packages/sdk/client/src/packlets/client/iframe-service-proxy.ts\nimport { ClientServicesProxy as ClientServicesProxy3 } from \"@dxos/client-services\";\nimport { PublicKey as PublicKey3 } from \"@dxos/keys\";\nimport { createIFrame, createIFramePort } from \"@dxos/rpc-tunnel\";\nvar IFrameClientServicesProxy = class {\n  constructor({ config, channel, timeout = 1e3 }) {\n    this.params = {\n      config,\n      channel,\n      timeout\n    };\n    this._clientServicesProxy = new ClientServicesProxy3(this._getIFramePort());\n  }\n  get proxy() {\n    return this._clientServicesProxy.proxy;\n  }\n  get descriptors() {\n    return this._clientServicesProxy.descriptors;\n  }\n  get services() {\n    return this._clientServicesProxy.services;\n  }\n  async open() {\n    if (!this._clientServicesProxy) {\n      this._clientServicesProxy = new ClientServicesProxy3(this._getIFramePort());\n    }\n    return this._clientServicesProxy.open();\n  }\n  async close() {\n    var _a, _b;\n    await ((_a = this._clientServicesProxy) == null ? void 0 : _a.close());\n    this._clientServicesProxy = void 0;\n    if (this._iframeId) {\n      (_b = document.getElementById(this._iframeId)) == null ? void 0 : _b.remove();\n      this._iframeId = void 0;\n    }\n  }\n  _getIFramePort() {\n    var _a;\n    this._iframeId = `__DXOS_CLIENT_${PublicKey3.random().toHex()}__`;\n    const source = new URL((_a = this.params.config.get(\"runtime.client.remoteSource\")) != null ? _a : DEFAULT_CLIENT_ORIGIN, window.location.origin);\n    const iframe = createIFrame(source.toString(), this._iframeId);\n    return createIFramePort({\n      origin: source.origin,\n      iframe,\n      channel: this.params.channel\n    });\n  }\n};\n\n// packages/sdk/client/src/packlets/client/utils.ts\nvar fromIFrame = (config = new Config(), channel = DEFAULT_CONFIG_CHANNEL) => {\n  if (typeof window === \"undefined\") {\n    throw new ApiError4(\"Cannot configure IFrame bridge outside of browser environment.\");\n  }\n  return new IFrameClientServicesProxy({\n    config,\n    channel\n  });\n};\nvar fromHost = (config = new Config()) => {\n  return new ClientServicesHost({\n    config,\n    networkManager: createNetworkManager(config)\n  });\n};\nvar createNetworkManager = (config, options = {}) => {\n  const signalServer = config.get(\"runtime.services.signal.server\");\n  if (signalServer) {\n    const { log: log1 = true, signalManager = new WebsocketSignalManager([\n      signalServer\n    ]), transportFactory = createWebRTCTransportFactory({\n      iceServers: config.get(\"runtime.services.ice\")\n    }) } = options;\n    return new NetworkManager({\n      log: log1,\n      signalManager,\n      transportFactory\n    });\n  }\n  log5.warn(\"P2P network is not configured.\", {}, {\n    file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/client/utils.ts\",\n    line: 62,\n    scope: void 0,\n    callSite: (f, a) => f(...a)\n  });\n  return new NetworkManager({\n    signalManager: new MemorySignalManager(new MemorySignalManagerContext()),\n    transportFactory: MemoryTransportFactory\n  });\n};\n\n// packages/sdk/client/src/packlets/client/client.ts\nvar __decorate2 = function(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n    r = Reflect.decorate(decorators, target, key, desc);\n  else\n    for (var i = decorators.length - 1; i >= 0; i--)\n      if (d = decorators[i])\n        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar Client = class {\n  constructor({ config, modelFactory, services } = {}) {\n    this.version = DXOS_VERSION;\n    this._initialized = false;\n    this._config = config != null ? config : new Config2();\n    this._services = services != null ? services : fromIFrame(this._config);\n    this._modelFactory = modelFactory != null ? modelFactory : createDefaultModelFactory();\n    this._halo = new HaloProxy(this._services);\n    this._echo = new EchoProxy(this._services, this._modelFactory, this._halo);\n    if (Object.keys(this._config.values).length > 0 && this._config.values.version !== EXPECTED_CONFIG_VERSION) {\n      throw new InvalidConfigError(\"Invalid config version\", {\n        current: this._config.values.version,\n        expected: EXPECTED_CONFIG_VERSION\n      });\n    }\n  }\n  [inspect3.custom]() {\n    return inspectObject3(this);\n  }\n  toJSON() {\n    return {\n      initialized: this.initialized,\n      echo: this.echo,\n      halo: this.halo\n    };\n  }\n  get config() {\n    return this._config;\n  }\n  get initialized() {\n    return this._initialized;\n  }\n  get halo() {\n    assert(this._initialized, \"Client not initialized.\");\n    return this._halo;\n  }\n  get echo() {\n    assert(this._initialized, \"Client not initialized.\");\n    return this._echo;\n  }\n  async initialize() {\n    if (this._initialized) {\n      return;\n    }\n    await this._services.open();\n    if (typeof window !== \"undefined\") {\n      await createDevtoolsRpcServer(this, this._services);\n    }\n    await this._services.services.SystemService.initSession();\n    await this._halo.open();\n    await this._echo.open();\n    this._initialized = true;\n  }\n  async destroy() {\n    if (!this._initialized) {\n      return;\n    }\n    await this._halo.close();\n    await this._echo.close();\n    await this._services.close();\n    this._initialized = false;\n  }\n  async getStatus() {\n    var _a;\n    return (_a = this._services.services) == null ? void 0 : _a.SystemService.getStatus();\n  }\n  async reset() {\n    var _a;\n    if (!this._initialized) {\n      throw new ApiError5(\"Client not open.\");\n    }\n    await ((_a = this._services.services) == null ? void 0 : _a.SystemService.reset());\n    await this.destroy();\n    this._halo.profileChanged.emit();\n    this._initialized = false;\n  }\n  createSerializer() {\n    return new SpaceSerializer(this._echo);\n  }\n};\n__decorate2([\n  synchronized2\n], Client.prototype, \"initialize\", null);\n__decorate2([\n  synchronized2\n], Client.prototype, \"destroy\", null);\nexport {\n  ApiError6 as ApiError,\n  Client,\n  ClientServicesHost2 as ClientServicesHost,\n  Config3 as Config,\n  Contact,\n  DEFAULT_CLIENT_ORIGIN,\n  DEFAULT_CONFIG_CHANNEL,\n  Database2 as Database,\n  EXPECTED_CONFIG_VERSION,\n  EchoProxy,\n  Entity,\n  HaloProxy,\n  IFrameClientServicesProxy,\n  IFrameRuntime,\n  Invitation,\n  InvitationEncoder,\n  Item,\n  ItemFilterDeleted,\n  ItemID,\n  KeyRecord,\n  KeyType,\n  Link,\n  ObjectModel,\n  OrderedList,\n  Profile,\n  PublicKey4 as PublicKey,\n  ResultSet4 as ResultSet,\n  SPACE_ITEM_TYPE,\n  Schema,\n  Selection,\n  SelectionResult,\n  SignRequest,\n  SignResponse,\n  SpaceMember,\n  SpaceProxy,\n  SpaceSerializer,\n  TYPE_SCHEMA,\n  WorkerRuntime,\n  WorkerSession,\n  createDevtoolsRpcServer,\n  defaultConfig,\n  fromHost,\n  fromIFrame,\n  generateSeedPhrase\n};\n//# sourceMappingURL=index.mjs.map\n","start":1670465440556,"end":1670465440556,"order":"pre"},{"name":"polyfill-node","result":"// packages/sdk/client/src/index.ts\nimport { Config as Config3 } from \"@dxos/config\";\nimport { generateSeedPhrase } from \"@dxos/credentials\";\nimport { TYPE_SCHEMA, Entity, Item, Link, Database as Database2, Selection, SelectionResult, ItemFilterDeleted, ResultSet as ResultSet4, Schema } from \"@dxos/echo-db\";\nimport { PublicKey as PublicKey4 } from \"@dxos/keys\";\nimport { ItemID, ObjectModel, OrderedList } from \"@dxos/object-model\";\nimport {\n  InvitationEncoder,\n  ClientServicesHost as ClientServicesHost2,\n  IFrameRuntime,\n  WorkerRuntime,\n  WorkerSession\n} from \"@dxos/client-services\";\nimport { ApiError as ApiError6 } from \"@dxos/errors\";\nimport { Contact, SpaceMember, Profile } from \"@dxos/protocols/proto/dxos/client\";\nimport { Invitation } from \"@dxos/protocols/proto/dxos/client/services\";\nimport { KeyRecord, KeyType } from \"@dxos/protocols/proto/dxos/halo/keys\";\nimport { SignRequest, SignResponse } from \"@dxos/protocols/proto/dxos/client\";\n\n// packages/sdk/client/src/packlets/client/client.ts\nimport assert from \"@dxos/node-std/assert\";\nimport { inspect as inspect3 } from \"@dxos/node-std/util\";\nimport { synchronized as synchronized2 } from \"@dxos/async\";\nimport { createDefaultModelFactory } from \"@dxos/client-services\";\nimport { Config as Config2 } from \"@dxos/config\";\nimport { inspectObject as inspectObject3 } from \"@dxos/debug\";\nimport { ApiError as ApiError5, InvalidConfigError } from \"@dxos/errors\";\n\n// packages/sdk/client/src/version.ts\nvar DXOS_VERSION = \"0.1.13\";\n\n// packages/sdk/client/src/packlets/devtools/devtools.ts\nimport { log } from \"@dxos/log\";\nimport { createBundledRpcServer } from \"@dxos/rpc\";\nvar port = {\n  send: async (message) => window.postMessage({\n    data: Array.from(message),\n    source: \"dxos-client\"\n  }, \"*\"),\n  subscribe: (callback) => {\n    const handler = (event) => {\n      if (event.source !== window) {\n        return;\n      }\n      const message = event.data;\n      if (typeof message !== \"object\" || message === null || message.source !== \"content-script\") {\n        return;\n      }\n      callback(new Uint8Array(message.data));\n    };\n    window.addEventListener(\"message\", handler);\n    return () => window.removeEventListener(\"message\", handler);\n  }\n};\nvar createDevtoolsRpcServer = async (client, clientServices) => {\n  let server;\n  window.__DXOS__ = {\n    client,\n    openClientRpcServer: async () => {\n      if (server) {\n        log(\"Closing existing client RPC server.\", {}, {\n          file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/devtools/devtools.ts\",\n          line: 56,\n          scope: void 0,\n          callSite: (f, a) => f(...a)\n        });\n        await server.close();\n      }\n      log(\"Opening devtools client RPC server...\", {}, {\n        file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/devtools/devtools.ts\",\n        line: 60,\n        scope: void 0,\n        callSite: (f, a) => f(...a)\n      });\n      server = createBundledRpcServer({\n        services: clientServices.descriptors,\n        handlers: clientServices.services,\n        port\n      });\n      await server.open().catch((err) => {\n        log.error(`Failed to open RPC server: ${err}`, {}, {\n          file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/devtools/devtools.ts\",\n          line: 68,\n          scope: void 0,\n          callSite: (f, a) => f(...a)\n        });\n        return false;\n      });\n      log(\"Opened devtools client RPC server.\", {}, {\n        file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/devtools/devtools.ts\",\n        line: 72,\n        scope: void 0,\n        callSite: (f, a) => f(...a)\n      });\n      return true;\n    }\n  };\n};\n\n// packages/sdk/client/src/packlets/proxies/echo-proxy.ts\nimport { inspect } from \"@dxos/node-std/util\";\nimport { Event as Event2, EventSubscriptions, Trigger } from \"@dxos/async\";\nimport { ClientServicesProxy as ClientServicesProxy2, SpaceInvitationsProxy as SpaceInvitationsProxy2 } from \"@dxos/client-services\";\nimport { inspectObject } from \"@dxos/debug\";\nimport { ResultSet as ResultSet2 } from \"@dxos/echo-db\";\nimport { ApiError as ApiError2, SystemError } from \"@dxos/errors\";\nimport { PublicKey } from \"@dxos/keys\";\nimport { log as log3 } from \"@dxos/log\";\nimport { ComplexMap } from \"@dxos/util\";\n\n// packages/sdk/client/src/packlets/proxies/space-proxy.ts\nimport { Event, synchronized } from \"@dxos/async\";\nimport { ClientServicesProxy, SpaceInvitationsProxy } from \"@dxos/client-services\";\nimport { todo } from \"@dxos/debug\";\nimport { Database, DatabaseBackendProxy, ResultSet } from \"@dxos/echo-db\";\nimport { ApiError } from \"@dxos/errors\";\nimport { log as log2 } from \"@dxos/log\";\nvar __decorate = function(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n    r = Reflect.decorate(decorators, target, key, desc);\n  else\n    for (var i = decorators.length - 1; i >= 0; i--)\n      if (d = decorators[i])\n        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar SPACE_ITEM_TYPE = \"dxos:item/space\";\nvar SpaceProxy = class {\n  constructor(_clientServices, _modelFactory, _space, memberKey) {\n    this._clientServices = _clientServices;\n    this._modelFactory = _modelFactory;\n    this._space = _space;\n    this._invitationProxy = new SpaceInvitationsProxy(this._clientServices.services.SpaceInvitationsService);\n    this._invitations = [];\n    this.invitationsUpdate = new Event();\n    this.stateUpdate = new Event();\n    this._initialized = false;\n    this._key = this._space.publicKey;\n    this._isOpen = this._space.isOpen;\n    this._isActive = this._space.isActive;\n    if (!this._space.isOpen) {\n      return;\n    }\n    this._database = new Database(this._modelFactory, new DatabaseBackendProxy(this._clientServices.services.DataService, this._key), memberKey);\n  }\n  get key() {\n    return this._key;\n  }\n  get isOpen() {\n    return this._isOpen;\n  }\n  get isActive() {\n    return this._isActive;\n  }\n  get database() {\n    if (!this._database) {\n      throw new ApiError(\"Space not open.\");\n    }\n    return this._database;\n  }\n  get select() {\n    return this.database.select.bind(this.database);\n  }\n  get reduce() {\n    return this.database.reduce.bind(this.database);\n  }\n  async initialize() {\n    if (this._initialized) {\n      return;\n    }\n    log2(\"initializing...\", {}, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 169,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    this._initialized = true;\n    await this.database.initialize();\n    const result = this.database.select({\n      type: SPACE_ITEM_TYPE\n    }).exec();\n    if (result.entities.length) {\n      this._item = result.entities[0];\n    } else {\n      this._item = await this.database.createItem({\n        type: SPACE_ITEM_TYPE\n      });\n    }\n    this.stateUpdate.emit();\n    log2(\"initialized\", {}, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 185,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n  }\n  async destroy() {\n    log2(\"destroying...\", {}, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 193,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    if (this._database && this._clientServices instanceof ClientServicesProxy) {\n      await this.database.destroy();\n    }\n    log2(\"destroyed\", {}, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 198,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n  }\n  async open() {\n    await this._setOpen(true);\n  }\n  async close() {\n    await this._setOpen(false);\n  }\n  async getDetails() {\n    return this._clientServices.services.SpaceService.getSpaceDetails({\n      spaceKey: this._key\n    });\n  }\n  get properties() {\n    return this._item.model;\n  }\n  get invitations() {\n    return this._invitations;\n  }\n  async setActive(active) {\n  }\n  async setTitle(title) {\n  }\n  getTitle() {\n    return todo();\n  }\n  async setProperty(key, value) {\n    await this.properties.set(key, value);\n  }\n  getProperty(key, defaultValue) {\n    return this.properties.get(key, defaultValue);\n  }\n  queryMembers() {\n    return new ResultSet(this.stateUpdate, () => {\n      var _a;\n      return (_a = this._space.members) != null ? _a : [];\n    });\n  }\n  createInvitation(options) {\n    log2(\"create invitation\", options, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 279,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    const invitation = this._invitationProxy.createInvitation(this.key, options);\n    this._invitations.push(invitation);\n    const unsubscribe = invitation.subscribe({\n      onConnecting: () => {\n        this.invitationsUpdate.emit(invitation);\n        unsubscribe();\n      },\n      onCancelled: () => {\n        unsubscribe();\n      },\n      onSuccess: () => {\n        unsubscribe();\n      },\n      onError: function(err) {\n        unsubscribe();\n      }\n    });\n    return invitation;\n  }\n  removeInvitation(id) {\n    var _a;\n    log2(\"remove invitation\", {\n      id\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 306,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    const index = this._invitations.findIndex((invitation) => {\n      var _a2;\n      return ((_a2 = invitation.invitation) == null ? void 0 : _a2.invitationId) === id;\n    });\n    void ((_a = this._invitations[index]) == null ? void 0 : _a.cancel());\n    this._invitations.splice(index, 1);\n    this.invitationsUpdate.emit();\n  }\n  createSnapshot() {\n    return todo();\n  }\n  async _setOpen(open) {\n    await this._clientServices.services.SpaceService.setSpaceState({\n      spaceKey: this.key,\n      open\n    });\n  }\n  _processSpaceUpdate(space) {\n    this._space = space;\n    this._key = space.publicKey;\n    this._isOpen = space.isOpen;\n    this._isActive = space.isActive;\n    log2(\"update\", {\n      space\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/space-proxy.ts\",\n      line: 337,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    this.stateUpdate.emit();\n  }\n};\n__decorate([\n  synchronized\n], SpaceProxy.prototype, \"initialize\", null);\n__decorate([\n  synchronized\n], SpaceProxy.prototype, \"destroy\", null);\n\n// packages/sdk/client/src/packlets/proxies/echo-proxy.ts\nvar EchoProxy = class {\n  constructor(_serviceProvider, _modelFactory, _haloProxy) {\n    this._serviceProvider = _serviceProvider;\n    this._modelFactory = _modelFactory;\n    this._haloProxy = _haloProxy;\n    this._spaces = new ComplexMap(PublicKey.hash);\n    this._subscriptions = new EventSubscriptions();\n    this._spacesChanged = new Event2();\n    this._spacesInitialized = new Event2();\n    this._destroying = false;\n  }\n  [inspect.custom]() {\n    return inspectObject(this);\n  }\n  toJSON() {\n    return {\n      spaces: this._spaces.size\n    };\n  }\n  get modelFactory() {\n    return this._modelFactory;\n  }\n  get networkManager() {\n    if (this._serviceProvider instanceof ClientServicesProxy2) {\n      throw new SystemError(\"Network manager not available in service proxy.\");\n    }\n    return this._serviceProvider.echo.networkManager;\n  }\n  get opened() {\n    return this._invitationProxy !== void 0;\n  }\n  async open() {\n    this._invitationProxy = new SpaceInvitationsProxy2(this._serviceProvider.services.SpaceInvitationsService);\n    const gotSpaces = this._spacesChanged.waitForCount(1);\n    const spacesStream = this._serviceProvider.services.SpaceService.subscribeSpaces();\n    spacesStream.subscribe(async (data) => {\n      var _a;\n      for (const space of (_a = data.spaces) != null ? _a : []) {\n        if (!this._spaces.has(space.publicKey)) {\n          await this._haloProxy.profileChanged.waitForCondition(() => !!this._haloProxy.profile);\n          if (this._destroying) {\n            return;\n          }\n          const spaceProxy = new SpaceProxy(this._serviceProvider, this._modelFactory, space, this._haloProxy.profile.identityKey);\n          this._spaces.set(spaceProxy.key, spaceProxy);\n          await spaceProxy.initialize();\n          this._spacesInitialized.emit(spaceProxy.key);\n        } else {\n          this._spaces.get(space.publicKey)._processSpaceUpdate(space);\n        }\n      }\n      this._spacesChanged.emit();\n    });\n    this._subscriptions.add(() => spacesStream.close());\n    await gotSpaces;\n  }\n  async close() {\n    for (const space of this._spaces.values()) {\n      await space.destroy();\n    }\n    await this._subscriptions.clear();\n    this._invitationProxy = void 0;\n  }\n  async createSpace() {\n    const space = await this._serviceProvider.services.SpaceService.createSpace();\n    const proxy = new Trigger();\n    const unsubscribe = this._spacesInitialized.on((spaceKey) => {\n      if (spaceKey.equals(space.publicKey)) {\n        const spaceProxy2 = this._spaces.get(space.publicKey);\n        proxy.wake(spaceProxy2);\n      }\n    });\n    const spaceProxy = await proxy.wait();\n    unsubscribe();\n    return spaceProxy;\n  }\n  async cloneSpace(snapshot) {\n    const space = await this._serviceProvider.services.SpaceService.cloneSpace(snapshot);\n    const proxy = new Trigger();\n    const unsubscribe = this._spacesInitialized.on((spaceKey) => {\n      if (spaceKey.equals(space.publicKey)) {\n        const spaceProxy2 = this._spaces.get(space.publicKey);\n        proxy.wake(spaceProxy2);\n      }\n    });\n    const spaceProxy = await proxy.wait();\n    unsubscribe();\n    return spaceProxy;\n  }\n  getSpace(spaceKey) {\n    return this._spaces.get(spaceKey);\n  }\n  querySpaces() {\n    return new ResultSet2(this._spacesChanged, () => Array.from(this._spaces.values()));\n  }\n  acceptInvitation(invitation, options) {\n    if (!this.opened) {\n      throw new ApiError2(\"Client not open.\");\n    }\n    log3(\"accept invitation\", options, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/echo-proxy.ts\",\n      line: 221,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    return this._invitationProxy.acceptInvitation(invitation, options);\n  }\n};\n\n// packages/sdk/client/src/packlets/proxies/halo-proxy.ts\nimport { inspect as inspect2 } from \"@dxos/node-std/util\";\nimport { Event as Event3, EventSubscriptions as EventSubscriptions2 } from \"@dxos/async\";\nimport { HaloInvitationsProxy } from \"@dxos/client-services\";\nimport { keyPairFromSeedPhrase } from \"@dxos/credentials\";\nimport { inspectObject as inspectObject2 } from \"@dxos/debug\";\nimport { ResultSet as ResultSet3 } from \"@dxos/echo-db\";\nimport { ApiError as ApiError3 } from \"@dxos/errors\";\nimport { PublicKey as PublicKey2 } from \"@dxos/keys\";\nimport { log as log4 } from \"@dxos/log\";\nimport { humanize } from \"@dxos/util\";\nvar HaloProxy = class {\n  constructor(_serviceProvider) {\n    this._serviceProvider = _serviceProvider;\n    this._subscriptions = new EventSubscriptions2();\n    this._contactsChanged = new Event3();\n    this.invitationsUpdate = new Event3();\n    this.profileChanged = new Event3();\n    this._invitations = [];\n    this._contacts = [];\n  }\n  [inspect2.custom]() {\n    return inspectObject2(this);\n  }\n  toJSON() {\n    var _a;\n    return {\n      key: (_a = this._profile) == null ? void 0 : _a.identityKey\n    };\n  }\n  get profile() {\n    return this._profile;\n  }\n  get invitations() {\n    return this._invitations;\n  }\n  get opened() {\n    return this._invitationProxy !== void 0;\n  }\n  async open() {\n    const gotProfile = this.profileChanged.waitForCount(1);\n    this._invitationProxy = new HaloInvitationsProxy(this._serviceProvider.services.HaloInvitationsService);\n    const profileStream = this._serviceProvider.services.ProfileService.subscribeProfile();\n    profileStream.subscribe((data) => {\n      this._profile = data.profile;\n      this.profileChanged.emit();\n    });\n    this._subscriptions.add(() => profileStream.close());\n    await Promise.all([\n      gotProfile\n    ]);\n  }\n  async close() {\n    this._subscriptions.clear();\n    this._invitationProxy = void 0;\n  }\n  subscribeToProfile(callback) {\n    return this.profileChanged.on(() => callback(this._profile));\n  }\n  async createProfile({ publicKey, secretKey, displayName, seedphrase } = {}) {\n    if (seedphrase && (publicKey || secretKey)) {\n      throw new ApiError3(\"Seedphrase must not be specified with existing keys\");\n    }\n    if (seedphrase) {\n      const keyPair = keyPairFromSeedPhrase(seedphrase);\n      publicKey = PublicKey2.from(keyPair.publicKey);\n      secretKey = PublicKey2.from(keyPair.secretKey);\n    }\n    this._profile = await this._serviceProvider.services.ProfileService.createProfile({\n      publicKey: publicKey == null ? void 0 : publicKey.asUint8Array(),\n      secretKey: secretKey == null ? void 0 : secretKey.asUint8Array(),\n      displayName\n    });\n    return this._profile;\n  }\n  async recoverProfile(seedPhrase) {\n    this._profile = await this._serviceProvider.services.ProfileService.recoverProfile({\n      seedPhrase\n    });\n    return this._profile;\n  }\n  queryContacts() {\n    return new ResultSet3(this._contactsChanged, () => this._contacts);\n  }\n  async queryDevices() {\n    return new Promise((resolve, reject) => {\n      const stream = this._serviceProvider.services.DevicesService.queryDevices();\n      stream.subscribe((devices) => {\n        var _a, _b;\n        resolve((_b = (_a = devices.devices) == null ? void 0 : _a.map((device) => ({\n          publicKey: device.deviceKey,\n          displayName: humanize(device.deviceKey)\n        }))) != null ? _b : []);\n        stream.close();\n      }, (error) => {\n        reject(error);\n        stream.close();\n      });\n    });\n  }\n  createInvitation(options) {\n    if (!this.opened) {\n      throw new ApiError3(\"Client not open.\");\n    }\n    log4(\"create invitation\", options, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/halo-proxy.ts\",\n      line: 218,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    const invitation = this._invitationProxy.createInvitation(void 0, options);\n    this._invitations.push(invitation);\n    const unsubscribe = invitation.subscribe({\n      onConnecting: () => {\n        this.invitationsUpdate.emit(invitation);\n        unsubscribe();\n      },\n      onCancelled: () => {\n        unsubscribe();\n      },\n      onSuccess: () => {\n        unsubscribe();\n      },\n      onError: function(err) {\n        unsubscribe();\n      }\n    });\n    return invitation;\n  }\n  removeInvitation(id) {\n    var _a;\n    log4(\"remove invitation\", {\n      id\n    }, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/halo-proxy.ts\",\n      line: 245,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    const index = this._invitations.findIndex((invitation) => {\n      var _a2;\n      return ((_a2 = invitation.invitation) == null ? void 0 : _a2.invitationId) === id;\n    });\n    void ((_a = this._invitations[index]) == null ? void 0 : _a.cancel());\n    this._invitations.splice(index, 1);\n    this.invitationsUpdate.emit();\n  }\n  acceptInvitation(invitation, options) {\n    if (!this.opened) {\n      throw new ApiError3(\"Client not open.\");\n    }\n    log4(\"accept invitation\", options, {\n      file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/proxies/halo-proxy.ts\",\n      line: 260,\n      scope: this,\n      callSite: (f, a) => f(...a)\n    });\n    return this._invitationProxy.acceptInvitation(invitation, options);\n  }\n};\n\n// packages/sdk/client/src/packlets/client/config.ts\nvar DEFAULT_CONFIG_CHANNEL = \"dxos:app\";\nvar DEFAULT_CLIENT_ORIGIN = \"https://halo.dxos.org/vault.html\";\nvar EXPECTED_CONFIG_VERSION = 1;\nvar defaultConfig = {\n  version: 1\n};\n\n// packages/sdk/client/src/packlets/client/serializer.ts\nimport { schema } from \"@dxos/protocols\";\nvar spaceCodec = schema.getCodecForType(\"dxos.echo.snapshot.SpaceSnapshot\");\nvar SpaceSerializer = class {\n  constructor(_echo) {\n    this._echo = _echo;\n  }\n  async serializeSpace(space) {\n    const snapshot = await space.createSnapshot();\n    return new Blob([\n      spaceCodec.encode(snapshot)\n    ]);\n  }\n  async deserializeSpace(data) {\n    return await this._echo.cloneSpace(spaceCodec.decode(data));\n  }\n};\n\n// packages/sdk/client/src/packlets/client/utils.ts\nimport { ClientServicesHost } from \"@dxos/client-services\";\nimport { Config } from \"@dxos/config\";\nimport { ApiError as ApiError4 } from \"@dxos/errors\";\nimport { log as log5 } from \"@dxos/log\";\nimport { MemorySignalManager, MemorySignalManagerContext, WebsocketSignalManager } from \"@dxos/messaging\";\nimport { createWebRTCTransportFactory, MemoryTransportFactory, NetworkManager } from \"@dxos/network-manager\";\n\n// packages/sdk/client/src/packlets/client/iframe-service-proxy.ts\nimport { ClientServicesProxy as ClientServicesProxy3 } from \"@dxos/client-services\";\nimport { PublicKey as PublicKey3 } from \"@dxos/keys\";\nimport { createIFrame, createIFramePort } from \"@dxos/rpc-tunnel\";\nvar IFrameClientServicesProxy = class {\n  constructor({ config, channel, timeout = 1e3 }) {\n    this.params = {\n      config,\n      channel,\n      timeout\n    };\n    this._clientServicesProxy = new ClientServicesProxy3(this._getIFramePort());\n  }\n  get proxy() {\n    return this._clientServicesProxy.proxy;\n  }\n  get descriptors() {\n    return this._clientServicesProxy.descriptors;\n  }\n  get services() {\n    return this._clientServicesProxy.services;\n  }\n  async open() {\n    if (!this._clientServicesProxy) {\n      this._clientServicesProxy = new ClientServicesProxy3(this._getIFramePort());\n    }\n    return this._clientServicesProxy.open();\n  }\n  async close() {\n    var _a, _b;\n    await ((_a = this._clientServicesProxy) == null ? void 0 : _a.close());\n    this._clientServicesProxy = void 0;\n    if (this._iframeId) {\n      (_b = document.getElementById(this._iframeId)) == null ? void 0 : _b.remove();\n      this._iframeId = void 0;\n    }\n  }\n  _getIFramePort() {\n    var _a;\n    this._iframeId = `__DXOS_CLIENT_${PublicKey3.random().toHex()}__`;\n    const source = new URL((_a = this.params.config.get(\"runtime.client.remoteSource\")) != null ? _a : DEFAULT_CLIENT_ORIGIN, window.location.origin);\n    const iframe = createIFrame(source.toString(), this._iframeId);\n    return createIFramePort({\n      origin: source.origin,\n      iframe,\n      channel: this.params.channel\n    });\n  }\n};\n\n// packages/sdk/client/src/packlets/client/utils.ts\nvar fromIFrame = (config = new Config(), channel = DEFAULT_CONFIG_CHANNEL) => {\n  if (typeof window === \"undefined\") {\n    throw new ApiError4(\"Cannot configure IFrame bridge outside of browser environment.\");\n  }\n  return new IFrameClientServicesProxy({\n    config,\n    channel\n  });\n};\nvar fromHost = (config = new Config()) => {\n  return new ClientServicesHost({\n    config,\n    networkManager: createNetworkManager(config)\n  });\n};\nvar createNetworkManager = (config, options = {}) => {\n  const signalServer = config.get(\"runtime.services.signal.server\");\n  if (signalServer) {\n    const { log: log1 = true, signalManager = new WebsocketSignalManager([\n      signalServer\n    ]), transportFactory = createWebRTCTransportFactory({\n      iceServers: config.get(\"runtime.services.ice\")\n    }) } = options;\n    return new NetworkManager({\n      log: log1,\n      signalManager,\n      transportFactory\n    });\n  }\n  log5.warn(\"P2P network is not configured.\", {}, {\n    file: \"/home/jdw/Code/dxos/dxos/packages/sdk/client/src/packlets/client/utils.ts\",\n    line: 62,\n    scope: void 0,\n    callSite: (f, a) => f(...a)\n  });\n  return new NetworkManager({\n    signalManager: new MemorySignalManager(new MemorySignalManagerContext()),\n    transportFactory: MemoryTransportFactory\n  });\n};\n\n// packages/sdk/client/src/packlets/client/client.ts\nvar __decorate2 = function(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n    r = Reflect.decorate(decorators, target, key, desc);\n  else\n    for (var i = decorators.length - 1; i >= 0; i--)\n      if (d = decorators[i])\n        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar Client = class {\n  constructor({ config, modelFactory, services } = {}) {\n    this.version = DXOS_VERSION;\n    this._initialized = false;\n    this._config = config != null ? config : new Config2();\n    this._services = services != null ? services : fromIFrame(this._config);\n    this._modelFactory = modelFactory != null ? modelFactory : createDefaultModelFactory();\n    this._halo = new HaloProxy(this._services);\n    this._echo = new EchoProxy(this._services, this._modelFactory, this._halo);\n    if (Object.keys(this._config.values).length > 0 && this._config.values.version !== EXPECTED_CONFIG_VERSION) {\n      throw new InvalidConfigError(\"Invalid config version\", {\n        current: this._config.values.version,\n        expected: EXPECTED_CONFIG_VERSION\n      });\n    }\n  }\n  [inspect3.custom]() {\n    return inspectObject3(this);\n  }\n  toJSON() {\n    return {\n      initialized: this.initialized,\n      echo: this.echo,\n      halo: this.halo\n    };\n  }\n  get config() {\n    return this._config;\n  }\n  get initialized() {\n    return this._initialized;\n  }\n  get halo() {\n    assert(this._initialized, \"Client not initialized.\");\n    return this._halo;\n  }\n  get echo() {\n    assert(this._initialized, \"Client not initialized.\");\n    return this._echo;\n  }\n  async initialize() {\n    if (this._initialized) {\n      return;\n    }\n    await this._services.open();\n    if (typeof window !== \"undefined\") {\n      await createDevtoolsRpcServer(this, this._services);\n    }\n    await this._services.services.SystemService.initSession();\n    await this._halo.open();\n    await this._echo.open();\n    this._initialized = true;\n  }\n  async destroy() {\n    if (!this._initialized) {\n      return;\n    }\n    await this._halo.close();\n    await this._echo.close();\n    await this._services.close();\n    this._initialized = false;\n  }\n  async getStatus() {\n    var _a;\n    return (_a = this._services.services) == null ? void 0 : _a.SystemService.getStatus();\n  }\n  async reset() {\n    var _a;\n    if (!this._initialized) {\n      throw new ApiError5(\"Client not open.\");\n    }\n    await ((_a = this._services.services) == null ? void 0 : _a.SystemService.reset());\n    await this.destroy();\n    this._halo.profileChanged.emit();\n    this._initialized = false;\n  }\n  createSerializer() {\n    return new SpaceSerializer(this._echo);\n  }\n};\n__decorate2([\n  synchronized2\n], Client.prototype, \"initialize\", null);\n__decorate2([\n  synchronized2\n], Client.prototype, \"destroy\", null);\nexport {\n  ApiError6 as ApiError,\n  Client,\n  ClientServicesHost2 as ClientServicesHost,\n  Config3 as Config,\n  Contact,\n  DEFAULT_CLIENT_ORIGIN,\n  DEFAULT_CONFIG_CHANNEL,\n  Database2 as Database,\n  EXPECTED_CONFIG_VERSION,\n  EchoProxy,\n  Entity,\n  HaloProxy,\n  IFrameClientServicesProxy,\n  IFrameRuntime,\n  Invitation,\n  InvitationEncoder,\n  Item,\n  ItemFilterDeleted,\n  ItemID,\n  KeyRecord,\n  KeyType,\n  Link,\n  ObjectModel,\n  OrderedList,\n  Profile,\n  PublicKey4 as PublicKey,\n  ResultSet4 as ResultSet,\n  SPACE_ITEM_TYPE,\n  Schema,\n  Selection,\n  SelectionResult,\n  SignRequest,\n  SignResponse,\n  SpaceMember,\n  SpaceProxy,\n  SpaceSerializer,\n  TYPE_SCHEMA,\n  WorkerRuntime,\n  WorkerSession,\n  createDevtoolsRpcServer,\n  defaultConfig,\n  fromHost,\n  fromIFrame,\n  generateSeedPhrase\n};\n//# sourceMappingURL=index.mjs.map\n","start":1670465440557,"end":1670465440571,"order":"normal"}]}
