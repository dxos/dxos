//
// Copyright 2023 DXOS.org
//

syntax = "proto3";

import "dxos/schema.proto";

package braneframe;

// TODO(burdon): Move into object.
message Meta {
  message ForeignKey {
    string source = 1;
    string id = 2;
  }

  repeated ForeignKey keys = 1;
}

/**
 * Expando schema definition.
 */
// TODO(burdon): Used by Table, Kanban, etc.
message Schema {
  option (object) = true;

  enum PropType {
    NONE = 0;
    STRING = 1;
    NUMBER = 2;
    BOOLEAN = 3;
    DATE = 4;
  }

  message Prop {
    string id = 1;
    PropType type = 2;
    string label = 3;
    int32 digits = 4;
  }

  // FQ type name (e.g., dxos.org/type/Document
  string typename = 1;
  repeated Prop props = 2;
}

/**
 * Table view.
 */
message Table {
  option (object) = true;

  message Prop {
    string id = 1;
    int32 size = 2;
  }

  Schema schema = 1;
  repeated Prop props = 2;

  // TODO(burdon): Filter.
  // TODO(burdon): Visible columns.
  // TODO(burdon): Column widths.
}

/**
 *
 */
message File {
  option (object) = true;

  string type = 1;
  string timestamp = 2;
  string title = 3;
  string filename = 4;

  string cid = 10;
}

/**
 *
 */
message Document {
  option (object) = true;

  string title = 1;
  dxos.schema.Text content = 2;

  // TODO(wittjosiah): Make system-level prop.
  Meta meta = 1000;
}

/**
 *
 */
message Stack {
  option (object) = true;

  message Section {
    // TODO(burdon): Should this be an object?
    option (object) = true;

    dxos.schema.TypedObject object = 1;
  }

  string title = 1;
  repeated Section sections = 2;
}

/**
 *
 */
message Kanban {
  option (object) = true;

  message Column {
    // TODO(burdon): Should this be an object?
    option (object) = true;

    string title = 1;
    repeated Item items = 2;
  }

  message Item {
    // TODO(burdon): Should this be an object?
    option (object) = true;

    dxos.schema.Text title = 1;
    // TODO(burdon): Optional content
    dxos.schema.TypedObject object = 2;
  }

  string title = 1;
  repeated Column columns = 2;
}

/**
 *
 */
message Sketch {
  option (object) = true;

  string title = 1;
  // TODO(burdon): YJS document (map).
  dxos.schema.Text data = 2;
}

/**
 *
 */
// TODO(burdon): Channel > Thread > Block > Message.
message Thread {
  option (object) = true;

  message Message {
    string timestamp = 1;
    string text = 2;
    string data = 3; // JSON.
  }

  // TODO(burdon): Meta (e.g., source).
  message Block {
    option (object) = true;

    // TODO(burdon): Can the be inferred from the mutation/pipeline?
    // TODO(burdon): Import key.
    // dxos.keys.PublicKey identity_key = 2;
    string identity_key = 1;
    repeated Message messages = 2;

    // TODO(wittjosiah): Make system-level prop.
    Meta meta = 1000;
  }

  string title = 1;
  repeated Block blocks = 2;
}
