//
// Copyright 2023 DXOS.org
//

syntax = "proto3";

import "dxos/schema.proto";

package braneframe;

//option echo_namespace = 'braneframe.com/schema';

/**
 *
 */
message Folder {
  option (object) = true;

  optional string name = 1;
  repeated dxos.schema.TypedObject objects = 2;
}

/**
 * Generic data view.
 */
message View {
  option (object) = true;

  string title = 1;
  string type = 2;
}

/**
 * Table view.
 */
message Table {
  option (object) = true;

  message Prop {
    string id = 1;
    string prop = 2;
    string label = 3;
    string refProp = 4;
    int32 size = 10;
  }

  string title = 1;
  dxos.schema.Schema schema = 2;
  repeated Prop props = 3;

  // TODO(burdon): Filter.
  // TODO(burdon): Visible columns.
  // TODO(burdon): Column widths.
}

/**
 *
 */
message File {
  option (object) = true;

  string type = 1;
  string timestamp = 2;
  string title = 3;
  string filename = 4;

  string cid = 10;
}

/**
 *
 */
message Document {
  option (object) = true;

  message Comment {
    // TODO(burdon): Should not be object, but arrays of plain objects are broken.
    // option (object) = true;

    Thread thread = 1;
    string cursor = 2; // TODO(burdon): Rename cursor (start/end).
  }

  string title = 1;
  dxos.schema.Text content = 2;
  repeated Comment comments = 3;
}

/**
 *
 */
message Script {
  option (object) = true;

  string title = 1;
  dxos.schema.Text source = 2;
}

/**
 *
 */
message Stack {
  option (object) = true;

  message Section {
    // TODO(burdon): Should this be an object?
    option (object) = true;

    dxos.schema.TypedObject object = 1;
  }

  string title = 1;
  repeated Section sections = 2;
}

/**
 *
 */
message Tree {
  option (object) = true;

  message Item {
    option (object) = true;

    dxos.schema.Text text = 1;
    repeated Item items = 2;
    bool done = 3;
  }

  string title = 1;
  Item root = 2;

  // Options.
  bool checkbox = 10;
}

/**
 *
 */
message Kanban {
  option (object) = true;

  message Column {
    // TODO(burdon): Should this be an object?
    option (object) = true;

    string title = 1;
    string index = 2;
    repeated Item items = 3;
  }

  // TODO(burdon): Reconcile with Grid.Item.
  message Item {
    option (object) = true;

    dxos.schema.TypedObject object = 1;
    dxos.schema.Text title = 2;

    // TODO(burdon): Properties.
    string index = 11;
  }

  string title = 1;
  repeated Column columns = 2;
}

/**
 *
 */
message Grid {
  option (object) = true;

  message Position {
    int32 x = 1;
    int32 y = 2;
  }

  // TODO(burdon): Reconcile with Kanban.Item.
  message Item {
    option (object) = true;

    dxos.schema.TypedObject object = 1;

    Position position = 10;
    string color = 11;
  }

  string title = 1;
  repeated Item items = 2;
}

/**
 *
 */
message Sketch {
  option (object) = true;

  string title = 1;
  // TODO(burdon): YJS document (map).
  dxos.schema.Text data = 2;
}

/**
 *
 */
message Thread {
  option (object) = true;

  // TODO(burdon): Reconcile with Message.Context.
  message Context {
    string space = 1;
    string schema = 2;
    string object = 3;
  }

  string title = 1;
  repeated Message messages = 2;
  Context context = 3;
}

/**
 *
 */
// TODO(burdon): Reconcile with Thread?
message Mailbox {
  option (object) = true;

  string title = 1;
  repeated Message messages = 2;
}

/**
 * Universal message type.
 * Attempts to unify email, chat, and other messaging.
 */
message Message {
  option (object) = true;

  message Context {
    string space = 1;
    string schema = 2;
    string object = 3;
  }

  message Block {
    string timestamp = 1;
    string text = 2;
    string data = 3; // JSON.
    dxos.schema.Expando object = 4; // TODO(burdon): Change to TypedObject.
  }

  // TODO(burdon): Promote to top-level (shared with Event).
  message Recipient {
    // TODO(burdon): Add reference to Contact object.
    // TODO(burdon): Import key definition.
    // dxos.keys.PublicKey identity_key = 2;
    optional string identity_key = 1;
    string email = 2;
    optional string name = 3;
    optional Contact contact = 4;
  }

  enum State {
    NONE = 0;
    ARCHIVED = 2;
    DELETED = 3; // TODO(burdon): Actually delete (need sync range so that doesn't return).
    SPAM = 4;
  }

  string type = 1;
  string date = 2;

  Recipient from = 10;
  repeated Recipient to = 11;
  repeated Recipient cc = 12;

  string subject = 20;
  repeated Block blocks = 21;

  // TODO(burdon): Email attachments and computed references.
  repeated dxos.schema.Expando links = 30;

  // TODO(burdon): Tags.
  optional State state = 40;
  optional bool read = 41;

  Context context = 100;
}

message Contact {
  option (object) = true;

  message Identifier {
    string type = 1;
    string value = 2;
  }

  string name = 1;
  repeated Identifier identifiers = 2;
}

message Event {
  option (object) = true;

  string title = 1;
  Message.Recipient owner = 2;
  repeated Message.Recipient attendees = 3;

  string start_date = 10;

  // TODO(burdon): Model links separately?
  repeated dxos.schema.Expando links = 20;
}

// TODO(burdon): Rename? Singleton with queries?
message AddressBook {
  option (object) = true;
}

// TODO(burdon): Rename?
message Calendar {
  option (object) = true;
}

/**
 * AI Chain.
 */
message Chain {
  option (object) = true;

  message Input {
    option (object) = true;

    enum Type {
      VALUE = 0;
      PASS_THROUGH = 1;
      RETRIEVER = 2;
      FUNCTION = 3;
      QUERY = 4;
      RESOLVER = 5;
      CONTEXT = 6;
    }

    string name = 1;
    Type type = 2;
    dxos.schema.Text value = 3;
  }

  // TODO(burdon): Bug: Not reactive unless object?
  //  https://github.com/dxos/dxos/issues/4882
  message Prompt {
    option (object) = true;

    string command = 1;
    dxos.schema.Text source = 2;
    repeated Input inputs = 3;
  }

  string title = 1;
  repeated Prompt prompts = 2;
}

message Map {
  option (object) = true;

  string title = 1;
};
