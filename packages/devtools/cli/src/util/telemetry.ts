//
// Copyright 2022 DXOS.org
//

import yaml from 'js-yaml';
import { mkdir, readFile, stat, writeFile } from 'node:fs/promises';
import os from 'node:os';
import { join } from 'node:path';
import { v4 as uuid, validate as validateUuid } from 'uuid';

import { captureException } from '@dxos/sentry';
import { init, event } from '@dxos/telemetry';

import telemetryrc from './telemetryrc.json';

export const DX_ENVIRONMENT = telemetryrc.DX_ENVIRONMENT ?? undefined;
export const DX_RELEASE = telemetryrc.DX_RELEASE ?? undefined;
export const SENTRY_DESTINATION = telemetryrc.SENTRY_DESTINATION ?? undefined;
export const TELEMETRY_API_KEY = telemetryrc.TELEMETRY_API_KEY ?? undefined;
export const IPDATA_API_KEY = telemetryrc.IPDATA_API_KEY ?? undefined;

export type TelemetryContext = {
  mode: 'disabled' | 'basic' | 'full';
  installationId?: string;
  group?: string;
  environment?: string;
  release?: string;
  timezone: string;
  runtime: string;
  os: string;
  arch: string;
  ci: boolean;
  [key: string]: any;
};

const DEFAULTS: TelemetryContext = {
  mode: 'basic',
  environment: DX_ENVIRONMENT,
  release: DX_RELEASE,
  timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
  runtime: `node ${process.version}`,
  os: os.platform(),
  arch: os.arch(),
  ci: process.env.CI === 'true'
};

export const disableTelemetry = async (configDir: string) => {
  if (!TELEMETRY_API_KEY) {
    return;
  }

  const { installationId } = await getTelemetryContext(configDir);
  const path = join(configDir, '.telemetry-disabled');
  if (await exists(path)) {
    return;
  }

  init({ apiKey: TELEMETRY_API_KEY, batchSize: 1, enable: true });
  event({
    installationId,
    name: 'cli.telemetry.disable'
  });
  await writeFile(path, '', 'utf-8');
};

export const getTelemetryContext = async (configDir: string): Promise<TelemetryContext> => {
  const configDirExists = await exists(configDir);
  if (!configDirExists) {
    await mkdir(configDir, { recursive: true });
  }

  const idPath = join(configDir, 'telemetry.yml');
  if (await exists(idPath)) {
    const context = await readFile(idPath, 'utf-8');
    return validate(context) ?? createContext(idPath);
  }

  return createContext(idPath);
};

const createContext = async (idPath: string) => {
  const installationId = uuid();
  const context = yaml.dump({ installationId });
  const comment = '# This file is automatically generated by the @dxos/cli.\n';
  await writeFile(idPath, `${comment}${context}`, 'utf-8');
  return { ...DEFAULTS, installationId };
};

const validate = (contextString: string) => {
  try {
    const context = yaml.load(contextString) as TelemetryContext;
    if (Boolean(context.installationId) && validateUuid(context.installationId!)) {
      return { ...DEFAULTS, ...context };
    }
  } catch (err: any) {
    captureException(err);
  }
};

// TODO(wittjosiah): Factor out.
const exists = async (...args: string[]): Promise<boolean> => {
  try {
    const result = await stat(join(...args));
    return !!result;
  } catch (err: any) {
    if (/ENOENT/.test(err.message)) {
      return false;
    } else {
      throw err;
    }
  }
};
