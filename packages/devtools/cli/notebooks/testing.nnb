{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "import { Client, fromCliEnv, } from '@dxos/client'\n\nconst client = new Client({ services: fromCliEnv({ profile: 'test' })})\n\nawait client.initialize()"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "export {}\ndeclare var client: import('@dxos/client').Client\n\nconsole.log(client.halo.identity.get())\nconsole.log(client.spaces.get().map(space => [space.key.toHex(), space.properties.name]))"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "export {}; declare var client: import('@dxos/client').Client;\n\nawait client.halo.createIdentity()"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "export {}\ndeclare var client: import('@dxos/client').Client\n\n// await client.halo.createIdentity()\n\nawait client.createSpace({ name: 'Test space' })"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { Client, fromCliEnv, } from '@dxos/client'\n\nconst client1 = new Client({ services: fromCliEnv({ profile: 'test-1' })})\nawait client1.initialize()\nconst client2 = new Client({ services: fromCliEnv({ profile: 'test-2' })})\nawait client2.initialize()\n\nimport { performInvitation } from '@dxos/client-services/testing';\n\nawait performInvitation({\n  host: client1.spaces.get()[0],\n  guest: client2,\n})"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "export {}; declare var client: import('@dxos/client').Client;\nimport { Expando } from '@dxos/client';\n\ntry {\n  const space = client.spaces.get()[0]\n  space.db.add(new Expando({ type: 'counter', count: 0 }))\n  // const counter: Expando = space.db.objects[1];\n  \n  // Inc counter 100 times\n  // for (let i = 0; i < 5_000; i++) {\n  //   counter.count++;\n  // }\n  \n  await space.db.flush()\n} catch (e) {\n  console.error(e)\n}"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "export {}; declare var client: import('@dxos/client').Client;\nimport { Expando } from '@dxos/client';\n\nconst space = client.spaces.get()[0]\nspace.db.add(new Expando({\n  '__type': 'dxos.function.Trigger',\n  id: '1',\n  spaceKey: '048207b439100844d12c2509e8fc78217d2c7458ea4e274136e06acce9cb0c8319f67bb0f4460c32e06c1c356a0355eeb159e7454f0862a612a598b347d2121451',\n  function: {\n    name: 'chess',\n  },\n  subscription: {\n    props: {\n      type: 'counter'\n    }\n  }\n}))\n\nawait space.db.flush()"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "export {}; declare var client: import('@dxos/client').Client;\n\nclient.spaces.get()[0].db.query({ '__type': 'dxos.function.Trigger' }).objects.map(o => o.toJSON())"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                ""
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "export {}; declare var client: import('@dxos/client').Client;\nimport { Expando } from '@dxos/client';\n\n\nconst space = client.spaces.get()[0]\n\n// const counter = space.db.add(new Expando({ count: 0 }))\nconst counter: Expando = space.db.objects[1];\n\n// Inc counter 100 times\nfor (let i = 0; i < 5_000; i++) {\n  counter.count++;\n}\n\nawait space.db.flush()"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "export {}; declare var client: import('@dxos/client').Client;\n\nconst counter = client.spaces.get()[0].db.objects[1];\n\ncounter.count"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "export {}; declare var client: import('@dxos/client').Client;\n\nawait client.spaces.get()[0].internal.createEpoch();"
            ],
            "outputs": []
        }
    ]
}