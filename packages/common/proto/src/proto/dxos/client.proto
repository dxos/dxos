//
// Copyright 2021 DXOS.org
//

syntax = "proto3";

import "google/protobuf/empty.proto";
import "config.proto";
import "./echo/invitation.proto";
import "./halo/keys.proto";

package dxos.client;

//
// SYSTEM
//

service SystemService {
  rpc GetConfig(google.protobuf.Empty) returns (Config);
  rpc Reset (google.protobuf.Empty) returns (google.protobuf.Empty);
}

//
// HALO
//

message Profile {
  required dxos.halo.keys.PubKey publicKey = 1; 
  string username = 2;
}

message SubscribeProfileResponse {
  Profile profile = 1;
}

message CreateProfileRequest {
  string username = 1;
  bytes publicKey = 2;
  bytes secretKey = 3;
}

message RecoverProfileRequest { 
  string seedPhrase = 1;
}

enum InvitationState {
  WAITING_FOR_CONNECTION = 1;
  CONNECTED = 2;
  SUCCESS = 3;
  ERROR = 4;
}

/// Invitation process created by sender.
message InvitationRequest {
  InvitationDescriptor descriptor = 1;

  InvitationState state = 2;

  /// Only if state == ERROR.
  string error = 3;
}

/// Invitation that is being redeemed.
message RedeemedInvitation {
  string id = 1;

  InvitationState state = 2;

  /// Only if state == ERROR.
  string error = 3;

  /// Only on party invitations that are finished.
  dxos.halo.keys.PubKey partyKey = 4;
}

message AuthenticateInvitationRequest {
  /// Id from corresponding RedeemedInvitation.
  string processId = 1;
  bytes secret = 2;
}

message Contact {
  dxos.halo.keys.PubKey publicKey = 1;
  string displayName = 2;
}

message Contacts {
  repeated Contact contacts = 1;
}

service ProfileService {
  rpc SubscribeProfile (google.protobuf.Empty) returns (stream SubscribeProfileResponse);
  rpc CreateProfile(CreateProfileRequest) returns (Profile);
  rpc RecoverProfile(RecoverProfileRequest) returns (Profile);
    
  rpc CreateInvitation(google.protobuf.Empty) returns (stream InvitationRequest);
  rpc AcceptInvitation(InvitationDescriptor) returns (stream RedeemedInvitation);
  rpc AuthenticateInvitation(AuthenticateInvitationRequest) returns (google.protobuf.Empty);
    
  rpc SubscribeContacts(google.protobuf.Empty) returns (stream Contacts);
}

//
// ECHO
//

message Party {
  message Member {
    required dxos.halo.keys.PubKey publicKey = 1;
    string displayName = 2;
  }

  required dxos.halo.keys.PubKey publicKey = 1;
  required bool isOpen = 2;
  required bool isActive = 3;

  repeated Member members = 4;
}

message SubscribePartyRequest {
  required dxos.halo.keys.PubKey partyKey = 1;
}

message SubscribePartyResponse {
  Party party = 1;
}


message SubscribePartiesResponse {
  repeated Party parties = 1;
}

message CreateInvitationRequest {
  required dxos.halo.keys.PubKey partyKey = 1;
}

message PartyActivationOptions {
  bool global = 1;
  bool device = 2;
}

message SetPartyStateRequest {
  required dxos.halo.keys.PubKey partyKey = 1;

  bool open = 2;
  bool activeGlobal = 3;
  bool activeDevice = 4;
}

message SubscribeMembersRequest {
  required dxos.halo.keys.PubKey partyKey = 1;
}

message SubscribeMembersResponse {
  message PartyMember {
    required dxos.halo.keys.PubKey publicKey = 1;
    string displayName = 2;
  }

  repeated PartyMember members = 1;
}


service PartyService {
  // TODO(rzadp): Combine the two into one?
  rpc SubscribeToParty (SubscribePartyRequest) returns (stream SubscribePartyResponse);
  rpc SubscribeParties (google.protobuf.Empty) returns (stream SubscribePartiesResponse);

  rpc CreateParty(google.protobuf.Empty) returns(Party);

  /// Open and close or activate and deactivate a party.
  rpc SetPartyState(SetPartyStateRequest) returns(Party);

  rpc CreateInvitation(CreateInvitationRequest) returns (stream InvitationRequest);
  rpc AcceptInvitation(InvitationDescriptor) returns (stream RedeemedInvitation);
  rpc AuthenticateInvitation(AuthenticateInvitationRequest) returns (google.protobuf.Empty);

  // TODO(rzadp): Remove and join with Subscribing to Party.
  rpc SubscribeMembers (SubscribeMembersRequest) returns (stream SubscribeMembersResponse);

}

