//
// Copyright 2020 DXOS.org
//

syntax = "proto3";

package dxos.credentials.party;

import "keys.proto";
import "signed.proto";
import "google/protobuf/any.proto";

//
// Party Credentials are messages that, by virtue of their being signed by a key that is a
// recognized authority, convey to the recipient that something should be allowed or done.
// They are therefore similar in structure and purpose to X.509 certificates and to W3C
// Verifiable Credentials. The "subject" for a Party Credential (who or what can do the thing allowed),
// along with the kind of action permitted is specified in one of the four contained message
// types: PartyGenesis, FeedGenesis, KeyAdmit, FeedAdmit. One such subject message is
// present in the contents field of each PartyCredential message.
// PartyMessage carries common metadata (created, nonce) and the type of the subject message (type).
// Note that the subject message type is explicitly present in the type field even though
// its type will be discoverable via the relevant codec at runtime. This arrangement allows
// for signing to be done over the relevant fields (fields for which signature inclusion is
// necessary to ensure the security of the system), without needing to make assumptions about
// the presence and specific form of the codec-supplied message type identification.
// The complete credential comprises the PartyCredential message contents, signed by the
// relevant authority key(s), encoded as a SignedMessage (see ../signed.proto).
//
message PartyCredential {
  enum Type {
    ENVELOPE = 0;
    PARTY_GENESIS = 1;
    FEED_GENESIS = 2;
    KEY_ADMIT = 3;
    FEED_ADMIT = 4;
  }

  Type type = 1;

  oneof contents {
    Envelope envelope = 10;
    PartyGenesis partyGenesis = 11;
    KeyAdmit keyAdmit = 12;
    FeedAdmit feedAdmit = 13;
    FeedGenesis feedGenesis = 14;
  }
}

//
// The start-of-authority record for the Party, admitting a single key (usually a pseudonym) and a single feed.
// It must be signed by all three keys (party, key, feed). The Party private key should be destroyed after
// signing this message. This pattern is sometimes called an Inception Key.
//
message PartyGenesis {
  PubKey partyKey = 1;                        // The party public key.
  PubKey feedKey = 2;                         // The initial feed to admit.
  PubKey admitKey = 3;                        // The key to admit (usually a pseudonym key).
  KeyType admitKeyType = 4;                  // The KeyType of the admitKey.
}

//
// Admit a single public key to the Party. This message must be signed by the key to be admitted, to prevent
// impersonation attacks, and unless the contents of an Envelope, also by a key which has already been admitted.
// Admitted keys represent entities in the Party Authority trust tree, for example: an identity pseudonym key
// representing "Alice in this party", or a device pseudonym key representing "Alice's Laptop in this Party".
//
message KeyAdmit {
  PubKey partyKey = 1;
  PubKey admitKey = 2;                        // The public key to admit.
  KeyType admitKeyType = 3;                  // The KeyType of the admitKey.
}

//
// Admit a single feed to the Party. This message must be signed by the feed key to be admitted, also by some other
// key which has already been admitted (usually by a device pseudonym key).
// FeedAdmit messages constitute the leaf nodes in the Party Authority trust tree in that Party data is transmitted
// via feeds and therefore to write to a Party a node must have at least one feed admitted.
//
message FeedAdmit {
  PubKey partyKey = 1;                        // The Party public key.
  PubKey feedKey = 2;                         // The Feed public key.
}

//
// The start-of-authority record for the Feed, signed by the owner of the feed and the feed.
// The owner must be a key previously admitted to the Party.
//
message FeedGenesis {
  PubKey feedKey  = 1;                        // The feed public key.
  PubKey ownerKey = 2;                        // The public key of the owner of this feed.
}

//
// TODO(burdon): Needs discussion.
// A signed message containing a signed message. The nested signed structure allows a signed message
// received from another node that is not yet a party member (invitee), to be published on the party on behalf
// of that node by another node (greeter). It thereby provides a kind of delegated authority mechanism used to
// link signatures across the two nodes in a replay and impersonation resistant manner.
// Envelope is used by a Greeter to write, and countersign using
// its key, a message provided to it, signed by the Invitee, to the Party, via the greeting node's feed.
// The signature on the Envelope is that of the Greeter, while the signature(s) on the interior message are
// those of the Invitee, demonstrating ownership by the Invitee of the keys or feeds to be admitted.
// Envelope exists solely to include the party key under the countersignature, otherwise two nested SignedMessages
// could be used. The party key is included to prevent replay attacks where a valid credential from one
// party is used to gain access to a different party.
// The interior message can only be of types:
//   KEY_ADMIT
//   FEED_ADMIT
//
message Envelope {
  PubKey partyKey = 1;                        // The Party public key.
  Message message = 2;                       // The original Message.
}

//
// A PartyInvitation message that can be written to the Party so that any Party member can authenticate
// the invitee and perform greeting. This message must be written within a SignedMessage signed by the key (or KeyChain)
// of listed as the `issuer`. The invitee must authenticate themselves to the Greeter with Auth messages signed by
// the key (or KeyChain) of listed in the `invitee` field.
//
message PartyInvitation {
  bytes id = 1; // A unique ID for this Invitation.
  PubKey partyKey = 2; // The public key of the Party for which this Invitation is valid.
  PubKey issuerKey = 3; // The public key of the Party member issuing this invitation.
  PubKey inviteeKey = 4; // The public key of the non-member that is being invited to join the Party.
}
