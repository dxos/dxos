//
// Copyright 2021 DXOS.org
//

syntax = "proto3";

package dxos.devtools;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "./halo/keys.proto";

service DevtoolsHost {
  //
  // General
  //
  
  // Subscribe to server-to-client events.
  rpc Events(google.protobuf.Empty) returns (stream Event);

  // Get client config.
  rpc GetConfig(google.protobuf.Empty) returns (GetConfigResponse);

  rpc ResetStorage(ResetStorageRequest) returns (google.protobuf.Empty);

  rpc EnableDebugLogging(EnableDebugLoggingRequest) returns (EnableDebugLoggingResponse);

  rpc DisableDebugLogging(EnableDebugLoggingRequest) returns (EnableDebugLoggingResponse);

  //
  // HALO
  //

  rpc GetKeyringKeys(GetKeyringKeysRequest) returns (GetKeyringKeysResponse);

  //
  // ECHO
  //

  rpc SubscribeToItems(SubscribeToItemsRequest) returns (stream SubscribeToItemsResponse);

  //
  // MESH
  //

  rpc GetNetworkPeers(GetNetworkPeersRequest) returns (GetNetworkPeersResponse);

  rpc SubscribeToNetworkTopics(google.protobuf.Empty) returns (stream SubscribeToNetworkTopicsResponse);

  rpc SubscribeToSignalStatus(google.protobuf.Empty) returns (stream SubscribeToSignalStatusResponse);

  rpc SubscribeToSignalTrace(google.protobuf.Empty) returns (stream SubscribeToSignalTraceResponse);

  rpc SubscribeToSwarmInfo(SubscribeToSwarmInfoRequest) returns (stream SubscribeToSwarmInfoResponse);
}

message Event {
  oneof payload {
    ReadyEvent ready = 1;
  }
}

message ReadyEvent {}

message GetConfigResponse {
  // JSON-encoded configuration object.
  string config = 1;
}

message EnableDebugLoggingRequest {
  string namespaces = 1;
}

message EnableDebugLoggingResponse {
  string enabledNamespaces = 1;
}

message DisableDebugLoggingRequest {
  string namespaces = 1;
}

message DisableDebugLoggingResponse {
  string enabledNamespaces = 1;
}

message GetKeyringKeysRequest {}

message GetKeyringKeysResponse {
  repeated KeyRecord keys = 1;
}

message ResetStorageRequest {}

message GetNetworkPeersRequest {
  bytes topic = 1;
}

message GetNetworkPeersResponse {
  message PeerInfo {
    PubKey id = 1;

    // PeerState enum.
    string state = 2;
  
    repeated bytes connections = 3;
  }

  repeated PeerInfo peers = 1;
}

message SubscribeToItemsRequest {}

message SubscribeToItemsResponse {
  // JSON-encoded payload.
  string data = 1;
}

message SubscribeToNetworkTopicsResponse {
  message Topic {
    PubKey topic = 1;
    string label = 2;
  }

  repeated Topic topics = 1;
}

message SubscribeToSignalStatusResponse {
  message SignalServer {
    string host = 1;

    // SignalApi.State enum.
    string state = 2;
    
    string error = 3;

    // Number of milliseconds before reconnection. 
    // TODO(dmaretskyi): Represent as absolute timestamp.
    int32 reconnectIn = 4;

    google.protobuf.Timestamp connectionStarted = 5;
    google.protobuf.Timestamp lastStateChange = 6;
  }

  repeated SignalServer servers = 1;
}

message SubscribeToSignalTraceResponse {
  // JSON-encoded events.
  repeated string events = 1;
}

message SubscribeToSwarmInfoRequest {}

message SubscribeToSwarmInfoResponse {
  // TODO(yivlad): Move these types to @dxos/network-manager and import them from there.
  message SwarmInfo {
    PubKey id = 1;
    PubKey topic = 2;
    string label = 3;
    bool isActive = 4;
    message ConnectionInfo {
      message Json {
        string data = 1;
      }
      string state = 1;
      PubKey sessionId = 2;
      PubKey remotePeerId = 3;
      string transport = 4;
      repeated string protocolExtensions = 5;
      repeated Json events = 6;
    }
    repeated ConnectionInfo connections = 5;
  }
  repeated SwarmInfo data = 1;
}
