//
// Copyright 2021 DXOS.org
//

syntax = "proto3";

import "dxos/echo/timeframe.proto";
import "google/protobuf/empty.proto";

import "dxos/echo/feed.proto";
import "dxos/echo/snapshot.proto";
import "dxos/halo/keys.proto";
import "dxos/halo/signed.proto";
import "dxos/rpc.proto";

package dxos.devtools;

//
// DevtoolsHost
//

service DevtoolsHost {
  //
  // General
  //

  // Subscribe to server-to-client events.
  rpc Events(google.protobuf.Empty) returns (stream Event);

  // Get client config.
  rpc GetConfig(google.protobuf.Empty) returns (GetConfigResponse);

  rpc ResetStorage(ResetStorageRequest) returns (google.protobuf.Empty);

  rpc EnableDebugLogging(EnableDebugLoggingRequest) returns (EnableDebugLoggingResponse);
  rpc DisableDebugLogging(EnableDebugLoggingRequest) returns (EnableDebugLoggingResponse);

  //
  // HALO
  //

  rpc SubscribeToKeyringKeys(SubscribeToKeyringKeysRequest) returns (stream SubscribeToKeyringKeysResponse);

  rpc SubscribeToCredentialMessages(SubscribeToCredentialMessagesRequest) returns (stream SubscribeToCredentialMessagesResponse);

  //
  // ECHO
  //

  rpc SubscribeToParties(SubscribeToPartiesRequest) returns (stream SubscribeToPartiesResponse);
  rpc SubscribeToItems(SubscribeToItemsRequest) returns (stream SubscribeToItemsResponse);
  rpc SubscribeToFeeds(SubscribeToFeedsRequest) returns (stream SubscribeToFeedsResponse);
  rpc SubscribeToFeedBlocks(SubscribeToFeedBlocksRequest) returns (stream SubscribeToFeedBlocksResponse);

  rpc GetPartySnapshot(GetPartySnapshotRequest) returns (GetPartySnapshotResponse);
  rpc SavePartySnapshot(SavePartySnapshotRequest) returns (SavePartySnapshotResponse);
  rpc ClearSnapshots(ClearSnapshotsRequest) returns (google.protobuf.Empty);

  //
  // MESH
  //

  rpc GetNetworkPeers(GetNetworkPeersRequest) returns (GetNetworkPeersResponse);
  rpc SubscribeToNetworkTopics(google.protobuf.Empty) returns (stream SubscribeToNetworkTopicsResponse);
  rpc SubscribeToSignalStatus(google.protobuf.Empty) returns (stream SubscribeToSignalStatusResponse);
  rpc SubscribeToSignalTrace(google.protobuf.Empty) returns (stream SubscribeToSignalTraceResponse);
  rpc SubscribeToSwarmInfo(SubscribeToSwarmInfoRequest) returns (stream SubscribeToSwarmInfoResponse);
}

message Event {
  oneof payload {
    ReadyEvent ready = 1;
  }
}

message ReadyEvent {}

message GetConfigResponse {
  // JSON-encoded configuration object.
  string config = 1;
}

// EnableDebugLogging

message EnableDebugLoggingRequest {
  optional string namespaces = 1;
}

message EnableDebugLoggingResponse {
  optional string enabledNamespaces = 1;
}

// DisableDebugLogging

message DisableDebugLoggingRequest {
  optional string namespaces = 1;
}

message DisableDebugLoggingResponse {
  optional string enabledNamespaces = 1;
}

// SubscribeToKeyringKeys

message SubscribeToKeyringKeysRequest {}

message SubscribeToKeyringKeysResponse {
  repeated dxos.halo.keys.KeyRecord keys = 1;
}

// SubscribeToCredential

message SubscribeToCredentialMessagesRequest {
  optional dxos.halo.keys.PubKey partyKey = 1;
}

message SubscribeToCredentialMessagesResponse {
  repeated dxos.halo.signed.SignedMessage messages = 1;
}

// ResetStorage

message ResetStorageRequest {}

// GetNetworkPeers

message GetNetworkPeersRequest {
  bytes topic = 1;
}

message GetNetworkPeersResponse {
  message PeerInfo {
   dxos.halo.keys.PubKey id = 1;

    // PeerState enum.
    string state = 2;

    repeated bytes connections = 3;
  }

  repeated PeerInfo peers = 1;
}

// SubscribeToParties

message SubscribeToPartiesRequest {
  repeated dxos.halo.keys.PubKey partyKeys = 1;
}

message SubscribeToPartiesResponse {
  message PartyInfo {
   dxos.halo.keys.PubKey key = 1;
    bool isOpen = 2;
    bool isActive = 3;
    dxos.echo.timeframe.TimeframeVector timeframe = 4;
    repeated dxos.halo.keys.PubKey feeds = 5;
    map<string, string> properties = 6;
  }

  repeated PartyInfo parties = 1;
}

// SubscribeToItems

message SubscribeToItemsRequest {}

message SubscribeToItemsResponse {
  // JSON-encoded payload.
  string data = 1;
}

// SubscribeToFeeds

message SubscribeToFeedsRequest {
  dxos.halo.keys.PubKey partyKey = 1;
  repeated dxos.halo.keys.PubKey feedKeys = 2;
}

message SubscribeToFeedsResponse {
  message Feed {
   dxos.halo.keys.PubKey feedKey = 1;
    int32 length = 2;
  }

  repeated Feed feeds = 1;
}

// SubscribeToFeedMessages

message SubscribeToFeedBlocksRequest {
  optional dxos.halo.keys.PubKey partyKey = 1;
  optional dxos.halo.keys.PubKey feedKey = 2;
  optional int32 maxBlocks = 3;
}

message SubscribeToFeedBlocksResponse {
  message Block {
    bytes key = 1;
    int32 seq = 2;
    bool sync = 3;
    string path = 4;
    dxos.echo.feed.FeedMessage data = 5;
  }

  repeated Block blocks = 1;
}

// GetPartySnapshot

message GetPartySnapshotRequest {
  dxos.halo.keys.PubKey partyKey = 1;
}

message GetPartySnapshotResponse {
  optional dxos.echo.snapshot.PartySnapshot snapshot = 1;
}

// SavePartySnapshot

message SavePartySnapshotRequest {
  dxos.halo.keys.PubKey partyKey = 1;
}

message SavePartySnapshotResponse {
  optional dxos.echo.snapshot.PartySnapshot snapshot = 1;
}

// ClearSnapshots

message ClearSnapshotsRequest {}

// SubscribeToNetworkTopics

message SubscribeToNetworkTopicsResponse {
  message Topic {
   dxos.halo.keys.PubKey topic = 1;
    optional string label = 2;
  }

  repeated Topic topics = 1;
}

// SubscribeToSignalStatus

message SubscribeToSignalStatusResponse {
  message SignalServer {
    string host = 1;

    // SignalApi.State enum.
    string state = 2;

    optional string error = 3;

    // Number of milliseconds before reconnection.
    // TODO(dmaretskyi): Represent as absolute timestamp.
    int32 reconnectIn = 4;

    // TODO(dmaretskyi): Change to timestamp.
    int32 connectionStarted = 5;
    int32 lastStateChange = 6;
  }

  repeated SignalServer servers = 1;
}

// SubscribeToSignalTrace

message SubscribeToSignalTraceResponse {
  // JSON-encoded events.
  repeated string events = 1;
}

// SubscribeToSwarmInfo

message SubscribeToSwarmInfoRequest {}

message SubscribeToSwarmInfoResponse {
  // TODO(yivlad): Move these types to @dxos/network-manager and import them from there.
  message SwarmInfo {
    dxos.halo.keys.PubKey id = 1;
    dxos.halo.keys.PubKey topic = 2;
    optional string label = 3;
    bool isActive = 4;
    message ConnectionInfo {
      message Json {
        optional string data = 1;
      }
      string state = 1;
     dxos.halo.keys.PubKey sessionId = 2;
     dxos.halo.keys.PubKey remotePeerId = 3;
       optional string transport = 4;
       repeated string protocolExtensions = 5;
       repeated Json events = 6;
    }
    repeated ConnectionInfo connections = 5;
  }
  repeated SwarmInfo data = 1;
}

//
// TracingService
//

service TracingService {
  rpc SetTracingOptions(SetTracingOptionsRequest) returns (google.protobuf.Empty);
  rpc SubscribeToRpcTrace (google.protobuf.Empty) returns (stream dxos.rpc.RpcMessage);
}

// SetTracingOptions

message SetTracingOptionsRequest {
  bool enable = 1;
}
