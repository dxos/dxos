syntax = "proto3";

import "google/protobuf/empty.proto";

import "./client.proto";
import "./config.proto";
import "./echo/invitation.proto";

package dxos.bot;

// TODO(burdon): Rename.
message BotPackageSpecifier {
  oneof kind {
    string dxn = 1; // TODO(burdon): name.
    string ipfs_cid = 2;
    string local_path = 3;
  }
}

message Bot {
  enum Status { // TODO: Rename to state.
    /// Bot is stopped.
    STOPPED = 0;
    /// Starting bot process.
    STARTING = 1;
    /// Bot is running.
    RUNNING = 2;
    /// Bot is stopping.
    STOPPING = 3;
    /// Bot is being spawned. Bot factory is downloading the bot bundle and initializing resources.
    SPAWNING = 4;
  }

  string id = 1;
  Status status = 2; // TODO: Rename to state.

  /// The state that the bot aims to be in. Can be only either RUNNING or STOPPED.
  Status desired_state = 55; // TODO: Fix numbering.
  BotPackageSpecifier package_specifier = 3;
  Timestamp last_start = 4;
  dxos.halo.keys.PubKey party_key = 5;

  message Runtime {
    int32 exit_code = 1;
    string exit_signal = 2;
    string error = 3;
  }

  Runtime runtime = 6;
}

message GetBotsResponse {
  repeated Bot bots = 1;
}

message SpawnBotRequest {
  BotPackageSpecifier package = 1;

  /// Invitation for the bot to join the target party.
  dxos.echo.InvitationDescriptor invitation = 2;

  /// Key of the party bot is invited to.
  dxos.halo.keys.PubKey party_key = 3;
}

message SendCommandRequest {
  string bot_id = 1;

  bytes command = 2;
}

message SendCommandResponse {
  bytes response = 1;
}

message GetLogsResponse {
  bytes chunk = 1;
}

message GetLogsRequest {
  string bot_id = 1;
}


/// Service that is used by clients to communicate with bot factory.
service BotFactoryService {
  rpc GetBots(google.protobuf.Empty) returns (GetBotsResponse);

  rpc SpawnBot(SpawnBotRequest) returns (Bot);

  // TODO(dmaretskyi): Invitations.

  rpc Start(Bot) returns (Bot);
  rpc Stop(Bot) returns (Bot);
  rpc Remove(Bot) returns (google.protobuf.Empty);
  rpc GetLogs(GetLogsRequest) returns (stream GetLogsResponse);

  // TODO(dmaretskyi): querying metrics/state.

  rpc SendCommand(SendCommandRequest) returns (SendCommandResponse);

  rpc RemoveAll(google.protobuf.Empty) returns (google.protobuf.Empty);
}

message InitializeRequest {
  /// Bot runtime configuration.
  dxos.config.Config config = 1;

  /// Invitation for the bot to join the target party.
  dxos.echo.InvitationDescriptor invitation = 2;
}

message StartRequest {
  /// Bot runtime configuration.
  dxos.config.Config config = 1;
}

/// Service that is used by bots communicating with bot factory.
service BotService {
  /// Initialize Client, create profile, and join a party.
  rpc Initialize(InitializeRequest) returns (google.protobuf.Empty);

  /// Initialize Client.
  rpc Start(StartRequest) returns (google.protobuf.Empty);

  /// Custom commands sent to the bot factory.
  rpc Command(SendCommandRequest) returns (SendCommandResponse);

  /// Stop the bot.
  rpc Stop(google.protobuf.Empty) returns (google.protobuf.Empty);
}
