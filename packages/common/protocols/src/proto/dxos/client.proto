//
// Copyright 2021 DXOS.org
//

syntax = "proto3";

import "google/protobuf/empty.proto";

import "./config.proto";
import "./echo/invitation.proto";
import "./echo/snapshot.proto";
import "./halo/keys.proto";

package dxos.client;

//
// SYSTEM
//

service SystemService {
  rpc GetConfig(google.protobuf.Empty) returns (Config);
  rpc Reset (google.protobuf.Empty) returns (google.protobuf.Empty);
}

//
// Invitations shared across HALO and ECHO
//

enum InvitationState {
  WAITING_FOR_CONNECTION = 1;
  CONNECTED = 2;
  SUCCESS = 3;
  ERROR = 4;
}

/// Invitation process created by sender.
message InvitationRequest {
  optional InvitationDescriptor descriptor = 1;

  InvitationState state = 2;

  /// Only if state == ERROR.
  optional string error = 3;
}

/// Invitation that is being redeemed.
message RedeemedInvitation {
  string id = 1;

  InvitationState state = 2;

  /// Only if state == ERROR.
  optional string error = 3;

  /// Only on party invitations that are finished.
  optional dxos.halo.keys.PubKey partyKey = 4;
}

message AuthenticateInvitationRequest {
  /// Id from corresponding RedeemedInvitation.
  string processId = 1;
  bytes secret = 2;
}

//
// HALO
//

message Profile {
  required dxos.halo.keys.PubKey publicKey = 1;
  optional string username = 2;
}

message SubscribeProfileResponse {
  optional Profile profile = 1;
}

message CreateProfileRequest {
  optional string username = 1;
  optional bytes publicKey = 2;
  optional bytes secretKey = 3;
}

message RecoverProfileRequest {
  string seedPhrase = 1;
}

message Contact {
  dxos.halo.keys.PubKey publicKey = 1;
  optional string displayName = 2;
}

message Contacts {
  repeated Contact contacts = 1;
}

service ProfileService {
  rpc SubscribeProfile (google.protobuf.Empty) returns (stream SubscribeProfileResponse);
  rpc CreateProfile(CreateProfileRequest) returns (Profile);
  rpc RecoverProfile(RecoverProfileRequest) returns (Profile);

  rpc CreateInvitation(google.protobuf.Empty) returns (stream InvitationRequest);
  rpc AcceptInvitation(InvitationDescriptor) returns (stream RedeemedInvitation);
  rpc AuthenticateInvitation(AuthenticateInvitationRequest) returns (google.protobuf.Empty);
}

message AddKeyRecordRequest {
  KeyRecord keyRecord = 1;
}

message SignRequest {
  /**
   * - The public key of the key that is supposed to be used for signing.
   */
  PubKey publicKey = 1;

  bytes payload = 2;
}

message SignResponse {
  bytes signed = 2;
}

message SetPreferenceRequest {
  string key = 1;
  string value = 2;
}

message GetPreferenceRequest {
  string key = 1;
}

message GetPreferenceResponse {
  string value = 1;
}

service HaloService {
  // TODO(burdon): Comments.
  rpc Sign(SignRequest) returns (SignResponse);
  rpc AddKeyRecord(AddKeyRecordRequest) returns (google.protobuf.Empty);

  rpc SubscribeContacts(google.protobuf.Empty) returns (stream Contacts);

  rpc SetGlobalPreference(SetPreferenceRequest) returns (google.protobuf.Empty);
  rpc GetGlobalPreference(GetPreferenceRequest) returns (GetPreferenceResponse);

  rpc SetDevicePreference(SetPreferenceRequest) returns (google.protobuf.Empty);
  rpc GetDevicePreference(GetPreferenceRequest) returns (GetPreferenceResponse);
}

//
// ECHO
//

message Party {
  message Member {
    required dxos.halo.keys.PubKey publicKey = 1;
    optional string displayName = 2;
  }

  required dxos.halo.keys.PubKey publicKey = 1;
  required bool isOpen = 2;
  required bool isActive = 3;

  repeated Member members = 4;
}

message SubscribePartyRequest {
  required dxos.halo.keys.PubKey partyKey = 1;
}

message GetPartyDetailsRequest {
  required dxos.halo.keys.PubKey partyKey = 1;
}


message PartyDetails {
  /// The timeframe of mutations processed by the client.
  required dxos.echo.timeframe.TimeframeVector processed_timeframe = 1;
}

message SubscribePartyResponse {
  optional Party party = 1;
}


message SubscribePartiesResponse {
  repeated Party parties = 1;
}

message CreateInvitationRequest {
  required dxos.halo.keys.PubKey partyKey = 1;

  /// When specified the invitation will be of OFFLINE type, not requiring secret exchange.
  optional dxos.halo.keys.PubKey inviteeKey = 2;
}

message PartyActivationOptions {
  bool global = 1;
  bool device = 2;
}

message SetPartyStateRequest {
  required dxos.halo.keys.PubKey partyKey = 1;

  optional bool open = 2;
  optional bool activeGlobal = 3;
  optional bool activeDevice = 4;
}

message SubscribeMembersRequest {
  required dxos.halo.keys.PubKey partyKey = 1;
}

message SubscribeMembersResponse {
  message PartyMember {
    required dxos.halo.keys.PubKey publicKey = 1;
    optional string displayName = 2;
  }

  repeated PartyMember members = 1;
}

message CreateSnaspotRequest {
  dxos.halo.keys.PubKey partyKey = 1;
}


service PartyService {
  // TODO(rzadp): Combine the two into one?
  rpc SubscribeToParty (SubscribePartyRequest) returns (stream SubscribePartyResponse);
  rpc SubscribeParties (google.protobuf.Empty) returns (stream SubscribePartiesResponse);

  rpc GetPartyDetails(GetPartyDetailsRequest) returns (PartyDetails);

  rpc CreateParty(google.protobuf.Empty) returns(Party);
  rpc CloneParty(PartySnapshot) returns(Party);

  /// Open and close or activate and deactivate a party.
  rpc SetPartyState(SetPartyStateRequest) returns(Party);

  rpc CreateInvitation(CreateInvitationRequest) returns (stream InvitationRequest);
  rpc AcceptInvitation(InvitationDescriptor) returns (stream RedeemedInvitation);
  rpc AuthenticateInvitation(AuthenticateInvitationRequest) returns (google.protobuf.Empty);

  // TODO(rzadp): Remove and join with Subscribing to Party.
  rpc SubscribeMembers (SubscribeMembersRequest) returns (stream SubscribeMembersResponse);

  rpc CreateSnapshot(CreateSnaspotRequest) returns (PartySnapshot);
}

//
// SINGLETON
//

message SingletonMessage {
  enum Type {
    WINDOW_MESSAGE = 0;
    RECONNECT = 1;
    RESEND = 2;
    SETUP_CLIENT = 3;
    CLIENT_READY = 4;
    SETUP_PORT = 5;
    PORT_READY = 6;
    PORT_CLOSING = 7;
    CLIENT_MESSAGE = 8;
    PROXY_MESSAGE = 9;
  }

  message Reconnect {
    int32 attempt = 1;
  }

  message Resend {
    SingletonMessage message = 1;
  }

  message SetupClient {}

  message ClientReady {}

  message SetupPort {
    int32 source_id = 1;
  }

  message PortReady {
    int32 source_id = 1;
  }

  message PortClosing {}

  message ClientMessage {
    int32 source_id = 1;
    bytes data = 2;
  }

  message ProxyMessage {
    int32 source_id = 1;
    bytes data = 2;
  }

  Type type = 1;

  oneof content {
    bytes data = 10;
    Reconnect reconnect = 11;
    Resend resend = 12;
    SetupClient setup_client = 13;
    ClientReady client_ready = 14;
    SetupPort setup_port = 15;
    PortReady port_ready = 16;
    PortClosing port_closing = 17;
    ClientMessage client_message = 18;
    ProxyMessage proxy_message = 19;
  }
}
