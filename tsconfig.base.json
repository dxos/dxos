// Base tsconfig for all projects.
// Don't rename it tsconfig.json. This is specifically non-standard name so TSC doesn't pick it up.
{
  "compilerOptions": {
    "allowJs": false,
    "composite": true,
    "declaration": true,
    "declarationMap": true,
    "emitDeclarationOnly": true,
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "incremental": true,
    "isolatedModules": true,
    "jsx": "react",
    "lib": ["DOM", "ESNext"],
    "module": "Preserve",
    "moduleResolution": "Bundler",
    "noImplicitOverride": true,
    "outDir": "${configDir}/dist/types",
    "types": ["node", "wicg-file-system-access"],
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "sourceMap": true,
    "strict": true,
    "stripInternal": true,
    "target": "ESNext",

    // Set this to true if you are having performance issues with the Typescript Language Server.
    // See: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#build-free-editing-with-project-references
    "disableSourceOfProjectReferenceRedirect": false,

    "plugins": [
      {
        "name": "@effect/language-service",
        // Force namespace imports instead of named imports.
        // Example: import * as Effect from "effect"
        // Why: namespace imports avoid name collisions and tend to tree-shake better,
        // especially with bundlers like esbuild.
        "namespaceImportPackages": [
          "effect",
          "@effect/*"
        ],

        // When a symbol is re-exported through a barrel (e.g. index.ts),
        // the language service will "follow" the re-export and import directly
        // from the original file where the symbol is defined,
        // instead of importing from the barrel.
        "topLevelNamedReexports": "follow"
      }
    ]
  },
  "exclude": ["build", "dist", "node_modules", "out"],
  "include": [],
  "ts-node": {
    "swc": true
  }
}
