#
# CircleCI configuration
# https://circleci.com/docs/configuration-reference
#

version: 2.1

orbs:
  nx: nrwl/nx@1.6.2

parameters:
  mode:
    type: string
    default: default

  e2e:
    type: boolean
    default: false

  vitest-browser:
    type: boolean
    default: false

aliases:
  # https://github.com/dxos/dxos/issues/4946
  # - &node-version [ "18.19.0", "20.10.0", "21.4.0" ]
  - &node-version [ "18.19.0", "20.10.0"]
  - &docker_image_default
    image: ghcr.io/dxos/circleci-node:18.19.0
    auth:
      username: dxos-bot
      password: $GH_TOKEN
  - &cache_restore
    restore_cache:
      keys:
        - pnpm-store-v1-{{ arch }}-{{ checksum "pnpm-lock.yaml" }}
        - pnpm-store-v1-{{ arch }}-
  - &cache_save
    save_cache:
      paths:
        - ~/.local/share/pnpm/store/v3
      key: pnpm-store-v1-{{ arch }}-{{ checksum "pnpm-lock.yaml" }}
  - &ram_cache_configure
    run: pnpm config set store-dir /mnt/ramdisk/pnpm-store
  - &ram_cache_restore
    restore_cache:
      keys:
        - pnpm-store-ram-v1-{{ arch }}-{{ checksum "pnpm-lock.yaml" }}
        - pnpm-store-ram-v1-{{ arch }}-
  - &ram_cache_save
    save_cache:
      paths:
        - /mnt/ramdisk/pnpm-store
      key: pnpm-store-ram-v1-{{ arch }}-{{ checksum "pnpm-lock.yaml" }}
  - &codecov_upload
    run:
      name: Upload to codecov.com
      command: ./.circleci/scripts/upload-codecov.sh
  - &store_test_results
    store_test_results:
      path: test-results
  - &send_test_report
    when:
      condition:
        equal: [ report, << pipeline.parameters.mode >> ]
      steps:
        - run:
            command: ./.circleci/scripts/send-test-report.sh $CIRCLE_JOB failure
            when: on_fail
        - run:
            command: ./.circleci/scripts/send-test-report.sh $CIRCLE_JOB success
            when: on_success
  # https://docs.datadoghq.com/continuous_integration/tests/junit_upload/
  - &install_datadog
    run:
      name: Install Datadog
      command: npm install -g @datadog/datadog-ci

commands:
  vitest-affected:
    parameters:
      mode:
        description: "Test execution environment, incompatible tests will be ignored"
        type: enum
        enum: [ "node", "chrome" ]
        default: "node"
    steps:
      - run:
          command: pnpm nx affected --base=$NX_BASE --head=$NX_HEAD --target=vitest
          environment:
            VITEST_XML_REPORT: true
            VITEST_ENV: << parameters.mode >>

jobs:
  #
  # NOTE: This job is required to complete before ALL PRs can be merged to main.
  #
  check:
    parameters:
      node-version:
        type: string
    docker:
      - image: ghcr.io/dxos/circleci-node:<< parameters.node-version >>
        auth:
          username: dxos-bot
          password: $GH_TOKEN
    # https://circleci.com/docs/configuration-reference/#docker-execution-environment
    resource_class: xlarge
    environment:
      DX_ENVIRONMENT: circleci

    # Run the job on ramdisk for optimal performance.
    # https://support.circleci.com/hc/en-us/articles/360056323651-How-to-optimize-the-restore-cache-step-for-Node-projects
    steps:
      - checkout
      - *cache_restore
      - run: pnpm set verify-store-integrity false
      - run: pnpm install --prefer-offline
      - run: pnpm install-playwright
      - *cache_save
      - nx/set-shas
      - run: pnpm check-dependencies
      - run: pnpm nx affected --base=$NX_BASE --head=$NX_HEAD --target=lint
      - run: pnpm nx affected --base=$NX_BASE --head=$NX_HEAD --target=build
      - run: pnpm nx affected --base=$NX_BASE --head=$NX_HEAD --target=test --coverage --xmlReport --environments=nodejs
      - vitest-affected:
          mode: node
      - when:
          condition:
            equal: [ main, <<pipeline.git.branch>> ]
          steps:
            - run: pnpm nx run-many --target=lint
            - run: pnpm nx run-many --target=build
            - run: pnpm nx run-many --target=test --skip-nx-cache --coverage --xmlReport --environments=nodejs
            - run: VITEST_XML_REPORT=true pnpm nx run-many --target=vitest --skip-nx-cache
      - *send_test_report
      - *codecov_upload
      - *store_test_results

  #
  # End-to-end playwright UI testing.
  #
  e2e:
    docker:
      - *docker_image_default
    resource_class: xlarge
    steps:
      - checkout
      - *cache_restore
      - run: pnpm install
      - run: pnpm install-playwright
      - *cache_save
      - nx/set-shas
      - run: pnpm nx affected --base=$NX_BASE --head=$NX_HEAD --target=bundle
      - run: pnpm nx affected --base=$NX_BASE --head=$NX_HEAD --target=e2e --parallel=1 --xmlReport
      - run:
          command: pnpm nx affected --base=$NX_BASE --head=$NX_HEAD --target=chromatic
          when: always
      - *send_test_report
      - *codecov_upload
      - *store_test_results
      - store_artifacts:
          path: tmp/playwright


  #
  # Quarantine for flaky tests.
  #
  flaky:
    docker:
      - *docker_image_default
    steps:
      - checkout
      - *cache_restore
      - run: pnpm install
      - run: pnpm install-playwright
      - *cache_save
      - nx/set-shas
      - run: pnpm nx affected --base=$NX_BASE --head=$NX_HEAD --target=test --tags=unit,flaky --coverage --xmlReport
      - *codecov_upload
      - *store_test_results

  #
  # Vitest headless browser tests.
  #
  vitest-browser:
    docker:
      - *docker_image_default
    steps:
      - checkout
      - *cache_restore
      - run: pnpm install
      - *cache_save
      - nx/set-shas
      - vitest-affected:
          mode: chrome
      - *store_test_results

  #
  # Publish applications.
  #
  publish:
    docker:
      - *docker_image_default
    resource_class: xlarge
    steps:
      - checkout
      - *cache_restore
      - run: pnpm install
      - *cache_save
      - run: pnpm nx build cli
      - run:
          command: ./.circleci/scripts/publish.sh
          environment:
            NODE_ENV: production
      - run:
          command: ./.circleci/scripts/publish-extension.sh
          environment:
            NODE_ENV: production
  clean_pnpm_cache:
    docker:
      - *docker_image_default
    environment:
      DX_ENVIRONMENT: circleci
    steps:
      - checkout
      - *cache_restore
      - run: rm -rf $(pnpm store path) && mkdir -p $(pnpm store path)
      # Ensure a new cache key is generated that a cache miss will fallback to.
      - run: date +%s > "pnpm-lock.yaml"
      - *cache_save

workflows:
  default:
    when:
      not:
        equal: [ clear_pnpm_cache, << pipeline.schedule.name >> ]
    jobs:
      - check:
          context:
            - Github
          matrix:
            parameters:
              node-version: *node-version
      # Only run e2e and browser tests on pushes to main & release branches.
      - e2e:
          filters:
            branches:
              only:
                - main
                - /^rc-.*/
                - /^hotfix-.*/
                - /^release-please-.*/
                - nf/circleci-docker
          context:
            - Github
      - vitest-browser:
          filters:
            branches:
              only:
                - main
                - /^rc-.*/
                - /^hotfix-.*/
                - /^release-please-.*/
                - nf/circleci-docker
          context:
            - Github

  e2e:
    when:
      and:
        - << pipeline.parameters.e2e >>
        - not:
          equal: [ clear_pnpm_cache, << pipeline.schedule.name >> ]
    jobs:
      - e2e:
          context:
            - Github

  vitest-browser:
    when:
      and:
        - << pipeline.parameters.vitest-browser >>
        - not:
          equal: [ clear_pnpm_cache, << pipeline.schedule.name >> ]
    jobs:
      - vitest-browser:
          context:
            - Github

  deploy:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - publish:
          filters:
            branches:
              only:
                - main
                - production
                - staging
          context:
            - Github
  clear_pnpm_cache:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ clear_pnpm_cache, << pipeline.schedule.name >> ]
    jobs:
      - clean_pnpm_cache:
          context:
            - Github
# VS Code Extension Version: 1.5.1
