#
# CircleCI configuration
# https://circleci.com/docs/configuration-reference
#

version: 2.1

orbs:
  nx: nrwl/nx@1.6.0

aliases:
  - &docker_image
    image: ghcr.io/dxos/circleci-node:latest
    auth:
      username: dxos-bot
      password: $GH_TOKEN
  - &cache_restore
    restore_cache:
      keys:
        - pnpm-store-v1-{{ arch }}-{{ checksum "pnpm-lock.yaml" }}
        - pnpm-store-v1-{{ arch }}-
  - &cache_save
    save_cache:
      paths:
        - ~/.local/share/pnpm/store/v3
      key: pnpm-store-v1-{{ arch }}-{{ checksum "pnpm-lock.yaml" }}
  - &ram_cache_configure
    run: pnpm config set store-dir /mnt/ramdisk/pnpm-store
  - &ram_cache_restore
    restore_cache:
      keys:
        - pnpm-store-ram-v1-{{ arch }}-{{ checksum "pnpm-lock.yaml" }}
        - pnpm-store-ram-v1-{{ arch }}-
  - &ram_cache_save
    save_cache:
      paths:
        - /mnt/ramdisk/pnpm-store
      key: pnpm-store-ram-v1-{{ arch }}-{{ checksum "pnpm-lock.yaml" }}
  - &codecov_upload
    run:
      name: Upload to codecov.com
      command: ./.circleci/scripts/upload-codecov.sh
  - &store_test_results
    store_test_results:
      path: test-results

jobs:
  #
  # NOTE: This job is required to complete before ALL PRs can be merged to main.
  #
  check:
    docker:
      - *docker_image
    # https://circleci.com/docs/configuration-reference/#docker-execution-environment
    resource_class: xlarge
    environment:
      DX_ENVIRONMENT: circleci
    
    # Run the job on ramdisk for optimal performance.
    # https://support.circleci.com/hc/en-us/articles/360056323651-How-to-optimize-the-restore-cache-step-for-Node-projects
    working_directory: /mnt/ramdisk/work

    steps:
      - *ram_cache_configure
      - checkout
      - *ram_cache_restore
      - run: pnpm install --prefer-offline
      - run: pnpm install-playwright
      - *ram_cache_save
      - nx/set-shas
      - run: pnpm check-dependencies
      - run: pnpm nx affected --base=$NX_BASE --head=$NX_HEAD --target=lint
      - run: pnpm nx affected --base=$NX_BASE --head=$NX_HEAD --target=build
      - run: pnpm nx affected --base=$NX_BASE --head=$NX_HEAD --target=test --coverage --xmlReport
      - when:
          condition:
            equal: [ main, <<pipeline.git.branch>> ]
          steps:
            - run: pnpm nx run-many --target=lint
            - run: pnpm nx run-many --target=build
            - run: pnpm nx run-many --target=test --skip-nx-cache --coverage --xmlReport
      - *codecov_upload
      - *store_test_results

  #
  # Heavier checks which don't block PR merges.
  #
  e2e:
    docker:
      - *docker_image
    steps:
      - checkout
      - *cache_restore
      - run: pnpm install
      - run: pnpm install-playwright
      - *cache_save
      - nx/set-shas
      - run: pnpm nx affected --base=$NX_BASE --head=$NX_HEAD --target=test --tags e2e --coverage --xmlReport
      # TODO(wittjosiah): Re-enable playwright tests. Use mocha executor?
      # - run: pnpm nx affected --base=$NX_BASE --head=$NX_HEAD --target=e2e
      # TODO(wittjosiah): Apps can't be bundled in parallel currently due to memory usage.
      - run:
          name: Bundle Apps
          command: pnpm nx affected --base=$NX_BASE --head=$NX_HEAD --target=bundle --parallel=1
          environment:
            # TODO(wittjosiah): Remove. Currently needed for building Vite apps.
            NODE_OPTIONS: --max_old_space_size=8198
      - *codecov_upload
      - *store_test_results

  #
  # Deploy applications.
  #
  deploy:
    docker:
      - *docker_image
    steps:
      - checkout
      - *cache_restore
      - run: pnpm install
      - *cache_save
      - run: pnpm nx build cli
      # TODO(wittjosiah): Factor out the deployable apps list to the script.
      - run:
          name: Deploy HALO
          working_directory: ./packages/apps/halo-app
          command: |
            ../../../.circleci/scripts/publish.sh production
            ../../../.circleci/scripts/publish.sh
          environment:
            NODE_ENV: production
            NODE_OPTIONS: --max_old_space_size=4096
      - run:
          name: Deploy Tasks
          working_directory: ./packages/apps/tasks-app
          command: |
            ../../../.circleci/scripts/publish.sh production
            ../../../.circleci/scripts/publish.sh
          environment:
            NODE_ENV: production
            NODE_OPTIONS: --max_old_space_size=4096
      - run:
          name: Deploy Composer
          working_directory: ./packages/apps/composer-app
          command: |
            ../../../.circleci/scripts/publish.sh production
            ../../../.circleci/scripts/publish.sh
          environment:
            NODE_ENV: production
            NODE_OPTIONS: --max_old_space_size=4096
      - run:
          name: Deploy Inspector
          working_directory: ./packages/devtools/inspector-app
          command: |
            ../../../.circleci/scripts/publish.sh production
            ../../../.circleci/scripts/publish.sh
          environment:
            NODE_ENV: production
            NODE_OPTIONS: --max_old_space_size=5120
      - run:
          name: Deploy Docs
          working_directory: ./docs
          command: |
            ../.circleci/scripts/publish.sh production
            ../.circleci/scripts/publish.sh
          no_output_timeout: 30m
          environment:
            NODE_ENV: production
            NODE_OPTIONS: --max_old_space_size=5120

workflows:
  check:
    jobs:
      - check:
          context:
            - Github
      - e2e:
          context:
            - Github

  deploy:
    jobs:
      - deploy:
          filters:
            branches:
              only:
                - main
                - release
          context:
            - Github
