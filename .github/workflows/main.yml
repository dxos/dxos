name: CI

on:
  workflow_dispatch:
    inputs:
      verbose:
        description: 'Enable verbose output'
        required: false
        default: 'false'
        type: string
  push:
    branches: [main]

jobs:
  ci:
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/playwright:v1.43.1-jammy
    env:
      NODE_VERSION: 20.19.0

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install build tools
        run: |
          apt-get update && apt-get install -y build-essential python3

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          # Remove unnecessary files to reduce cache size
          find node_modules -type d -name '__tests__' -exec rm -rf {} +
          find node_modules -type d -name 'test' -exec rm -rf {} +
          find node_modules -type d -name 'tests' -exec rm -rf {} +
          find node_modules -type d -name 'example' -exec rm -rf {} +
          find node_modules -type d -name 'examples' -exec rm -rf {} +
          find node_modules -type d -name 'docs' -exec rm -rf {} +
          find node_modules -type d -name 'doc' -exec rm -rf {} +
          find node_modules -type d -name 'benchmark' -exec rm -rf {} +
          find node_modules -type d -name 'build' -exec rm -rf {} +

      - name: Cache selective dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.pnpm-store
            node_modules/.cache
            node_modules/@dxos
            node_modules/@types
            node_modules/@nx
            node_modules/@effect
            node_modules/@typescript-eslint
          key: ${{ runner.os }}-selective-${{ hashFiles('pnpm-lock.yaml') }}-${{ env.NODE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-selective-${{ env.NODE_VERSION }}-
            ${{ runner.os }}-selective-

      - name: Build with NX
        run: |
          pnpm nx build --all --parallel ${VERBOSE:+--verbose}
        env:
          CI: true
          VERBOSE: ${{ inputs.verbose }}

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            dist
            lib
            build
            .nx
          key: ${{ runner.os }}-build-${{ hashFiles('pnpm-lock.yaml', 'package.json') }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/project.json', 'nx.json', 'workspace.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.NODE_VERSION }}-

      - name: Lint with NX
        run: |
          pnpm nx lint --all --parallel ${VERBOSE:+--verbose}
        env:
          CI: true
          VERBOSE: ${{ inputs.verbose }}

      - name: Test with NX
        run: |
          pnpm nx test --all --parallel ${VERBOSE:+--verbose}
        env:
          CI: true
          VERBOSE: ${{ inputs.verbose }}

      - name: Cache test results
        uses: actions/cache@v4
        with:
          path: |
            coverage
            .nyc_output
            .vitest
            .jest
          key: ${{ runner.os }}-test-results-${{ hashFiles('pnpm-lock.yaml', 'package.json') }}-${{ env.NODE_VERSION }}-${{ hashFiles('**/project.json', 'nx.json', 'workspace.json') }}
          restore-keys: |
            ${{ runner.os }}-test-results-${{ env.NODE_VERSION }}-
