on:
  push:
    branches:
      - staging
      - nf/publish-apps

name: staging

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      AGENT_HOSTING_SERVER: ${{ secrets.AGENT_HOSTING_SERVER }}
      AGENT_HOSTING_TYPE: ${{ secrets.AGENT_HOSTING_TYPE }}
      BASELIME_API_KEY: ${{ secrets.BASELIME_API_KEY }}
      DX_ENVIRONMENT: staging
      DX_IPDATA_API_KEY: ${{ secrets.IPDATA_API_KEY }}
      IPFS_API_KEY: ${{ secrets.IPFS_API_KEY }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      SENTRY_RELEASE_AUTH_TOKEN: ${{ secrets.SENTRY_RELEASE_AUTH_TOKEN }}
      COMPOSER_APP_SENTRY_DESTINATION: ${{ secrets.COMPOSER_APP_SENTRY_DESTINATION }}
      COMPOSER_APP_SEGMENT_API_KEY: ${{ secrets.COMPOSER_APP_SEGMENT_API_KEY }}
      DX_DISCORD_WEBHOOK_URL: ${{ secrets.DX_DISCORD_WEBHOOK_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: sudo apt-get install libxtst-dev libpng++-dev

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8.15.8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install
        env:
          CI: true

      - name: Bump Versions
        run: node .github/workflows/scripts/bump-version.js next

      - name: Build
        run: pnpm nx run-many --target=build
        env:
          # NOTE: @dxos/cli is the only thing consuming these at build time, the apps all consume them at bundle.
          DX_SENTRY_DESTINATION: ${{ secrets.CLI_SENTRY_DESTINATION }}
          DX_TELEMETRY_API_KEY: ${{ secrets.CLI_SEGMENT_API_KEY }}
          NODE_ENV: production

      - name: Bundle Apps
        run: pnpm nx run-many --target=bundle --parallel=3
        env:
          NODE_ENV: production

      - name: Publish Apps
        run: ./.github/workflows/scripts/publish-apps.sh

      - name: Publish to NPM
        run: ./.github/workflows/scripts/publish.sh

      - name: Monitor Pre-release
        run: node .github/workflows/scripts/monitor.js
