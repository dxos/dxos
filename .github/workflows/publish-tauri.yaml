name: Composer Tauri Release
on:
  workflow_dispatch:
  push:
    branches:
      - labs
      - production
      - staging
      - tauri
      - jdw/tauri

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CN_APPLICATION: "dxos/composer"

jobs:
  draft:
    runs-on: depot-ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
      - name: create draft release
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release draft ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ secrets.CN_API_KEY }}
          working-directory: ./packages/apps/composer-app/src-tauri/

  build:
    needs: draft

    strategy:
      fail-fast: false
      matrix:
        os:
          - depot-macos-latest
          # - depot-ubuntu-24.04-4
          # - depot-windows-2022-4

    runs-on: ${{ matrix.os }}

    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4

      - uses: 'moonrepo/setup-toolchain@v0'

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          cache: true

      - name: Install Linux dependencies
        if: matrix.os == 'depot-ubuntu-24.04-4'
        run: |
          sudo apt-get update
          sudo apt-get install -y webkit2gtk-4.1

      - name: Import Apple Developer Certificate
        if: matrix.os == 'depot-macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo "=== Starting certificate import ==="
          echo "Certificate length: ${#APPLE_CERTIFICATE}"
          echo "Certificate starts with: ${APPLE_CERTIFICATE:0:50}..."
          
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          echo "Certificate file size: $(ls -la certificate.p12)"
          
          echo "=== Creating keychain ==="
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          
          echo "=== Importing certificate ==="
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          echo "=== Listing keychain contents ==="
          security list-keychain -d user -s build.keychain
          security find-identity -v -p codesigning build.keychain
        
      - name: Verify Certificate
        if: matrix.os == 'depot-macos-latest'
        run: |
          echo "=== Verifying certificate ==="
          echo "Current keychain: $(security default-keychain -d user)"
          echo "Available keychains:"
          security list-keychain -d user
          
          echo "=== Searching for Apple Development certificates ==="
          security find-identity -v -p codesigning build.keychain || echo "No codesigning identities found"
          
          echo "=== Searching for any certificates ==="
          security find-identity -v build.keychain || echo "No identities found"
          
          echo "=== Checking certificate file ==="
          if [ -f certificate.p12 ]; then
            echo "Certificate file exists, size: $(ls -la certificate.p12)"
            file certificate.p12
          else
            echo "Certificate file not found!"
          fi
          
          echo "=== Attempting to extract certificate info ==="
          # Look for any valid codesigning certificate (Apple Development, Developer ID, etc.)
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain 2>/dev/null | grep -E "(Apple Development|Developer ID Application|Mac Developer)" | head -1 || echo "No valid codesigning certificate found")
          echo "CERT_INFO: $CERT_INFO"
          
          if [ "$CERT_INFO" != "No valid codesigning certificate found" ]; then
            CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
            echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
            echo "Certificate imported successfully with ID: $CERT_ID"
            echo "Certificate type: $(echo "$CERT_INFO" | sed 's/.*"\([^"]*\)".*/\1/')"
          else
            echo "ERROR: No valid codesigning certificate found in keychain"
            echo "Available certificates:"
            security find-identity -v -p codesigning build.keychain 2>/dev/null || echo "None found"
            exit 1
          fi

      # TODO(wittjosiah): Try to make this work to speed up the install.
      # - name: Cache Homebrew
      #   if: matrix.os == 'depot-macos-latest'
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       /opt/homebrew/Cellar
      #       /opt/homebrew/Caskroom
      #       /opt/homebrew/Homebrew
      #       ~/.cache/Homebrew
      #     key: ${{ runner.os }}-homebrew-${{ hashFiles('**/pnpm-lock.yaml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-homebrew-

      - name: Install macOS dependencies
        if: matrix.os == 'depot-macos-latest'
        run: |
          brew install cairo giflib git-lfs jpeg libpng librsvg pango pkg-config python-setuptools git unzip gzip xz

      - name: Build Tauri app
        run: moon run composer-app:tauri-build
        env:
          DEPOT_TOKEN: ${{ secrets.DEPOT_TOKEN }}
          DX_HOST: true
          NODE_ENV: production
          NODE_OPTIONS: '--max_old_space_size=12288'
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      - name: Upload Assets
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release upload ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ secrets.CN_API_KEY }}
          working-directory: ./packages/apps/composer-app/src-tauri/

  # TODO(wittjosiah): Uncomment this when we want to automatically publish the release.
  # publish:
  #   needs: build

  #   runs-on: depot-ubuntu-24.04

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: publish release
  #       uses: crabnebula-dev/cloud-release@v0
  #       with:
  #         command: release publish ${{ env.CN_APPLICATION }} --framework tauri
  #         api-key: ${{ secrets.CN_API_KEY }}
