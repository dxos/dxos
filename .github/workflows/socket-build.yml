name: Socket Builds

on: [push]

jobs:
  build-composer-preview:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set environment variables from secrets, env files. Also set DX_ENVIRONMENT and BRANCH
        run: .github/workflows/scripts/populate-env.sh ${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}} >> $GITHUB_ENV
        env:
          BASELIME_API_KEY: ${{ secrets.BASELIME_API_KEY }}
          IPDATA_API_KEY: ${{ secrets.IPDATA_API_KEY }}
          IPFS_API_SECRET: ${{ secrets.IPFS_API_SECRET }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          SENTRY_RELEASE_AUTH_TOKEN: ${{ secrets.SENTRY_RELEASE_AUTH_TOKEN }}
          CLI_SENTRY_DESTINATION: ${{ secrets.CLI_SENTRY_DESTINATION }}
          CLI_SEGMENT_API_KEY: ${{ secrets.CLI_SEGMENT_API_KEY }}
          COMPOSER_APP_SENTRY_DESTINATION: ${{ secrets.COMPOSER_APP_SENTRY_DESTINATION }}
          COMPOSER_APP_SEGMENT_API_KEY: ${{ secrets.COMPOSER_APP_SEGMENT_API_KEY }}
          DX_DISCORD_WEBHOOK_URL: ${{ secrets.DX_DISCORD_WEBHOOK_URL }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          DX_OTEL_ENDPOINT: ${{ secrets.DX_OTEL_ENDPOINT }}
          DX_OTEL_AUTHORIZATION: ${{ secrets.DX_OTEL_AUTHORIZATION }}
          DX_LOKI_ENDPOINT: ${{ secrets.DX_LOKI_ENDPOINT }}
          DX_LOKI_AUTHORIZATION: ${{ secrets.DX_LOKI_AUTHORIZATION }}

      - name: Install system dependencies
        run: sudo apt-get install libxtst-dev libpng++-dev

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        id: pnpm-install
        with:
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build Composer App
        run: pnpm nx bundle composer-app
        env:
          NODE_ENV: production
          NODE_OPTIONS: '--max_old_space_size=12288'

      - name: Checkout Socket Runtime Build Action
        uses: actions/checkout@v4
        with:
          repository: socketsupply/socket-runtime-build-action
          ref: master
          ssh-key: ${{ secrets.SOCKET_RUNTIME_BUILD_ACTION_DEPLOY_KEY }}
          path: .github/socket-runtime-build-action

      - name: Build Socket Runtime Build Action
        run: cd .github/socket-runtime-build-action && pnpm install

      - name: Bundle Application
        uses: ./.github/socket-runtime-build-action/
        with:
          appkey: ${{ secrets.SOCKET_RUNTIME_BUILD_APPKEY }}
          target: ./packages/apps/composer-app
          # platforms: macos linux ios
          platforms: ios
          apple-team-id: ${{ secrets.APPLE_TEAM_ID }}
          apple-codesign-certificate-p12: ${{ secrets.APPLE_CODESIGN_CERTIFICATE_P12 }}
          apple-codesign-certificate-password: ${{ secrets.APPLE_CODESIGN_CERTIFICATE_PASSWORD }}
          apple-ios-provisioning-profile: ${{ secrets.APPLE_IOS_PROVISIONING_PROFILE }}
          config: |
            [ios.codesign]
            identity = ${{ secrets.APPLE_IOS_CODESIGN_IDENTITY }}
            [ios.distribution]
            method = debugging
            [mac.codesign]
            identity = ${{ secrets.APPLE_MACOS_CODESIGN_IDENTITY }}