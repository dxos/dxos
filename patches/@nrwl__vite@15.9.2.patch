diff --git a/src/executors/build/build.impl.js b/src/executors/build/build.impl.js
index 93609abaa81c404348b75d9e6e538ad43d3d0d85..7ceda437b71d369a82aaaf537a06d65f4b3dd14f 100644
--- a/src/executors/build/build.impl.js
+++ b/src/executors/build/build.impl.js
@@ -13,8 +13,6 @@ const _extends = require("@swc/helpers/lib/_extends.js").default;
 require("dotenv/config");
 const _vite = require("vite");
 const _optionsUtils = require("../../utils/options-utils");
-const _js = require("@nrwl/js");
-const _fs = require("fs");
 const _path = require("path");
 const _asyncIterable = require("@nrwl/devkit/src/utils/async-iterable");
 const _register = require("nx/src/utils/register");
@@ -26,21 +24,6 @@ async function* viteBuildExecutor(options, context) {
         build: (0, _optionsUtils.getViteBuildOptions)(normalizedOptions, context)
     });
     const watcherOrOutput = await runInstance(buildConfig);
-    const libraryPackageJson = (0, _path.resolve)(projectRoot, 'package.json');
-    const rootPackageJson = (0, _path.resolve)(context.root, 'package.json');
-    // For buildable libs, copy package.json if it exists.
-    if ((0, _fs.existsSync)(libraryPackageJson) && rootPackageJson !== libraryPackageJson) {
-        await (0, _js.copyAssets)({
-            outputPath: normalizedOptions.outputPath,
-            assets: [
-                {
-                    input: projectRoot,
-                    output: '.',
-                    glob: 'package.json'
-                }
-            ]
-        }, context);
-    }
     if ('on' in watcherOrOutput) {
         const iterable = (0, _asyncIterable.createAsyncIterable)(({ next  })=>{
             let success = true;
diff --git a/src/utils/options-utils.js b/src/utils/options-utils.js
index 06a06df305daebe246530fa3f7b63e7abcb4d6e1..bb86b1916d9e04643803e5738664a555896685a8 100644
--- a/src/utils/options-utils.js
+++ b/src/utils/options-utils.js
@@ -36,7 +36,7 @@ function getViteSharedConfig(options, clearScreen, context) {
     const root = _path.relative(context.cwd, (0, _devkit.joinPathFragments)(context.root, projectRoot));
     return {
         mode: options.mode,
-        root,
+        root: _path.join(root, options.base || '.'),
         base: options.base,
         configFile: normalizeViteConfigFilePath(projectRoot, options.configFile),
         plugins: [